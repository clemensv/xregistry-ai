{
  "id": "d2aacd5b-0642-4832-8629-58272a922e4b",
  "name": "io.github.ckreiling/mcp-server-docker",
  "description": "MCP server for Docker",
  "repository": {
    "url": "https://github.com/ckreiling/mcp-server-docker",
    "source": "github",
    "id": "899787279"
  },
  "version_detail": {
    "version": "0.0.1-seed",
    "release_date": "2025-05-16T19:06:01Z",
    "is_latest": true
  },
  "packages": [
    {
      "registry_name": "unknown",
      "name": "mcp-server-docker",
      "version": "0.2.0"
    }
  ],
  "tools": [
    {
      "name": "list_containers",
      "description": "List all Docker containers",
      "inputschema": {
        "type": "object",
        "properties": {},
        "required": []
      }
    },
    {
      "name": "create_container",
      "description": "Create a new Docker container",
      "inputschema": {
        "type": "object"
      }
    },
    {
      "name": "run_container",
      "description": "Run an image in a new Docker container (preferred over `create_container` + `start_container`)",
      "inputschema": {
        "type": "object"
      }
    },
    {
      "name": "recreate_container",
      "description": "Stop and remove a container, then run a new container. Fails if the container does not exist.",
      "inputschema": {
        "type": "object"
      }
    },
    {
      "name": "start_container",
      "description": "Start a Docker container",
      "inputschema": {
        "type": "object"
      }
    },
    {
      "name": "fetch_container_logs",
      "description": "Fetch logs for a Docker container",
      "inputschema": {
        "type": "object"
      }
    },
    {
      "name": "stop_container",
      "description": "Stop a Docker container",
      "inputschema": {
        "type": "object"
      }
    },
    {
      "name": "remove_container",
      "description": "Remove a Docker container",
      "inputschema": {
        "type": "object"
      }
    },
    {
      "name": "list_images",
      "description": "List Docker images",
      "inputschema": {
        "type": "object"
      }
    },
    {
      "name": "pull_image",
      "description": "Pull a Docker image",
      "inputschema": {
        "type": "object"
      }
    },
    {
      "name": "push_image",
      "description": "Push a Docker image",
      "inputschema": {
        "type": "object"
      }
    },
    {
      "name": "build_image",
      "description": "Build a Docker image from a Dockerfile",
      "inputschema": {
        "type": "object"
      }
    },
    {
      "name": "remove_image",
      "description": "Remove a Docker image",
      "inputschema": {
        "type": "object"
      }
    },
    {
      "name": "list_networks",
      "description": "List Docker networks",
      "inputschema": {
        "type": "object"
      }
    },
    {
      "name": "create_network",
      "description": "Create a Docker network",
      "inputschema": {
        "type": "object"
      }
    },
    {
      "name": "remove_network",
      "description": "Remove a Docker network",
      "inputschema": {
        "type": "object"
      }
    },
    {
      "name": "list_volumes",
      "description": "List Docker volumes",
      "inputschema": {
        "type": "object"
      }
    },
    {
      "name": "create_volume",
      "description": "Create a Docker volume",
      "inputschema": {
        "type": "object"
      }
    },
    {
      "name": "remove_volume",
      "description": "Remove a Docker volume",
      "inputschema": {
        "type": "object"
      }
    }
  ],
  "resources": [
    {
      "uritemplate": "docker://containers/{id}/logs",
      "name": "Logs for container",
      "description": "Live logs for container {container.name}",
      "mimetype": "text/plain"
    },
    {
      "uritemplate": "docker://containers/{id}/stats",
      "name": "Stats for container",
      "description": "Live resource usage stats for container {container.name}",
      "mimetype": "application/json"
    }
  ],
  "prompts": [
    {
      "name": "docker_compose",
      "description": "Treat the LLM like a Docker Compose manager",
      "arguments": [
        {
          "name": "name",
          "description": "Unique name of the project",
          "required": true
        },
        {
          "name": "containers",
          "description": "Describe containers you want",
          "required": true
        }
      ]
    }
  ]
}