{
  "specversion": "1.0-rc1",
  "registryid": "xRegistry",
  "self": "#/",
  "xid": "/",
  "epoch": 406,
  "createdat": "2025-05-26T16:41:18.357742801Z",
  "modifiedat": "2025-05-26T16:42:41.79735241Z",

  "capabilities": {
    "apis": [
      "/capabilities",
      "/export",
      "/model"
    ],
    "flags": [
      "collections",
      "doc",
      "epoch",
      "filter",
      "inline",
      "nodefaultversionid",
      "nodefaultversionsticky",
      "noepoch",
      "noreadonly",
      "offered",
      "schema",
      "setdefaultversionid",
      "specversion"
    ],
    "mutable": [
      "capabilities",
      "entities",
      "model"
    ],
    "pagination": false,
    "schemas": [
      "xregistry-json/1.0-rc1"
    ],
    "shortself": false,
    "specversions": [
      "1.0-rc1"
    ],
    "sticky": true
  },
  "model": {
    "attributes": {
      "specversion": {
        "name": "specversion",
        "type": "string",
        "readonly": true,
        "required": true
      },
      "registryid": {
        "name": "registryid",
        "type": "string",
        "readonly": true,
        "immutable": true,
        "required": true
      },
      "self": {
        "name": "self",
        "type": "url",
        "readonly": true,
        "immutable": true,
        "required": true
      },
      "xid": {
        "name": "xid",
        "type": "xid",
        "readonly": true,
        "immutable": true,
        "required": true
      },
      "epoch": {
        "name": "epoch",
        "type": "uinteger",
        "readonly": true,
        "required": true
      },
      "name": {
        "name": "name",
        "type": "string"
      },
      "description": {
        "name": "description",
        "type": "string"
      },
      "documentation": {
        "name": "documentation",
        "type": "url"
      },
      "labels": {
        "name": "labels",
        "type": "map",
        "item": {
          "type": "string"
        }
      },
      "createdat": {
        "name": "createdat",
        "type": "timestamp",
        "required": true
      },
      "modifiedat": {
        "name": "modifiedat",
        "type": "timestamp",
        "required": true
      },
      "capabilities": {
        "name": "capabilities",
        "type": "object",
        "attributes": {
          "*": {
            "name": "*",
            "type": "any"
          }
        }
      },
      "model": {
        "name": "model",
        "type": "object",
        "attributes": {
          "*": {
            "name": "*",
            "type": "any"
          }
        }
      },
      "agentcardprovidersurl": {
        "name": "agentcardprovidersurl",
        "type": "url",
        "readonly": true,
        "immutable": true,
        "required": true
      },
      "agentcardproviderscount": {
        "name": "agentcardproviderscount",
        "type": "uinteger",
        "readonly": true,
        "required": true
      },
      "agentcardproviders": {
        "name": "agentcardproviders",
        "type": "map",
        "item": {
          "type": "object",
          "attributes": {
            "*": {
              "name": "*",
              "type": "any"
            }
          }
        }
      },
      "mcpprovidersurl": {
        "name": "mcpprovidersurl",
        "type": "url",
        "readonly": true,
        "immutable": true,
        "required": true
      },
      "mcpproviderscount": {
        "name": "mcpproviderscount",
        "type": "uinteger",
        "readonly": true,
        "required": true
      },
      "mcpproviders": {
        "name": "mcpproviders",
        "type": "map",
        "item": {
          "type": "object",
          "attributes": {
            "*": {
              "name": "*",
              "type": "any"
            }
          }
        }
      }
    },
    "groups": {
      "agentcardproviders": {
        "plural": "agentcardproviders",
        "singular": "agentcardprovider",
        "description": "Google A2A AgentCardProviders group",
        "modelversion": "1.0-rc1",
        "attributes": {
          "agentcardproviderid": {
            "name": "agentcardproviderid",
            "type": "string",
            "immutable": true,
            "required": true
          },
          "self": {
            "name": "self",
            "type": "url",
            "readonly": true,
            "immutable": true,
            "required": true
          },
          "xid": {
            "name": "xid",
            "type": "xid",
            "readonly": true,
            "immutable": true,
            "required": true
          },
          "epoch": {
            "name": "epoch",
            "type": "uinteger",
            "readonly": true,
            "required": true
          },
          "name": {
            "name": "name",
            "type": "string"
          },
          "description": {
            "name": "description",
            "type": "string"
          },
          "documentation": {
            "name": "documentation",
            "type": "url"
          },
          "labels": {
            "name": "labels",
            "type": "map",
            "item": {
              "type": "string"
            }
          },
          "createdat": {
            "name": "createdat",
            "type": "timestamp",
            "required": true
          },
          "modifiedat": {
            "name": "modifiedat",
            "type": "timestamp",
            "required": true
          },
          "agentcardsurl": {
            "name": "agentcardsurl",
            "type": "url",
            "readonly": true,
            "immutable": true,
            "required": true
          },
          "agentcardscount": {
            "name": "agentcardscount",
            "type": "uinteger",
            "readonly": true,
            "required": true
          },
          "agentcards": {
            "name": "agentcards",
            "type": "map",
            "item": {
              "type": "object",
              "attributes": {
                "*": {
                  "name": "*",
                  "type": "any"
                }
              }
            }
          }
        },
        "resources": {
          "agentcards": {
            "plural": "agentcards",
            "singular": "agentcard",
            "description": "Google A2A AgentCard resource",
            "maxversions": 0,
            "setversionid": true,
            "setdefaultversionsticky": true,
            "hasdocument": true,
            "singleversionroot": false,
            "attributes": {
              "agentcardid": {
                "name": "agentcardid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "versionid": {
                "name": "versionid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "readonly": true,
                "required": true
              },
              "name": {
                "name": "name",
                "type": "string"
              },
              "isdefault": {
                "name": "isdefault",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              },
              "description": {
                "name": "description",
                "type": "string"
              },
              "documentation": {
                "name": "documentation",
                "type": "url"
              },
              "labels": {
                "name": "labels",
                "type": "map",
                "item": {
                  "type": "string"
                }
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "ancestor": {
                "name": "ancestor",
                "type": "string",
                "required": true
              },
              "contenttype": {
                "name": "contenttype",
                "type": "string"
              },
              "specversion": {
                "name": "specversion",
                "type": "string",
                "description": "Version of the A2A specification this agent card conforms to"
              },
              "*": {
                "name": "*",
                "type": "any",
                "description": "Additional custom attributes allowed for agent card extensibility"
              },
              "agentcardurl": {
                "name": "agentcardurl",
                "type": "url"
              },
              "agentcardproxyurl": {
                "name": "agentcardproxyurl",
                "type": "url"
              },
              "agentcard": {
                "name": "agentcard",
                "type": "any"
              },
              "metaurl": {
                "name": "metaurl",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "meta": {
                "name": "meta",
                "type": "object",
                "attributes": {
                  "*": {
                    "name": "*",
                    "type": "any"
                  }
                }
              },
              "versionsurl": {
                "name": "versionsurl",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "versionscount": {
                "name": "versionscount",
                "type": "uinteger",
                "readonly": true,
                "required": true
              },
              "versions": {
                "name": "versions",
                "type": "map",
                "item": {
                  "type": "object",
                  "attributes": {
                    "*": {
                      "name": "*",
                      "type": "any"
                    }
                  }
                }
              }
            },
            "metaattributes": {
              "agentcardid": {
                "name": "agentcardid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xref": {
                "name": "xref",
                "type": "url"
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "readonly": true,
                "required": true
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "readonly": {
                "name": "readonly",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              },
              "compatibility": {
                "name": "compatibility",
                "type": "string",
                "enum": [
                  "none",
                  "backward",
                  "backward_transitive",
                  "forward",
                  "forward_transitive",
                  "full",
                  "full_transitive"
                ],
                "strict": false,
                "required": true,
                "default": "none"
              },
              "compatibilityauthority": {
                "name": "compatibilityauthority",
                "type": "string",
                "enum": [
                  "external",
                  "server"
                ],
                "strict": false
              },
              "deprecated": {
                "name": "deprecated",
                "type": "object",
                "attributes": {
                  "alternative": {
                    "name": "alternative",
                    "type": "url"
                  },
                  "docs": {
                    "name": "docs",
                    "type": "url"
                  },
                  "effective": {
                    "name": "effective",
                    "type": "timestamp"
                  },
                  "removal": {
                    "name": "removal",
                    "type": "timestamp"
                  },
                  "*": {
                    "name": "*",
                    "type": "any"
                  }
                }
              },
              "validation": {
                "name": "validation",
                "type": "boolean",
                "required": true,
                "default": false
              },
              "defaultversionid": {
                "name": "defaultversionid",
                "type": "string",
                "required": true
              },
              "defaultversionurl": {
                "name": "defaultversionurl",
                "type": "url",
                "readonly": true,
                "required": true
              },
              "defaultversionsticky": {
                "name": "defaultversionsticky",
                "type": "boolean",
                "required": true,
                "default": false
              }
            }
          }
        }
      },
      "mcpproviders": {
        "plural": "mcpproviders",
        "singular": "mcpprovider",
        "description": "Registry of Model Context Protocol (MCP) servers and their capabilities, organized by provider.",
        "attributes": {
          "mcpproviderid": {
            "name": "mcpproviderid",
            "type": "string",
            "immutable": true,
            "required": true
          },
          "self": {
            "name": "self",
            "type": "url",
            "readonly": true,
            "immutable": true,
            "required": true
          },
          "xid": {
            "name": "xid",
            "type": "xid",
            "readonly": true,
            "immutable": true,
            "required": true
          },
          "epoch": {
            "name": "epoch",
            "type": "uinteger",
            "readonly": true,
            "required": true
          },
          "name": {
            "name": "name",
            "type": "string"
          },
          "description": {
            "name": "description",
            "type": "string"
          },
          "documentation": {
            "name": "documentation",
            "type": "url"
          },
          "labels": {
            "name": "labels",
            "type": "map",
            "item": {
              "type": "string"
            }
          },
          "createdat": {
            "name": "createdat",
            "type": "timestamp",
            "required": true
          },
          "modifiedat": {
            "name": "modifiedat",
            "type": "timestamp",
            "required": true
          },
          "serversurl": {
            "name": "serversurl",
            "type": "url",
            "readonly": true,
            "immutable": true,
            "required": true
          },
          "serverscount": {
            "name": "serverscount",
            "type": "uinteger",
            "readonly": true,
            "required": true
          },
          "servers": {
            "name": "servers",
            "type": "map",
            "item": {
              "type": "object",
              "attributes": {
                "*": {
                  "name": "*",
                  "type": "any"
                }
              }
            }
          }
        },
        "resources": {
          "servers": {
            "plural": "servers",
            "singular": "server",
            "maxversions": 0,
            "setversionid": false,
            "setdefaultversionsticky": false,
            "hasdocument": false,
            "singleversionroot": true,
            "attributes": {
              "serverid": {
                "name": "serverid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "versionid": {
                "name": "versionid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "readonly": true,
                "required": true
              },
              "name": {
                "name": "name",
                "type": "string",
                "description": "Human-readable name of the MCP server"
              },
              "isdefault": {
                "name": "isdefault",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              },
              "description": {
                "name": "description",
                "type": "string"
              },
              "documentation": {
                "name": "documentation",
                "type": "url"
              },
              "labels": {
                "name": "labels",
                "type": "map",
                "item": {
                  "type": "string"
                }
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "ancestor": {
                "name": "ancestor",
                "type": "string",
                "required": true
              },
              "contenttype": {
                "name": "contenttype",
                "type": "string"
              },
              "id": {
                "name": "id",
                "type": "string",
                "description": "Unique identifier for the MCP server"
              },
              "packages": {
                "name": "packages",
                "type": "array",
                "description": "Available package distributions for installing and running the server",
                "item": {
                  "type": "object",
                  "attributes": {
                    "environment_variables": {
                      "name": "environment_variables",
                      "type": "array",
                      "description": "Environment variables required or used by the server",
                      "item": {
                        "type": "object",
                        "attributes": {
                          "choices": {
                            "name": "choices",
                            "type": "array",
                            "description": "List of valid values for this environment variable",
                            "item": {
                              "type": "string"
                            }
                          },
                          "default": {
                            "name": "default",
                            "type": "string",
                            "description": "Default value used when environment variable is not set"
                          },
                          "description": {
                            "name": "description",
                            "type": "string",
                            "description": "Human-readable description of this environment variable"
                          },
                          "format": {
                            "name": "format",
                            "type": "string",
                            "description": "Expected format or validation pattern for the variable value"
                          },
                          "is_repeated": {
                            "name": "is_repeated",
                            "type": "boolean",
                            "description": "Whether this environment variable can have multiple values"
                          },
                          "is_required": {
                            "name": "is_required",
                            "type": "boolean",
                            "description": "Whether this environment variable is mandatory"
                          },
                          "is_secret": {
                            "name": "is_secret",
                            "type": "boolean",
                            "description": "Whether this environment variable contains sensitive information"
                          },
                          "name": {
                            "name": "name",
                            "type": "string",
                            "description": "Name of the environment variable"
                          },
                          "properties": {
                            "name": "properties",
                            "type": "map",
                            "description": "Additional properties or metadata for this environment variable",
                            "item": {
                              "type": "any"
                            }
                          },
                          "template": {
                            "name": "template",
                            "type": "string",
                            "description": "Template string for generating environment variable values"
                          },
                          "type": {
                            "name": "type",
                            "type": "string",
                            "description": "Data type of the environment variable"
                          },
                          "value": {
                            "name": "value",
                            "type": "string",
                            "description": "Current or default value for this environment variable"
                          },
                          "value_hint": {
                            "name": "value_hint",
                            "type": "string",
                            "description": "Hint or example for what kind of value to provide"
                          },
                          "variables": {
                            "name": "variables",
                            "type": "map",
                            "description": "Variable substitutions available for this environment variable",
                            "item": {
                              "type": "any"
                            }
                          },
                          "*": {
                            "name": "*",
                            "type": "any",
                            "description": "Additional environment variable metadata"
                          }
                        }
                      }
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "description": "Package name within the registry"
                    },
                    "package_arguments": {
                      "name": "package_arguments",
                      "type": "array",
                      "description": "Arguments specific to package installation or configuration",
                      "item": {
                        "type": "object",
                        "attributes": {
                          "choices": {
                            "name": "choices",
                            "type": "array",
                            "description": "List of valid values for this package argument",
                            "item": {
                              "type": "string"
                            }
                          },
                          "default": {
                            "name": "default",
                            "type": "string",
                            "description": "Default value used when argument is not provided"
                          },
                          "description": {
                            "name": "description",
                            "type": "string",
                            "description": "Human-readable description of this package argument"
                          },
                          "format": {
                            "name": "format",
                            "type": "string",
                            "description": "Expected format or validation pattern for the argument value"
                          },
                          "is_repeated": {
                            "name": "is_repeated",
                            "type": "boolean",
                            "description": "Whether this package argument can be specified multiple times"
                          },
                          "is_required": {
                            "name": "is_required",
                            "type": "boolean",
                            "description": "Whether this argument is mandatory for package installation"
                          },
                          "is_secret": {
                            "name": "is_secret",
                            "type": "boolean",
                            "description": "Whether this argument contains sensitive information"
                          },
                          "name": {
                            "name": "name",
                            "type": "string",
                            "description": "Name or identifier for this package argument"
                          },
                          "properties": {
                            "name": "properties",
                            "type": "map",
                            "description": "Additional properties or metadata for this package argument",
                            "item": {
                              "type": "any"
                            }
                          },
                          "template": {
                            "name": "template",
                            "type": "string",
                            "description": "Template string for generating package argument values"
                          },
                          "type": {
                            "name": "type",
                            "type": "string",
                            "description": "Data type of the package argument"
                          },
                          "value": {
                            "name": "value",
                            "type": "string",
                            "description": "Current or default value for this package argument"
                          },
                          "value_hint": {
                            "name": "value_hint",
                            "type": "string",
                            "description": "Hint or example for what kind of value to provide"
                          },
                          "variables": {
                            "name": "variables",
                            "type": "map",
                            "description": "Variable substitutions available for this package argument",
                            "item": {
                              "type": "any"
                            }
                          },
                          "*": {
                            "name": "*",
                            "type": "any",
                            "description": "Additional package argument metadata"
                          }
                        }
                      }
                    },
                    "registry_name": {
                      "name": "registry_name",
                      "type": "string",
                      "description": "Name of the package registry (e.g., npm, pypi, cargo)"
                    },
                    "runtime_arguments": {
                      "name": "runtime_arguments",
                      "type": "array",
                      "description": "Command-line arguments required when executing the server runtime",
                      "item": {
                        "type": "object",
                        "attributes": {
                          "choices": {
                            "name": "choices",
                            "type": "array",
                            "description": "List of valid values for this argument",
                            "item": {
                              "type": "string"
                            }
                          },
                          "default": {
                            "name": "default",
                            "type": "string",
                            "description": "Default value used when argument is not provided"
                          },
                          "description": {
                            "name": "description",
                            "type": "string",
                            "description": "Human-readable description of this argument"
                          },
                          "format": {
                            "name": "format",
                            "type": "string",
                            "description": "Expected format or validation pattern for the argument value"
                          },
                          "is_repeated": {
                            "name": "is_repeated",
                            "type": "boolean",
                            "description": "Whether this argument can be specified multiple times"
                          },
                          "is_required": {
                            "name": "is_required",
                            "type": "boolean",
                            "description": "Whether this argument is mandatory for server execution"
                          },
                          "is_secret": {
                            "name": "is_secret",
                            "type": "boolean",
                            "description": "Whether this argument contains sensitive information"
                          },
                          "name": {
                            "name": "name",
                            "type": "string",
                            "description": "Name or identifier for this argument"
                          },
                          "properties": {
                            "name": "properties",
                            "type": "map",
                            "description": "Additional properties or metadata for this argument",
                            "item": {
                              "type": "any"
                            }
                          },
                          "template": {
                            "name": "template",
                            "type": "string",
                            "description": "Template string for generating argument values"
                          },
                          "type": {
                            "name": "type",
                            "type": "string",
                            "description": "Data type of the argument (string, number, boolean, etc.)"
                          },
                          "value": {
                            "name": "value",
                            "type": "string",
                            "description": "Current or default value for this argument"
                          },
                          "value_hint": {
                            "name": "value_hint",
                            "type": "string",
                            "description": "Hint or example for what kind of value to provide"
                          },
                          "variables": {
                            "name": "variables",
                            "type": "map",
                            "description": "Variable substitutions available for this argument",
                            "item": {
                              "type": "any"
                            }
                          },
                          "*": {
                            "name": "*",
                            "type": "any",
                            "description": "Additional argument metadata"
                          }
                        }
                      }
                    },
                    "runtime_hint": {
                      "name": "runtime_hint",
                      "type": "string",
                      "description": "Suggested runtime environment (e.g., node, python, cargo)"
                    },
                    "version": {
                      "name": "version",
                      "type": "string",
                      "description": "Package version identifier"
                    },
                    "*": {
                      "name": "*",
                      "type": "any",
                      "description": "Additional package metadata"
                    }
                  }
                }
              },
              "prompts": {
                "name": "prompts",
                "type": "array",
                "description": "Pre-defined prompt templates available through this server",
                "item": {
                  "type": "object",
                  "attributes": {
                    "*": {
                      "name": "*",
                      "type": "any",
                      "description": "Prompt definition attributes including name, description, and arguments"
                    }
                  }
                }
              },
              "remotes": {
                "name": "remotes",
                "type": "array",
                "description": "Remote server endpoints that can be connected to via network protocols",
                "item": {
                  "type": "object",
                  "attributes": {
                    "headers": {
                      "name": "headers",
                      "type": "array",
                      "description": "HTTP headers required for connecting to the remote server",
                      "item": {
                        "type": "object",
                        "attributes": {
                          "choices": {
                            "name": "choices",
                            "type": "array",
                            "description": "List of valid values for this header",
                            "item": {
                              "type": "string"
                            }
                          },
                          "default": {
                            "name": "default",
                            "type": "string",
                            "description": "Default value used when header is not provided"
                          },
                          "description": {
                            "name": "description",
                            "type": "string",
                            "description": "Human-readable description of this header"
                          },
                          "format": {
                            "name": "format",
                            "type": "string",
                            "description": "Expected format or validation pattern for the header value"
                          },
                          "is_required": {
                            "name": "is_required",
                            "type": "boolean",
                            "description": "Whether this header is mandatory for connection"
                          },
                          "is_secret": {
                            "name": "is_secret",
                            "type": "boolean",
                            "description": "Whether this header contains sensitive information"
                          },
                          "properties": {
                            "name": "properties",
                            "type": "map",
                            "description": "Additional properties or metadata for this header",
                            "item": {
                              "type": "any"
                            }
                          },
                          "template": {
                            "name": "template",
                            "type": "string",
                            "description": "Template string for generating header values"
                          },
                          "value": {
                            "name": "value",
                            "type": "string",
                            "description": "Current or default value for this header"
                          },
                          "*": {
                            "name": "*",
                            "type": "any",
                            "description": "Additional header metadata"
                          }
                        }
                      }
                    },
                    "transport_type": {
                      "name": "transport_type",
                      "type": "string",
                      "description": "Network transport protocol (e.g., http, websocket, tcp)"
                    },
                    "url": {
                      "name": "url",
                      "type": "string",
                      "description": "URL endpoint for connecting to the remote server"
                    },
                    "*": {
                      "name": "*",
                      "type": "any",
                      "description": "Additional remote server configuration"
                    }
                  }
                }
              },
              "repository": {
                "name": "repository",
                "type": "object",
                "description": "Source code repository information for the MCP server",
                "attributes": {
                  "id": {
                    "name": "id",
                    "type": "string",
                    "description": "Repository identifier or path within the hosting platform"
                  },
                  "source": {
                    "name": "source",
                    "type": "string",
                    "description": "Repository hosting platform (e.g., github, gitlab)"
                  },
                  "url": {
                    "name": "url",
                    "type": "string",
                    "description": "URL of the source code repository"
                  },
                  "*": {
                    "name": "*",
                    "type": "any",
                    "description": "Additional repository metadata"
                  }
                }
              },
              "resources": {
                "name": "resources",
                "type": "array",
                "description": "Resources that can be accessed through this MCP server",
                "item": {
                  "type": "object",
                  "attributes": {
                    "*": {
                      "name": "*",
                      "type": "any",
                      "description": "Resource definition attributes including URI, name, description, and mime type"
                    }
                  }
                }
              },
              "tools": {
                "name": "tools",
                "type": "array",
                "description": "Tools and functions exposed by this MCP server",
                "item": {
                  "type": "object",
                  "attributes": {
                    "*": {
                      "name": "*",
                      "type": "any",
                      "description": "Tool definition attributes including name, description, input schema, and output schema"
                    }
                  }
                }
              },
              "version_detail": {
                "name": "version_detail",
                "type": "object",
                "description": "Version information for the current server release",
                "attributes": {
                  "is_latest": {
                    "name": "is_latest",
                    "type": "boolean",
                    "description": "Whether this is the latest available version"
                  },
                  "release_date": {
                    "name": "release_date",
                    "type": "string",
                    "description": "ISO 8601 date when this version was released"
                  },
                  "version": {
                    "name": "version",
                    "type": "string",
                    "description": "Semantic version number of the server"
                  },
                  "*": {
                    "name": "*",
                    "type": "any",
                    "description": "Additional version metadata"
                  }
                }
              },
              "*": {
                "name": "*",
                "type": "any",
                "description": "Additional server metadata and custom attributes"
              },
              "metaurl": {
                "name": "metaurl",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "meta": {
                "name": "meta",
                "type": "object",
                "attributes": {
                  "*": {
                    "name": "*",
                    "type": "any"
                  }
                }
              },
              "versionsurl": {
                "name": "versionsurl",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "versionscount": {
                "name": "versionscount",
                "type": "uinteger",
                "readonly": true,
                "required": true
              },
              "versions": {
                "name": "versions",
                "type": "map",
                "item": {
                  "type": "object",
                  "attributes": {
                    "*": {
                      "name": "*",
                      "type": "any"
                    }
                  }
                }
              }
            },
            "metaattributes": {
              "serverid": {
                "name": "serverid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xref": {
                "name": "xref",
                "type": "url"
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "readonly": true,
                "required": true
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "readonly": {
                "name": "readonly",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              },
              "compatibility": {
                "name": "compatibility",
                "type": "string",
                "enum": [
                  "none",
                  "backward",
                  "backward_transitive",
                  "forward",
                  "forward_transitive",
                  "full",
                  "full_transitive"
                ],
                "strict": false,
                "required": true,
                "default": "none"
              },
              "compatibilityauthority": {
                "name": "compatibilityauthority",
                "type": "string",
                "enum": [
                  "external",
                  "server"
                ],
                "strict": false
              },
              "deprecated": {
                "name": "deprecated",
                "type": "object",
                "attributes": {
                  "alternative": {
                    "name": "alternative",
                    "type": "url"
                  },
                  "docs": {
                    "name": "docs",
                    "type": "url"
                  },
                  "effective": {
                    "name": "effective",
                    "type": "timestamp"
                  },
                  "removal": {
                    "name": "removal",
                    "type": "timestamp"
                  },
                  "*": {
                    "name": "*",
                    "type": "any"
                  }
                }
              },
              "defaultversionid": {
                "name": "defaultversionid",
                "type": "string",
                "required": true
              },
              "defaultversionurl": {
                "name": "defaultversionurl",
                "type": "url",
                "readonly": true,
                "required": true
              },
              "defaultversionsticky": {
                "name": "defaultversionsticky",
                "type": "boolean",
                "required": true,
                "default": false
              }
            }
          }
        }
      }
    }
  },

  "agentcardprovidersurl": "#/agentcardproviders",
  "agentcardproviders": {
    "contoso.com": {
      "agentcardproviderid": "contoso.com",
      "self": "#/agentcardproviders/contoso.com",
      "xid": "/agentcardproviders/contoso.com",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:20.35592256Z",
      "modifiedat": "2025-05-26T16:41:20.35592256Z",

      "agentcardsurl": "#/agentcardproviders/contoso.com/agentcards",
      "agentcards": {
        "reimbursement": {
          "agentcardid": "reimbursement",
          "self": "#/agentcardproviders/contoso.com/agentcards/reimbursement",
          "xid": "/agentcardproviders/contoso.com/agentcards/reimbursement",

          "metaurl": "#/agentcardproviders/contoso.com/agentcards/reimbursement/meta",
          "meta": {
            "agentcardid": "reimbursement",
            "self": "#/agentcardproviders/contoso.com/agentcards/reimbursement/meta",
            "xid": "/agentcardproviders/contoso.com/agentcards/reimbursement/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:20.35592256Z",
            "modifiedat": "2025-05-26T16:41:20.35592256Z",
            "readonly": false,
            "compatibility": "none",
            "validation": false,

            "defaultversionid": "1",
            "defaultversionurl": "#/agentcardproviders/contoso.com/agentcards/reimbursement/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/agentcardproviders/contoso.com/agentcards/reimbursement/versions",
          "versions": {
            "1": {
              "agentcardid": "reimbursement",
              "versionid": "1",
              "self": "#/agentcardproviders/contoso.com/agentcards/reimbursement/versions/1",
              "xid": "/agentcardproviders/contoso.com/agentcards/reimbursement/versions/1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-05-26T16:41:20.35592256Z",
              "modifiedat": "2025-05-26T16:41:20.35592256Z",
              "ancestor": "1",
              "agentcardbase64": "ewogICAgImFnZW50Y2FyZGlkIjogInJlaW1idXJzZW1lbnQiLAogICAgImRlc2NyaXB0aW9uIjogIlJlaW1idXJzZW1lbnQgQWdlbnQuIEhhbmRsZXMgZW1wbG95ZWUgZXhwZW5zZSByZWltYnVyc2VtZW50IHByb2Nlc3NpbmcuIiwKICAgICJuYW1lIjogIlJlaW1idXJzZW1lbnQgQWdlbnQiLAogICAgImFnZW50Y2FyZCI6IHsKICAgICAgICAibmFtZSI6ICJSZWltYnVyc2VtZW50IEFnZW50IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiSGFuZGxlcyBlbXBsb3llZSBleHBlbnNlIHJlaW1idXJzZW1lbnQgcHJvY2Vzc2luZy4iLAogICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9yZWltYnVyc2VtZW50LmV4YW1wbGUuY29tL2EyYSIsCiAgICAgICAgInZlcnNpb24iOiAiMS4wLjAiLAogICAgICAgICJjYXBhYmlsaXRpZXMiOiB7CiAgICAgICAgICAgICJzdHJlYW1pbmciOiB0cnVlLAogICAgICAgICAgICAicHVzaE5vdGlmaWNhdGlvbnMiOiBmYWxzZSwKICAgICAgICAgICAgInN0YXRlVHJhbnNpdGlvbkhpc3RvcnkiOiB0cnVlCiAgICAgICAgfSwKICAgICAgICAiYXV0aGVudGljYXRpb24iOiB7CiAgICAgICAgICAgICJzY2hlbWVzIjogWwogICAgICAgICAgICAgICAgImFwaUtleSIKICAgICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImRlZmF1bHRJbnB1dE1vZGVzIjogWwogICAgICAgICAgICAidGV4dCIKICAgICAgICBdLAogICAgICAgICJkZWZhdWx0T3V0cHV0TW9kZXMiOiBbCiAgICAgICAgICAgICJ0ZXh0IgogICAgICAgIF0sCiAgICAgICAgInNraWxscyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogInByb2Nlc3NfcmVpbWJ1cnNlbWVudCIsCiAgICAgICAgICAgICAgICAibmFtZSI6ICJQcm9jZXNzIFJlaW1idXJzZW1lbnQiLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlByb2Nlc3NlcyBleHBlbnNlIHJlaW1idXJzZW1lbnQgcmVxdWVzdHMgYmFzZWQgb24gcHJvdmlkZWQgZGV0YWlscy4iLAogICAgICAgICAgICAgICAgImlucHV0TW9kZXMiOiBbCiAgICAgICAgICAgICAgICAgICAgInRleHQiCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgIm91dHB1dE1vZGVzIjogWwogICAgICAgICAgICAgICAgICAgICJ0ZXh0IgogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICJleGFtcGxlcyI6IFsKICAgICAgICAgICAgICAgICAgICAiUmVpbWJ1cnNlIOKCrDIwIGZvciBjbGllbnQgbHVuY2ggb24gMjAyNS0wNS0xMC4iLAogICAgICAgICAgICAgICAgICAgICJTdWJtaXQgZXhwZW5zZSBmb3Ig4oKsNTAgdGF4aSBmYXJlIGZyb20gMjAyNS0wNS0xMi4iCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9Cn0="
            }
          },
          "versionscount": 1
        }
      },
      "agentcardscount": 1
    },
    "final-test-provider": {
      "agentcardproviderid": "final-test-provider",
      "self": "#/agentcardproviders/final-test-provider",
      "xid": "/agentcardproviders/final-test-provider",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:20.403287617Z",
      "modifiedat": "2025-05-26T16:41:20.403287617Z",

      "agentcardsurl": "#/agentcardproviders/final-test-provider/agentcards",
      "agentcards": {
        "final-test-agentcard": {
          "agentcardid": "final-test-agentcard",
          "self": "#/agentcardproviders/final-test-provider/agentcards/final-test-agentcard",
          "xid": "/agentcardproviders/final-test-provider/agentcards/final-test-agentcard",

          "metaurl": "#/agentcardproviders/final-test-provider/agentcards/final-test-agentcard/meta",
          "meta": {
            "agentcardid": "final-test-agentcard",
            "self": "#/agentcardproviders/final-test-provider/agentcards/final-test-agentcard/meta",
            "xid": "/agentcardproviders/final-test-provider/agentcards/final-test-agentcard/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:20.403287617Z",
            "modifiedat": "2025-05-26T16:41:20.403287617Z",
            "readonly": false,
            "compatibility": "none",
            "validation": false,

            "defaultversionid": "1",
            "defaultversionurl": "#/agentcardproviders/final-test-provider/agentcards/final-test-agentcard/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/agentcardproviders/final-test-provider/agentcards/final-test-agentcard/versions",
          "versions": {
            "1": {
              "agentcardid": "final-test-agentcard",
              "versionid": "1",
              "self": "#/agentcardproviders/final-test-provider/agentcards/final-test-agentcard/versions/1",
              "xid": "/agentcardproviders/final-test-provider/agentcards/final-test-agentcard/versions/1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-05-26T16:41:20.403287617Z",
              "modifiedat": "2025-05-26T16:41:20.403287617Z",
              "ancestor": "1",
              "agentcardbase64": "ewogICJhZ2VudGNhcmQiOiB7CiAgICAibmFtZSI6ICJUZXN0IEEyQSBBZ2VudCIsCiAgICAiZGVzY3JpcHRpb24iOiAiQSB0ZXN0IGFnZW50IGZvciB2YWxpZGF0aW5nIHRoZSB4cmVnaXN0cnktYWkgQTJBIGlzc3VlIHdvcmtmbG93IiwKICAgICJ1cmwiOiAiaHR0cHM6Ly90ZXN0LWFnZW50LmV4YW1wbGUuY29tL2EyYSIsCiAgICAidmVyc2lvbiI6ICIxLjAuMCIsCiAgICAiY2FwYWJpbGl0aWVzIjogewogICAgICAic3RyZWFtaW5nIjogdHJ1ZSwKICAgICAgInB1c2hOb3RpZmljYXRpb25zIjogZmFsc2UsCiAgICAgICJzdGF0ZVRyYW5zaXRpb25IaXN0b3J5IjogdHJ1ZQogICAgfSwKICAgICJhdXRoZW50aWNhdGlvbiI6IHsKICAgICAgInNjaGVtZXMiOiBbCiAgICAgICAgImFwaUtleSIKICAgICAgXQogICAgfSwKICAgICJkZWZhdWx0SW5wdXRNb2RlcyI6IFsKICAgICAgInRleHQiCiAgICBdLAogICAgImRlZmF1bHRPdXRwdXRNb2RlcyI6IFsKICAgICAgInRleHQiCiAgICBdLAogICAgInNraWxscyI6IFsKICAgICAgewogICAgICAgICJpZCI6ICJ0ZXN0X2VjaG8iLAogICAgICAgICJuYW1lIjogIlRlc3QgRWNobyIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkVjaG8gYmFjayBhIHRlc3QgbWVzc2FnZSBmb3IgdmFsaWRhdGlvbiBwdXJwb3NlcyIsCiAgICAgICAgImlucHV0TW9kZXMiOiBbCiAgICAgICAgICAidGV4dCIKICAgICAgICBdLAogICAgICAgICJvdXRwdXRNb2RlcyI6IFsKICAgICAgICAgICJ0ZXh0IgogICAgICAgIF0sCiAgICAgICAgImV4YW1wbGVzIjogWwogICAgICAgICAgIkVjaG8gYmFjazogSGVsbG8gV29ybGQiLAogICAgICAgICAgIlJlcGVhdCB0aGlzIG1lc3NhZ2U6IFRlc3Qgc3VjY2Vzc2Z1bCIKICAgICAgICBdCiAgICAgIH0KICAgIF0KICB9Cn0="
            }
          },
          "versionscount": 1
        }
      },
      "agentcardscount": 1
    }
  },
  "agentcardproviderscount": 2,
  "mcpprovidersurl": "#/mcpproviders",
  "mcpproviders": {
    "13rac1": {
      "mcpproviderid": "13rac1",
      "self": "#/mcpproviders/13rac1",
      "xid": "/mcpproviders/13rac1",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:42.591494758Z",
      "modifiedat": "2025-05-26T16:41:42.591494758Z",

      "serversurl": "#/mcpproviders/13rac1/servers",
      "servers": {
        "videocapture-mcp": {
          "serverid": "videocapture-mcp",
          "self": "#/mcpproviders/13rac1/servers/videocapture-mcp",
          "xid": "/mcpproviders/13rac1/servers/videocapture-mcp",

          "metaurl": "#/mcpproviders/13rac1/servers/videocapture-mcp/meta",
          "meta": {
            "serverid": "videocapture-mcp",
            "self": "#/mcpproviders/13rac1/servers/videocapture-mcp/meta",
            "xid": "/mcpproviders/13rac1/servers/videocapture-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:42.591494758Z",
            "modifiedat": "2025-05-26T16:41:42.591494758Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/13rac1/servers/videocapture-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/13rac1/servers/videocapture-mcp/versions",
          "versions": {
            "1": {
              "serverid": "videocapture-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/13rac1/servers/videocapture-mcp/versions/1",
              "xid": "/mcpproviders/13rac1/servers/videocapture-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.13rac1/videocapture-mcp",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) server to capture images from an OpenCV-compatible webcam or video source",
              "createdat": "2025-05-26T16:41:42.591494758Z",
              "modifiedat": "2025-05-26T16:41:42.591494758Z",
              "ancestor": "1",
              "id": "cbc3c68c-82c8-4a9f-86b9-78e3893df494",
              "packages": [
                {
                  "name": "videocapture-mcp",
                  "package_arguments": [
                    {
                      "default": "--with mcp[cli]",
                      "description": "Use extra requirements with package",
                      "format": "string",
                      "is_required": true,
                      "name": "--with mcp[cli]",
                      "type": "named",
                      "value": "--with mcp[cli]",
                      "value_hint": "mcp[cli]"
                    },
                    {
                      "default": "--with numpy",
                      "description": "Use extra requirements with package",
                      "format": "string",
                      "is_required": true,
                      "name": "--with numpy",
                      "type": "named",
                      "value": "--with numpy",
                      "value_hint": "numpy"
                    },
                    {
                      "default": "--with opencv-python",
                      "description": "Use extra requirements with package",
                      "format": "string",
                      "is_required": true,
                      "name": "--with opencv-python",
                      "type": "named",
                      "value": "--with opencv-python",
                      "value_hint": "opencv-python"
                    },
                    {
                      "default": "mcp",
                      "description": "MCP run command",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp",
                      "value_hint": "mcp"
                    },
                    {
                      "default": "C:\\ABSOLUTE_PATH\\videocapture-mcp\\videocapture_mcp.py",
                      "description": "Path to script",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "C:\\ABSOLUTE_PATH\\videocapture-mcp\\videocapture_mcp.py",
                      "value_hint": "C:\\ABSOLUTE_PATH\\videocapture-mcp\\videocapture_mcp.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "956274853",
                "source": "github",
                "url": "https://github.com/13rac1/videocapture-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:30Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "21st-dev": {
      "mcpproviderid": "21st-dev",
      "self": "#/mcpproviders/21st-dev",
      "xid": "/mcpproviders/21st-dev",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:40.568491623Z",
      "modifiedat": "2025-05-26T16:41:40.568491623Z",

      "serversurl": "#/mcpproviders/21st-dev/servers",
      "servers": {
        "magic-mcp": {
          "serverid": "magic-mcp",
          "self": "#/mcpproviders/21st-dev/servers/magic-mcp",
          "xid": "/mcpproviders/21st-dev/servers/magic-mcp",

          "metaurl": "#/mcpproviders/21st-dev/servers/magic-mcp/meta",
          "meta": {
            "serverid": "magic-mcp",
            "self": "#/mcpproviders/21st-dev/servers/magic-mcp/meta",
            "xid": "/mcpproviders/21st-dev/servers/magic-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:40.568491623Z",
            "modifiedat": "2025-05-26T16:41:40.568491623Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/21st-dev/servers/magic-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/21st-dev/servers/magic-mcp/versions",
          "versions": {
            "1": {
              "serverid": "magic-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/21st-dev/servers/magic-mcp/versions/1",
              "xid": "/mcpproviders/21st-dev/servers/magic-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.21st-dev/magic-mcp",
              "isdefault": true,
              "description": "It's like v0 but in your Cursor/WindSurf/Cline. 21st dev Magic MCP server for working with your frontend like Magic",
              "createdat": "2025-05-26T16:41:40.568491623Z",
              "modifiedat": "2025-05-26T16:41:40.568491623Z",
              "ancestor": "1",
              "id": "4e9cf4cf-71f6-4aca-bae8-2d10a29ca2e0",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "${input:apiKey}",
                      "name": "API_KEY"
                    }
                  ],
                  "name": "@21st-dev/magic",
                  "registry_name": "npm",
                  "version": "0.0.46"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "935450522",
                "source": "github",
                "url": "https://github.com/21st-dev/magic-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "name": "CreateUiTool"
                },
                {
                  "name": "LogoSearchTool"
                },
                {
                  "name": "FetchUiTool"
                },
                {
                  "name": "RefineUiTool"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:56:49Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "66julienmartin": {
      "mcpproviderid": "66julienmartin",
      "self": "#/mcpproviders/66julienmartin",
      "xid": "/mcpproviders/66julienmartin",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:33.90749275Z",
      "modifiedat": "2025-05-26T16:41:33.994155317Z",

      "serversurl": "#/mcpproviders/66julienmartin/servers",
      "servers": {
        "MCP-server-Deepseek_R1": {
          "serverid": "MCP-server-Deepseek_R1",
          "self": "#/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1",
          "xid": "/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1",

          "metaurl": "#/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1/meta",
          "meta": {
            "serverid": "MCP-server-Deepseek_R1",
            "self": "#/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1/meta",
            "xid": "/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:33.994155317Z",
            "modifiedat": "2025-05-26T16:41:33.994155317Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1/versions",
          "versions": {
            "1": {
              "serverid": "MCP-server-Deepseek_R1",
              "versionid": "1",
              "self": "#/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1/versions/1",
              "xid": "/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1/versions/1",
              "epoch": 1,
              "name": "io.github.66julienmartin/mcp-server-deepseek_r1",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation connecting Claude Desktop with DeepSeek's language models (R1/V3)",
              "createdat": "2025-05-26T16:41:33.994155317Z",
              "modifiedat": "2025-05-26T16:41:33.994155317Z",
              "ancestor": "1",
              "id": "a2015046-780d-421a-999f-c52c808236fa",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-api-key",
                      "name": "DEEPSEEK_API_KEY"
                    }
                  ],
                  "name": "deepseek_r1",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "927737184",
                "source": "github",
                "url": "https://github.com/66julienmartin/MCP-server-Deepseek_R1"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Generate text using DeepSeek R1 model",
                  "inputschema": {
                    "properties": {
                      "max_tokens": {
                        "description": "Maximum tokens to generate (default: 8192)",
                        "maximum": 8192,
                        "minimum": 1,
                        "type": "number"
                      },
                      "prompt": {
                        "description": "Input text for DeepSeek",
                        "type": "string"
                      },
                      "temperature": {
                        "description": "Sampling temperature (default: 0.2)",
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "deepseek_r1"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:36Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "MCP-server-Qwen_Max": {
          "serverid": "MCP-server-Qwen_Max",
          "self": "#/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max",
          "xid": "/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max",

          "metaurl": "#/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max/meta",
          "meta": {
            "serverid": "MCP-server-Qwen_Max",
            "self": "#/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max/meta",
            "xid": "/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:33.90749275Z",
            "modifiedat": "2025-05-26T16:41:33.90749275Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max/versions",
          "versions": {
            "1": {
              "serverid": "MCP-server-Qwen_Max",
              "versionid": "1",
              "self": "#/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max/versions/1",
              "xid": "/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max/versions/1",
              "epoch": 1,
              "name": "io.github.66julienmartin/mcp-server-qwen_max",
              "isdefault": true,
              "description": "MCP server for Qwen Max model",
              "createdat": "2025-05-26T16:41:33.90749275Z",
              "modifiedat": "2025-05-26T16:41:33.90749275Z",
              "ancestor": "1",
              "id": "92c66a82-172a-45e6-92a4-ee6a053e95e6",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-api-key-here",
                      "name": "DASHSCOPE_API_KEY"
                    }
                  ],
                  "name": "qwen_max",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "927217229",
                "source": "github",
                "url": "https://github.com/66julienmartin/MCP-server-Qwen_Max"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Generate text using Qwen Max model",
                  "inputschema": {
                    "properties": {
                      "max_tokens": {
                        "default": 8192,
                        "description": "Maximum number of tokens to generate",
                        "type": "number"
                      },
                      "prompt": {
                        "description": "The text prompt to generate content from",
                        "type": "string"
                      },
                      "temperature": {
                        "default": 0.7,
                        "description": "Sampling temperature (0-2)",
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "qwen_max"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:07Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "AI-Agent-Hub": {
      "mcpproviderid": "AI-Agent-Hub",
      "self": "#/mcpproviders/AI-Agent-Hub",
      "xid": "/mcpproviders/AI-Agent-Hub",
      "epoch": 2,
      "createdat": "2025-05-26T16:42:21.160058499Z",
      "modifiedat": "2025-05-26T16:42:21.293338649Z",

      "serversurl": "#/mcpproviders/AI-Agent-Hub/servers",
      "servers": {
        "ai-agent-marketplace-index-mcp": {
          "serverid": "ai-agent-marketplace-index-mcp",
          "self": "#/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp",
          "xid": "/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp",

          "metaurl": "#/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp/meta",
          "meta": {
            "serverid": "ai-agent-marketplace-index-mcp",
            "self": "#/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp/meta",
            "xid": "/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:21.160058499Z",
            "modifiedat": "2025-05-26T16:42:21.160058499Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp/versions",
          "versions": {
            "1": {
              "serverid": "ai-agent-marketplace-index-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp/versions/1",
              "xid": "/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ai-agent-hub/ai-agent-marketplace-index-mcp",
              "isdefault": true,
              "description": "MCP Server for AI Agent Marketplace Index from DeepNLP",
              "createdat": "2025-05-26T16:42:21.160058499Z",
              "modifiedat": "2025-05-26T16:42:21.160058499Z",
              "ancestor": "1",
              "id": "ffe051ab-1088-4040-9bbb-8a1bf3fd2a7b",
              "packages": [
                {
                  "name": "ai-agent-marketplace-index-mcp",
                  "package_arguments": [
                    {
                      "default": "server.py",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "server.py",
                      "value_hint": "server.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "958905017",
                "source": "github",
                "url": "https://github.com/AI-Agent-Hub/ai-agent-marketplace-index-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "General search of AI Agents for information, websites, content and metric statistic of web traffic, etc.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "description": "Maximum number of results to return.",
                        "type": "integer"
                      },
                      "q": {
                        "description": "Query string to search AI agents.",
                        "type": "string"
                      },
                      "timeout": {
                        "description": "Timeout in seconds for the API call.",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "q"
                    ],
                    "type": "object"
                  },
                  "name": "search_ai_agent"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:37Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-marketplace": {
          "serverid": "mcp-marketplace",
          "self": "#/mcpproviders/AI-Agent-Hub/servers/mcp-marketplace",
          "xid": "/mcpproviders/AI-Agent-Hub/servers/mcp-marketplace",

          "metaurl": "#/mcpproviders/AI-Agent-Hub/servers/mcp-marketplace/meta",
          "meta": {
            "serverid": "mcp-marketplace",
            "self": "#/mcpproviders/AI-Agent-Hub/servers/mcp-marketplace/meta",
            "xid": "/mcpproviders/AI-Agent-Hub/servers/mcp-marketplace/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:21.293338649Z",
            "modifiedat": "2025-05-26T16:42:21.293338649Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/AI-Agent-Hub/servers/mcp-marketplace/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/AI-Agent-Hub/servers/mcp-marketplace/versions",
          "versions": {
            "1": {
              "serverid": "mcp-marketplace",
              "versionid": "1",
              "self": "#/mcpproviders/AI-Agent-Hub/servers/mcp-marketplace/versions/1",
              "xid": "/mcpproviders/AI-Agent-Hub/servers/mcp-marketplace/versions/1",
              "epoch": 1,
              "name": "io.github.ai-agent-hub/mcp-marketplace",
              "isdefault": true,
              "description": "OpenSource MCP Marketplace and Html Plugin to Integrate with your AI Application",
              "createdat": "2025-05-26T16:42:21.293338649Z",
              "modifiedat": "2025-05-26T16:42:21.293338649Z",
              "ancestor": "1",
              "id": "de52e791-0131-40d1-be41-ba7b14f3c134",
              "packages": [
                {
                  "name": "AI-Agent-Hub/mcp-marketplace",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "978816723",
                "source": "github",
                "url": "https://github.com/AI-Agent-Hub/mcp-marketplace"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:48Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "AI-QL": {
      "mcpproviderid": "AI-QL",
      "self": "#/mcpproviders/AI-QL",
      "xid": "/mcpproviders/AI-QL",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:26.602159408Z",
      "modifiedat": "2025-05-26T16:42:26.602159408Z",

      "serversurl": "#/mcpproviders/AI-QL/servers",
      "servers": {
        "chat-mcp": {
          "serverid": "chat-mcp",
          "self": "#/mcpproviders/AI-QL/servers/chat-mcp",
          "xid": "/mcpproviders/AI-QL/servers/chat-mcp",

          "metaurl": "#/mcpproviders/AI-QL/servers/chat-mcp/meta",
          "meta": {
            "serverid": "chat-mcp",
            "self": "#/mcpproviders/AI-QL/servers/chat-mcp/meta",
            "xid": "/mcpproviders/AI-QL/servers/chat-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:26.602159408Z",
            "modifiedat": "2025-05-26T16:42:26.602159408Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/AI-QL/servers/chat-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/AI-QL/servers/chat-mcp/versions",
          "versions": {
            "1": {
              "serverid": "chat-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/AI-QL/servers/chat-mcp/versions/1",
              "xid": "/mcpproviders/AI-QL/servers/chat-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ai-ql/chat-mcp",
              "isdefault": true,
              "description": "A Desktop Chat App that leverages MCP(Model Context Protocol) to interface with other LLMs.",
              "createdat": "2025-05-26T16:42:26.602159408Z",
              "modifiedat": "2025-05-26T16:42:26.602159408Z",
              "ancestor": "1",
              "id": "16fc441d-0d72-4b14-afd7-d5c9dd25c909",
              "packages": [
                {
                  "name": "aiql-desktop",
                  "package_arguments": [
                    {
                      "default": "D:/Github/mcp-test",
                      "description": "Path to the working directory",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "D:/Github/mcp-test",
                      "value_hint": "D:/Github/mcp-test"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "896905855",
                "source": "github",
                "url": "https://github.com/AI-QL/chat-mcp"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:17Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Adfin-Engineering": {
      "mcpproviderid": "Adfin-Engineering",
      "self": "#/mcpproviders/Adfin-Engineering",
      "xid": "/mcpproviders/Adfin-Engineering",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:41.79735241Z",
      "modifiedat": "2025-05-26T16:42:41.79735241Z",

      "serversurl": "#/mcpproviders/Adfin-Engineering/servers",
      "servers": {
        "mcp-server-adfin": {
          "serverid": "mcp-server-adfin",
          "self": "#/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin",
          "xid": "/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin",

          "metaurl": "#/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin/meta",
          "meta": {
            "serverid": "mcp-server-adfin",
            "self": "#/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin/meta",
            "xid": "/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:41.79735241Z",
            "modifiedat": "2025-05-26T16:42:41.79735241Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-adfin",
              "versionid": "1",
              "self": "#/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin/versions/1",
              "xid": "/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin/versions/1",
              "epoch": 1,
              "name": "io.github.adfin-engineering/mcp-server-adfin",
              "isdefault": true,
              "description": "A Model Context Protocol Server for connecting with Adfin APIs ",
              "createdat": "2025-05-26T16:42:41.79735241Z",
              "modifiedat": "2025-05-26T16:42:41.79735241Z",
              "ancestor": "1",
              "id": "d3669201-252f-403c-944b-c3ec0845782b",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cemail\u003e",
                      "name": "ADFIN_EMAIL"
                    },
                    {
                      "description": "\u003cpassword\u003e",
                      "name": "ADFIN_PASSWORD"
                    }
                  ],
                  "name": "adfinmcp",
                  "package_arguments": [
                    {
                      "default": "--directory \u003cabsolute_path_to_adfin_mcp_folder\u003e",
                      "description": "Directory to run the project from",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory \u003cabsolute_path_to_adfin_mcp_folder\u003e",
                      "type": "named",
                      "value": "--directory \u003cabsolute_path_to_adfin_mcp_folder\u003e",
                      "value_hint": "\u003cabsolute_path_to_adfin_mcp_folder\u003e"
                    },
                    {
                      "default": "main_adfin_mcp.py",
                      "description": "Script to execute",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "main_adfin_mcp.py",
                      "value_hint": "main_adfin_mcp.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "951338147",
                "source": "github",
                "url": "https://github.com/Adfin-Engineering/mcp-server-adfin"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get the current working directory.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_cwd"
                },
                {
                  "description": "Get the files from the current working directory.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_cwd"
                },
                {
                  "description": "Search recursively for a file starting from the current working directory given the exact name of the file.",
                  "inputschema": {
                    "properties": {
                      "file_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "file_name"
                    ],
                    "type": "object"
                  },
                  "name": "search_for_file"
                },
                {
                  "description": "Search recursively for a file or folder starting from the current working directory.",
                  "inputschema": {
                    "properties": {
                      "file_or_folder_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "file_or_folder_name"
                    ],
                    "type": "object"
                  },
                  "name": "search_for_file_partial"
                },
                {
                  "description": "Make the Desktop the current working directory.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "make_desktop_cwd"
                },
                {
                  "description": "Make a folder the current working directory. That folder must be present in the previous cwd.",
                  "inputschema": {
                    "properties": {
                      "folder_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "folder_name"
                    ],
                    "type": "object"
                  },
                  "name": "make_folder_cwd"
                },
                {
                  "description": "Upload an invoice to Adfin given its absolute path.",
                  "inputschema": {
                    "properties": {
                      "invoice_path": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "invoice_path"
                    ],
                    "type": "object"
                  },
                  "name": "upload_invoice_to_adfin"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:56:52Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Aiven-Open": {
      "mcpproviderid": "Aiven-Open",
      "self": "#/mcpproviders/Aiven-Open",
      "xid": "/mcpproviders/Aiven-Open",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:04.45909012Z",
      "modifiedat": "2025-05-26T16:42:04.45909012Z",

      "serversurl": "#/mcpproviders/Aiven-Open/servers",
      "servers": {
        "mcp-aiven": {
          "serverid": "mcp-aiven",
          "self": "#/mcpproviders/Aiven-Open/servers/mcp-aiven",
          "xid": "/mcpproviders/Aiven-Open/servers/mcp-aiven",

          "metaurl": "#/mcpproviders/Aiven-Open/servers/mcp-aiven/meta",
          "meta": {
            "serverid": "mcp-aiven",
            "self": "#/mcpproviders/Aiven-Open/servers/mcp-aiven/meta",
            "xid": "/mcpproviders/Aiven-Open/servers/mcp-aiven/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:04.45909012Z",
            "modifiedat": "2025-05-26T16:42:04.45909012Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Aiven-Open/servers/mcp-aiven/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Aiven-Open/servers/mcp-aiven/versions",
          "versions": {
            "1": {
              "serverid": "mcp-aiven",
              "versionid": "1",
              "self": "#/mcpproviders/Aiven-Open/servers/mcp-aiven/versions/1",
              "xid": "/mcpproviders/Aiven-Open/servers/mcp-aiven/versions/1",
              "epoch": 1,
              "name": "io.github.aiven-open/mcp-aiven",
              "isdefault": true,
              "description": "Model Context Protocol server for Aiven",
              "createdat": "2025-05-26T16:42:04.45909012Z",
              "modifiedat": "2025-05-26T16:42:04.45909012Z",
              "ancestor": "1",
              "id": "2a0775fa-ff8e-47ff-a5e3-8b7c9b0567a9",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "https://api.aiven.io",
                      "name": "AIVEN_BASE_URL"
                    },
                    {
                      "description": "$AIVEN_TOKEN",
                      "name": "AIVEN_TOKEN"
                    }
                  ],
                  "name": "mcp-aiven",
                  "package_arguments": [
                    {
                      "default": "--directory $REPOSITORY_DIRECTORY",
                      "description": "$REPOSITORY_DIRECTORY",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory $REPOSITORY_DIRECTORY",
                      "type": "named",
                      "value": "--directory $REPOSITORY_DIRECTORY",
                      "value_hint": "$REPOSITORY_DIRECTORY"
                    },
                    {
                      "default": "--with-editable $REPOSITORY_DIRECTORY",
                      "description": "--with-editable $REPOSITORY_DIRECTORY",
                      "format": "string",
                      "is_required": true,
                      "name": "--with-editable $REPOSITORY_DIRECTORY",
                      "type": "named",
                      "value": "--with-editable $REPOSITORY_DIRECTORY",
                      "value_hint": "$REPOSITORY_DIRECTORY"
                    },
                    {
                      "default": "--python 3.13",
                      "description": "--python 3.13",
                      "format": "string",
                      "is_required": true,
                      "name": "--python 3.13",
                      "type": "named",
                      "value": "--python 3.13",
                      "value_hint": "3.13"
                    },
                    {
                      "default": "mcp-aiven",
                      "description": "mcp-aiven",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp-aiven",
                      "value_hint": "mcp-aiven"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.4"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "947751392",
                "source": "github",
                "url": "https://github.com/Aiven-Open/mcp-aiven"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List all projects on your Aiven account.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_projects"
                },
                {
                  "description": "List all services in a specific Aiven project.",
                  "inputschema": {
                    "properties": {
                      "project_name": {
                        "description": "Name of the Aiven project to list services for.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_name"
                    ],
                    "type": "object"
                  },
                  "name": "list_services"
                },
                {
                  "description": "Get the detail of your service in a specific Aiven project.",
                  "inputschema": {
                    "properties": {
                      "project_name": {
                        "description": "Name of the Aiven project.",
                        "type": "string"
                      },
                      "service_name": {
                        "description": "Name of the service within the project.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_name",
                      "service_name"
                    ],
                    "type": "object"
                  },
                  "name": "get_service_details"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:01Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "AshDevFr": {
      "mcpproviderid": "AshDevFr",
      "self": "#/mcpproviders/AshDevFr",
      "xid": "/mcpproviders/AshDevFr",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:33.652239067Z",
      "modifiedat": "2025-05-26T16:41:33.652239067Z",

      "serversurl": "#/mcpproviders/AshDevFr/servers",
      "servers": {
        "discourse-mcp-server": {
          "serverid": "discourse-mcp-server",
          "self": "#/mcpproviders/AshDevFr/servers/discourse-mcp-server",
          "xid": "/mcpproviders/AshDevFr/servers/discourse-mcp-server",

          "metaurl": "#/mcpproviders/AshDevFr/servers/discourse-mcp-server/meta",
          "meta": {
            "serverid": "discourse-mcp-server",
            "self": "#/mcpproviders/AshDevFr/servers/discourse-mcp-server/meta",
            "xid": "/mcpproviders/AshDevFr/servers/discourse-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:33.652239067Z",
            "modifiedat": "2025-05-26T16:41:33.652239067Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/AshDevFr/servers/discourse-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/AshDevFr/servers/discourse-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "discourse-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/AshDevFr/servers/discourse-mcp-server/versions/1",
              "xid": "/mcpproviders/AshDevFr/servers/discourse-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.ashdevfr/discourse-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:33.652239067Z",
              "modifiedat": "2025-05-26T16:41:33.652239067Z",
              "ancestor": "1",
              "id": "dedc68af-03ef-49ce-a331-e4717b96f693",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "https://try.discourse.org",
                      "name": "DISCOURSE_API_URL"
                    },
                    {
                      "description": "1234",
                      "name": "DISCOURSE_API_KEY"
                    },
                    {
                      "description": "ash",
                      "name": "DISCOURSE_API_USERNAME"
                    }
                  ],
                  "name": "@ashdev/discourse-mcp-server",
                  "registry_name": "npm",
                  "version": "1.0.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "946264788",
                "source": "github",
                "url": "https://github.com/AshDevFr/discourse-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Search Discourse posts",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "Query",
                        "minLength": 5,
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_posts"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:59Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "AshikNesin": {
      "mcpproviderid": "AshikNesin",
      "self": "#/mcpproviders/AshikNesin",
      "xid": "/mcpproviders/AshikNesin",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:24.34295834Z",
      "modifiedat": "2025-05-26T16:41:24.34295834Z",

      "serversurl": "#/mcpproviders/AshikNesin/servers",
      "servers": {
        "pushover-mcp": {
          "serverid": "pushover-mcp",
          "self": "#/mcpproviders/AshikNesin/servers/pushover-mcp",
          "xid": "/mcpproviders/AshikNesin/servers/pushover-mcp",

          "metaurl": "#/mcpproviders/AshikNesin/servers/pushover-mcp/meta",
          "meta": {
            "serverid": "pushover-mcp",
            "self": "#/mcpproviders/AshikNesin/servers/pushover-mcp/meta",
            "xid": "/mcpproviders/AshikNesin/servers/pushover-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:24.34295834Z",
            "modifiedat": "2025-05-26T16:41:24.34295834Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/AshikNesin/servers/pushover-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/AshikNesin/servers/pushover-mcp/versions",
          "versions": {
            "1": {
              "serverid": "pushover-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/AshikNesin/servers/pushover-mcp/versions/1",
              "xid": "/mcpproviders/AshikNesin/servers/pushover-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ashiknesin/pushover-mcp",
              "isdefault": true,
              "description": "A MCP implementation for sending notifications via Pushover",
              "createdat": "2025-05-26T16:41:24.34295834Z",
              "modifiedat": "2025-05-26T16:41:24.34295834Z",
              "ancestor": "1",
              "id": "61ffe82e-5288-4af8-a45f-9a0907c941de",
              "packages": [
                {
                  "name": "pushover-mcp",
                  "package_arguments": [
                    {
                      "default": "start",
                      "description": "start",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "start",
                      "value_hint": "start"
                    },
                    {
                      "default": "--token YOUR_TOKEN",
                      "description": "--token YOUR_TOKEN",
                      "format": "string",
                      "is_required": true,
                      "name": "--token YOUR_TOKEN",
                      "type": "named",
                      "value": "--token YOUR_TOKEN",
                      "value_hint": "YOUR_TOKEN"
                    },
                    {
                      "default": "--user YOUR_USER",
                      "description": "--user YOUR_USER",
                      "format": "string",
                      "is_required": true,
                      "name": "--user YOUR_USER",
                      "type": "named",
                      "value": "--user YOUR_USER",
                      "value_hint": "YOUR_USER"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "943326406",
                "source": "github",
                "url": "https://github.com/AshikNesin/pushover-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Sends a notification via Pushover.",
                  "inputschema": {
                    "properties": {
                      "device": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      },
                      "priority": {
                        "type": "number"
                      },
                      "sound": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "url_title": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "message"
                    ],
                    "type": "object"
                  },
                  "name": "send"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:59Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "AudienseCo": {
      "mcpproviderid": "AudienseCo",
      "self": "#/mcpproviders/AudienseCo",
      "xid": "/mcpproviders/AudienseCo",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:26.911731598Z",
      "modifiedat": "2025-05-26T16:41:26.911731598Z",

      "serversurl": "#/mcpproviders/AudienseCo/servers",
      "servers": {
        "mcp-audiense-insights": {
          "serverid": "mcp-audiense-insights",
          "self": "#/mcpproviders/AudienseCo/servers/mcp-audiense-insights",
          "xid": "/mcpproviders/AudienseCo/servers/mcp-audiense-insights",

          "metaurl": "#/mcpproviders/AudienseCo/servers/mcp-audiense-insights/meta",
          "meta": {
            "serverid": "mcp-audiense-insights",
            "self": "#/mcpproviders/AudienseCo/servers/mcp-audiense-insights/meta",
            "xid": "/mcpproviders/AudienseCo/servers/mcp-audiense-insights/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:26.911731598Z",
            "modifiedat": "2025-05-26T16:41:26.911731598Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/AudienseCo/servers/mcp-audiense-insights/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/AudienseCo/servers/mcp-audiense-insights/versions",
          "versions": {
            "1": {
              "serverid": "mcp-audiense-insights",
              "versionid": "1",
              "self": "#/mcpproviders/AudienseCo/servers/mcp-audiense-insights/versions/1",
              "xid": "/mcpproviders/AudienseCo/servers/mcp-audiense-insights/versions/1",
              "epoch": 1,
              "name": "io.github.audienseco/mcp-audiense-insights",
              "isdefault": true,
              "description": "Audiense Insights MCP Server is a server based on the Model Context Protocol (MCP) that allows Claude and other MCP-compatible clients to interact with your Audiense Insights account",
              "createdat": "2025-05-26T16:41:26.911731598Z",
              "modifiedat": "2025-05-26T16:41:26.911731598Z",
              "ancestor": "1",
              "id": "d85fa87b-48e1-4b81-8408-9d0c446f7de3",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_client_id_here",
                      "name": "AUDIENSE_CLIENT_ID"
                    },
                    {
                      "description": "your_client_secret_here",
                      "name": "AUDIENSE_CLIENT_SECRET"
                    },
                    {
                      "description": "your_token_here",
                      "name": "TWITTER_BEARER_TOKEN"
                    }
                  ],
                  "name": "mcp-audiense-insights",
                  "registry_name": "npm",
                  "version": "0.2.0"
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "The name or id of the Audiense Insights report.",
                      "name": "reportName",
                      "required": true
                    }
                  ],
                  "description": "A prompt to extract marketing insights and audience understanding from Audiense reports through demographic, cultural, influencer, and content analysis.",
                  "name": "audiense-demo"
                },
                {
                  "arguments": [
                    {
                      "description": "The name or id of the Audiense Insights report.",
                      "name": "reportName",
                      "required": true
                    }
                  ],
                  "description": "A prompt to extract marketing insights and audience understanding from Audiense reports through demographic, cultural, influencer, and content analysis.",
                  "name": "audiense-demo2"
                },
                {
                  "arguments": [
                    {
                      "description": "The name or ID of the Audiense Insights report for the first brand to analyze.",
                      "name": "brand1",
                      "required": true
                    },
                    {
                      "description": "The name or ID of the Audiense Insights report for the second brand to analyze.",
                      "name": "brand2",
                      "required": true
                    }
                  ],
                  "description": "A prompt to match and compare audience segments across Audiense reports, identifying similarities, unique traits, and key insights based on demographics, interests, influencers, and engagement patterns.",
                  "name": "segment-matching"
                }
              ],
              "repository": {
                "id": "925304505",
                "source": "github",
                "url": "https://github.com/AudienseCo/mcp-audiense-insights"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieves the list of Audiense insights reports owned by the authenticated user.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-reports"
                },
                {
                  "description": "Retrieves detailed information about a specific intelligence report, including its status, segmentation type, audience size, segments, and access links.",
                  "inputschema": {
                    "properties": {
                      "report_id": {
                        "description": "The ID of the intelligence report.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "report_id"
                    ],
                    "type": "object"
                  },
                  "name": "get-report-info"
                },
                {
                  "description": "Retrieves aggregated insights for a given audience ID, providing statistical distributions across various attributes. Available insights include demographics (e.g., gender, age, country), behavioral traits (e.g., active hours, platform usage), psychographics (e.g., personality traits, interests), and socioeconomic factors (e.g., income, education status).",
                  "inputschema": {
                    "properties": {
                      "audience_insights_id": {
                        "description": "The ID of the audience insights.",
                        "type": "string"
                      },
                      "insights": {
                        "description": "Optional list of insight names to filter.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "audience_insights_id"
                    ],
                    "type": "object"
                  },
                  "name": "get-audience-insights"
                },
                {
                  "description": "Retrieves available baselines, optionally filtered by country.",
                  "inputschema": {
                    "properties": {
                      "country": {
                        "description": "ISO country code to filter by.",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-baselines"
                },
                {
                  "description": "Retrieves the list of available affinity categories that can be used as the categories parameter in the compare-audience-influencers tool.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-categories"
                },
                {
                  "description": "Compares the influencers of an audience with a baseline audience. The baseline is determined as follows: If the selection was the full audience and a single country represents more than 50% of the audience, that country is used as the baseline. Otherwise, the Global baseline is applied. If the selection was a specific segment, the full audience is used as the baseline. Each influencer comparison includes: - Affinity (%) - The level of alignment between the influencer and the audience. Baseline Affinity (%) - The influencer’s affinity within the baseline audience. Uniqueness Score - A measure of how distinct the influencer is within the selected audience compared to the baseline.",
                  "inputschema": {
                    "properties": {
                      "audience_influencers_id": {
                        "description": "The ID of the audience influencers.",
                        "type": "string"
                      },
                      "baseline_audience_influencers_id": {
                        "description": "The ID of the baseline audience influencers.",
                        "type": "string"
                      },
                      "bio_keyword": {
                        "description": "Keyword to filter influencers by their biography.",
                        "type": "string"
                      },
                      "categories": {
                        "description": "Filter influencers by categories.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "count": {
                        "description": "Number of items per page (default: 200).",
                        "type": "number"
                      },
                      "countries": {
                        "description": "Filter influencers by country ISO codes.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "cursor": {
                        "description": "Cursor for pagination.",
                        "type": "number"
                      },
                      "entity_type": {
                        "description": "Filter by entity type (person or brand).",
                        "enum": [
                          "person",
                          "brand"
                        ],
                        "type": "string"
                      },
                      "followers_max": {
                        "description": "Maximum number of followers.",
                        "type": "number"
                      },
                      "followers_min": {
                        "description": "Minimum number of followers.",
                        "type": "number"
                      }
                    },
                    "required": [
                      "audience_influencers_id",
                      "baseline_audience_influencers_id"
                    ],
                    "type": "object"
                  },
                  "name": "compare-audience-influencers"
                },
                {
                  "description": "Retrieves audience content engagement details for a given audience. This tool provides a detailed breakdown of the content an audience interacts with, including: - Liked Content: Popular posts, top domains, top emojis, top hashtags, top links, top media, and a word cloud. - Shared Content: Content that the audience shares, categorized similarly to liked content. - Influential Content: Content from influential accounts that impact the audience, with similar categorization. Each category contains: popularPost, topDomains, topEmojis, topHashtags, topLinks, topMedia, wordcloud.",
                  "inputschema": {
                    "properties": {
                      "audience_content_id": {
                        "description": "The ID of the audience content to retrieve.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "audience_content_id"
                    ],
                    "type": "object"
                  },
                  "name": "get-audience-content"
                },
                {
                  "description": "Generates a comprehensive summary of an Audiense report, including segment details, top insights, and influencers.",
                  "inputschema": {
                    "properties": {
                      "report_id": {
                        "description": "The ID of the intelligence report to summarize.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "report_id"
                    ],
                    "type": "object"
                  },
                  "name": "report-summary"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:26Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Automata-Labs-team": {
      "mcpproviderid": "Automata-Labs-team",
      "self": "#/mcpproviders/Automata-Labs-team",
      "xid": "/mcpproviders/Automata-Labs-team",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:45.318750893Z",
      "modifiedat": "2025-05-26T16:41:45.318750893Z",

      "serversurl": "#/mcpproviders/Automata-Labs-team/servers",
      "servers": {
        "code-sandbox-mcp": {
          "serverid": "code-sandbox-mcp",
          "self": "#/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp",
          "xid": "/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp",

          "metaurl": "#/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp/meta",
          "meta": {
            "serverid": "code-sandbox-mcp",
            "self": "#/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp/meta",
            "xid": "/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:45.318750893Z",
            "modifiedat": "2025-05-26T16:41:45.318750893Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp/versions",
          "versions": {
            "1": {
              "serverid": "code-sandbox-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp/versions/1",
              "xid": "/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.automata-labs-team/code-sandbox-mcp",
              "isdefault": true,
              "description": "An MCP server to create secure code sandbox environment for executing code within Docker containers. This MCP server provides AI applications with a safe and isolated environment for running code while maintaining security through containerization.",
              "createdat": "2025-05-26T16:41:45.318750893Z",
              "modifiedat": "2025-05-26T16:41:45.318750893Z",
              "ancestor": "1",
              "id": "7e1d97cc-ef73-480a-a9f3-c9d94c05a481",
              "packages": [
                {
                  "name": "Automata-Labs-team/code-sandbox-mcp",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "922445184",
                "source": "github",
                "url": "https://github.com/Automata-Labs-team/code-sandbox-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Initialize a new compute environment for code execution. Creates a container based on the specified Docker image.",
                  "inputschema": {
                    "properties": {
                      "image": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "sandbox_initialize"
                },
                {
                  "description": "Copy a directory to the sandboxed filesystem.",
                  "inputschema": {
                    "properties": {
                      "container_id": {
                        "type": "string"
                      },
                      "dest_dir": {
                        "type": "string"
                      },
                      "local_src_dir": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "container_id",
                      "local_src_dir"
                    ],
                    "type": "object"
                  },
                  "name": "copy_project"
                },
                {
                  "description": "Write a file to the sandboxed filesystem.",
                  "inputschema": {
                    "properties": {
                      "container_id": {
                        "type": "string"
                      },
                      "dest_dir": {
                        "type": "string"
                      },
                      "file_contents": {
                        "type": "string"
                      },
                      "file_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "container_id",
                      "file_name",
                      "file_contents"
                    ],
                    "type": "object"
                  },
                  "name": "write_file"
                },
                {
                  "description": "Execute commands in the sandboxed environment.",
                  "inputschema": {
                    "properties": {
                      "commands": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "container_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "container_id",
                      "commands"
                    ],
                    "type": "object"
                  },
                  "name": "sandbox_exec"
                },
                {
                  "description": "Copy a single file to the sandboxed filesystem.",
                  "inputschema": {
                    "properties": {
                      "container_id": {
                        "type": "string"
                      },
                      "dest_path": {
                        "type": "string"
                      },
                      "local_src_file": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "container_id",
                      "local_src_file"
                    ],
                    "type": "object"
                  },
                  "name": "copy_file"
                },
                {
                  "description": "Stop and remove a running container sandbox.",
                  "inputschema": {
                    "properties": {
                      "container_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "container_id"
                    ],
                    "type": "object"
                  },
                  "name": "sandbox_stop"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:40Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Bankless": {
      "mcpproviderid": "Bankless",
      "self": "#/mcpproviders/Bankless",
      "xid": "/mcpproviders/Bankless",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:41.412703031Z",
      "modifiedat": "2025-05-26T16:41:41.412703031Z",

      "serversurl": "#/mcpproviders/Bankless/servers",
      "servers": {
        "onchain-mcp": {
          "serverid": "onchain-mcp",
          "self": "#/mcpproviders/Bankless/servers/onchain-mcp",
          "xid": "/mcpproviders/Bankless/servers/onchain-mcp",

          "metaurl": "#/mcpproviders/Bankless/servers/onchain-mcp/meta",
          "meta": {
            "serverid": "onchain-mcp",
            "self": "#/mcpproviders/Bankless/servers/onchain-mcp/meta",
            "xid": "/mcpproviders/Bankless/servers/onchain-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:41.412703031Z",
            "modifiedat": "2025-05-26T16:41:41.412703031Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Bankless/servers/onchain-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Bankless/servers/onchain-mcp/versions",
          "versions": {
            "1": {
              "serverid": "onchain-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/Bankless/servers/onchain-mcp/versions/1",
              "xid": "/mcpproviders/Bankless/servers/onchain-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.bankless/onchain-mcp",
              "isdefault": true,
              "description": "Bringing the bankless onchain API to MCP",
              "createdat": "2025-05-26T16:41:41.412703031Z",
              "modifiedat": "2025-05-26T16:41:41.412703031Z",
              "ancestor": "1",
              "id": "2535daf3-637b-40d1-a4c2-41ef60a726b8",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_api_token_here",
                      "name": "BANKLESS_API_TOKEN"
                    }
                  ],
                  "name": "@bankless/onchain-mcp",
                  "registry_name": "npm",
                  "version": "1.0.6"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "946011336",
                "source": "github",
                "url": "https://github.com/Bankless/onchain-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Read contract state from a blockchain. important:  \n                \n                In case of a tuple, don't use type tuple, but specify the inner types (found in the source) in order. For nested structs, include the substructs types.\n    \n    Example: \n    struct DataTypeA {\n    DataTypeB b;\n    //the liquidity index. Expressed in ray\n    uint128 liquidityIndex;\n    }\n    \n    struct DataTypeB {\n    address token;\n    }\n    \n    results in outputs for function with return type DataTypeA (tuple in abi): outputs: [{\"type\": \"address\"}, {\"type\": \"uint128\"}]",
                  "inputschema": {
                    "properties": {
                      "contract": {
                        "type": "string"
                      },
                      "inputs": {
                        "items": {
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "value": {}
                          },
                          "required": [
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "method": {
                        "type": "string"
                      },
                      "network": {
                        "type": "string"
                      },
                      "outputs": {
                        "items": {
                          "properties": {
                            "type": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "network",
                      "contract",
                      "method",
                      "inputs",
                      "outputs"
                    ],
                    "type": "object"
                  },
                  "name": "read_contract"
                },
                {
                  "description": "Gets the proxy address for a given network and contract",
                  "inputschema": {
                    "properties": {
                      "contract": {
                        "type": "string"
                      },
                      "network": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "contract"
                    ],
                    "type": "object"
                  },
                  "name": "get_proxy"
                },
                {
                  "description": "Gets the ABI for a given contract on a specific network",
                  "inputschema": {
                    "properties": {
                      "contract": {
                        "type": "string"
                      },
                      "network": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "contract"
                    ],
                    "type": "object"
                  },
                  "name": "get_abi"
                },
                {
                  "description": "Gets the source code for a given contract on a specific network",
                  "inputschema": {
                    "properties": {
                      "contract": {
                        "type": "string"
                      },
                      "network": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "contract"
                    ],
                    "type": "object"
                  },
                  "name": "get_source"
                },
                {
                  "description": "Fetches event logs for a given network and filter criteria",
                  "inputschema": {
                    "properties": {
                      "addresses": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "fromBlock": {
                        "type": [
                          "string",
                          "number",
                          "null"
                        ]
                      },
                      "network": {
                        "type": "string"
                      },
                      "optionalTopics": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "toBlock": {
                        "type": [
                          "string",
                          "number",
                          "null"
                        ]
                      },
                      "topic": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "addresses",
                      "topic"
                    ],
                    "type": "object"
                  },
                  "name": "get_events"
                },
                {
                  "description": "Builds an event topic signature based on event name and arguments",
                  "inputschema": {
                    "properties": {
                      "arguments": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "name": {
                        "type": "string"
                      },
                      "network": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "name",
                      "arguments"
                    ],
                    "type": "object"
                  },
                  "name": "build_event_topic"
                },
                {
                  "description": "Gets transaction history for a user and optional contract",
                  "inputschema": {
                    "properties": {
                      "contract": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "includeData": {
                        "type": [
                          "boolean",
                          "null"
                        ]
                      },
                      "methodId": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "network": {
                        "type": "string"
                      },
                      "startBlock": {
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "user": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "user"
                    ],
                    "type": "object"
                  },
                  "name": "get_transaction_history_for_user"
                },
                {
                  "description": "Gets detailed information about a specific transaction",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "type": "string"
                      },
                      "txHash": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "txHash"
                    ],
                    "type": "object"
                  },
                  "name": "get_transaction_info"
                },
                {
                  "description": "Gets all token balances for a given address on a specific network",
                  "inputschema": {
                    "properties": {
                      "address": {
                        "type": "string"
                      },
                      "network": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "address"
                    ],
                    "type": "object"
                  },
                  "name": "get_token_balances_on_network"
                },
                {
                  "description": "Gets detailed information about a specific block by number or hash",
                  "inputschema": {
                    "properties": {
                      "blockId": {
                        "type": [
                          "string",
                          "number"
                        ]
                      },
                      "network": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "blockId"
                    ],
                    "type": "object"
                  },
                  "name": "get_block_info"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:37Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ChristianHinge": {
      "mcpproviderid": "ChristianHinge",
      "self": "#/mcpproviders/ChristianHinge",
      "xid": "/mcpproviders/ChristianHinge",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:13.315860348Z",
      "modifiedat": "2025-05-26T16:42:13.315860348Z",

      "serversurl": "#/mcpproviders/ChristianHinge/servers",
      "servers": {
        "dicom-mcp": {
          "serverid": "dicom-mcp",
          "self": "#/mcpproviders/ChristianHinge/servers/dicom-mcp",
          "xid": "/mcpproviders/ChristianHinge/servers/dicom-mcp",

          "metaurl": "#/mcpproviders/ChristianHinge/servers/dicom-mcp/meta",
          "meta": {
            "serverid": "dicom-mcp",
            "self": "#/mcpproviders/ChristianHinge/servers/dicom-mcp/meta",
            "xid": "/mcpproviders/ChristianHinge/servers/dicom-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:13.315860348Z",
            "modifiedat": "2025-05-26T16:42:13.315860348Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ChristianHinge/servers/dicom-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ChristianHinge/servers/dicom-mcp/versions",
          "versions": {
            "1": {
              "serverid": "dicom-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ChristianHinge/servers/dicom-mcp/versions/1",
              "xid": "/mcpproviders/ChristianHinge/servers/dicom-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.christianhinge/dicom-mcp",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) for interacting with dicom servers (PACS etc.)",
              "createdat": "2025-05-26T16:42:13.315860348Z",
              "modifiedat": "2025-05-26T16:42:13.315860348Z",
              "ancestor": "1",
              "id": "c83f2ca0-ca97-43cf-8288-5ff4a0771e29",
              "packages": [
                {
                  "name": "dicom-mcp",
                  "package_arguments": [
                    {
                      "default": "--directory path/to/cloned/dicom-mcp",
                      "description": "Specify the directory to operate in",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory path/to/cloned/dicom-mcp",
                      "type": "named",
                      "value": "--directory path/to/cloned/dicom-mcp",
                      "value_hint": "path/to/cloned/dicom-mcp"
                    },
                    {
                      "default": "dicom-mcp",
                      "description": "Script or module to execute",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "dicom-mcp",
                      "value_hint": "dicom-mcp"
                    },
                    {
                      "default": "/path/to/your_config.yaml",
                      "description": "Path to the configuration YAML file",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "/path/to/your_config.yaml",
                      "value_hint": "/path/to/your_config.yaml"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "946779028",
                "source": "github",
                "url": "https://github.com/ChristianHinge/dicom-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Lists all configured DICOM nodes and calling AE titles",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_dicom_nodes"
                },
                {
                  "description": "Switches to a different configured DICOM node",
                  "inputschema": {
                    "properties": {
                      "node_name": {
                        "description": "Name of the node to switch to",
                        "type": "string"
                      }
                    },
                    "required": [
                      "node_name"
                    ],
                    "type": "object"
                  },
                  "name": "switch_dicom_node"
                },
                {
                  "description": "Switches to a different configured calling AE title",
                  "inputschema": {
                    "properties": {
                      "aet_name": {
                        "description": "Name of the calling AE title to switch to",
                        "type": "string"
                      }
                    },
                    "required": [
                      "aet_name"
                    ],
                    "type": "object"
                  },
                  "name": "switch_calling_aet"
                },
                {
                  "description": "Tests connectivity to the configured DICOM node using C-ECHO",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "verify_connection"
                },
                {
                  "description": "Search for patients matching specified criteria",
                  "inputschema": {
                    "properties": {
                      "additional_attributes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "attribute_preset": {
                        "type": "string"
                      },
                      "birth_date": {
                        "type": "string"
                      },
                      "exclude_attributes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "name_pattern": {
                        "description": "Patient name pattern (can include wildcards)",
                        "type": "string"
                      },
                      "patient_id": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "query_patients"
                },
                {
                  "description": "Search for studies matching specified criteria",
                  "inputschema": {
                    "properties": {
                      "accession_number": {
                        "type": "string"
                      },
                      "additional_attributes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "attribute_preset": {
                        "type": "string"
                      },
                      "exclude_attributes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "modality_in_study": {
                        "type": "string"
                      },
                      "patient_id": {
                        "type": "string"
                      },
                      "study_date": {
                        "type": "string"
                      },
                      "study_description": {
                        "type": "string"
                      },
                      "study_instance_uid": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "query_studies"
                },
                {
                  "description": "Search for series within a study",
                  "inputschema": {
                    "properties": {
                      "additional_attributes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "attribute_preset": {
                        "type": "string"
                      },
                      "exclude_attributes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "modality": {
                        "type": "string"
                      },
                      "series_description": {
                        "type": "string"
                      },
                      "series_instance_uid": {
                        "type": "string"
                      },
                      "series_number": {
                        "type": "string"
                      },
                      "study_instance_uid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "study_instance_uid"
                    ],
                    "type": "object"
                  },
                  "name": "query_series"
                },
                {
                  "description": "Search for instances within a series",
                  "inputschema": {
                    "properties": {
                      "additional_attributes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "attribute_preset": {
                        "type": "string"
                      },
                      "exclude_attributes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "instance_number": {
                        "type": "string"
                      },
                      "series_instance_uid": {
                        "type": "string"
                      },
                      "sop_instance_uid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "series_instance_uid"
                    ],
                    "type": "object"
                  },
                  "name": "query_instances"
                },
                {
                  "description": "Move a DICOM series to another DICOM node",
                  "inputschema": {
                    "properties": {
                      "destination_node": {
                        "type": "string"
                      },
                      "series_instance_uid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "destination_node",
                      "series_instance_uid"
                    ],
                    "type": "object"
                  },
                  "name": "move_series"
                },
                {
                  "description": "Move a DICOM study to another DICOM node",
                  "inputschema": {
                    "properties": {
                      "destination_node": {
                        "type": "string"
                      },
                      "study_instance_uid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "destination_node",
                      "study_instance_uid"
                    ],
                    "type": "object"
                  },
                  "name": "move_study"
                },
                {
                  "description": "Get all available attribute presets for DICOM queries",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_attribute_presets"
                },
                {
                  "description": "Retrieve a DICOM instance with encapsulated PDF and extract its text content",
                  "inputschema": {
                    "properties": {
                      "series_instance_uid": {
                        "type": "string"
                      },
                      "sop_instance_uid": {
                        "type": "string"
                      },
                      "study_instance_uid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "study_instance_uid",
                      "series_instance_uid",
                      "sop_instance_uid"
                    ],
                    "type": "object"
                  },
                  "name": "extract_pdf_text_from_dicom"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:48Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ChristophEnglisch": {
      "mcpproviderid": "ChristophEnglisch",
      "self": "#/mcpproviders/ChristophEnglisch",
      "xid": "/mcpproviders/ChristophEnglisch",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:24.867999214Z",
      "modifiedat": "2025-05-26T16:42:24.867999214Z",

      "serversurl": "#/mcpproviders/ChristophEnglisch/servers",
      "servers": {
        "keycloak-model-context-protocol": {
          "serverid": "keycloak-model-context-protocol",
          "self": "#/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol",
          "xid": "/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol",

          "metaurl": "#/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol/meta",
          "meta": {
            "serverid": "keycloak-model-context-protocol",
            "self": "#/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol/meta",
            "xid": "/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:24.867999214Z",
            "modifiedat": "2025-05-26T16:42:24.867999214Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol/versions",
          "versions": {
            "1": {
              "serverid": "keycloak-model-context-protocol",
              "versionid": "1",
              "self": "#/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol/versions/1",
              "xid": "/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol/versions/1",
              "epoch": 1,
              "name": "io.github.christophenglisch/keycloak-model-context-protocol",
              "isdefault": true,
              "description": "MCP server implementation for Keycloak user management. Enables AI-powered administration of Keycloak users and realms through the Model Context Protocol (MCP). Seamlessly integrates with Claude Desktop and other MCP clients for automated user operations.",
              "createdat": "2025-05-26T16:42:24.867999214Z",
              "modifiedat": "2025-05-26T16:42:24.867999214Z",
              "ancestor": "1",
              "id": "ac8e4d2b-da97-4a40-934b-1c516b4250fe",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "http://localhost:8080",
                      "name": "KEYCLOAK_URL"
                    },
                    {
                      "description": "admin",
                      "name": "KEYCLOAK_ADMIN"
                    },
                    {
                      "description": "admin",
                      "name": "KEYCLOAK_ADMIN_PASSWORD"
                    }
                  ],
                  "name": "keycloak-model-context-protocol",
                  "package_arguments": [
                    {
                      "default": "path/to/dist/index.js",
                      "description": "Second positional argument to the command",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "path/to/dist/index.js",
                      "value_hint": "path/to/dist/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.0.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "912825504",
                "source": "github",
                "url": "https://github.com/ChristophEnglisch/keycloak-model-context-protocol"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Create a new user in a specific realm",
                  "inputschema": {
                    "properties": {
                      "email": {
                        "format": "email",
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "realm": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "realm",
                      "username",
                      "email",
                      "firstName",
                      "lastName"
                    ],
                    "type": "object"
                  },
                  "name": "create-user"
                },
                {
                  "description": "Delete a user from a specific realm",
                  "inputschema": {
                    "properties": {
                      "realm": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "realm",
                      "userId"
                    ],
                    "type": "object"
                  },
                  "name": "delete-user"
                },
                {
                  "description": "List all available realms",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list-realms"
                },
                {
                  "description": "List users in a specific realm",
                  "inputschema": {
                    "properties": {
                      "realm": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "realm"
                    ],
                    "type": "object"
                  },
                  "name": "list-users"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:50Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ChronulusAI": {
      "mcpproviderid": "ChronulusAI",
      "self": "#/mcpproviders/ChronulusAI",
      "xid": "/mcpproviders/ChronulusAI",
      "epoch": 1,
      "name": "Chronulus AI",
      "description": "Forecast and predict anything with Chronulus AI Agents.",
      "documentation": "https://github.com/ChronulusAI",
      "createdat": "2025-05-26T16:42:00.197211294Z",
      "modifiedat": "2025-05-26T16:42:00.197211294Z",

      "serversurl": "#/mcpproviders/ChronulusAI/servers",
      "servers": {},
      "serverscount": 0
    },
    "CircleCI-Public": {
      "mcpproviderid": "CircleCI-Public",
      "self": "#/mcpproviders/CircleCI-Public",
      "xid": "/mcpproviders/CircleCI-Public",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:25.329037171Z",
      "modifiedat": "2025-05-26T16:41:25.329037171Z",

      "serversurl": "#/mcpproviders/CircleCI-Public/servers",
      "servers": {
        "mcp-server-circleci": {
          "serverid": "mcp-server-circleci",
          "self": "#/mcpproviders/CircleCI-Public/servers/mcp-server-circleci",
          "xid": "/mcpproviders/CircleCI-Public/servers/mcp-server-circleci",

          "metaurl": "#/mcpproviders/CircleCI-Public/servers/mcp-server-circleci/meta",
          "meta": {
            "serverid": "mcp-server-circleci",
            "self": "#/mcpproviders/CircleCI-Public/servers/mcp-server-circleci/meta",
            "xid": "/mcpproviders/CircleCI-Public/servers/mcp-server-circleci/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:25.329037171Z",
            "modifiedat": "2025-05-26T16:41:25.329037171Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/CircleCI-Public/servers/mcp-server-circleci/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/CircleCI-Public/servers/mcp-server-circleci/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-circleci",
              "versionid": "1",
              "self": "#/mcpproviders/CircleCI-Public/servers/mcp-server-circleci/versions/1",
              "xid": "/mcpproviders/CircleCI-Public/servers/mcp-server-circleci/versions/1",
              "epoch": 1,
              "name": "io.github.circleci-public/mcp-server-circleci",
              "isdefault": true,
              "description": "A specialized server implementation for the Model Context Protocol (MCP) designed to integrate with CircleCI's development workflow. This project serves as a bridge between CircleCI's infrastructure and the Model Context Protocol, enabling enhanced AI-powered development experiences.",
              "createdat": "2025-05-26T16:41:25.329037171Z",
              "modifiedat": "2025-05-26T16:41:25.329037171Z",
              "ancestor": "1",
              "id": "a48ff624-6d95-4b8e-a0ed-498c4d838411",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-circleci-token",
                      "name": "CIRCLECI_TOKEN"
                    },
                    {
                      "description": "https://circleci.com",
                      "name": "CIRCLECI_BASE_URL"
                    }
                  ],
                  "name": "@circleci/mcp-server-circleci",
                  "registry_name": "npm",
                  "version": "0.7.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "955501958",
                "source": "github",
                "url": "https://github.com/CircleCI-Public/mcp-server-circleci"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:58Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ClickHouse": {
      "mcpproviderid": "ClickHouse",
      "self": "#/mcpproviders/ClickHouse",
      "xid": "/mcpproviders/ClickHouse",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:09.566509022Z",
      "modifiedat": "2025-05-26T16:42:09.566509022Z",

      "serversurl": "#/mcpproviders/ClickHouse/servers",
      "servers": {
        "mcp-clickhouse": {
          "serverid": "mcp-clickhouse",
          "self": "#/mcpproviders/ClickHouse/servers/mcp-clickhouse",
          "xid": "/mcpproviders/ClickHouse/servers/mcp-clickhouse",

          "metaurl": "#/mcpproviders/ClickHouse/servers/mcp-clickhouse/meta",
          "meta": {
            "serverid": "mcp-clickhouse",
            "self": "#/mcpproviders/ClickHouse/servers/mcp-clickhouse/meta",
            "xid": "/mcpproviders/ClickHouse/servers/mcp-clickhouse/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:09.566509022Z",
            "modifiedat": "2025-05-26T16:42:09.566509022Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ClickHouse/servers/mcp-clickhouse/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ClickHouse/servers/mcp-clickhouse/versions",
          "versions": {
            "1": {
              "serverid": "mcp-clickhouse",
              "versionid": "1",
              "self": "#/mcpproviders/ClickHouse/servers/mcp-clickhouse/versions/1",
              "xid": "/mcpproviders/ClickHouse/servers/mcp-clickhouse/versions/1",
              "epoch": 1,
              "name": "io.github.clickhouse/mcp-clickhouse",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:09.566509022Z",
              "modifiedat": "2025-05-26T16:42:09.566509022Z",
              "ancestor": "1",
              "id": "98259539-3c6f-4462-b2b6-9a2567ff0545",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cclickhouse-host\u003e",
                      "name": "CLICKHOUSE_HOST"
                    },
                    {
                      "description": "\u003cclickhouse-user\u003e",
                      "name": "CLICKHOUSE_USER"
                    },
                    {
                      "description": "\u003cclickhouse-password\u003e",
                      "name": "CLICKHOUSE_PASSWORD"
                    },
                    {
                      "description": "\u003coptional-database\u003e",
                      "name": "CLICKHOUSE_DATABASE"
                    }
                  ],
                  "name": "mcp-clickhouse",
                  "package_arguments": [
                    {
                      "default": "--with mcp-clickhouse",
                      "description": "Use the specified runtime feature",
                      "format": "string",
                      "is_required": true,
                      "name": "--with mcp-clickhouse",
                      "type": "named",
                      "value": "--with mcp-clickhouse",
                      "value_hint": "mcp-clickhouse"
                    },
                    {
                      "default": "--python 3.13",
                      "description": "Specify Python version",
                      "format": "string",
                      "is_required": true,
                      "name": "--python 3.13",
                      "type": "named",
                      "value": "--python 3.13",
                      "value_hint": "3.13"
                    },
                    {
                      "default": "mcp-clickhouse",
                      "description": "Positional argument to run (script or module)",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp-clickhouse",
                      "value_hint": "mcp-clickhouse"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.7"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "908231244",
                "source": "github",
                "url": "https://github.com/ClickHouse/mcp-clickhouse"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Run a SELECT query in a ClickHouse database",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SELECT query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "run_select_query"
                },
                {
                  "description": "List available ClickHouse databases",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_databases"
                },
                {
                  "description": "List available ClickHouse tables in a database, including schema, comment, row count, and column count.",
                  "inputschema": {
                    "properties": {
                      "database": {
                        "description": "The name of the database",
                        "type": "string"
                      },
                      "like": {
                        "description": "Optional pattern to filter tables",
                        "type": "string"
                      }
                    },
                    "required": [
                      "database"
                    ],
                    "type": "object"
                  },
                  "name": "list_tables"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:02Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "CodeLogicIncEngineering": {
      "mcpproviderid": "CodeLogicIncEngineering",
      "self": "#/mcpproviders/CodeLogicIncEngineering",
      "xid": "/mcpproviders/CodeLogicIncEngineering",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:08.969461524Z",
      "modifiedat": "2025-05-26T16:42:08.969461524Z",

      "serversurl": "#/mcpproviders/CodeLogicIncEngineering/servers",
      "servers": {
        "codelogic-mcp-server": {
          "serverid": "codelogic-mcp-server",
          "self": "#/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server",
          "xid": "/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server",

          "metaurl": "#/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server/meta",
          "meta": {
            "serverid": "codelogic-mcp-server",
            "self": "#/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server/meta",
            "xid": "/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:08.969461524Z",
            "modifiedat": "2025-05-26T16:42:08.969461524Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "codelogic-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server/versions/1",
              "xid": "/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.codelogicincengineering/codelogic-mcp-server",
              "isdefault": true,
              "description": "An MCP Server to utilize Codelogic's rich software dependency data in your AI programming assistant.",
              "createdat": "2025-05-26T16:42:08.969461524Z",
              "modifiedat": "2025-05-26T16:42:08.969461524Z",
              "ancestor": "1",
              "id": "6e6e3083-47bf-47da-9d0f-14805de093a9",
              "packages": [
                {
                  "name": "codelogic-mcp-server",
                  "registry_name": "unknown",
                  "version": "1.0.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "959229901",
                "source": "github",
                "url": "https://github.com/CodeLogicIncEngineering/codelogic-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Analyze impacts of modifying a specific method within a given class or type.\nRecommended workflow:\n1. Use this tool before implementing code changes\n2. Run the tool against methods or functions that are being modified\n3. Carefully review the impact analysis results to understand potential downstream effects\nParticularly crucial when AI-suggested modifications are being considered.",
                  "inputschema": {
                    "properties": {
                      "class": {
                        "description": "Name of the class containing the method",
                        "type": "string"
                      },
                      "method": {
                        "description": "Name of the method being analyzed",
                        "type": "string"
                      }
                    },
                    "required": [
                      "method",
                      "class"
                    ],
                    "type": "object"
                  },
                  "name": "codelogic-method-impact"
                },
                {
                  "description": "Analyze impacts between code and database entities.\nRecommended workflow:\n1. Use this tool before implementing code or database changes\n2. Search for the relevant database entity\n3. Review the impact analysis to understand which code depends on this database object and vice versa\nParticularly crucial when AI-suggested modifications are being considered or when modifying SQL code.",
                  "inputschema": {
                    "properties": {
                      "entity_type": {
                        "description": "Type of database entity to search for (column, table, or view)",
                        "enum": [
                          "column",
                          "table",
                          "view"
                        ],
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the database entity to search for",
                        "type": "string"
                      },
                      "table_or_view": {
                        "description": "Name of the table or view containing the column (required for columns only)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "entity_type",
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "codelogic-database-impact"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:09Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "CoderGamester": {
      "mcpproviderid": "CoderGamester",
      "self": "#/mcpproviders/CoderGamester",
      "xid": "/mcpproviders/CoderGamester",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:11.998306112Z",
      "modifiedat": "2025-05-26T16:42:11.998306112Z",

      "serversurl": "#/mcpproviders/CoderGamester/servers",
      "servers": {
        "mcp-unity": {
          "serverid": "mcp-unity",
          "self": "#/mcpproviders/CoderGamester/servers/mcp-unity",
          "xid": "/mcpproviders/CoderGamester/servers/mcp-unity",

          "metaurl": "#/mcpproviders/CoderGamester/servers/mcp-unity/meta",
          "meta": {
            "serverid": "mcp-unity",
            "self": "#/mcpproviders/CoderGamester/servers/mcp-unity/meta",
            "xid": "/mcpproviders/CoderGamester/servers/mcp-unity/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:11.998306112Z",
            "modifiedat": "2025-05-26T16:42:11.998306112Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/CoderGamester/servers/mcp-unity/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/CoderGamester/servers/mcp-unity/versions",
          "versions": {
            "1": {
              "serverid": "mcp-unity",
              "versionid": "1",
              "self": "#/mcpproviders/CoderGamester/servers/mcp-unity/versions/1",
              "xid": "/mcpproviders/CoderGamester/servers/mcp-unity/versions/1",
              "epoch": 1,
              "name": "io.github.codergamester/mcp-unity",
              "isdefault": true,
              "description": "MCP Server to integrate Unity Editor game engine with different AI Model clients (e.g. Claude Desktop, Windsurf, Cursor)",
              "createdat": "2025-05-26T16:42:11.998306112Z",
              "modifiedat": "2025-05-26T16:42:11.998306112Z",
              "ancestor": "1",
              "id": "3cccaee3-1b35-4a97-bc23-d1a8603aa366",
              "packages": [
                {
                  "name": "com.gamelovers.mcp-unity",
                  "registry_name": "unknown",
                  "version": "1.0.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "948148972",
                "source": "github",
                "url": "https://github.com/CoderGamester/mcp-unity"
              },
              "resources": [
                {
                  "description": "Retrieve tests from Unity's Test Runner",
                  "mimetype": "application/json",
                  "name": "get_tests",
                  "uritemplate": "unity://tests/{testMode}"
                },
                {
                  "description": "Retrieve a GameObject by ID or path",
                  "mimetype": "application/json",
                  "name": "get_gameobject",
                  "uritemplate": "unity://gameobject/{id}"
                },
                {
                  "description": "Retrieve Unity menu items",
                  "mimetype": "application/json",
                  "name": "get_menuitems",
                  "uritemplate": "unity://menuitems"
                },
                {
                  "description": "Retrieve Unity console logs",
                  "mimetype": "application/json",
                  "name": "get_consolelogs",
                  "uritemplate": "unity://consolelogs"
                },
                {
                  "description": "Retrieve Unity scene hierarchy",
                  "mimetype": "application/json",
                  "name": "get_hierarchy",
                  "uritemplate": "unity://hierarchy"
                },
                {
                  "description": "Retrieve Unity project packages",
                  "mimetype": "application/json",
                  "name": "get_packages",
                  "uritemplate": "unity://packages"
                },
                {
                  "description": "Retrieve Unity project assets",
                  "mimetype": "application/json",
                  "name": "get_assets",
                  "uritemplate": "unity://assets"
                }
              ],
              "tools": [
                {
                  "description": "Tool to interact with Unity menu items",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "menuItemTool"
                },
                {
                  "description": "Tool to select a GameObject in Unity",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "selectGameObjectTool"
                },
                {
                  "description": "Tool to add a package to Unity project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "addPackageTool"
                },
                {
                  "description": "Tool to run Unity tests",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "runTestsTool"
                },
                {
                  "description": "Tool to send notification messages",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "notifyMessageTool"
                },
                {
                  "description": "Tool to update Unity components",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "updateComponentTool"
                },
                {
                  "description": "Tool to add assets to Unity scene",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "addAssetToSceneTool"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:18Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Coding-Solo": {
      "mcpproviderid": "Coding-Solo",
      "self": "#/mcpproviders/Coding-Solo",
      "xid": "/mcpproviders/Coding-Solo",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:03.418090507Z",
      "modifiedat": "2025-05-26T16:42:03.418090507Z",

      "serversurl": "#/mcpproviders/Coding-Solo/servers",
      "servers": {
        "godot-mcp": {
          "serverid": "godot-mcp",
          "self": "#/mcpproviders/Coding-Solo/servers/godot-mcp",
          "xid": "/mcpproviders/Coding-Solo/servers/godot-mcp",

          "metaurl": "#/mcpproviders/Coding-Solo/servers/godot-mcp/meta",
          "meta": {
            "serverid": "godot-mcp",
            "self": "#/mcpproviders/Coding-Solo/servers/godot-mcp/meta",
            "xid": "/mcpproviders/Coding-Solo/servers/godot-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:03.418090507Z",
            "modifiedat": "2025-05-26T16:42:03.418090507Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Coding-Solo/servers/godot-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Coding-Solo/servers/godot-mcp/versions",
          "versions": {
            "1": {
              "serverid": "godot-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/Coding-Solo/servers/godot-mcp/versions/1",
              "xid": "/mcpproviders/Coding-Solo/servers/godot-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.coding-solo/godot-mcp",
              "isdefault": true,
              "description": "MCP server for interfacing with Godot game engine. Provides tools for launching the editor, running projects, and capturing debug output.",
              "createdat": "2025-05-26T16:42:03.418090507Z",
              "modifiedat": "2025-05-26T16:42:03.418090507Z",
              "ancestor": "1",
              "id": "8663db3e-ad80-4805-8032-11a3f303b5fc",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "true",
                      "name": "DEBUG"
                    }
                  ],
                  "name": "godot-mcp",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "939648665",
                "source": "github",
                "url": "https://github.com/Coding-Solo/godot-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Launch Godot editor for a specific project",
                  "inputschema": {
                    "properties": {
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath"
                    ],
                    "type": "object"
                  },
                  "name": "launch_editor"
                },
                {
                  "description": "Run the Godot project and capture output",
                  "inputschema": {
                    "properties": {
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      },
                      "scene": {
                        "description": "Optional: Specific scene to run",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath"
                    ],
                    "type": "object"
                  },
                  "name": "run_project"
                },
                {
                  "description": "Get the current debug output and errors",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_debug_output"
                },
                {
                  "description": "Stop the currently running Godot project",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "stop_project"
                },
                {
                  "description": "Get the installed Godot version",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_godot_version"
                },
                {
                  "description": "List Godot projects in a directory",
                  "inputschema": {
                    "properties": {
                      "directory": {
                        "description": "Directory to search for Godot projects",
                        "type": "string"
                      },
                      "recursive": {
                        "description": "Whether to search recursively (default: false)",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "directory"
                    ],
                    "type": "object"
                  },
                  "name": "list_projects"
                },
                {
                  "description": "Retrieve metadata about a Godot project",
                  "inputschema": {
                    "properties": {
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath"
                    ],
                    "type": "object"
                  },
                  "name": "get_project_info"
                },
                {
                  "description": "Create a new Godot scene file",
                  "inputschema": {
                    "properties": {
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      },
                      "rootNodeType": {
                        "default": "Node2D",
                        "description": "Type of the root node (e.g., Node2D, Node3D)",
                        "type": "string"
                      },
                      "scenePath": {
                        "description": "Path where the scene file will be saved (relative to project)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath",
                      "scenePath"
                    ],
                    "type": "object"
                  },
                  "name": "create_scene"
                },
                {
                  "description": "Add a node to an existing scene",
                  "inputschema": {
                    "properties": {
                      "nodeName": {
                        "description": "Name for the new node",
                        "type": "string"
                      },
                      "nodeType": {
                        "description": "Type of node to add (e.g., Sprite2D, CollisionShape2D)",
                        "type": "string"
                      },
                      "parentNodePath": {
                        "default": "root",
                        "description": "Path to the parent node (e.g., \"root\" or \"root/Player\")",
                        "type": "string"
                      },
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Optional properties to set on the node",
                        "type": "object"
                      },
                      "scenePath": {
                        "description": "Path to the scene file (relative to project)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath",
                      "scenePath",
                      "nodeType",
                      "nodeName"
                    ],
                    "type": "object"
                  },
                  "name": "add_node"
                },
                {
                  "description": "Load a sprite into a Sprite2D node",
                  "inputschema": {
                    "properties": {
                      "nodePath": {
                        "description": "Path to the Sprite2D node (e.g., \"root/Player/Sprite2D\")",
                        "type": "string"
                      },
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      },
                      "scenePath": {
                        "description": "Path to the scene file (relative to project)",
                        "type": "string"
                      },
                      "texturePath": {
                        "description": "Path to the texture file (relative to project)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath",
                      "scenePath",
                      "nodePath",
                      "texturePath"
                    ],
                    "type": "object"
                  },
                  "name": "load_sprite"
                },
                {
                  "description": "Export a scene as a MeshLibrary resource",
                  "inputschema": {
                    "properties": {
                      "meshItemNames": {
                        "description": "Optional: Names of specific mesh items to include (defaults to all)",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "outputPath": {
                        "description": "Path where the mesh library (.res) will be saved",
                        "type": "string"
                      },
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      },
                      "scenePath": {
                        "description": "Path to the scene file (.tscn) to export",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath",
                      "scenePath",
                      "outputPath"
                    ],
                    "type": "object"
                  },
                  "name": "export_mesh_library"
                },
                {
                  "description": "Save changes to a scene file",
                  "inputschema": {
                    "properties": {
                      "newPath": {
                        "description": "Optional: New path to save the scene to (for creating variants)",
                        "type": "string"
                      },
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      },
                      "scenePath": {
                        "description": "Path to the scene file (relative to project)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath",
                      "scenePath"
                    ],
                    "type": "object"
                  },
                  "name": "save_scene"
                },
                {
                  "description": "Get the UID for a specific file in a Godot project (for Godot 4.4+)",
                  "inputschema": {
                    "properties": {
                      "filePath": {
                        "description": "Path to the file (relative to project) for which to get the UID",
                        "type": "string"
                      },
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath",
                      "filePath"
                    ],
                    "type": "object"
                  },
                  "name": "get_uid"
                },
                {
                  "description": "Update UID references in a Godot project by resaving resources (for Godot 4.4+)",
                  "inputschema": {
                    "properties": {
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath"
                    ],
                    "type": "object"
                  },
                  "name": "update_project_uids"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:22Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ConechoAI": {
      "mcpproviderid": "ConechoAI",
      "self": "#/mcpproviders/ConechoAI",
      "xid": "/mcpproviders/ConechoAI",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:56.476020594Z",
      "modifiedat": "2025-05-26T16:41:56.476020594Z",

      "serversurl": "#/mcpproviders/ConechoAI/servers",
      "servers": {
        "openai-websearch-mcp": {
          "serverid": "openai-websearch-mcp",
          "self": "#/mcpproviders/ConechoAI/servers/openai-websearch-mcp",
          "xid": "/mcpproviders/ConechoAI/servers/openai-websearch-mcp",

          "metaurl": "#/mcpproviders/ConechoAI/servers/openai-websearch-mcp/meta",
          "meta": {
            "serverid": "openai-websearch-mcp",
            "self": "#/mcpproviders/ConechoAI/servers/openai-websearch-mcp/meta",
            "xid": "/mcpproviders/ConechoAI/servers/openai-websearch-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:56.476020594Z",
            "modifiedat": "2025-05-26T16:41:56.476020594Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ConechoAI/servers/openai-websearch-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ConechoAI/servers/openai-websearch-mcp/versions",
          "versions": {
            "1": {
              "serverid": "openai-websearch-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ConechoAI/servers/openai-websearch-mcp/versions/1",
              "xid": "/mcpproviders/ConechoAI/servers/openai-websearch-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.conechoai/openai-websearch-mcp",
              "isdefault": true,
              "description": "openai websearch tool as mcp server",
              "createdat": "2025-05-26T16:41:56.476020594Z",
              "modifiedat": "2025-05-26T16:41:56.476020594Z",
              "ancestor": "1",
              "id": "531956a8-df6a-4edd-bb72-36c284c1d7c8",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-api-key-here",
                      "name": "OPENAI_API_KEY"
                    }
                  ],
                  "name": "openai-websearch-mcp",
                  "package_arguments": [
                    {
                      "default": "-m openai_websearch_mcp",
                      "description": "Run Python module openai_websearch_mcp",
                      "format": "string",
                      "is_required": true,
                      "name": "-m openai_websearch_mcp",
                      "type": "named",
                      "value": "-m openai_websearch_mcp",
                      "value_hint": "openai_websearch_mcp"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.4.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "947082641",
                "source": "github",
                "url": "https://github.com/ConechoAI/openai-websearch-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "It allows AI assistants to search the web during conversations with users",
                  "inputschema": {
                    "properties": {
                      "input": {
                        "type": "string"
                      },
                      "model": {
                        "enum": [
                          "gpt-4o",
                          "gpt-4o-mini"
                        ],
                        "type": "string"
                      },
                      "search_context_size": {
                        "enum": [
                          "low",
                          "medium",
                          "high"
                        ],
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "web_search_preview",
                          "web_search_preview_2025_03_11"
                        ],
                        "type": "string"
                      },
                      "user_location": {
                        "properties": {
                          "city": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "region": {
                            "type": "string"
                          },
                          "timezone": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "input",
                      "type"
                    ],
                    "type": "object"
                  },
                  "name": "web_search"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:51Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "DMontgomery40": {
      "mcpproviderid": "DMontgomery40",
      "self": "#/mcpproviders/DMontgomery40",
      "xid": "/mcpproviders/DMontgomery40",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:00.277532285Z",
      "modifiedat": "2025-05-26T16:42:00.277532285Z",

      "serversurl": "#/mcpproviders/DMontgomery40/servers",
      "servers": {
        "deepseek-mcp-server": {
          "serverid": "deepseek-mcp-server",
          "self": "#/mcpproviders/DMontgomery40/servers/deepseek-mcp-server",
          "xid": "/mcpproviders/DMontgomery40/servers/deepseek-mcp-server",

          "metaurl": "#/mcpproviders/DMontgomery40/servers/deepseek-mcp-server/meta",
          "meta": {
            "serverid": "deepseek-mcp-server",
            "self": "#/mcpproviders/DMontgomery40/servers/deepseek-mcp-server/meta",
            "xid": "/mcpproviders/DMontgomery40/servers/deepseek-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:00.277532285Z",
            "modifiedat": "2025-05-26T16:42:00.277532285Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/DMontgomery40/servers/deepseek-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/DMontgomery40/servers/deepseek-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "deepseek-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/DMontgomery40/servers/deepseek-mcp-server/versions/1",
              "xid": "/mcpproviders/DMontgomery40/servers/deepseek-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.dmontgomery40/deepseek-mcp-server",
              "isdefault": true,
              "description": "Model Context Protocol server for DeepSeek's advanced language models",
              "createdat": "2025-05-26T16:42:00.277532285Z",
              "modifiedat": "2025-05-26T16:42:00.277532285Z",
              "ancestor": "1",
              "id": "345bf964-02ce-4814-b37f-52c2e73ab395",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-api-key",
                      "name": "DEEPSEEK_API_KEY"
                    }
                  ],
                  "name": "deepseek-mcp-server",
                  "registry_name": "npm",
                  "version": "0.2.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "920179950",
                "source": "github",
                "url": "https://github.com/DMontgomery40/deepseek-mcp-server"
              },
              "resources": [
                {
                  "description": "Resource exposing available models with their capabilities.",
                  "name": "models",
                  "uritemplate": "models://{modelId}"
                },
                {
                  "description": "Resource exposing configuration options for models.",
                  "name": "model-config",
                  "uritemplate": "config://{modelId}"
                }
              ],
              "tools": [
                {
                  "description": "Chat completion tool for generating responses from DeepSeek models.",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "frequency_penalty": {
                        "maximum": 2,
                        "minimum": -2,
                        "type": "number"
                      },
                      "max_tokens": {
                        "minimum": 1,
                        "type": "integer"
                      },
                      "message": {
                        "type": "string"
                      },
                      "messages": {
                        "items": {
                          "properties": {
                            "content": {
                              "type": "string"
                            },
                            "role": {
                              "enum": [
                                "system",
                                "user",
                                "assistant"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "model": {
                        "type": "string"
                      },
                      "presence_penalty": {
                        "maximum": 2,
                        "minimum": -2,
                        "type": "number"
                      },
                      "temperature": {
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number"
                      },
                      "top_p": {
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number"
                      }
                    },
                    "required": [
                      "model",
                      "temperature",
                      "max_tokens",
                      "top_p",
                      "frequency_penalty",
                      "presence_penalty"
                    ],
                    "type": "object"
                  },
                  "name": "chat_completion"
                },
                {
                  "description": "Multi-turn conversation support maintaining message history and context.",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "frequency_penalty": {
                        "maximum": 2,
                        "minimum": -2,
                        "type": "number"
                      },
                      "max_tokens": {
                        "minimum": 1,
                        "type": "integer"
                      },
                      "messages": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "properties": {
                                "content": {
                                  "properties": {
                                    "text": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "const": "text",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "text"
                                  ],
                                  "type": "object"
                                },
                                "role": {
                                  "enum": [
                                    "system",
                                    "user",
                                    "assistant"
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "model": {
                        "type": "string"
                      },
                      "presence_penalty": {
                        "maximum": 2,
                        "minimum": -2,
                        "type": "number"
                      },
                      "temperature": {
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number"
                      },
                      "top_p": {
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number"
                      }
                    },
                    "required": [
                      "model",
                      "temperature",
                      "max_tokens",
                      "top_p",
                      "frequency_penalty",
                      "presence_penalty"
                    ],
                    "type": "object"
                  },
                  "name": "multi_turn_chat"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:34Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "DappierAI": {
      "mcpproviderid": "DappierAI",
      "self": "#/mcpproviders/DappierAI",
      "xid": "/mcpproviders/DappierAI",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:55.101147513Z",
      "modifiedat": "2025-05-26T16:41:55.101147513Z",

      "serversurl": "#/mcpproviders/DappierAI/servers",
      "servers": {
        "dappier-mcp": {
          "serverid": "dappier-mcp",
          "self": "#/mcpproviders/DappierAI/servers/dappier-mcp",
          "xid": "/mcpproviders/DappierAI/servers/dappier-mcp",

          "metaurl": "#/mcpproviders/DappierAI/servers/dappier-mcp/meta",
          "meta": {
            "serverid": "dappier-mcp",
            "self": "#/mcpproviders/DappierAI/servers/dappier-mcp/meta",
            "xid": "/mcpproviders/DappierAI/servers/dappier-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:55.101147513Z",
            "modifiedat": "2025-05-26T16:41:55.101147513Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/DappierAI/servers/dappier-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/DappierAI/servers/dappier-mcp/versions",
          "versions": {
            "1": {
              "serverid": "dappier-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/DappierAI/servers/dappier-mcp/versions/1",
              "xid": "/mcpproviders/DappierAI/servers/dappier-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.dappierai/dappier-mcp",
              "isdefault": true,
              "description": "Enable fast, free real-time web search and access premium data from trusted media brands—news, financial markets, sports, entertainment, weather, and more. Build powerful AI agents with Dappier.",
              "createdat": "2025-05-26T16:41:55.101147513Z",
              "modifiedat": "2025-05-26T16:41:55.101147513Z",
              "ancestor": "1",
              "id": "58b5f6c8-1ad7-4378-9921-7b9b7982c84c",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_API_KEY_HERE",
                      "name": "DAPPIER_API_KEY"
                    }
                  ],
                  "name": "dappier-mcp",
                  "registry_name": "unknown",
                  "version": "0.3.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "923666627",
                "source": "github",
                "url": "https://github.com/DappierAI/dappier-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieves direct answers to real-time queries using AI-powered search. This includes web search results, financial information, news, weather, stock market updates, and more.",
                  "inputschema": {
                    "properties": {
                      "ai_model_id": {
                        "description": "The AI model ID to use for the query. Defaults to am_01j06ytn18ejftedz6dyhz2b15 (Real-Time Data).",
                        "type": "string"
                      },
                      "query": {
                        "description": "The user-provided input string for retrieving real-time data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "dappier_real_time_search"
                },
                {
                  "description": "Provides AI-powered content recommendations based on structured data models. Returns a list of articles with titles, summaries, images, and source URLs.",
                  "inputschema": {
                    "properties": {
                      "data_model_id": {
                        "description": "The data model ID to use for recommendations. Defaults to dm_01j0pb465keqmatq9k83dthx34 (Sports News).",
                        "type": "string"
                      },
                      "num_articles_ref": {
                        "description": "The minimum number of articles to return from the specified reference domain (ref). Defaults to 0.",
                        "type": "integer"
                      },
                      "query": {
                        "description": "The user-provided input string for AI recommendations.",
                        "type": "string"
                      },
                      "ref": {
                        "description": "The site domain where AI recommendations should be displayed. Defaults to None.",
                        "type": "string"
                      },
                      "search_algorithm": {
                        "description": "The search algorithm to use for retrieving articles. Options: most_recent, semantic, most_recent_semantic, trending. Defaults to most_recent.",
                        "type": "string"
                      },
                      "similarity_top_k": {
                        "description": "The number of top documents to retrieve based on similarity. Defaults to 9.",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "dappier_ai_recommendations"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:08Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "EduBase": {
      "mcpproviderid": "EduBase",
      "self": "#/mcpproviders/EduBase",
      "xid": "/mcpproviders/EduBase",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:55.849416543Z",
      "modifiedat": "2025-05-26T16:41:55.849416543Z",

      "serversurl": "#/mcpproviders/EduBase/servers",
      "servers": {
        "MCP": {
          "serverid": "MCP",
          "self": "#/mcpproviders/EduBase/servers/MCP",
          "xid": "/mcpproviders/EduBase/servers/MCP",

          "metaurl": "#/mcpproviders/EduBase/servers/MCP/meta",
          "meta": {
            "serverid": "MCP",
            "self": "#/mcpproviders/EduBase/servers/MCP/meta",
            "xid": "/mcpproviders/EduBase/servers/MCP/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:55.849416543Z",
            "modifiedat": "2025-05-26T16:41:55.849416543Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/EduBase/servers/MCP/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/EduBase/servers/MCP/versions",
          "versions": {
            "1": {
              "serverid": "MCP",
              "versionid": "1",
              "self": "#/mcpproviders/EduBase/servers/MCP/versions/1",
              "xid": "/mcpproviders/EduBase/servers/MCP/versions/1",
              "epoch": 1,
              "name": "io.github.edubase/mcp",
              "isdefault": true,
              "description": "The EduBase MCP server enables Claude and other LLMs to interact with EduBase's comprehensive e-learning platform through the Model Context Protocol (MCP).",
              "createdat": "2025-05-26T16:41:55.849416543Z",
              "modifiedat": "2025-05-26T16:41:55.849416543Z",
              "ancestor": "1",
              "id": "33102362-9e44-442f-8aa9-4443ce50c396",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "https://domain.edubase.net/api",
                      "name": "EDUBASE_API_URL"
                    },
                    {
                      "description": "your_integration_app_id",
                      "name": "EDUBASE_API_APP"
                    },
                    {
                      "description": "your_integration_secret_key",
                      "name": "EDUBASE_API_KEY"
                    }
                  ],
                  "name": "@edubase/mcp",
                  "package_arguments": [
                    {
                      "default": "-i",
                      "description": "-i",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i"
                    },
                    {
                      "default": "--rm",
                      "description": "--rm",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm"
                    },
                    {
                      "default": "-e EDUBASE_API_URL",
                      "description": "-e EDUBASE_API_URL",
                      "format": "string",
                      "is_required": true,
                      "name": "-e EDUBASE_API_URL",
                      "type": "named",
                      "value": "-e EDUBASE_API_URL",
                      "value_hint": "EDUBASE_API_URL"
                    },
                    {
                      "default": "-e EDUBASE_API_APP",
                      "description": "-e EDUBASE_API_APP",
                      "format": "string",
                      "is_required": true,
                      "name": "-e EDUBASE_API_APP",
                      "type": "named",
                      "value": "-e EDUBASE_API_APP",
                      "value_hint": "EDUBASE_API_APP"
                    },
                    {
                      "default": "-e EDUBASE_API_KEY",
                      "description": "-e EDUBASE_API_KEY",
                      "format": "string",
                      "is_required": true,
                      "name": "-e EDUBASE_API_KEY",
                      "type": "named",
                      "value": "-e EDUBASE_API_KEY",
                      "value_hint": "EDUBASE_API_KEY"
                    },
                    {
                      "default": "edubase/mcp",
                      "description": "edubase/mcp",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "edubase/mcp",
                      "value_hint": "edubase/mcp"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "1.0.10"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "940803959",
                "source": "github",
                "url": "https://github.com/EduBase/MCP"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Tool for the GET /user endpoint",
                  "name": "edubase_get_user"
                },
                {
                  "description": "Tools named edubase_\u003cmethod\u003e_\u003cendpoint\u003e for each documented API endpoint",
                  "name": "edubase_get_"
                },
                {
                  "description": "Tools named edubase_\u003cmethod\u003e_\u003cendpoint\u003e for each documented API endpoint",
                  "name": "edubase_post_"
                },
                {
                  "description": "Tools named edubase_\u003cmethod\u003e_\u003cendpoint\u003e for each documented API endpoint",
                  "name": "edubase_delete_"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:35Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "EnesCinr": {
      "mcpproviderid": "EnesCinr",
      "self": "#/mcpproviders/EnesCinr",
      "xid": "/mcpproviders/EnesCinr",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:10.720210833Z",
      "modifiedat": "2025-05-26T16:42:10.720210833Z",

      "serversurl": "#/mcpproviders/EnesCinr/servers",
      "servers": {
        "twitter-mcp": {
          "serverid": "twitter-mcp",
          "self": "#/mcpproviders/EnesCinr/servers/twitter-mcp",
          "xid": "/mcpproviders/EnesCinr/servers/twitter-mcp",

          "metaurl": "#/mcpproviders/EnesCinr/servers/twitter-mcp/meta",
          "meta": {
            "serverid": "twitter-mcp",
            "self": "#/mcpproviders/EnesCinr/servers/twitter-mcp/meta",
            "xid": "/mcpproviders/EnesCinr/servers/twitter-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:10.720210833Z",
            "modifiedat": "2025-05-26T16:42:10.720210833Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/EnesCinr/servers/twitter-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/EnesCinr/servers/twitter-mcp/versions",
          "versions": {
            "1": {
              "serverid": "twitter-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/EnesCinr/servers/twitter-mcp/versions/1",
              "xid": "/mcpproviders/EnesCinr/servers/twitter-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.enescinr/twitter-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol server allows to interact with Twitter, enabling posting tweets and searching Twitter.",
              "createdat": "2025-05-26T16:42:10.720210833Z",
              "modifiedat": "2025-05-26T16:42:10.720210833Z",
              "ancestor": "1",
              "id": "ccb9aa0c-bbf5-46e6-a5f0-a5b4c11d519a",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_api_key_here",
                      "name": "API_KEY"
                    },
                    {
                      "description": "your_api_secret_key_here",
                      "name": "API_SECRET_KEY"
                    },
                    {
                      "description": "your_access_token_here",
                      "name": "ACCESS_TOKEN"
                    },
                    {
                      "description": "your_access_token_secret_here",
                      "name": "ACCESS_TOKEN_SECRET"
                    }
                  ],
                  "name": "@enescinar/twitter-mcp",
                  "registry_name": "npm",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "901627660",
                "source": "github",
                "url": "https://github.com/EnesCinr/twitter-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Post a new tweet to Twitter",
                  "inputschema": {
                    "properties": {
                      "text": {
                        "description": "The content of your tweet",
                        "maxLength": 280,
                        "type": "string"
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "post_tweet"
                },
                {
                  "description": "Search for tweets on Twitter",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "description": "Number of tweets to return (10-100)",
                        "maximum": 100,
                        "minimum": 10,
                        "type": "number"
                      },
                      "query": {
                        "description": "Search query",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query",
                      "count"
                    ],
                    "type": "object"
                  },
                  "name": "search_tweets"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:58Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Fewsats": {
      "mcpproviderid": "Fewsats",
      "self": "#/mcpproviders/Fewsats",
      "xid": "/mcpproviders/Fewsats",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:15.730554159Z",
      "modifiedat": "2025-05-26T16:42:15.730554159Z",

      "serversurl": "#/mcpproviders/Fewsats/servers",
      "servers": {
        "fewsats-mcp": {
          "serverid": "fewsats-mcp",
          "self": "#/mcpproviders/Fewsats/servers/fewsats-mcp",
          "xid": "/mcpproviders/Fewsats/servers/fewsats-mcp",

          "metaurl": "#/mcpproviders/Fewsats/servers/fewsats-mcp/meta",
          "meta": {
            "serverid": "fewsats-mcp",
            "self": "#/mcpproviders/Fewsats/servers/fewsats-mcp/meta",
            "xid": "/mcpproviders/Fewsats/servers/fewsats-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:15.730554159Z",
            "modifiedat": "2025-05-26T16:42:15.730554159Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Fewsats/servers/fewsats-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Fewsats/servers/fewsats-mcp/versions",
          "versions": {
            "1": {
              "serverid": "fewsats-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/Fewsats/servers/fewsats-mcp/versions/1",
              "xid": "/mcpproviders/Fewsats/servers/fewsats-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.fewsats/fewsats-mcp",
              "isdefault": true,
              "description": "Fewsats MCP server",
              "createdat": "2025-05-26T16:42:15.730554159Z",
              "modifiedat": "2025-05-26T16:42:15.730554159Z",
              "ancestor": "1",
              "id": "0e7533d0-5925-4e06-a6bf-5da4e4e21aec",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_FEWSATS_API_KEY",
                      "name": "FEWSATS_API_KEY"
                    }
                  ],
                  "name": "fewsats-mcp",
                  "registry_name": "unknown",
                  "version": "0.1.4"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "947211439",
                "source": "github",
                "url": "https://github.com/Fewsats/fewsats-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve the balance of the user's wallet",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "balance"
                },
                {
                  "description": "Retrieve the user's payment methods",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "payment_methods"
                },
                {
                  "description": "Pays an offer with the specified ID from the l402_offers",
                  "inputschema": {
                    "properties": {
                      "l402_offer": {
                        "properties": {
                          "offers": {
                            "items": {
                              "properties": {
                                "amount": {
                                  "type": "number"
                                },
                                "currency": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "title": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "amount",
                                "currency",
                                "description",
                                "title"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "payment_context_token": {
                            "type": "string"
                          },
                          "payment_request_url": {
                            "type": "string"
                          },
                          "version": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "offers",
                          "payment_context_token",
                          "payment_request_url",
                          "version"
                        ],
                        "type": "object"
                      },
                      "offer_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "offer_id",
                      "l402_offer"
                    ],
                    "type": "object"
                  },
                  "name": "pay_offer"
                },
                {
                  "description": "Retrieve the details of a payment",
                  "inputschema": {
                    "properties": {
                      "pid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "pid"
                    ],
                    "type": "object"
                  },
                  "name": "payment_info"
                },
                {
                  "description": "Retrieve the user's billing information",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "billing_info"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:45Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Fibery-inc": {
      "mcpproviderid": "Fibery-inc",
      "self": "#/mcpproviders/Fibery-inc",
      "xid": "/mcpproviders/Fibery-inc",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:33.538059963Z",
      "modifiedat": "2025-05-26T16:42:33.538059963Z",

      "serversurl": "#/mcpproviders/Fibery-inc/servers",
      "servers": {
        "fibery-mcp-server": {
          "serverid": "fibery-mcp-server",
          "self": "#/mcpproviders/Fibery-inc/servers/fibery-mcp-server",
          "xid": "/mcpproviders/Fibery-inc/servers/fibery-mcp-server",

          "metaurl": "#/mcpproviders/Fibery-inc/servers/fibery-mcp-server/meta",
          "meta": {
            "serverid": "fibery-mcp-server",
            "self": "#/mcpproviders/Fibery-inc/servers/fibery-mcp-server/meta",
            "xid": "/mcpproviders/Fibery-inc/servers/fibery-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:33.538059963Z",
            "modifiedat": "2025-05-26T16:42:33.538059963Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Fibery-inc/servers/fibery-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Fibery-inc/servers/fibery-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "fibery-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/Fibery-inc/servers/fibery-mcp-server/versions/1",
              "xid": "/mcpproviders/Fibery-inc/servers/fibery-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.fibery-inc/fibery-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:33.538059963Z",
              "modifiedat": "2025-05-26T16:42:33.538059963Z",
              "ancestor": "1",
              "id": "78c126ff-906a-4596-9bf4-db2cf61796b8",
              "packages": [
                {
                  "name": "fibery-mcp-server",
                  "package_arguments": [
                    {
                      "default": "--directory path/to/cloned/fibery-mcp-server",
                      "description": "directory to run from",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory path/to/cloned/fibery-mcp-server",
                      "type": "named",
                      "value": "--directory path/to/cloned/fibery-mcp-server",
                      "value_hint": "path/to/cloned/fibery-mcp-server"
                    },
                    {
                      "default": "fibery-mcp-server",
                      "description": "server entry point",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "fibery-mcp-server",
                      "value_hint": "fibery-mcp-server"
                    },
                    {
                      "default": "--fibery-host your-domain.fibery.io",
                      "description": "Fibery host domain",
                      "format": "string",
                      "is_required": true,
                      "name": "--fibery-host your-domain.fibery.io",
                      "type": "named",
                      "value": "--fibery-host your-domain.fibery.io",
                      "value_hint": "your-domain.fibery.io"
                    },
                    {
                      "default": "--fibery-api-token your-api-token",
                      "description": "Fibery API Token",
                      "format": "string",
                      "is_required": true,
                      "name": "--fibery-api-token your-api-token",
                      "type": "named",
                      "value": "--fibery-api-token your-api-token",
                      "value_hint": "your-api-token"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.3"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "947810349",
                "source": "github",
                "url": "https://github.com/Fibery-inc/fibery-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Provides the current date.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "current_date"
                },
                {
                  "description": "Get Fibery schema information.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "schema"
                },
                {
                  "description": "Get list of all fields (in format of 'Title [name]: type') in the selected Fibery database and for all related databases.",
                  "inputschema": {
                    "properties": {
                      "database_name": {
                        "description": "Database name as defined in Fibery schema",
                        "type": "string"
                      }
                    },
                    "required": [
                      "database_name"
                    ],
                    "type": "object"
                  },
                  "name": "describe_database"
                },
                {
                  "description": "Offers powerful, flexible access to your Fibery data through the Fibery API.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "query_database"
                },
                {
                  "description": "Creates new entities in your Fibery workspace with specified field values.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_entity"
                },
                {
                  "description": "Creates multiple new entities in your Fibery workspace with specified field values.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_entities_batch"
                },
                {
                  "description": "Updates existing entities in your Fibery workspace with new field values.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_entity"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:49Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Flux159": {
      "mcpproviderid": "Flux159",
      "self": "#/mcpproviders/Flux159",
      "xid": "/mcpproviders/Flux159",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:58.767215502Z",
      "modifiedat": "2025-05-26T16:41:58.767215502Z",

      "serversurl": "#/mcpproviders/Flux159/servers",
      "servers": {
        "mcp-server-kubernetes": {
          "serverid": "mcp-server-kubernetes",
          "self": "#/mcpproviders/Flux159/servers/mcp-server-kubernetes",
          "xid": "/mcpproviders/Flux159/servers/mcp-server-kubernetes",

          "metaurl": "#/mcpproviders/Flux159/servers/mcp-server-kubernetes/meta",
          "meta": {
            "serverid": "mcp-server-kubernetes",
            "self": "#/mcpproviders/Flux159/servers/mcp-server-kubernetes/meta",
            "xid": "/mcpproviders/Flux159/servers/mcp-server-kubernetes/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:58.767215502Z",
            "modifiedat": "2025-05-26T16:41:58.767215502Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Flux159/servers/mcp-server-kubernetes/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Flux159/servers/mcp-server-kubernetes/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-kubernetes",
              "versionid": "1",
              "self": "#/mcpproviders/Flux159/servers/mcp-server-kubernetes/versions/1",
              "xid": "/mcpproviders/Flux159/servers/mcp-server-kubernetes/versions/1",
              "epoch": 1,
              "name": "io.github.flux159/mcp-server-kubernetes",
              "isdefault": true,
              "description": "MCP Server for kubernetes management commands",
              "createdat": "2025-05-26T16:41:58.767215502Z",
              "modifiedat": "2025-05-26T16:41:58.767215502Z",
              "ancestor": "1",
              "id": "6a4d324e-7d12-495c-b72c-fe5803363af1",
              "packages": [
                {
                  "name": "mcp-server-kubernetes",
                  "registry_name": "unknown",
                  "version": "1.6.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "900130551",
                "source": "github",
                "url": "https://github.com/Flux159/mcp-server-kubernetes"
              },
              "resources": [
                {
                  "description": "List of pods in the default namespace",
                  "mimetype": "application/json",
                  "name": "Kubernetes Pods",
                  "uritemplate": "k8s://default/pods"
                },
                {
                  "description": "List of deployments in the default namespace",
                  "mimetype": "application/json",
                  "name": "Kubernetes Deployments",
                  "uritemplate": "k8s://default/deployments"
                },
                {
                  "description": "List of services in the default namespace",
                  "mimetype": "application/json",
                  "name": "Kubernetes Services",
                  "uritemplate": "k8s://default/services"
                },
                {
                  "description": "List of all namespaces",
                  "mimetype": "application/json",
                  "name": "Kubernetes Namespaces",
                  "uritemplate": "k8s://namespaces"
                },
                {
                  "description": "List of all nodes in the cluster",
                  "mimetype": "application/json",
                  "name": "Kubernetes Nodes",
                  "uritemplate": "k8s://nodes"
                }
              ],
              "tools": [
                {
                  "description": "Cleanup resources in the Kubernetes cluster.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "cleanup"
                },
                {
                  "description": "Create a Kubernetes namespace.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "create_namespace"
                },
                {
                  "description": "Create a Kubernetes pod.",
                  "inputschema": {
                    "properties": {
                      "command": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "template": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace",
                      "template"
                    ],
                    "type": "object"
                  },
                  "name": "create_pod"
                },
                {
                  "description": "Create a Kubernetes cronjob.",
                  "inputschema": {
                    "properties": {
                      "command": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "image": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "schedule": {
                        "type": "string"
                      },
                      "suspend": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name",
                      "namespace",
                      "schedule",
                      "image"
                    ],
                    "type": "object"
                  },
                  "name": "create_cronjob"
                },
                {
                  "description": "Delete a Kubernetes cronjob.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "delete_cronjob"
                },
                {
                  "description": "Delete a Kubernetes pod.",
                  "inputschema": {
                    "properties": {
                      "ignoreNotFound": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "delete_pod"
                },
                {
                  "description": "Describe a Kubernetes pod.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "describe_pod"
                },
                {
                  "description": "Describe a Kubernetes node.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "describe_node"
                },
                {
                  "description": "Explain a Kubernetes resource.",
                  "inputschema": {
                    "properties": {
                      "apiVersion": {
                        "type": "string"
                      },
                      "output": {
                        "enum": [
                          "plaintext",
                          "plaintext-openapiv2"
                        ],
                        "type": "string"
                      },
                      "recursive": {
                        "type": "boolean"
                      },
                      "resource": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "resource"
                    ],
                    "type": "object"
                  },
                  "name": "explain_resource"
                },
                {
                  "description": "Get Kubernetes events.",
                  "inputschema": {
                    "properties": {
                      "fieldSelector": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_events"
                },
                {
                  "description": "Get logs from Kubernetes resources.",
                  "inputschema": {
                    "properties": {
                      "container": {
                        "type": "string"
                      },
                      "follow": {
                        "type": "boolean"
                      },
                      "labelSelector": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "pretty": {
                        "type": "boolean"
                      },
                      "resourceType": {
                        "type": "string"
                      },
                      "sinceSeconds": {
                        "type": "integer"
                      },
                      "tail": {
                        "type": "integer"
                      },
                      "timestamps": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "resourceType"
                    ],
                    "type": "object"
                  },
                  "name": "get_logs"
                },
                {
                  "description": "Install a Helm chart.",
                  "inputschema": {
                    "properties": {
                      "chart": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "repo": {
                        "type": "string"
                      },
                      "values": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "name",
                      "chart",
                      "repo",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "install_helm_chart"
                },
                {
                  "description": "List Kubernetes API resources.",
                  "inputschema": {
                    "properties": {
                      "apiGroup": {
                        "type": "string"
                      },
                      "namespaced": {
                        "type": "boolean"
                      },
                      "output": {
                        "enum": [
                          "wide",
                          "name",
                          "no-headers"
                        ],
                        "type": "string"
                      },
                      "verbs": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_api_resources"
                },
                {
                  "description": "List Kubernetes deployments.",
                  "inputschema": {
                    "properties": {
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_deployments"
                },
                {
                  "description": "List Kubernetes namespaces.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_namespaces"
                },
                {
                  "description": "List Kubernetes nodes.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_nodes"
                },
                {
                  "description": "List Kubernetes pods.",
                  "inputschema": {
                    "properties": {
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_pods"
                },
                {
                  "description": "List Kubernetes services.",
                  "inputschema": {
                    "properties": {
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_services"
                },
                {
                  "description": "List Kubernetes cronjobs.",
                  "inputschema": {
                    "properties": {
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_cronjobs"
                },
                {
                  "description": "List Kubernetes contexts.",
                  "inputschema": {
                    "properties": {
                      "showCurrent": {
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_contexts"
                },
                {
                  "description": "Get current Kubernetes context.",
                  "inputschema": {
                    "properties": {
                      "detailed": {
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_current_context"
                },
                {
                  "description": "Set current Kubernetes context.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "set_current_context"
                },
                {
                  "description": "Describe a Kubernetes cronjob.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "describe_cronjob"
                },
                {
                  "description": "List Kubernetes jobs.",
                  "inputschema": {
                    "properties": {
                      "cronJobName": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "list_jobs"
                },
                {
                  "description": "Get logs from Kubernetes jobs.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "tail": {
                        "type": "integer"
                      },
                      "timestamps": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "get_job_logs"
                },
                {
                  "description": "Uninstall a Helm chart.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "uninstall_helm_chart"
                },
                {
                  "description": "Upgrade a Helm chart.",
                  "inputschema": {
                    "properties": {
                      "chart": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "repo": {
                        "type": "string"
                      },
                      "values": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "name",
                      "chart",
                      "repo",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "upgrade_helm_chart"
                },
                {
                  "description": "Start port forwarding to a Kubernetes resource.",
                  "inputschema": {
                    "properties": {
                      "localPort": {
                        "type": "integer"
                      },
                      "resourceName": {
                        "type": "string"
                      },
                      "resourceType": {
                        "type": "string"
                      },
                      "targetPort": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "resourceType",
                      "resourceName",
                      "localPort",
                      "targetPort"
                    ],
                    "type": "object"
                  },
                  "name": "port_forward"
                },
                {
                  "description": "Stop port forwarding.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "stop_port_forward"
                },
                {
                  "description": "Delete a Kubernetes namespace.",
                  "inputschema": {
                    "properties": {
                      "ignoreNotFound": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "delete_namespace"
                },
                {
                  "description": "Delete a Kubernetes deployment.",
                  "inputschema": {
                    "properties": {
                      "ignoreNotFound": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "delete_deployment"
                },
                {
                  "description": "Create a Kubernetes deployment.",
                  "inputschema": {
                    "properties": {
                      "customConfig": {},
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "ports": {
                        "items": {
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "replicas": {
                        "type": "integer"
                      },
                      "template": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace",
                      "template"
                    ],
                    "type": "object"
                  },
                  "name": "create_deployment"
                },
                {
                  "description": "Update a Kubernetes deployment.",
                  "inputschema": {
                    "properties": {
                      "containerName": {
                        "type": "string"
                      },
                      "customConfig": {},
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "replicas": {
                        "type": "integer"
                      },
                      "template": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace",
                      "template"
                    ],
                    "type": "object"
                  },
                  "name": "update_deployment"
                },
                {
                  "description": "Describe a Kubernetes deployment.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "describe_deployment"
                },
                {
                  "description": "Scale a Kubernetes deployment.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "replicas": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "name",
                      "namespace",
                      "replicas"
                    ],
                    "type": "object"
                  },
                  "name": "scale_deployment"
                },
                {
                  "description": "Create a Kubernetes ConfigMap.",
                  "inputschema": {
                    "properties": {
                      "data": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace",
                      "data"
                    ],
                    "type": "object"
                  },
                  "name": "create_configmap"
                },
                {
                  "description": "Get a Kubernetes ConfigMap.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "get_configmap"
                },
                {
                  "description": "Update a Kubernetes ConfigMap.",
                  "inputschema": {
                    "properties": {
                      "data": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace",
                      "data"
                    ],
                    "type": "object"
                  },
                  "name": "update_configmap"
                },
                {
                  "description": "Delete a Kubernetes ConfigMap.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "delete_configmap"
                },
                {
                  "description": "Create a Kubernetes service.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "ports": {
                        "items": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "nodePort": {
                              "type": "integer"
                            },
                            "port": {
                              "type": "integer"
                            },
                            "protocol": {
                              "type": "string"
                            },
                            "targetPort": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "port"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "selector": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "type": {
                        "enum": [
                          "ClusterIP",
                          "NodePort",
                          "LoadBalancer"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "ports"
                    ],
                    "type": "object"
                  },
                  "name": "create_service"
                },
                {
                  "description": "Update a Kubernetes service.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "ports": {
                        "items": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "nodePort": {
                              "type": "integer"
                            },
                            "port": {
                              "type": "integer"
                            },
                            "protocol": {
                              "type": "string"
                            },
                            "targetPort": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "selector": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "type": {
                        "enum": [
                          "ClusterIP",
                          "NodePort",
                          "LoadBalancer"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "update_service"
                },
                {
                  "description": "Delete a Kubernetes service.",
                  "inputschema": {
                    "properties": {
                      "ignoreNotFound": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "delete_service"
                },
                {
                  "description": "Describe a Kubernetes service.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "describe_service"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:01Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "GLips": {
      "mcpproviderid": "GLips",
      "self": "#/mcpproviders/GLips",
      "xid": "/mcpproviders/GLips",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:29.582522018Z",
      "modifiedat": "2025-05-26T16:41:29.582522018Z",

      "serversurl": "#/mcpproviders/GLips/servers",
      "servers": {
        "Figma-Context-MCP": {
          "serverid": "Figma-Context-MCP",
          "self": "#/mcpproviders/GLips/servers/Figma-Context-MCP",
          "xid": "/mcpproviders/GLips/servers/Figma-Context-MCP",

          "metaurl": "#/mcpproviders/GLips/servers/Figma-Context-MCP/meta",
          "meta": {
            "serverid": "Figma-Context-MCP",
            "self": "#/mcpproviders/GLips/servers/Figma-Context-MCP/meta",
            "xid": "/mcpproviders/GLips/servers/Figma-Context-MCP/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:29.582522018Z",
            "modifiedat": "2025-05-26T16:41:29.582522018Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GLips/servers/Figma-Context-MCP/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GLips/servers/Figma-Context-MCP/versions",
          "versions": {
            "1": {
              "serverid": "Figma-Context-MCP",
              "versionid": "1",
              "self": "#/mcpproviders/GLips/servers/Figma-Context-MCP/versions/1",
              "xid": "/mcpproviders/GLips/servers/Figma-Context-MCP/versions/1",
              "epoch": 1,
              "name": "io.github.glips/figma-context-mcp",
              "isdefault": true,
              "description": "MCP server to provide Figma layout information to AI coding agents like Cursor",
              "createdat": "2025-05-26T16:41:29.582522018Z",
              "modifiedat": "2025-05-26T16:41:29.582522018Z",
              "ancestor": "1",
              "id": "e61c643c-ec01-483c-a586-20f87ab6280e",
              "packages": [
                {
                  "name": "figma-developer-mcp",
                  "package_arguments": [
                    {
                      "default": "--figma-api-key=YOUR-KEY",
                      "description": "Figma API Key flag",
                      "format": "string",
                      "is_required": true,
                      "name": "--figma-api-key=YOUR-KEY",
                      "type": "named",
                      "value": "--figma-api-key=YOUR-KEY",
                      "value_hint": "YOUR-KEY"
                    },
                    {
                      "default": "--stdio",
                      "description": "stdio mode",
                      "format": "string",
                      "is_required": true,
                      "name": "--stdio",
                      "type": "named",
                      "value": "--stdio"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.2.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "931892749",
                "source": "github",
                "url": "https://github.com/GLips/Figma-Context-MCP"
              },
              "resources": [],
              "tools": [
                {
                  "description": "When the nodeId cannot be obtained, obtain the layout information about the entire Figma file",
                  "inputschema": {
                    "properties": {
                      "depth": {
                        "description": "How many levels deep to traverse the node tree, only use if explicitly requested by the user",
                        "type": "number"
                      },
                      "fileKey": {
                        "description": "The key of the Figma file to fetch, often found in a provided URL like figma.com/(file|design)/\u003cfileKey\u003e/...",
                        "type": "string"
                      },
                      "nodeId": {
                        "description": "The ID of the node to fetch, often found as URL parameter node-id=\u003cnodeId\u003e, always use if provided",
                        "type": "string"
                      }
                    },
                    "required": [
                      "fileKey"
                    ],
                    "type": "object"
                  },
                  "name": "get_figma_data"
                },
                {
                  "description": "Download SVG and PNG images used in a Figma file based on the IDs of image or icon nodes",
                  "inputschema": {
                    "properties": {
                      "fileKey": {
                        "description": "The key of the Figma file containing the node",
                        "type": "string"
                      },
                      "localPath": {
                        "description": "The absolute path to the directory where images are stored in the project. If the directory does not exist, it will be created. The format of this path should respect the directory format of the operating system you are running on. Don't use any special character escaping in the path name either.",
                        "type": "string"
                      },
                      "nodes": {
                        "description": "The nodes to fetch as images",
                        "items": {
                          "properties": {
                            "fileName": {
                              "description": "The local name for saving the fetched file",
                              "type": "string"
                            },
                            "imageRef": {
                              "description": "If a node has an imageRef fill, you must include this variable. Leave blank when downloading Vector SVG images.",
                              "type": "string"
                            },
                            "nodeId": {
                              "description": "The ID of the Figma image node to fetch, formatted as 1234:5678",
                              "type": "string"
                            }
                          },
                          "required": [
                            "nodeId",
                            "fileName"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "fileKey",
                      "nodes",
                      "localPath"
                    ],
                    "type": "object"
                  },
                  "name": "download_figma_images"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:47Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "GeLi2001": {
      "mcpproviderid": "GeLi2001",
      "self": "#/mcpproviders/GeLi2001",
      "xid": "/mcpproviders/GeLi2001",
      "epoch": 3,
      "createdat": "2025-05-26T16:41:39.070278816Z",
      "modifiedat": "2025-05-26T16:41:39.335011469Z",

      "serversurl": "#/mcpproviders/GeLi2001/servers",
      "servers": {
        "datadog-mcp-server": {
          "serverid": "datadog-mcp-server",
          "self": "#/mcpproviders/GeLi2001/servers/datadog-mcp-server",
          "xid": "/mcpproviders/GeLi2001/servers/datadog-mcp-server",

          "metaurl": "#/mcpproviders/GeLi2001/servers/datadog-mcp-server/meta",
          "meta": {
            "serverid": "datadog-mcp-server",
            "self": "#/mcpproviders/GeLi2001/servers/datadog-mcp-server/meta",
            "xid": "/mcpproviders/GeLi2001/servers/datadog-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:39.335011469Z",
            "modifiedat": "2025-05-26T16:41:39.335011469Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GeLi2001/servers/datadog-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GeLi2001/servers/datadog-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "datadog-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/GeLi2001/servers/datadog-mcp-server/versions/1",
              "xid": "/mcpproviders/GeLi2001/servers/datadog-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.geli2001/datadog-mcp-server",
              "isdefault": true,
              "description": "MCP server interacts with the official Datadog API",
              "createdat": "2025-05-26T16:41:39.335011469Z",
              "modifiedat": "2025-05-26T16:41:39.335011469Z",
              "ancestor": "1",
              "id": "24f2d280-583d-4511-af0c-47910fc52c4d",
              "packages": [
                {
                  "name": "datadog-mcp-server",
                  "package_arguments": [
                    {
                      "default": "--apiKey \u003cYOUR_API_KEY\u003e",
                      "description": "\u003cYOUR_API_KEY\u003e",
                      "format": "string",
                      "is_required": true,
                      "name": "--apiKey \u003cYOUR_API_KEY\u003e",
                      "type": "named",
                      "value": "--apiKey \u003cYOUR_API_KEY\u003e",
                      "value_hint": "\u003cYOUR_API_KEY\u003e"
                    },
                    {
                      "default": "--appKey \u003cYOUR_APP_KEY\u003e",
                      "description": "\u003cYOUR_APP_KEY\u003e",
                      "format": "string",
                      "is_required": true,
                      "name": "--appKey \u003cYOUR_APP_KEY\u003e",
                      "type": "named",
                      "value": "--appKey \u003cYOUR_APP_KEY\u003e",
                      "value_hint": "\u003cYOUR_APP_KEY\u003e"
                    },
                    {
                      "default": "--site \u003cYOUR_DD_SITE\u003e",
                      "description": "\u003cYOUR_DD_SITE\u003e",
                      "format": "string",
                      "is_required": true,
                      "name": "--site \u003cYOUR_DD_SITE\u003e",
                      "type": "named",
                      "value": "--site \u003cYOUR_DD_SITE\u003e",
                      "value_hint": "\u003cYOUR_DD_SITE\u003e"
                    },
                    {
                      "default": "--logsSite \u003cYOUR_LOGS_SITE\u003e",
                      "description": "\u003cYOUR_LOGS_SITE\u003e",
                      "format": "string",
                      "is_required": true,
                      "name": "--logsSite \u003cYOUR_LOGS_SITE\u003e",
                      "type": "named",
                      "value": "--logsSite \u003cYOUR_LOGS_SITE\u003e",
                      "value_hint": "\u003cYOUR_LOGS_SITE\u003e"
                    },
                    {
                      "default": "--metricsSite \u003cYOUR_METRICS_SITE\u003e",
                      "description": "\u003cYOUR_METRICS_SITE\u003e",
                      "format": "string",
                      "is_required": true,
                      "name": "--metricsSite \u003cYOUR_METRICS_SITE\u003e",
                      "type": "named",
                      "value": "--metricsSite \u003cYOUR_METRICS_SITE\u003e",
                      "value_hint": "\u003cYOUR_METRICS_SITE\u003e"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "1.0.8"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "960104719",
                "source": "github",
                "url": "https://github.com/GeLi2001/datadog-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Fetch monitors with optional filtering",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-monitors"
                },
                {
                  "description": "Get details of a specific monitor by ID",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-monitor"
                },
                {
                  "description": "List all dashboards",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-dashboards"
                },
                {
                  "description": "Get a specific dashboard by ID",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-dashboard"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:14Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "shopify-mcp": {
          "serverid": "shopify-mcp",
          "self": "#/mcpproviders/GeLi2001/servers/shopify-mcp",
          "xid": "/mcpproviders/GeLi2001/servers/shopify-mcp",

          "metaurl": "#/mcpproviders/GeLi2001/servers/shopify-mcp/meta",
          "meta": {
            "serverid": "shopify-mcp",
            "self": "#/mcpproviders/GeLi2001/servers/shopify-mcp/meta",
            "xid": "/mcpproviders/GeLi2001/servers/shopify-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:39.178954653Z",
            "modifiedat": "2025-05-26T16:41:39.178954653Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GeLi2001/servers/shopify-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GeLi2001/servers/shopify-mcp/versions",
          "versions": {
            "1": {
              "serverid": "shopify-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/GeLi2001/servers/shopify-mcp/versions/1",
              "xid": "/mcpproviders/GeLi2001/servers/shopify-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.geli2001/shopify-mcp",
              "isdefault": true,
              "description": "MCP server for Shopify api, usable on mcp clients such as Anthropic's Claude and Cursor IDE",
              "createdat": "2025-05-26T16:41:39.178954653Z",
              "modifiedat": "2025-05-26T16:41:39.178954653Z",
              "ancestor": "1",
              "id": "fcde90d4-5b99-4262-8101-7a507bf05915",
              "packages": [
                {
                  "name": "shopify-mcp",
                  "package_arguments": [
                    {
                      "default": "--accessToken \u003cYOUR_ACCESS_TOKEN\u003e",
                      "description": "--accessToken \u003cYOUR_ACCESS_TOKEN\u003e",
                      "format": "string",
                      "is_required": true,
                      "name": "--accessToken \u003cYOUR_ACCESS_TOKEN\u003e",
                      "type": "named",
                      "value": "--accessToken \u003cYOUR_ACCESS_TOKEN\u003e",
                      "value_hint": "\u003cYOUR_ACCESS_TOKEN\u003e"
                    },
                    {
                      "default": "--domain \u003cYOUR_SHOP\u003e.myshopify.com",
                      "description": "--domain \u003cYOUR_SHOP\u003e.myshopify.com",
                      "format": "string",
                      "is_required": true,
                      "name": "--domain \u003cYOUR_SHOP\u003e.myshopify.com",
                      "type": "named",
                      "value": "--domain \u003cYOUR_SHOP\u003e.myshopify.com",
                      "value_hint": "\u003cYOUR_SHOP\u003e.myshopify.com"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "1.0.5"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "958329576",
                "source": "github",
                "url": "https://github.com/GeLi2001/shopify-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get all products or search by title",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "number"
                      },
                      "searchTitle": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "limit"
                    ],
                    "type": "object"
                  },
                  "name": "get-products"
                },
                {
                  "description": "Get a specific product by ID",
                  "inputschema": {
                    "properties": {
                      "productId": {
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "productId"
                    ],
                    "type": "object"
                  },
                  "name": "get-product-by-id"
                },
                {
                  "description": "Get customers or search by name/email",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "number"
                      },
                      "searchQuery": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get-customers"
                },
                {
                  "description": "Advanced order querying and filtering",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "number"
                      },
                      "status": {
                        "enum": [
                          "any",
                          "open",
                          "closed",
                          "cancelled"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get-orders"
                },
                {
                  "description": "Get order by ID",
                  "inputschema": {
                    "properties": {
                      "orderId": {
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "orderId"
                    ],
                    "type": "object"
                  },
                  "name": "get-order-by-id"
                },
                {
                  "description": "Update an order",
                  "inputschema": {
                    "properties": {
                      "customAttributes": {
                        "items": {
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "email": {
                        "format": "email",
                        "type": "string"
                      },
                      "id": {
                        "minLength": 1,
                        "type": "string"
                      },
                      "metafields": {
                        "items": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "key": {
                              "type": "string"
                            },
                            "namespace": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "note": {
                        "type": "string"
                      },
                      "shippingAddress": {
                        "properties": {
                          "address1": {
                            "type": "string"
                          },
                          "address2": {
                            "type": "string"
                          },
                          "city": {
                            "type": "string"
                          },
                          "company": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "firstName": {
                            "type": "string"
                          },
                          "lastName": {
                            "type": "string"
                          },
                          "phone": {
                            "type": "string"
                          },
                          "province": {
                            "type": "string"
                          },
                          "zip": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "tags": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "update-order"
                },
                {
                  "description": "Get orders for a specific customer",
                  "inputschema": {
                    "properties": {
                      "customerId": {
                        "pattern": "^\\d+$",
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "customerId"
                    ],
                    "type": "object"
                  },
                  "name": "get-customer-orders"
                },
                {
                  "description": "Update a customer's information",
                  "inputschema": {
                    "properties": {
                      "email": {
                        "format": "email",
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "id": {
                        "pattern": "^\\d+$",
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "metafields": {
                        "items": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "key": {
                              "type": "string"
                            },
                            "namespace": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "note": {
                        "type": "string"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "tags": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "taxExempt": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "update-customer"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:55Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "tft-mcp-server": {
          "serverid": "tft-mcp-server",
          "self": "#/mcpproviders/GeLi2001/servers/tft-mcp-server",
          "xid": "/mcpproviders/GeLi2001/servers/tft-mcp-server",

          "metaurl": "#/mcpproviders/GeLi2001/servers/tft-mcp-server/meta",
          "meta": {
            "serverid": "tft-mcp-server",
            "self": "#/mcpproviders/GeLi2001/servers/tft-mcp-server/meta",
            "xid": "/mcpproviders/GeLi2001/servers/tft-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:39.070278816Z",
            "modifiedat": "2025-05-26T16:41:39.070278816Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GeLi2001/servers/tft-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GeLi2001/servers/tft-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "tft-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/GeLi2001/servers/tft-mcp-server/versions/1",
              "xid": "/mcpproviders/GeLi2001/servers/tft-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.geli2001/tft-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:39.070278816Z",
              "modifiedat": "2025-05-26T16:41:39.070278816Z",
              "ancestor": "1",
              "id": "1aa1e801-80d9-4ea1-80c2-e7d037ce98e3",
              "packages": [
                {
                  "name": "mcp-server-tft",
                  "package_arguments": [
                    {
                      "default": "--apiKey \u003cYOUR_RIOT_API_KEY\u003e",
                      "description": "\u003cYOUR_RIOT_API_KEY\u003e",
                      "format": "string",
                      "is_required": true,
                      "name": "--apiKey \u003cYOUR_RIOT_API_KEY\u003e",
                      "type": "named",
                      "value": "--apiKey \u003cYOUR_RIOT_API_KEY\u003e",
                      "value_hint": "\u003cYOUR_RIOT_API_KEY\u003e"
                    },
                    {
                      "default": "--gameName \u003cYOUR_GAME_NAME\u003e",
                      "description": "\u003cYOUR_GAME_NAME\u003e",
                      "format": "string",
                      "is_required": true,
                      "name": "--gameName \u003cYOUR_GAME_NAME\u003e",
                      "type": "named",
                      "value": "--gameName \u003cYOUR_GAME_NAME\u003e",
                      "value_hint": "\u003cYOUR_GAME_NAME\u003e"
                    },
                    {
                      "default": "--tagLine \u003cYOUR_TAG_LINE\u003e",
                      "description": "\u003cYOUR_TAG_LINE\u003e",
                      "format": "string",
                      "is_required": true,
                      "name": "--tagLine \u003cYOUR_TAG_LINE\u003e",
                      "type": "named",
                      "value": "--tagLine \u003cYOUR_TAG_LINE\u003e",
                      "value_hint": "\u003cYOUR_TAG_LINE\u003e"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "0.1.3"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "957763921",
                "source": "github",
                "url": "https://github.com/GeLi2001/tft-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get TFT match history for the current player.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "description": "Number of matches to retrieve.",
                        "type": "integer"
                      },
                      "start": {
                        "description": "Start index for pagination.",
                        "type": "integer"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "tft_match_history"
                },
                {
                  "description": "Get detailed information about a specific TFT match.",
                  "inputschema": {
                    "properties": {
                      "matchId": {
                        "description": "The match ID to get details for.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "matchId"
                    ],
                    "type": "object"
                  },
                  "name": "tft_match_details"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:41Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 3
    },
    "GongRzhe": {
      "mcpproviderid": "GongRzhe",
      "self": "#/mcpproviders/GongRzhe",
      "xid": "/mcpproviders/GongRzhe",
      "epoch": 10,
      "createdat": "2025-05-26T16:41:22.605024454Z",
      "modifiedat": "2025-05-26T16:41:23.212053528Z",

      "serversurl": "#/mcpproviders/GongRzhe/servers",
      "servers": {
        "Gmail-MCP-Server": {
          "serverid": "Gmail-MCP-Server",
          "self": "#/mcpproviders/GongRzhe/servers/Gmail-MCP-Server",
          "xid": "/mcpproviders/GongRzhe/servers/Gmail-MCP-Server",

          "metaurl": "#/mcpproviders/GongRzhe/servers/Gmail-MCP-Server/meta",
          "meta": {
            "serverid": "Gmail-MCP-Server",
            "self": "#/mcpproviders/GongRzhe/servers/Gmail-MCP-Server/meta",
            "xid": "/mcpproviders/GongRzhe/servers/Gmail-MCP-Server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:22.817934964Z",
            "modifiedat": "2025-05-26T16:41:22.817934964Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GongRzhe/servers/Gmail-MCP-Server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GongRzhe/servers/Gmail-MCP-Server/versions",
          "versions": {
            "1": {
              "serverid": "Gmail-MCP-Server",
              "versionid": "1",
              "self": "#/mcpproviders/GongRzhe/servers/Gmail-MCP-Server/versions/1",
              "xid": "/mcpproviders/GongRzhe/servers/Gmail-MCP-Server/versions/1",
              "epoch": 1,
              "name": "io.github.gongrzhe/gmail-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for Gmail integration in Claude Desktop with auto authentication support. This server enables AI assistants to manage Gmail through natural language interactions.",
              "createdat": "2025-05-26T16:41:22.817934964Z",
              "modifiedat": "2025-05-26T16:41:22.817934964Z",
              "ancestor": "1",
              "id": "36ad8cdb-408e-4110-827b-8d6a0a0f94bb",
              "packages": [
                {
                  "name": "@gongrzhe/server-gmail-autoauth-mcp",
                  "registry_name": "unknown",
                  "version": "1.1.9"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "908415894",
                "source": "github",
                "url": "https://github.com/GongRzhe/Gmail-MCP-Server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:11Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "JSON-MCP-Server": {
          "serverid": "JSON-MCP-Server",
          "self": "#/mcpproviders/GongRzhe/servers/JSON-MCP-Server",
          "xid": "/mcpproviders/GongRzhe/servers/JSON-MCP-Server",

          "metaurl": "#/mcpproviders/GongRzhe/servers/JSON-MCP-Server/meta",
          "meta": {
            "serverid": "JSON-MCP-Server",
            "self": "#/mcpproviders/GongRzhe/servers/JSON-MCP-Server/meta",
            "xid": "/mcpproviders/GongRzhe/servers/JSON-MCP-Server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:23.089184807Z",
            "modifiedat": "2025-05-26T16:41:23.089184807Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GongRzhe/servers/JSON-MCP-Server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GongRzhe/servers/JSON-MCP-Server/versions",
          "versions": {
            "1": {
              "serverid": "JSON-MCP-Server",
              "versionid": "1",
              "self": "#/mcpproviders/GongRzhe/servers/JSON-MCP-Server/versions/1",
              "xid": "/mcpproviders/GongRzhe/servers/JSON-MCP-Server/versions/1",
              "epoch": 1,
              "name": "io.github.gongrzhe/json-mcp-server",
              "isdefault": true,
              "description": "JSON handling and processing mcp server",
              "createdat": "2025-05-26T16:41:23.089184807Z",
              "modifiedat": "2025-05-26T16:41:23.089184807Z",
              "ancestor": "1",
              "id": "7e73a81a-e914-4cf7-aff2-482d0047e8dd",
              "packages": [
                {
                  "name": "@gongrzhe/server-json-mcp",
                  "registry_name": "unknown",
                  "version": "1.0.3"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "907849216",
                "source": "github",
                "url": "https://github.com/GongRzhe/JSON-MCP-Server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Query JSON data using JSONPath syntax with extended operations",
                  "inputschema": {
                    "properties": {
                      "jsonPath": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url",
                      "jsonPath"
                    ],
                    "type": "object"
                  },
                  "name": "query"
                },
                {
                  "description": "Filter JSON data using conditions",
                  "inputschema": {
                    "properties": {
                      "condition": {
                        "type": "string"
                      },
                      "jsonPath": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url",
                      "jsonPath",
                      "condition"
                    ],
                    "type": "object"
                  },
                  "name": "filter"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:41Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "Langflow-DOC-QA-SERVER": {
          "serverid": "Langflow-DOC-QA-SERVER",
          "self": "#/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER",
          "xid": "/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER",

          "metaurl": "#/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER/meta",
          "meta": {
            "serverid": "Langflow-DOC-QA-SERVER",
            "self": "#/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER/meta",
            "xid": "/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:23.152400375Z",
            "modifiedat": "2025-05-26T16:41:23.152400375Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER/versions",
          "versions": {
            "1": {
              "serverid": "Langflow-DOC-QA-SERVER",
              "versionid": "1",
              "self": "#/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER/versions/1",
              "xid": "/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER/versions/1",
              "epoch": 1,
              "name": "io.github.gongrzhe/langflow-doc-qa-server",
              "isdefault": true,
              "description": "A Model Context Protocol server for document Q\u0026A powered by Langflow . It demonstrates core MCP concepts by providing a simple interface to query documents through a Langflow backend.",
              "createdat": "2025-05-26T16:41:23.152400375Z",
              "modifiedat": "2025-05-26T16:41:23.152400375Z",
              "ancestor": "1",
              "id": "3c265bda-03e4-4e46-bceb-437a1b02f431",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "http://127.0.0.1:7860/api/v1/run/480ec7b3-29d2-4caa-b03b-e74118f35fac",
                      "name": "API_ENDPOINT"
                    }
                  ],
                  "name": "doc-qa-server",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "937522079",
                "source": "github",
                "url": "https://github.com/GongRzhe/Langflow-DOC-QA-SERVER"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Query the document Q\u0026A system with a prompt",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The query prompt to search for in the documents",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "query_docs"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:06Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "Quickchart-MCP-Server": {
          "serverid": "Quickchart-MCP-Server",
          "self": "#/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server",
          "xid": "/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server",

          "metaurl": "#/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server/meta",
          "meta": {
            "serverid": "Quickchart-MCP-Server",
            "self": "#/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server/meta",
            "xid": "/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:22.605024454Z",
            "modifiedat": "2025-05-26T16:41:22.605024454Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server/versions",
          "versions": {
            "1": {
              "serverid": "Quickchart-MCP-Server",
              "versionid": "1",
              "self": "#/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server/versions/1",
              "xid": "/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server/versions/1",
              "epoch": 1,
              "name": "io.github.gongrzhe/quickchart-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol server for generating charts using QuickChart.io  . It allows you to create various types of charts through MCP tools.",
              "createdat": "2025-05-26T16:41:22.605024454Z",
              "modifiedat": "2025-05-26T16:41:22.605024454Z",
              "ancestor": "1",
              "id": "904d15ba-e312-4dec-88b6-f52c1077bc96",
              "packages": [
                {
                  "name": "@gongrzhe/quickchart-mcp-server",
                  "registry_name": "npm",
                  "version": "1.0.6"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "937569492",
                "source": "github",
                "url": "https://github.com/GongRzhe/Quickchart-MCP-Server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Generate a chart using QuickChart",
                  "inputschema": {
                    "properties": {
                      "datasets": {
                        "items": {
                          "properties": {
                            "additionalConfig": {
                              "type": "object"
                            },
                            "backgroundColor": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              ]
                            },
                            "borderColor": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              ]
                            },
                            "data": {
                              "type": "array"
                            },
                            "label": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "labels": {
                        "description": "Labels for data points",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "options": {
                        "type": "object"
                      },
                      "title": {
                        "type": "string"
                      },
                      "type": {
                        "description": "Chart type (bar, line, pie, doughnut, radar, polarArea, scatter, bubble, radialGauge, speedometer)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "datasets"
                    ],
                    "type": "object"
                  },
                  "name": "generate_chart"
                },
                {
                  "description": "Download a chart image to a local file",
                  "inputschema": {
                    "properties": {
                      "config": {
                        "description": "Chart configuration object",
                        "type": "object"
                      },
                      "outputPath": {
                        "description": "Path where the chart image should be saved. If not provided, the chart will be saved to Desktop or home directory.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "config"
                    ],
                    "type": "object"
                  },
                  "name": "download_chart"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:04Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "REDIS-MCP-Server": {
          "serverid": "REDIS-MCP-Server",
          "self": "#/mcpproviders/GongRzhe/servers/REDIS-MCP-Server",
          "xid": "/mcpproviders/GongRzhe/servers/REDIS-MCP-Server",

          "metaurl": "#/mcpproviders/GongRzhe/servers/REDIS-MCP-Server/meta",
          "meta": {
            "serverid": "REDIS-MCP-Server",
            "self": "#/mcpproviders/GongRzhe/servers/REDIS-MCP-Server/meta",
            "xid": "/mcpproviders/GongRzhe/servers/REDIS-MCP-Server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:22.942012471Z",
            "modifiedat": "2025-05-26T16:41:22.942012471Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GongRzhe/servers/REDIS-MCP-Server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GongRzhe/servers/REDIS-MCP-Server/versions",
          "versions": {
            "1": {
              "serverid": "REDIS-MCP-Server",
              "versionid": "1",
              "self": "#/mcpproviders/GongRzhe/servers/REDIS-MCP-Server/versions/1",
              "xid": "/mcpproviders/GongRzhe/servers/REDIS-MCP-Server/versions/1",
              "epoch": 1,
              "name": "io.github.gongrzhe/redis-mcp-server",
              "isdefault": true,
              "description": "A Redis MCP server (pushed to https://github.com/modelcontextprotocol/servers/tree/main/src/redis) implementation for interacting with Redis databases. This server enables LLMs to interact with Redis key-value stores through a set of standardized tools.",
              "createdat": "2025-05-26T16:41:22.942012471Z",
              "modifiedat": "2025-05-26T16:41:22.942012471Z",
              "ancestor": "1",
              "id": "01129bff-3d65-4e3d-8e82-6f2f269f818c",
              "packages": [
                {
                  "name": "@gongrzhe/server-redis-mcp",
                  "package_arguments": [
                    {
                      "default": "mcp/redis",
                      "description": "Docker image to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp/redis",
                      "value_hint": "mcp/redis"
                    },
                    {
                      "default": "redis://host.docker.internal:6379",
                      "description": "Redis server connection string",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "redis://host.docker.internal:6379",
                      "value_hint": "host.docker.internal:6379"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "907849235",
                "source": "github",
                "url": "https://github.com/GongRzhe/REDIS-MCP-Server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Set a Redis key-value pair with optional expiration",
                  "inputschema": {
                    "properties": {
                      "expireSeconds": {
                        "description": "Optional expiration time in seconds",
                        "type": "number"
                      },
                      "key": {
                        "description": "Redis key",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value to store",
                        "type": "string"
                      }
                    },
                    "required": [
                      "key",
                      "value"
                    ],
                    "type": "object"
                  },
                  "name": "set"
                },
                {
                  "description": "Get value by key from Redis",
                  "inputschema": {
                    "properties": {
                      "key": {
                        "description": "Redis key to retrieve",
                        "type": "string"
                      }
                    },
                    "required": [
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "get"
                },
                {
                  "description": "Delete one or more keys from Redis",
                  "inputschema": {
                    "properties": {
                      "key": {
                        "description": "Key or array of keys to delete",
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "required": [
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "delete"
                },
                {
                  "description": "List Redis keys matching a pattern",
                  "inputschema": {
                    "properties": {
                      "pattern": {
                        "description": "Pattern to match keys (default: *)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:21Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "TRAVEL-PLANNER-MCP-Server": {
          "serverid": "TRAVEL-PLANNER-MCP-Server",
          "self": "#/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server",
          "xid": "/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server",

          "metaurl": "#/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server/meta",
          "meta": {
            "serverid": "TRAVEL-PLANNER-MCP-Server",
            "self": "#/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server/meta",
            "xid": "/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:23.212053528Z",
            "modifiedat": "2025-05-26T16:41:23.212053528Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server/versions",
          "versions": {
            "1": {
              "serverid": "TRAVEL-PLANNER-MCP-Server",
              "versionid": "1",
              "self": "#/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server/versions/1",
              "xid": "/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server/versions/1",
              "epoch": 1,
              "name": "io.github.gongrzhe/travel-planner-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:23.212053528Z",
              "modifiedat": "2025-05-26T16:41:23.212053528Z",
              "ancestor": "1",
              "id": "7d8aa739-c9c6-4afd-991b-cf425be475db",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_google_maps_api_key",
                      "name": "GOOGLE_MAPS_API_KEY"
                    }
                  ],
                  "name": "@gongrzhe/server-travelplanner-mcp",
                  "registry_name": "unknown",
                  "version": "0.1.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "907849260",
                "source": "github",
                "url": "https://github.com/GongRzhe/TRAVEL-PLANNER-MCP-Server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Creates a personalized travel itinerary based on user preferences",
                  "inputschema": {
                    "properties": {
                      "budget": {
                        "description": "Budget in USD",
                        "type": "number"
                      },
                      "destination": {
                        "description": "Destination location",
                        "type": "string"
                      },
                      "endDate": {
                        "description": "End date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "origin": {
                        "description": "Starting location",
                        "type": "string"
                      },
                      "preferences": {
                        "description": "Travel preferences",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "startDate": {
                        "description": "Start date (YYYY-MM-DD)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "origin",
                      "destination",
                      "startDate",
                      "endDate"
                    ],
                    "type": "object"
                  },
                  "name": "create_itinerary"
                },
                {
                  "description": "Optimizes an existing itinerary based on specified criteria",
                  "inputschema": {
                    "properties": {
                      "itineraryId": {
                        "description": "ID of the itinerary to optimize",
                        "type": "string"
                      },
                      "optimizationCriteria": {
                        "description": "Criteria for optimization (time, cost, etc.)",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "itineraryId",
                      "optimizationCriteria"
                    ],
                    "type": "object"
                  },
                  "name": "optimize_itinerary"
                },
                {
                  "description": "Searches for attractions and points of interest in a specified location",
                  "inputschema": {
                    "properties": {
                      "categories": {
                        "description": "Categories of attractions",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "location": {
                        "description": "Location to search attractions",
                        "type": "string"
                      },
                      "radius": {
                        "description": "Search radius in meters",
                        "type": "number"
                      }
                    },
                    "required": [
                      "location"
                    ],
                    "type": "object"
                  },
                  "name": "search_attractions"
                },
                {
                  "description": "Retrieves available transportation options between two points",
                  "inputschema": {
                    "properties": {
                      "date": {
                        "description": "Travel date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "destination": {
                        "description": "Destination point",
                        "type": "string"
                      },
                      "origin": {
                        "description": "Starting point",
                        "type": "string"
                      }
                    },
                    "required": [
                      "origin",
                      "destination",
                      "date"
                    ],
                    "type": "object"
                  },
                  "name": "get_transport_options"
                },
                {
                  "description": "Searches for accommodation options in a specified location",
                  "inputschema": {
                    "properties": {
                      "budget": {
                        "description": "Maximum price per night",
                        "type": "number"
                      },
                      "checkIn": {
                        "description": "Check-in date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "checkOut": {
                        "description": "Check-out date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "location": {
                        "description": "Location to search",
                        "type": "string"
                      }
                    },
                    "required": [
                      "location",
                      "checkIn",
                      "checkOut"
                    ],
                    "type": "object"
                  },
                  "name": "get_accommodations"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:06Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "image-generation-mcp-server": {
          "serverid": "image-generation-mcp-server",
          "self": "#/mcpproviders/GongRzhe/servers/image-generation-mcp-server",
          "xid": "/mcpproviders/GongRzhe/servers/image-generation-mcp-server",

          "metaurl": "#/mcpproviders/GongRzhe/servers/image-generation-mcp-server/meta",
          "meta": {
            "serverid": "image-generation-mcp-server",
            "self": "#/mcpproviders/GongRzhe/servers/image-generation-mcp-server/meta",
            "xid": "/mcpproviders/GongRzhe/servers/image-generation-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:23.021171346Z",
            "modifiedat": "2025-05-26T16:41:23.021171346Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GongRzhe/servers/image-generation-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GongRzhe/servers/image-generation-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "image-generation-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/GongRzhe/servers/image-generation-mcp-server/versions/1",
              "xid": "/mcpproviders/GongRzhe/servers/image-generation-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.gongrzhe/image-generation-mcp-server",
              "isdefault": true,
              "description": "This MCP server provides image generation capabilities using the Replicate Flux model.",
              "createdat": "2025-05-26T16:41:23.021171346Z",
              "modifiedat": "2025-05-26T16:41:23.021171346Z",
              "ancestor": "1",
              "id": "5bf6d045-dc83-4b51-858f-eb9c3403087f",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-replicate-api-token",
                      "name": "REPLICATE_API_TOKEN"
                    },
                    {
                      "description": "alternative-model-name",
                      "name": "MODEL"
                    }
                  ],
                  "name": "@gongrzhe/image-gen-server",
                  "registry_name": "unknown",
                  "version": "1.0.1"
                }
              ],
              "repository": {
                "id": "937552153",
                "source": "github",
                "url": "https://github.com/GongRzhe/Image-Generation-MCP-Server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:22Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "office-powerpoint-mcp-server": {
          "serverid": "office-powerpoint-mcp-server",
          "self": "#/mcpproviders/GongRzhe/servers/office-powerpoint-mcp-server",
          "xid": "/mcpproviders/GongRzhe/servers/office-powerpoint-mcp-server",

          "metaurl": "#/mcpproviders/GongRzhe/servers/office-powerpoint-mcp-server/meta",
          "meta": {
            "serverid": "office-powerpoint-mcp-server",
            "self": "#/mcpproviders/GongRzhe/servers/office-powerpoint-mcp-server/meta",
            "xid": "/mcpproviders/GongRzhe/servers/office-powerpoint-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:22.741925358Z",
            "modifiedat": "2025-05-26T16:41:22.741925358Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GongRzhe/servers/office-powerpoint-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GongRzhe/servers/office-powerpoint-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "office-powerpoint-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/GongRzhe/servers/office-powerpoint-mcp-server/versions/1",
              "xid": "/mcpproviders/GongRzhe/servers/office-powerpoint-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.gongrzhe/office-powerpoint-mcp-server",
              "isdefault": true,
              "description": "A MCP (Model Context Protocol) server for PowerPoint manipulation using python-pptx. This server provides tools for creating, editing, and manipulating PowerPoint presentations through the MCP protocol.",
              "createdat": "2025-05-26T16:41:22.741925358Z",
              "modifiedat": "2025-05-26T16:41:22.741925358Z",
              "ancestor": "1",
              "id": "d3194c4f-b73a-40b2-9170-0e6e8ee713c0",
              "packages": [
                {
                  "name": "office-powerpoint-mcp-server",
                  "package_arguments": [
                    {
                      "default": "--from office-powerpoint-mcp-server",
                      "description": "Named argument --from with value office-powerpoint-mcp-server",
                      "format": "string",
                      "is_required": true,
                      "name": "--from office-powerpoint-mcp-server",
                      "type": "named",
                      "value": "--from office-powerpoint-mcp-server",
                      "value_hint": "office-powerpoint-mcp-server"
                    },
                    {
                      "default": "ppt_mcp_server",
                      "description": "Positional argument ppt_mcp_server",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "ppt_mcp_server",
                      "value_hint": "ppt_mcp_server"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "repository": {
                "id": "954558050",
                "source": "github",
                "url": "https://github.com/GongRzhe/Office-PowerPoint-MCP-Server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:42Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "office-word-mcp-server": {
          "serverid": "office-word-mcp-server",
          "self": "#/mcpproviders/GongRzhe/servers/office-word-mcp-server",
          "xid": "/mcpproviders/GongRzhe/servers/office-word-mcp-server",

          "metaurl": "#/mcpproviders/GongRzhe/servers/office-word-mcp-server/meta",
          "meta": {
            "serverid": "office-word-mcp-server",
            "self": "#/mcpproviders/GongRzhe/servers/office-word-mcp-server/meta",
            "xid": "/mcpproviders/GongRzhe/servers/office-word-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:22.6835676Z",
            "modifiedat": "2025-05-26T16:41:22.6835676Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GongRzhe/servers/office-word-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GongRzhe/servers/office-word-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "office-word-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/GongRzhe/servers/office-word-mcp-server/versions/1",
              "xid": "/mcpproviders/GongRzhe/servers/office-word-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.gongrzhe/office-word-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for creating, reading, and manipulating Microsoft Word documents. This server enables AI assistants to work with Word documents through a standardized interface, providing rich document editing capabilities.",
              "createdat": "2025-05-26T16:41:22.6835676Z",
              "modifiedat": "2025-05-26T16:41:22.6835676Z",
              "ancestor": "1",
              "id": "4d3dba83-9775-4b5a-9de7-f18f7263460c",
              "packages": [
                {
                  "name": "office-word-mcp-server",
                  "package_arguments": [
                    {
                      "default": "word_mcp_server",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "word_mcp_server",
                      "value_hint": "word_mcp_server"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.1.3"
                }
              ],
              "repository": {
                "id": "954434732",
                "source": "github",
                "url": "https://github.com/GongRzhe/Office-Word-MCP-Server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:44Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "terminal-controller-mcp": {
          "serverid": "terminal-controller-mcp",
          "self": "#/mcpproviders/GongRzhe/servers/terminal-controller-mcp",
          "xid": "/mcpproviders/GongRzhe/servers/terminal-controller-mcp",

          "metaurl": "#/mcpproviders/GongRzhe/servers/terminal-controller-mcp/meta",
          "meta": {
            "serverid": "terminal-controller-mcp",
            "self": "#/mcpproviders/GongRzhe/servers/terminal-controller-mcp/meta",
            "xid": "/mcpproviders/GongRzhe/servers/terminal-controller-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:22.87084015Z",
            "modifiedat": "2025-05-26T16:41:22.87084015Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GongRzhe/servers/terminal-controller-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GongRzhe/servers/terminal-controller-mcp/versions",
          "versions": {
            "1": {
              "serverid": "terminal-controller-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/GongRzhe/servers/terminal-controller-mcp/versions/1",
              "xid": "/mcpproviders/GongRzhe/servers/terminal-controller-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.gongrzhe/terminal-controller-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that enables secure terminal command execution, directory navigation, and file system operations through a standardized interface.",
              "createdat": "2025-05-26T16:41:22.87084015Z",
              "modifiedat": "2025-05-26T16:41:22.87084015Z",
              "ancestor": "1",
              "id": "6275eefc-3f97-4a30-85ca-9678de62bdcf",
              "packages": [
                {
                  "name": "terminal-controller",
                  "package_arguments": [
                    {
                      "default": "-m terminal_controller",
                      "description": "Positional module argument to run the module terminal_controller with python",
                      "format": "string",
                      "is_required": true,
                      "name": "-m terminal_controller",
                      "type": "named",
                      "value": "-m terminal_controller",
                      "value_hint": "terminal_controller"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.8"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "938867662",
                "source": "github",
                "url": "https://github.com/GongRzhe/terminal-controller-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Execute a terminal command and return its results.",
                  "inputschema": {
                    "properties": {
                      "command": {
                        "type": "string"
                      },
                      "timeout": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "command"
                    ],
                    "type": "object"
                  },
                  "name": "execute_command"
                },
                {
                  "description": "Get recent command execution history.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "type": "integer"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_command_history"
                },
                {
                  "description": "Get the current working directory.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_current_directory"
                },
                {
                  "description": "Change the current working directory.",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "change_directory"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:38Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 10
    },
    "GreptimeTeam": {
      "mcpproviderid": "GreptimeTeam",
      "self": "#/mcpproviders/GreptimeTeam",
      "xid": "/mcpproviders/GreptimeTeam",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:48.954614223Z",
      "modifiedat": "2025-05-26T16:41:49.114289419Z",

      "serversurl": "#/mcpproviders/GreptimeTeam/servers",
      "servers": {
        "greptimedb": {
          "serverid": "greptimedb",
          "self": "#/mcpproviders/GreptimeTeam/servers/greptimedb",
          "xid": "/mcpproviders/GreptimeTeam/servers/greptimedb",

          "metaurl": "#/mcpproviders/GreptimeTeam/servers/greptimedb/meta",
          "versionsurl": "#/mcpproviders/GreptimeTeam/servers/greptimedb/versions",
          "versions": {},
          "versionscount": 0
        },
        "greptimedb-mcp-server": {
          "serverid": "greptimedb-mcp-server",
          "self": "#/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server",
          "xid": "/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server",

          "metaurl": "#/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server/meta",
          "meta": {
            "serverid": "greptimedb-mcp-server",
            "self": "#/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server/meta",
            "xid": "/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:48.954614223Z",
            "modifiedat": "2025-05-26T16:41:48.954614223Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "greptimedb-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server/versions/1",
              "xid": "/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.greptimeteam/greptimedb-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation for GreptimeDB",
              "createdat": "2025-05-26T16:41:48.954614223Z",
              "modifiedat": "2025-05-26T16:41:48.954614223Z",
              "ancestor": "1",
              "id": "7974b19d-8030-428b-a016-168c65058b41",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "localhost",
                      "name": "GREPTIMEDB_HOST"
                    },
                    {
                      "description": "4002",
                      "name": "GREPTIMEDB_PORT"
                    },
                    {
                      "description": "root",
                      "name": "GREPTIMEDB_USER"
                    },
                    {
                      "description": "public",
                      "name": "GREPTIMEDB_DATABASE"
                    }
                  ],
                  "name": "greptimedb-mcp-server",
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [
                {
                  "arguments": [],
                  "description": "Detailed explanation of when and how to use this prompt.",
                  "name": "example_prompt"
                }
              ],
              "repository": {
                "id": "947171153",
                "source": "github",
                "url": "https://github.com/GreptimeTeam/greptimedb-mcp-server"
              },
              "resources": [
                {
                  "description": "Data in table: {table}",
                  "mimetype": "text/plain",
                  "name": "Table",
                  "uritemplate": "greptime://{table}/data"
                }
              ],
              "tools": [
                {
                  "description": "Execute SQL query against GreptimeDB. Please use MySQL dialect when generating SQL queries.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SQL query to execute (using MySQL dialect)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_sql"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:25Z",
                "version": "0.0.1-seed"
              },

              "meta": {
                "serverid": "greptimedb",
                "self": "#/mcpproviders/GreptimeTeam/servers/greptimedb/meta",
                "xid": "/mcpproviders/GreptimeTeam/servers/greptimedb/meta",
                "epoch": 1,
                "createdat": "2025-05-26T16:41:49.114289419Z",
                "modifiedat": "2025-05-26T16:41:49.114289419Z",
                "readonly": false,
                "compatibility": "none",

                "defaultversionid": "1",
                "defaultversionurl": "#/mcpproviders/GreptimeTeam/servers/greptimedb/versions/1",
                "defaultversionsticky": false
              }
            },
            "1": {
              "serverid": "greptimedb",
              "versionid": "1",
              "self": "#/mcpproviders/GreptimeTeam/servers/greptimedb/versions/1",
              "xid": "/mcpproviders/GreptimeTeam/servers/greptimedb/versions/1",
              "epoch": 1,
              "name": "io.github.greptimeteam/greptimedb",
              "isdefault": true,
              "description": "Open-source, cloud-native, unified observability database for metrics, logs and traces, supporting SQL/PromQL/Streaming. Available on GreptimeCloud.",
              "createdat": "2025-05-26T16:41:49.114289419Z",
              "modifiedat": "2025-05-26T16:41:49.114289419Z",
              "ancestor": "1",
              "id": "68d8d603-4f42-4ee3-b49d-ef890fb745c0",
              "packages": [
                {
                  "name": "GreptimeTeam/greptimedb",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "480217156",
                "source": "github",
                "url": "https://github.com/GreptimeTeam/greptimedb"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:27Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 2
        }
      },
      "serverscount": 2
    },
    "InditexTech": {
      "mcpproviderid": "InditexTech",
      "self": "#/mcpproviders/InditexTech",
      "xid": "/mcpproviders/InditexTech",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:58.331352734Z",
      "modifiedat": "2025-05-26T16:41:58.436921478Z",

      "serversurl": "#/mcpproviders/InditexTech/servers",
      "servers": {
        "mcp-server-simulator-ios-idb": {
          "serverid": "mcp-server-simulator-ios-idb",
          "self": "#/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb",
          "xid": "/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb",

          "metaurl": "#/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb/meta",
          "meta": {
            "serverid": "mcp-server-simulator-ios-idb",
            "self": "#/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb/meta",
            "xid": "/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:58.331352734Z",
            "modifiedat": "2025-05-26T16:41:58.331352734Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-simulator-ios-idb",
              "versionid": "1",
              "self": "#/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb/versions/1",
              "xid": "/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb/versions/1",
              "epoch": 1,
              "name": "io.github.inditextech/mcp-server-simulator-ios-idb",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that enables LLMs to interact with iOS simulators through natural language commands.",
              "createdat": "2025-05-26T16:41:58.331352734Z",
              "modifiedat": "2025-05-26T16:41:58.331352734Z",
              "ancestor": "1",
              "id": "b9fa6e10-c6f4-424d-b289-469d49decaaf",
              "packages": [
                {
                  "name": "mcp-server-simulator-ios-idb",
                  "registry_name": "unknown",
                  "version": "1.0.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "950568971",
                "source": "github",
                "url": "https://github.com/InditexTech/mcp-server-simulator-ios-idb"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Main tool for processing natural language instructions",
                  "inputschema": {
                    "properties": {
                      "instruction": {
                        "description": "Text instruction to process",
                        "type": "string"
                      }
                    },
                    "required": [
                      "instruction"
                    ],
                    "type": "object"
                  },
                  "name": "process-instruction"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:30Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-teams-server": {
          "serverid": "mcp-teams-server",
          "self": "#/mcpproviders/InditexTech/servers/mcp-teams-server",
          "xid": "/mcpproviders/InditexTech/servers/mcp-teams-server",

          "metaurl": "#/mcpproviders/InditexTech/servers/mcp-teams-server/meta",
          "meta": {
            "serverid": "mcp-teams-server",
            "self": "#/mcpproviders/InditexTech/servers/mcp-teams-server/meta",
            "xid": "/mcpproviders/InditexTech/servers/mcp-teams-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:58.436921478Z",
            "modifiedat": "2025-05-26T16:41:58.436921478Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/InditexTech/servers/mcp-teams-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/InditexTech/servers/mcp-teams-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-teams-server",
              "versionid": "1",
              "self": "#/mcpproviders/InditexTech/servers/mcp-teams-server/versions/1",
              "xid": "/mcpproviders/InditexTech/servers/mcp-teams-server/versions/1",
              "epoch": 1,
              "name": "io.github.inditextech/mcp-teams-server",
              "isdefault": true,
              "description": "An MCP (Model Context Protocol) server implementation for Microsoft Teams integration, providing capabilities to read messages, create messages, reply to messages, mention members.",
              "createdat": "2025-05-26T16:41:58.436921478Z",
              "modifiedat": "2025-05-26T16:41:58.436921478Z",
              "ancestor": "1",
              "id": "71120aef-743c-47ee-bb7d-3b215c7f22a7",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "${input:apiKey}",
                      "name": "API_KEY"
                    }
                  ],
                  "name": "mcp-teams-server",
                  "registry_name": "npm",
                  "version": "1.0.4"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "950628723",
                "source": "github",
                "url": "https://github.com/InditexTech/mcp-teams-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:23Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "JetBrains": {
      "mcpproviderid": "JetBrains",
      "self": "#/mcpproviders/JetBrains",
      "xid": "/mcpproviders/JetBrains",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:38.932459714Z",
      "modifiedat": "2025-05-26T16:42:38.932459714Z",

      "serversurl": "#/mcpproviders/JetBrains/servers",
      "servers": {
        "mcp-jetbrains": {
          "serverid": "mcp-jetbrains",
          "self": "#/mcpproviders/JetBrains/servers/mcp-jetbrains",
          "xid": "/mcpproviders/JetBrains/servers/mcp-jetbrains",

          "metaurl": "#/mcpproviders/JetBrains/servers/mcp-jetbrains/meta",
          "meta": {
            "serverid": "mcp-jetbrains",
            "self": "#/mcpproviders/JetBrains/servers/mcp-jetbrains/meta",
            "xid": "/mcpproviders/JetBrains/servers/mcp-jetbrains/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:38.932459714Z",
            "modifiedat": "2025-05-26T16:42:38.932459714Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/JetBrains/servers/mcp-jetbrains/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/JetBrains/servers/mcp-jetbrains/versions",
          "versions": {
            "1": {
              "serverid": "mcp-jetbrains",
              "versionid": "1",
              "self": "#/mcpproviders/JetBrains/servers/mcp-jetbrains/versions/1",
              "xid": "/mcpproviders/JetBrains/servers/mcp-jetbrains/versions/1",
              "epoch": 1,
              "name": "io.github.jetbrains/mcp-jetbrains",
              "isdefault": true,
              "description": "A model context protocol server to work with JetBrains IDEs: IntelliJ, PyCharm, WebStorm, etc. Also, works with Android Studio",
              "createdat": "2025-05-26T16:42:38.932459714Z",
              "modifiedat": "2025-05-26T16:42:38.932459714Z",
              "ancestor": "1",
              "id": "a51c6dec-56ed-403e-831b-fa5f155f8696",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "true",
                      "name": "LOG_ENABLED"
                    }
                  ],
                  "name": "@jetbrains/mcp-proxy",
                  "registry_name": "unknown",
                  "version": "1.8.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "900744587",
                "source": "github",
                "url": "https://github.com/JetBrains/mcp-jetbrains"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:50Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "JexinSam": {
      "mcpproviderid": "JexinSam",
      "self": "#/mcpproviders/JexinSam",
      "xid": "/mcpproviders/JexinSam",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:05.564305259Z",
      "modifiedat": "2025-05-26T16:42:05.564305259Z",

      "serversurl": "#/mcpproviders/JexinSam/servers",
      "servers": {
        "mssql_mcp_server": {
          "serverid": "mssql_mcp_server",
          "self": "#/mcpproviders/JexinSam/servers/mssql_mcp_server",
          "xid": "/mcpproviders/JexinSam/servers/mssql_mcp_server",

          "metaurl": "#/mcpproviders/JexinSam/servers/mssql_mcp_server/meta",
          "meta": {
            "serverid": "mssql_mcp_server",
            "self": "#/mcpproviders/JexinSam/servers/mssql_mcp_server/meta",
            "xid": "/mcpproviders/JexinSam/servers/mssql_mcp_server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:05.564305259Z",
            "modifiedat": "2025-05-26T16:42:05.564305259Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/JexinSam/servers/mssql_mcp_server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/JexinSam/servers/mssql_mcp_server/versions",
          "versions": {
            "1": {
              "serverid": "mssql_mcp_server",
              "versionid": "1",
              "self": "#/mcpproviders/JexinSam/servers/mssql_mcp_server/versions/1",
              "xid": "/mcpproviders/JexinSam/servers/mssql_mcp_server/versions/1",
              "epoch": 1,
              "name": "io.github.jexinsam/mssql_mcp_server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server facilitating secure interactions with MSSQL databases.",
              "createdat": "2025-05-26T16:42:05.564305259Z",
              "modifiedat": "2025-05-26T16:42:05.564305259Z",
              "ancestor": "1",
              "id": "53290776-f4aa-488d-a10f-135a17645b02",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "mssql_driver",
                      "name": "MSSQL_DRIVER"
                    },
                    {
                      "description": "localhost",
                      "name": "MSSQL_HOST"
                    },
                    {
                      "description": "your_username",
                      "name": "MSSQL_USER"
                    },
                    {
                      "description": "your_password",
                      "name": "MSSQL_PASSWORD"
                    },
                    {
                      "description": "your_database",
                      "name": "MSSQL_DATABASE"
                    }
                  ],
                  "name": "mssql_mcp_server",
                  "package_arguments": [
                    {
                      "default": "--directory path/to/mssql_mcp_server",
                      "description": "Directory path for the MCP server",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory path/to/mssql_mcp_server",
                      "type": "named",
                      "value": "--directory path/to/mssql_mcp_server",
                      "value_hint": "path/to/mssql_mcp_server"
                    },
                    {
                      "default": "mssql_mcp_server",
                      "description": "MCP server module name to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mssql_mcp_server",
                      "value_hint": "mssql_mcp_server"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "924542723",
                "source": "github",
                "url": "https://github.com/JexinSam/mssql_mcp_server"
              },
              "resources": [
                {
                  "description": "Data in table: {table}",
                  "mimetype": "text/plain",
                  "name": "Table",
                  "uritemplate": "mssql://{table}/data"
                }
              ],
              "tools": [
                {
                  "description": "Execute an SQL query on the MSSQL server",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_sql"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:15Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "JordiNeil": {
      "mcpproviderid": "JordiNeil",
      "self": "#/mcpproviders/JordiNeil",
      "xid": "/mcpproviders/JordiNeil",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:30.875188554Z",
      "modifiedat": "2025-05-26T16:41:30.875188554Z",

      "serversurl": "#/mcpproviders/JordiNeil/servers",
      "servers": {
        "mcp-databricks-server": {
          "serverid": "mcp-databricks-server",
          "self": "#/mcpproviders/JordiNeil/servers/mcp-databricks-server",
          "xid": "/mcpproviders/JordiNeil/servers/mcp-databricks-server",

          "metaurl": "#/mcpproviders/JordiNeil/servers/mcp-databricks-server/meta",
          "meta": {
            "serverid": "mcp-databricks-server",
            "self": "#/mcpproviders/JordiNeil/servers/mcp-databricks-server/meta",
            "xid": "/mcpproviders/JordiNeil/servers/mcp-databricks-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:30.875188554Z",
            "modifiedat": "2025-05-26T16:41:30.875188554Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/JordiNeil/servers/mcp-databricks-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/JordiNeil/servers/mcp-databricks-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-databricks-server",
              "versionid": "1",
              "self": "#/mcpproviders/JordiNeil/servers/mcp-databricks-server/versions/1",
              "xid": "/mcpproviders/JordiNeil/servers/mcp-databricks-server/versions/1",
              "epoch": 1,
              "name": "io.github.jordineil/mcp-databricks-server",
              "isdefault": true,
              "description": "MCP Server for Databricks",
              "createdat": "2025-05-26T16:41:30.875188554Z",
              "modifiedat": "2025-05-26T16:41:30.875188554Z",
              "ancestor": "1",
              "id": "5061131f-b74a-4997-a349-99e7789b0eb3",
              "packages": [
                {
                  "name": "JordiNeil/mcp-databricks-server",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "952279762",
                "source": "github",
                "url": "https://github.com/JordiNeil/mcp-databricks-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Execute SQL queries on your Databricks SQL warehouse",
                  "inputschema": {
                    "properties": {
                      "sql": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "sql"
                    ],
                    "type": "object"
                  },
                  "name": "run_sql_query"
                },
                {
                  "description": "List all Databricks jobs in your workspace",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_jobs"
                },
                {
                  "description": "Get the status of a specific Databricks job by ID",
                  "inputschema": {
                    "properties": {
                      "job_id": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "job_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_job_status"
                },
                {
                  "description": "Get detailed information about a specific Databricks job",
                  "inputschema": {
                    "properties": {
                      "job_id": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "job_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_job_details"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:10Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Klavis-AI": {
      "mcpproviderid": "Klavis-AI",
      "self": "#/mcpproviders/Klavis-AI",
      "xid": "/mcpproviders/Klavis-AI",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:49.967857898Z",
      "modifiedat": "2025-05-26T16:41:49.967857898Z",

      "serversurl": "#/mcpproviders/Klavis-AI/servers",
      "servers": {
        "klavis": {
          "serverid": "klavis",
          "self": "#/mcpproviders/Klavis-AI/servers/klavis",
          "xid": "/mcpproviders/Klavis-AI/servers/klavis",

          "metaurl": "#/mcpproviders/Klavis-AI/servers/klavis/meta",
          "meta": {
            "serverid": "klavis",
            "self": "#/mcpproviders/Klavis-AI/servers/klavis/meta",
            "xid": "/mcpproviders/Klavis-AI/servers/klavis/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:49.967857898Z",
            "modifiedat": "2025-05-26T16:41:49.967857898Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Klavis-AI/servers/klavis/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Klavis-AI/servers/klavis/versions",
          "versions": {
            "1": {
              "serverid": "klavis",
              "versionid": "1",
              "self": "#/mcpproviders/Klavis-AI/servers/klavis/versions/1",
              "xid": "/mcpproviders/Klavis-AI/servers/klavis/versions/1",
              "epoch": 1,
              "name": "io.github.klavis-ai/klavis",
              "isdefault": true,
              "description": "Klavis AI (YC X25):  Open Source MCP integration for AI applications",
              "createdat": "2025-05-26T16:41:49.967857898Z",
              "modifiedat": "2025-05-26T16:41:49.967857898Z",
              "ancestor": "1",
              "id": "0bc33e11-876e-4b0f-9c72-75c126d89978",
              "packages": [
                {
                  "name": "Klavis-AI/klavis",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "965974441",
                "source": "github",
                "url": "https://github.com/Klavis-AI/klavis"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Scrape a single webpage with advanced options for content extraction. Supports various formats including markdown, HTML, and screenshots. Can execute custom actions like clicking or scrolling before scraping.",
                  "inputschema": {
                    "properties": {
                      "actions": {
                        "description": "List of actions to perform before scraping",
                        "items": {
                          "properties": {
                            "direction": {
                              "description": "Scroll direction",
                              "enum": [
                                "up",
                                "down"
                              ],
                              "type": "string"
                            },
                            "fullPage": {
                              "description": "Take full page screenshot",
                              "type": "boolean"
                            },
                            "key": {
                              "description": "Key to press (for press action)",
                              "type": "string"
                            },
                            "milliseconds": {
                              "description": "Time to wait in milliseconds (for wait action)",
                              "type": "number"
                            },
                            "script": {
                              "description": "JavaScript code to execute",
                              "type": "string"
                            },
                            "selector": {
                              "description": "CSS selector for the target element",
                              "type": "string"
                            },
                            "text": {
                              "description": "Text to write (for write action)",
                              "type": "string"
                            },
                            "type": {
                              "description": "Type of action to perform",
                              "enum": [
                                "wait",
                                "click",
                                "screenshot",
                                "write",
                                "press",
                                "scroll",
                                "scrape",
                                "executeJavascript"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "excludeTags": {
                        "description": "HTML tags to exclude from extraction",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "extract": {
                        "description": "Configuration for structured data extraction",
                        "properties": {
                          "prompt": {
                            "description": "User prompt for LLM extraction",
                            "type": "string"
                          },
                          "schema": {
                            "description": "Schema for structured data extraction",
                            "type": "object"
                          },
                          "systemPrompt": {
                            "description": "System prompt for LLM extraction",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "formats": {
                        "default": [
                          "markdown"
                        ],
                        "description": "Content formats to extract (default: ['markdown'])",
                        "items": {
                          "enum": [
                            "markdown",
                            "html",
                            "rawHtml",
                            "screenshot",
                            "links",
                            "screenshot@fullPage",
                            "extract"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "includeTags": {
                        "description": "HTML tags to specifically include in extraction",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "location": {
                        "description": "Location settings for scraping",
                        "properties": {
                          "country": {
                            "description": "Country code for geolocation",
                            "type": "string"
                          },
                          "languages": {
                            "description": "Language codes for content",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "mobile": {
                        "description": "Use mobile viewport",
                        "type": "boolean"
                      },
                      "onlyMainContent": {
                        "description": "Extract only the main content, filtering out navigation, footers, etc.",
                        "type": "boolean"
                      },
                      "removeBase64Images": {
                        "description": "Remove base64 encoded images from output",
                        "type": "boolean"
                      },
                      "skipTlsVerification": {
                        "description": "Skip TLS certificate verification",
                        "type": "boolean"
                      },
                      "timeout": {
                        "description": "Maximum time in milliseconds to wait for the page to load",
                        "type": "number"
                      },
                      "url": {
                        "description": "The URL to scrape",
                        "type": "string"
                      },
                      "waitFor": {
                        "description": "Time in milliseconds to wait for dynamic content to load",
                        "type": "number"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_scrape"
                },
                {
                  "description": "Discover URLs from a starting point. Can use both sitemap.xml and HTML link discovery.",
                  "inputschema": {
                    "properties": {
                      "ignoreSitemap": {
                        "description": "Skip sitemap.xml discovery and only use HTML links",
                        "type": "boolean"
                      },
                      "includeSubdomains": {
                        "description": "Include URLs from subdomains in results",
                        "type": "boolean"
                      },
                      "limit": {
                        "description": "Maximum number of URLs to return",
                        "type": "number"
                      },
                      "search": {
                        "description": "Optional search term to filter URLs",
                        "type": "string"
                      },
                      "sitemapOnly": {
                        "description": "Only use sitemap.xml for discovery, ignore HTML links",
                        "type": "boolean"
                      },
                      "url": {
                        "description": "Starting URL for URL discovery",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_map"
                },
                {
                  "description": "Start an asynchronous crawl of multiple pages from a starting URL. Supports depth control, path filtering, and webhook notifications.",
                  "inputschema": {
                    "properties": {
                      "allowBackwardLinks": {
                        "description": "Allow crawling links that point to parent directories",
                        "type": "boolean"
                      },
                      "allowExternalLinks": {
                        "description": "Allow crawling links to external domains",
                        "type": "boolean"
                      },
                      "deduplicateSimilarURLs": {
                        "description": "Remove similar URLs during crawl",
                        "type": "boolean"
                      },
                      "excludePaths": {
                        "description": "URL paths to exclude from crawling",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "ignoreQueryParameters": {
                        "description": "Ignore query parameters when comparing URLs",
                        "type": "boolean"
                      },
                      "ignoreSitemap": {
                        "description": "Skip sitemap.xml discovery",
                        "type": "boolean"
                      },
                      "includePaths": {
                        "description": "Only crawl these URL paths",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "limit": {
                        "description": "Maximum number of pages to crawl",
                        "type": "number"
                      },
                      "maxDepth": {
                        "description": "Maximum link depth to crawl",
                        "type": "number"
                      },
                      "scrapeOptions": {
                        "description": "Options for scraping each page",
                        "properties": {
                          "excludeTags": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "formats": {
                            "items": {
                              "enum": [
                                "markdown",
                                "html",
                                "rawHtml",
                                "screenshot",
                                "links",
                                "screenshot@fullPage",
                                "extract"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "includeTags": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "onlyMainContent": {
                            "type": "boolean"
                          },
                          "waitFor": {
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "url": {
                        "description": "Starting URL for the crawl",
                        "type": "string"
                      },
                      "webhook": {
                        "oneOf": [
                          {
                            "description": "Webhook URL to notify when crawl is complete",
                            "type": "string"
                          },
                          {
                            "properties": {
                              "headers": {
                                "description": "Custom headers for webhook requests",
                                "type": "object"
                              },
                              "url": {
                                "description": "Webhook URL",
                                "type": "string"
                              }
                            },
                            "required": [
                              "url"
                            ],
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_crawl"
                },
                {
                  "description": "Scrape multiple URLs in batch mode. Returns a job ID that can be used to check status.",
                  "inputschema": {
                    "properties": {
                      "options": {
                        "properties": {
                          "excludeTags": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "formats": {
                            "items": {
                              "enum": [
                                "markdown",
                                "html",
                                "rawHtml",
                                "screenshot",
                                "links",
                                "screenshot@fullPage",
                                "extract"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "includeTags": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "onlyMainContent": {
                            "type": "boolean"
                          },
                          "waitFor": {
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "urls": {
                        "description": "List of URLs to scrape",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "urls"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_batch_scrape"
                },
                {
                  "description": "Check the status of a batch scraping job.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "Batch job ID to check",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_check_batch_status"
                },
                {
                  "description": "Check the status of a crawl job.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "Crawl job ID to check",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_check_crawl_status"
                },
                {
                  "description": "Search and retrieve content from web pages with optional scraping. Returns SERP results by default (url, title, description) or full page content when scrapeOptions are provided.",
                  "inputschema": {
                    "properties": {
                      "country": {
                        "description": "Country code for search results (default: us)",
                        "type": "string"
                      },
                      "filter": {
                        "description": "Search filter",
                        "type": "string"
                      },
                      "lang": {
                        "description": "Language code for search results (default: en)",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Maximum number of results to return (default: 5)",
                        "type": "number"
                      },
                      "location": {
                        "description": "Location settings for search",
                        "properties": {
                          "country": {
                            "description": "Country code for geolocation",
                            "type": "string"
                          },
                          "languages": {
                            "description": "Language codes for content",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "query": {
                        "description": "Search query string",
                        "type": "string"
                      },
                      "scrapeOptions": {
                        "description": "Options for scraping search results",
                        "properties": {
                          "formats": {
                            "description": "Content formats to extract from search results",
                            "items": {
                              "enum": [
                                "markdown",
                                "html",
                                "rawHtml"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "onlyMainContent": {
                            "description": "Extract only the main content from results",
                            "type": "boolean"
                          },
                          "waitFor": {
                            "description": "Time in milliseconds to wait for dynamic content",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "tbs": {
                        "description": "Time-based search filter",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_search"
                },
                {
                  "description": "Extract structured information from web pages using LLM. Supports both cloud AI and self-hosted LLM extraction.",
                  "inputschema": {
                    "properties": {
                      "allowExternalLinks": {
                        "description": "Allow extraction from external links",
                        "type": "boolean"
                      },
                      "enableWebSearch": {
                        "description": "Enable web search for additional context",
                        "type": "boolean"
                      },
                      "includeSubdomains": {
                        "description": "Include subdomains in extraction",
                        "type": "boolean"
                      },
                      "prompt": {
                        "description": "Prompt for the LLM extraction",
                        "type": "string"
                      },
                      "schema": {
                        "description": "JSON schema for structured data extraction",
                        "type": "object"
                      },
                      "systemPrompt": {
                        "description": "System prompt for LLM extraction",
                        "type": "string"
                      },
                      "urls": {
                        "description": "List of URLs to extract information from",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "urls"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_extract"
                },
                {
                  "description": "Generate standardized LLMs.txt file for a given URL, which provides context about how LLMs should interact with the website.",
                  "inputschema": {
                    "properties": {
                      "maxUrls": {
                        "description": "Maximum number of URLs to process (1-100, default: 10)",
                        "type": "number"
                      },
                      "showFullText": {
                        "description": "Whether to show the full LLMs-full.txt in the response",
                        "type": "boolean"
                      },
                      "url": {
                        "description": "The URL to generate LLMs.txt from",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_generate_llmstxt"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:59Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Kong": {
      "mcpproviderid": "Kong",
      "self": "#/mcpproviders/Kong",
      "xid": "/mcpproviders/Kong",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:36.914504206Z",
      "modifiedat": "2025-05-26T16:41:36.914504206Z",

      "serversurl": "#/mcpproviders/Kong/servers",
      "servers": {
        "mcp-konnect": {
          "serverid": "mcp-konnect",
          "self": "#/mcpproviders/Kong/servers/mcp-konnect",
          "xid": "/mcpproviders/Kong/servers/mcp-konnect",

          "metaurl": "#/mcpproviders/Kong/servers/mcp-konnect/meta",
          "meta": {
            "serverid": "mcp-konnect",
            "self": "#/mcpproviders/Kong/servers/mcp-konnect/meta",
            "xid": "/mcpproviders/Kong/servers/mcp-konnect/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:36.914504206Z",
            "modifiedat": "2025-05-26T16:41:36.914504206Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Kong/servers/mcp-konnect/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Kong/servers/mcp-konnect/versions",
          "versions": {
            "1": {
              "serverid": "mcp-konnect",
              "versionid": "1",
              "self": "#/mcpproviders/Kong/servers/mcp-konnect/versions/1",
              "xid": "/mcpproviders/Kong/servers/mcp-konnect/versions/1",
              "epoch": 1,
              "name": "io.github.kong/mcp-konnect",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for interacting with Kong Konnect APIs, allowing AI assistants to query and analyze Kong Gateway configurations, traffic, and analytics.",
              "createdat": "2025-05-26T16:41:36.914504206Z",
              "modifiedat": "2025-05-26T16:41:36.914504206Z",
              "ancestor": "1",
              "id": "86a12728-3ab9-4a69-a447-bcb67957a5f7",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "kpat_api_key_here",
                      "name": "KONNECT_ACCESS_TOKEN"
                    },
                    {
                      "description": "us",
                      "name": "KONNECT_REGION"
                    }
                  ],
                  "name": "kong-konnect-mcp",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "944084760",
                "source": "github",
                "url": "https://github.com/Kong/mcp-konnect"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Query and analyze Kong API Gateway requests with customizable filters.",
                  "inputschema": {
                    "properties": {
                      "consumerIds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "excludeStatusCodes": {
                        "items": {
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "httpMethods": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "maxResults": {
                        "type": "integer"
                      },
                      "routeIds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "serviceIds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "statusCodes": {
                        "items": {
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "timeRange": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "timeRange"
                    ],
                    "type": "object"
                  },
                  "name": "query_api_requests"
                },
                {
                  "description": "Analyze API requests made by a specific consumer.",
                  "inputschema": {
                    "properties": {
                      "consumerId": {
                        "type": "string"
                      },
                      "failureOnly": {
                        "type": "boolean"
                      },
                      "maxResults": {
                        "type": "integer"
                      },
                      "successOnly": {
                        "type": "boolean"
                      },
                      "timeRange": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "consumerId",
                      "timeRange"
                    ],
                    "type": "object"
                  },
                  "name": "get_consumer_requests"
                },
                {
                  "description": "List all services associated with a control plane.",
                  "inputschema": {
                    "properties": {
                      "controlPlaneId": {
                        "type": "string"
                      },
                      "offset": {
                        "type": "string"
                      },
                      "size": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "controlPlaneId"
                    ],
                    "type": "object"
                  },
                  "name": "list_services"
                },
                {
                  "description": "List all routes associated with a control plane.",
                  "inputschema": {
                    "properties": {
                      "controlPlaneId": {
                        "type": "string"
                      },
                      "offset": {
                        "type": "string"
                      },
                      "size": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "controlPlaneId"
                    ],
                    "type": "object"
                  },
                  "name": "list_routes"
                },
                {
                  "description": "List all consumers associated with a control plane.",
                  "inputschema": {
                    "properties": {
                      "controlPlaneId": {
                        "type": "string"
                      },
                      "offset": {
                        "type": "string"
                      },
                      "size": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "controlPlaneId"
                    ],
                    "type": "object"
                  },
                  "name": "list_consumers"
                },
                {
                  "description": "List all plugins associated with a control plane.",
                  "inputschema": {
                    "properties": {
                      "controlPlaneId": {
                        "type": "string"
                      },
                      "offset": {
                        "type": "string"
                      },
                      "size": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "controlPlaneId"
                    ],
                    "type": "object"
                  },
                  "name": "list_plugins"
                },
                {
                  "description": "List control planes with filtering and pagination.",
                  "inputschema": {
                    "properties": {
                      "filterCloudGateway": {
                        "type": "boolean"
                      },
                      "filterClusterType": {
                        "type": "string"
                      },
                      "filterName": {
                        "type": "string"
                      },
                      "labels": {
                        "type": "object"
                      },
                      "pageNumber": {
                        "type": "integer"
                      },
                      "pageSize": {
                        "type": "integer"
                      },
                      "sort": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_control_planes"
                },
                {
                  "description": "Get details of a specific control plane.",
                  "inputschema": {
                    "properties": {
                      "controlPlaneId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "controlPlaneId"
                    ],
                    "type": "object"
                  },
                  "name": "get_control_plane"
                },
                {
                  "description": "List memberships of a control plane group.",
                  "inputschema": {
                    "properties": {
                      "groupId": {
                        "type": "string"
                      },
                      "pageAfter": {
                        "type": "string"
                      },
                      "pageSize": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "groupId"
                    ],
                    "type": "object"
                  },
                  "name": "list_control_plane_group_memberships"
                },
                {
                  "description": "Check membership of a control plane in a group.",
                  "inputschema": {
                    "properties": {
                      "controlPlaneId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "controlPlaneId"
                    ],
                    "type": "object"
                  },
                  "name": "check_control_plane_group_membership"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:59Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "KyrieTangSheng": {
      "mcpproviderid": "KyrieTangSheng",
      "self": "#/mcpproviders/KyrieTangSheng",
      "xid": "/mcpproviders/KyrieTangSheng",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:40.759551714Z",
      "modifiedat": "2025-05-26T16:42:40.759551714Z",

      "serversurl": "#/mcpproviders/KyrieTangSheng/servers",
      "servers": {
        "mcp-server-nationalparks": {
          "serverid": "mcp-server-nationalparks",
          "self": "#/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks",
          "xid": "/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks",

          "metaurl": "#/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks/meta",
          "meta": {
            "serverid": "mcp-server-nationalparks",
            "self": "#/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks/meta",
            "xid": "/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:40.759551714Z",
            "modifiedat": "2025-05-26T16:42:40.759551714Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-nationalparks",
              "versionid": "1",
              "self": "#/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks/versions/1",
              "xid": "/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks/versions/1",
              "epoch": 1,
              "name": "io.github.kyrietangsheng/mcp-server-nationalparks",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:40.759551714Z",
              "modifiedat": "2025-05-26T16:42:40.759551714Z",
              "ancestor": "1",
              "id": "010904ec-6e39-4bdc-878a-75a6e79d0500",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_NPS_API_KEY",
                      "name": "NPS_API_KEY"
                    }
                  ],
                  "name": "mcp-server-nationalparks",
                  "registry_name": "npm",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "951713109",
                "source": "github",
                "url": "https://github.com/KyrieTangSheng/mcp-server-nationalparks"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Search for national parks based on state, name, activities, or other criteria",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "findParks"
                },
                {
                  "description": "Get detailed information about a specific national park",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getParkDetails"
                },
                {
                  "description": "Get current alerts for national parks including closures, hazards, and important information",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getAlerts"
                },
                {
                  "description": "Get information about visitor centers and their operating hours",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getVisitorCenters"
                },
                {
                  "description": "Get information about available campgrounds and their amenities",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getCampgrounds"
                },
                {
                  "description": "Find upcoming events at parks",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getEvents"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:05Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Laksh-star": {
      "mcpproviderid": "Laksh-star",
      "self": "#/mcpproviders/Laksh-star",
      "xid": "/mcpproviders/Laksh-star",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:27.08860977Z",
      "modifiedat": "2025-05-26T16:42:27.08860977Z",

      "serversurl": "#/mcpproviders/Laksh-star/servers",
      "servers": {
        "mcp-server-tmdb": {
          "serverid": "mcp-server-tmdb",
          "self": "#/mcpproviders/Laksh-star/servers/mcp-server-tmdb",
          "xid": "/mcpproviders/Laksh-star/servers/mcp-server-tmdb",

          "metaurl": "#/mcpproviders/Laksh-star/servers/mcp-server-tmdb/meta",
          "meta": {
            "serverid": "mcp-server-tmdb",
            "self": "#/mcpproviders/Laksh-star/servers/mcp-server-tmdb/meta",
            "xid": "/mcpproviders/Laksh-star/servers/mcp-server-tmdb/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:27.08860977Z",
            "modifiedat": "2025-05-26T16:42:27.08860977Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Laksh-star/servers/mcp-server-tmdb/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Laksh-star/servers/mcp-server-tmdb/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-tmdb",
              "versionid": "1",
              "self": "#/mcpproviders/Laksh-star/servers/mcp-server-tmdb/versions/1",
              "xid": "/mcpproviders/Laksh-star/servers/mcp-server-tmdb/versions/1",
              "epoch": 1,
              "name": "io.github.laksh-star/mcp-server-tmdb",
              "isdefault": true,
              "description": "MCP Server with TMDB",
              "createdat": "2025-05-26T16:42:27.08860977Z",
              "modifiedat": "2025-05-26T16:42:27.08860977Z",
              "ancestor": "1",
              "id": "ff2b0e88-9426-4aa1-bfb1-165cc810344f",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_api_key_here",
                      "name": "TMDB_API_KEY"
                    }
                  ],
                  "name": "mcp-server-tmdb",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "901420381",
                "source": "github",
                "url": "https://github.com/Laksh-star/mcp-server-tmdb"
              },
              "resources": [
                {
                  "description": "Comprehensive movie details including title, release date, rating, overview, genres, poster URL, cast information (top 5 actors), director, and selected reviews.",
                  "mimetype": "application/json",
                  "name": "Movies",
                  "uritemplate": "tmdb:///movie/{movie_id}"
                }
              ],
              "tools": [
                {
                  "description": "Search for movies by title or keywords",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "Search query for movie titles",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_movies"
                },
                {
                  "description": "Get movie recommendations based on a movie ID",
                  "inputschema": {
                    "properties": {
                      "movieId": {
                        "description": "TMDB movie ID to get recommendations for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "movieId"
                    ],
                    "type": "object"
                  },
                  "name": "get_recommendations"
                },
                {
                  "description": "Get trending movies for a time window",
                  "inputschema": {
                    "properties": {
                      "timeWindow": {
                        "description": "Time window for trending movies",
                        "enum": [
                          "day",
                          "week"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "timeWindow"
                    ],
                    "type": "object"
                  },
                  "name": "get_trending"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:27Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "MFYDev": {
      "mcpproviderid": "MFYDev",
      "self": "#/mcpproviders/MFYDev",
      "xid": "/mcpproviders/MFYDev",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:22.853353638Z",
      "modifiedat": "2025-05-26T16:42:22.853353638Z",

      "serversurl": "#/mcpproviders/MFYDev/servers",
      "servers": {
        "ghost-mcp": {
          "serverid": "ghost-mcp",
          "self": "#/mcpproviders/MFYDev/servers/ghost-mcp",
          "xid": "/mcpproviders/MFYDev/servers/ghost-mcp",

          "metaurl": "#/mcpproviders/MFYDev/servers/ghost-mcp/meta",
          "meta": {
            "serverid": "ghost-mcp",
            "self": "#/mcpproviders/MFYDev/servers/ghost-mcp/meta",
            "xid": "/mcpproviders/MFYDev/servers/ghost-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:22.853353638Z",
            "modifiedat": "2025-05-26T16:42:22.853353638Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/MFYDev/servers/ghost-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/MFYDev/servers/ghost-mcp/versions",
          "versions": {
            "1": {
              "serverid": "ghost-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/MFYDev/servers/ghost-mcp/versions/1",
              "xid": "/mcpproviders/MFYDev/servers/ghost-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.mfydev/ghost-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for interacting with Ghost CMS through LLM interfaces like Claude. Allow you to control your Ghost blog by simply asking Claude etc.",
              "createdat": "2025-05-26T16:42:22.853353638Z",
              "modifiedat": "2025-05-26T16:42:22.853353638Z",
              "ancestor": "1",
              "id": "e4927319-b643-498e-935f-51bad4e30381",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "https://yourblog.com",
                      "name": "GHOST_API_URL"
                    },
                    {
                      "description": "your_admin_api_key",
                      "name": "GHOST_ADMIN_API_KEY"
                    },
                    {
                      "description": "v5.0",
                      "name": "GHOST_API_VERSION"
                    }
                  ],
                  "name": "@fanyangmeng/ghost-mcp",
                  "registry_name": "npm",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "930747221",
                "source": "github",
                "url": "https://github.com/MFYDev/ghost-mcp"
              },
              "resources": [
                {
                  "description": "User resource identified by user_id.",
                  "name": "user",
                  "uritemplate": "user://{user_id}"
                },
                {
                  "description": "Member resource identified by member_id.",
                  "name": "member",
                  "uritemplate": "member://{member_id}"
                },
                {
                  "description": "Tier resource identified by tier_id.",
                  "name": "tier",
                  "uritemplate": "tier://{tier_id}"
                },
                {
                  "description": "Offer resource identified by offer_id.",
                  "name": "offer",
                  "uritemplate": "offer://{offer_id}"
                },
                {
                  "description": "Newsletter resource identified by newsletter_id.",
                  "name": "newsletter",
                  "uritemplate": "newsletter://{newsletter_id}"
                },
                {
                  "description": "Post resource identified by post_id.",
                  "name": "post",
                  "uritemplate": "post://{post_id}"
                },
                {
                  "description": "Blog information resource.",
                  "name": "blog-info",
                  "uritemplate": "blog://info"
                }
              ],
              "tools": [
                {
                  "description": "Browse invites with optional filters and pagination.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "order": {
                        "type": "string"
                      },
                      "page": {
                        "type": "number"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "invites_browse"
                },
                {
                  "description": "Add a new invite with role_id and email.",
                  "inputschema": {
                    "properties": {
                      "email": {
                        "type": "string"
                      },
                      "role_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "role_id",
                      "email"
                    ],
                    "type": "object"
                  },
                  "name": "invites_add"
                },
                {
                  "description": "Delete an invite by id.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "invites_delete"
                },
                {
                  "description": "Browse members with optional filters and pagination.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "order": {
                        "type": "string"
                      },
                      "page": {
                        "type": "number"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "members_browse"
                },
                {
                  "description": "Read a member by id or email.",
                  "inputschema": {
                    "properties": {
                      "email": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "members_read"
                },
                {
                  "description": "Add a new member with email and optional details.",
                  "inputschema": {
                    "properties": {
                      "email": {
                        "type": "string"
                      },
                      "labels": {
                        "items": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "name": {
                        "type": "string"
                      },
                      "newsletters": {
                        "items": {
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "note": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "email"
                    ],
                    "type": "object"
                  },
                  "name": "members_add"
                },
                {
                  "description": "Edit member details by id.",
                  "inputschema": {
                    "properties": {
                      "email": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "labels": {
                        "items": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "name": {
                        "type": "string"
                      },
                      "newsletters": {
                        "items": {
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "note": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "members_edit"
                },
                {
                  "description": "Delete a member by id.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "members_delete"
                },
                {
                  "description": "Browse offers with optional filters and pagination.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "order": {
                        "type": "string"
                      },
                      "page": {
                        "type": "number"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "offers_browse"
                },
                {
                  "description": "Read an offer by id or code.",
                  "inputschema": {
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "offers_read"
                },
                {
                  "description": "Add a new offer with required fields.",
                  "inputschema": {
                    "properties": {
                      "amount": {
                        "type": "number"
                      },
                      "cadence": {
                        "type": "string"
                      },
                      "code": {
                        "type": "string"
                      },
                      "currency": {
                        "type": "string"
                      },
                      "display_description": {
                        "type": "string"
                      },
                      "display_title": {
                        "type": "string"
                      },
                      "duration": {
                        "type": "string"
                      },
                      "duration_in_months": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "tier_id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "code",
                      "cadence",
                      "duration",
                      "amount",
                      "tier_id",
                      "type"
                    ],
                    "type": "object"
                  },
                  "name": "offers_add"
                },
                {
                  "description": "Edit an offer by id with optional fields.",
                  "inputschema": {
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "display_description": {
                        "type": "string"
                      },
                      "display_title": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "offers_edit"
                },
                {
                  "description": "Delete an offer by id.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "offers_delete"
                },
                {
                  "description": "Browse posts with optional filters and pagination.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "order": {
                        "type": "string"
                      },
                      "page": {
                        "type": "number"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "posts_browse"
                },
                {
                  "description": "Read a post by id or slug.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "posts_read"
                },
                {
                  "description": "Add a new post with title and optional content.",
                  "inputschema": {
                    "properties": {
                      "html": {
                        "type": "string"
                      },
                      "lexical": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "title"
                    ],
                    "type": "object"
                  },
                  "name": "posts_add"
                },
                {
                  "description": "Edit a post by id with optional fields.",
                  "inputschema": {
                    "properties": {
                      "html": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "lexical": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      },
                      "updated_at": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "updated_at"
                    ],
                    "type": "object"
                  },
                  "name": "posts_edit"
                },
                {
                  "description": "Delete a post by id.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "posts_delete"
                },
                {
                  "description": "Browse roles with optional filters and pagination.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "order": {
                        "type": "string"
                      },
                      "page": {
                        "type": "number"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "roles_browse"
                },
                {
                  "description": "Read a role by id or name.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "roles_read"
                },
                {
                  "description": "Browse tags with optional filters and pagination.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "order": {
                        "type": "string"
                      },
                      "page": {
                        "type": "number"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "tags_browse"
                },
                {
                  "description": "Read a tag by id or slug.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "tags_read"
                },
                {
                  "description": "Add a new tag with name and optional fields.",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "tags_add"
                },
                {
                  "description": "Edit a tag by id with optional fields.",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "tags_edit"
                },
                {
                  "description": "Delete a tag by id.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "tags_delete"
                },
                {
                  "description": "Browse tiers with optional filters and pagination.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "type": "string"
                      },
                      "include": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "order": {
                        "type": "string"
                      },
                      "page": {
                        "type": "number"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "tiers_browse"
                },
                {
                  "description": "Read a tier by id or slug.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "include": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "tiers_read"
                },
                {
                  "description": "Add a new tier with required name and optional details.",
                  "inputschema": {
                    "properties": {
                      "benefits": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "currency": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "monthly_price": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "visibility": {
                        "type": "string"
                      },
                      "welcome_page_url": {
                        "type": "string"
                      },
                      "yearly_price": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "tiers_add"
                },
                {
                  "description": "Edit a tier by id with optional fields.",
                  "inputschema": {
                    "properties": {
                      "benefits": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "currency": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "monthly_price": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "visibility": {
                        "type": "string"
                      },
                      "welcome_page_url": {
                        "type": "string"
                      },
                      "yearly_price": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "tiers_edit"
                },
                {
                  "description": "Delete a tier by id.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "tiers_delete"
                },
                {
                  "description": "Browse users with optional filters and pagination.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "order": {
                        "type": "string"
                      },
                      "page": {
                        "type": "number"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "users_browse"
                },
                {
                  "description": "Read a user by id, email, or slug.",
                  "inputschema": {
                    "properties": {
                      "email": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "users_read"
                },
                {
                  "description": "Edit a user by id with optional fields.",
                  "inputschema": {
                    "properties": {
                      "bio": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "facebook": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      },
                      "twitter": {
                        "type": "string"
                      },
                      "website": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "users_edit"
                },
                {
                  "description": "Delete a user by id.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "users_delete"
                },
                {
                  "description": "Add a webhook with event and target_url.",
                  "inputschema": {
                    "properties": {
                      "api_version": {
                        "type": "string"
                      },
                      "event": {
                        "type": "string"
                      },
                      "integration_id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "secret": {
                        "type": "string"
                      },
                      "target_url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "event",
                      "target_url"
                    ],
                    "type": "object"
                  },
                  "name": "webhooks_add"
                },
                {
                  "description": "Edit a webhook by id with optional fields.",
                  "inputschema": {
                    "properties": {
                      "api_version": {
                        "type": "string"
                      },
                      "event": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "target_url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "webhooks_edit"
                },
                {
                  "description": "Delete a webhook by id.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "webhooks_delete"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:59Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "MindscapeHQ": {
      "mcpproviderid": "MindscapeHQ",
      "self": "#/mcpproviders/MindscapeHQ",
      "xid": "/mcpproviders/MindscapeHQ",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:46.728643595Z",
      "modifiedat": "2025-05-26T16:41:46.728643595Z",

      "serversurl": "#/mcpproviders/MindscapeHQ/servers",
      "servers": {
        "mcp-server-raygun": {
          "serverid": "mcp-server-raygun",
          "self": "#/mcpproviders/MindscapeHQ/servers/mcp-server-raygun",
          "xid": "/mcpproviders/MindscapeHQ/servers/mcp-server-raygun",

          "metaurl": "#/mcpproviders/MindscapeHQ/servers/mcp-server-raygun/meta",
          "meta": {
            "serverid": "mcp-server-raygun",
            "self": "#/mcpproviders/MindscapeHQ/servers/mcp-server-raygun/meta",
            "xid": "/mcpproviders/MindscapeHQ/servers/mcp-server-raygun/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:46.728643595Z",
            "modifiedat": "2025-05-26T16:41:46.728643595Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/MindscapeHQ/servers/mcp-server-raygun/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/MindscapeHQ/servers/mcp-server-raygun/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-raygun",
              "versionid": "1",
              "self": "#/mcpproviders/MindscapeHQ/servers/mcp-server-raygun/versions/1",
              "xid": "/mcpproviders/MindscapeHQ/servers/mcp-server-raygun/versions/1",
              "epoch": 1,
              "name": "io.github.mindscapehq/mcp-server-raygun",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:46.728643595Z",
              "modifiedat": "2025-05-26T16:41:46.728643595Z",
              "ancestor": "1",
              "id": "f6ee7600-c27a-4210-9a94-29a35c41c274",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-pat-token-ken",
                      "name": "RAYGUN_PAT_TOKEN"
                    }
                  ],
                  "name": "@raygun.io/mcp-server-raygun",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "895741231",
                "source": "github",
                "url": "https://github.com/MindscapeHQ/mcp-server-raygun"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List all applications under your account",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_applications"
                },
                {
                  "description": "Get application details by identifier",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_application"
                },
                {
                  "description": "Get application details by API key",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_application_by_api_key"
                },
                {
                  "description": "Generate a new API key for an application",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "regenerate_application_api_key"
                },
                {
                  "description": "List error groups for an application",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_error_groups"
                },
                {
                  "description": "Get detailed information about an error group",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_error_group"
                },
                {
                  "description": "Set error group status to resolved",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "resolve_error_group"
                },
                {
                  "description": "Set error group status to active",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "activate_error_group"
                },
                {
                  "description": "Set error group status to ignored",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "ignore_error_group"
                },
                {
                  "description": "Set error group status to permanently ignored",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "permanently_ignore_error_group"
                },
                {
                  "description": "List deployments for an application",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_deployments"
                },
                {
                  "description": "Get deployment details by identifier",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_deployment"
                },
                {
                  "description": "Remove a deployment",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "delete_deployment"
                },
                {
                  "description": "Update deployment information",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "update_deployment"
                },
                {
                  "description": "Reprocess deployment commit data",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "reprocess_deployment_commits"
                },
                {
                  "description": "List customers for an application",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_customers"
                },
                {
                  "description": "List user sessions for an application",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_sessions"
                },
                {
                  "description": "Get detailed session information",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_session"
                },
                {
                  "description": "List monitored pages for an application",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_pages"
                },
                {
                  "description": "Get time-series performance metrics",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_page_metrics_time_series"
                },
                {
                  "description": "Get histogram of performance metrics",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_page_metrics_histogram"
                },
                {
                  "description": "Get time-series error metrics",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_error_metrics_time_series"
                },
                {
                  "description": "List source maps for an application",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_source_maps"
                },
                {
                  "description": "Get source map details",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_source_map"
                },
                {
                  "description": "Update source map information",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "update_source_map"
                },
                {
                  "description": "Remove a source map",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "delete_source_map"
                },
                {
                  "description": "Upload a new source map",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "upload_source_map"
                },
                {
                  "description": "Remove all source maps",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "delete_all_source_maps"
                },
                {
                  "description": "List pending team invitations",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_invitations"
                },
                {
                  "description": "Send a new team invitation",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "send_invitation"
                },
                {
                  "description": "Get invitation details",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_invitation"
                },
                {
                  "description": "Revoke a pending invitation",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "revoke_invitation"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:01:41Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "OctagonAI": {
      "mcpproviderid": "OctagonAI",
      "self": "#/mcpproviders/OctagonAI",
      "xid": "/mcpproviders/OctagonAI",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:07.957736277Z",
      "modifiedat": "2025-05-26T16:42:07.957736277Z",

      "serversurl": "#/mcpproviders/OctagonAI/servers",
      "servers": {
        "octagon-mcp-server": {
          "serverid": "octagon-mcp-server",
          "self": "#/mcpproviders/OctagonAI/servers/octagon-mcp-server",
          "xid": "/mcpproviders/OctagonAI/servers/octagon-mcp-server",

          "metaurl": "#/mcpproviders/OctagonAI/servers/octagon-mcp-server/meta",
          "meta": {
            "serverid": "octagon-mcp-server",
            "self": "#/mcpproviders/OctagonAI/servers/octagon-mcp-server/meta",
            "xid": "/mcpproviders/OctagonAI/servers/octagon-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:07.957736277Z",
            "modifiedat": "2025-05-26T16:42:07.957736277Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/OctagonAI/servers/octagon-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/OctagonAI/servers/octagon-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "octagon-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/OctagonAI/servers/octagon-mcp-server/versions/1",
              "xid": "/mcpproviders/OctagonAI/servers/octagon-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.octagonai/octagon-mcp-server",
              "isdefault": true,
              "description": "A free MCP server to analyze and extract insights from public filings, earnings transcripts, financial metrics, stock market data, private market transactions, and deep web-based research within Claude Desktop and other popular MCP clients.",
              "createdat": "2025-05-26T16:42:07.957736277Z",
              "modifiedat": "2025-05-26T16:42:07.957736277Z",
              "ancestor": "1",
              "id": "2d53cc39-27e0-446f-96b5-1324bab9eb21",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_API_KEY_HERE",
                      "name": "OCTAGON_API_KEY"
                    }
                  ],
                  "name": "octagon-mcp",
                  "registry_name": "npm",
                  "version": "1.0.18"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "947569884",
                "source": "github",
                "url": "https://github.com/OctagonAI/octagon-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "[PUBLIC MARKET INTELLIGENCE] A specialized agent for SEC filings analysis and financial data extraction. Covers over 8,000 public companies from SEC EDGAR with comprehensive coverage of financial statements from annual and quarterly reports (10-K, 10-Q, 20-F), offering filings (S-1), amendments, and event filings (8-K). Updated daily with historical data dating back to 2018 for time-series analysis. Best for extracting financial and segment metrics, management discussion, footnotes, risk factors, and quantitative data from SEC filings. Example queries: 'What was Apple's R\u0026D expense as a percentage of revenue in their latest fiscal year?', 'Find the risk factors related to supply chain in Tesla's latest 10-K', 'Extract quarterly revenue growth rates for Microsoft over the past 2 years'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-sec-agent"
                },
                {
                  "description": "[PUBLIC MARKET INTELLIGENCE] A specialized agent for analyzing earnings call transcripts and management commentary. Covers over 8,000 public companies with continuous daily updates for real-time insights. Historical data dating back to 2018 enables robust time-series analysis. Extract information from earnings call transcripts, including executive statements, financial guidance, analyst questions, and forward-looking statements. Best for analyzing management sentiment, extracting guidance figures, and identifying key business trends. Example queries: 'What did Amazon's CEO say about AWS growth expectations in the latest earnings call?', 'Summarize key financial metrics mentioned in Tesla's Q2 2023 earnings call', 'What questions did analysts ask about margins during Netflix's latest earnings call?'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-transcripts-agent"
                },
                {
                  "description": "[PUBLIC MARKET INTELLIGENCE] Specialized agent for financial statement analysis and ratio calculations. Capabilities: Analyze financial statements, calculate financial metrics, compare ratios, and evaluate performance indicators. Best for: Deep financial analysis and comparison of company financial performance. Example queries: 'Compare the gross margins, operating margins, and net margins of Apple, Microsoft, and Google over the last 3 years', 'Analyze Tesla's cash flow statements from 2021 to 2023 and calculate free cash flow trends', 'Calculate and explain key financial ratios for Amazon including P/E, EV/EBITDA, and ROIC'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-financials-agent"
                },
                {
                  "description": "[PUBLIC MARKET INTELLIGENCE] Specialized agent for stock market data and equity investment analysis. Capabilities: Analyze stock price movements, trading volumes, market trends, valuation metrics, and technical indicators. Best for: Stock market research, equity analysis, and trading pattern identification. Example queries: 'How has Apple's stock performed compared to the S\u0026P 500 over the last 6 months?', 'Analyze the trading volume patterns for Tesla stock before and after earnings releases', 'What were the major price movements for NVIDIA in 2023 and what were the catalysts?'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-stock-data-agent"
                },
                {
                  "description": "[PRIVATE MARKET INTELLIGENCE] A specialized database agent for looking up company information and financials. Capabilities: Query comprehensive company financial information and business intelligence from Octagon's company database. Best for: Finding basic information about companies, their financial metrics, and industry benchmarks. NOTE: For better and more accurate results, provide the company's website URL instead of just the company name. Example queries: 'What is the employee trends for Stripe (stripe.com)?', 'List the top 5 companies in the AI sector by revenue growth', 'Who are the top competitors to Databricks (databricks.com)?'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-companies-agent"
                },
                {
                  "description": "[PRIVATE MARKET INTELLIGENCE] A specialized database agent for company funding transactions and venture capital research. Capabilities: Extract information about funding rounds, investors, valuations, and investment trends. Best for: Researching startup funding history, investor activity, and venture capital patterns. NOTE: For better and more accurate results, provide the company's website URL instead of just the company name. Example queries: 'What was Anthropic's latest funding round size, valuation, and key investors (anthropic.com)?', 'How much has OpenAI raised in total funding and at what valuation (openai.com)?', 'Who were the lead investors in Databricks' Series G round and what was the post-money valuation (databricks.com)?'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-funding-agent"
                },
                {
                  "description": "[PRIVATE MARKET INTELLIGENCE] A specialized database agent for M\u0026A and IPO transaction analysis. Capabilities: Retrieve information about mergers, acquisitions, initial public offerings, and other financial transactions. Best for: Research on corporate transactions, IPO valuations, and M\u0026A activity. NOTE: For better and more accurate results, provide the company's website URL instead of just the company name. Example queries: 'What was the acquisition price when Microsoft (microsoft.com) acquired GitHub (github.com)?', 'List the valuation multiples for AI companies in 2024', 'List all the acquisitions and price, valuation by Salesforce (salesforce.com) in 2023?'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-deals-agent"
                },
                {
                  "description": "[PRIVATE MARKET INTELLIGENCE] A specialized database agent for looking up information on investors. Capabilities: Retrieve information about investors, their investment criteria, and past activities. Best for: Research on investors and details about their investment activities. NOTE: For better and more accurate results, provide the investor's website URL instead of just the investor name. Example queries: 'What is the latest investment criteria of Insight Partners (insightpartners.com)?', 'How many investments did Andreessen Horowitz (a16z.com) make in the last 6 months', 'What is the typical check size for QED Investors (qedinvestors.com)'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-investors-agent"
                },
                {
                  "description": "[PUBLIC \u0026 PRIVATE MARKET INTELLIGENCE] Specialized agent for financial data extraction from investor websites. Capabilities: Extract structured financial data from investor relations websites, tables, and online financial sources. Best for: Gathering financial data from websites that don't have accessible APIs. Example queries: 'Extract all data fields from zillow.com/san-francisco-ca/', 'Extract all data fields from www.carvana.com/cars/'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-scraper-agent"
                },
                {
                  "description": "[PUBLIC \u0026 PRIVATE MARKET INTELLIGENCE] A comprehensive agent that can utilize multiple sources for deep research analysis. Capabilities: Aggregate research across multiple data sources, synthesize information, and provide comprehensive investment research. Best for: Investment research questions requiring up-to-date aggregated information from the web. Example queries: 'Research the financial impact of Apple's privacy changes on digital advertising companies' revenue and margins', 'Analyze the competitive landscape in the cloud computing sector, focusing on AWS, Azure, and Google Cloud margin and growth trends', 'Investigate the factors driving electric vehicle adoption and their impact on battery supplier financials'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-deep-research-agent"
                },
                {
                  "description": "[PRIVATE MARKET INTELLIGENCE] A specialized database agent for analyzing private debts and lenders. Capabilities: Retrieve information about private debts and lenders. Best for: Research on borrowers, and lenders and details about the private debt facilities. Example queries: 'List all the debt activities from borrower American Tower', 'Compile all the debt activities from lender ING Group in Q4 2024'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-debts-agent"
                },
                {
                  "description": "[PUBLIC MARKET INTELLIGENCE] Specialized agent for analyzing financial ratios and key metrics of public companies. Capabilities: Calculate and analyze financial ratios, track key performance metrics over time, compare metrics across companies and sectors, evaluate company performance through various financial lenses. Best for: Detailed ratio analysis, historical metric trends, cross-company comparisons, valuation analysis, operational efficiency evaluation. Example queries: 'Get historical quarterly EV/S for $TSLA for the last 20 quarters', 'Compare operating margins and ROIC for AAPL, MSFT, and GOOGL', 'What is NVDA's cash conversion cycle trend over the past 8 quarters?', 'Calculate the Graham Number for META and compare it to current price', 'Show me Amazon's capex to operating cash flow ratio for the past 3 years'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-metrics-agent"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:49Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Omar-V2": {
      "mcpproviderid": "Omar-V2",
      "self": "#/mcpproviders/Omar-V2",
      "xid": "/mcpproviders/Omar-V2",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:11.781457652Z",
      "modifiedat": "2025-05-26T16:42:11.781457652Z",

      "serversurl": "#/mcpproviders/Omar-V2/servers",
      "servers": {
        "mcp-ical": {
          "serverid": "mcp-ical",
          "self": "#/mcpproviders/Omar-V2/servers/mcp-ical",
          "xid": "/mcpproviders/Omar-V2/servers/mcp-ical",

          "metaurl": "#/mcpproviders/Omar-V2/servers/mcp-ical/meta",
          "meta": {
            "serverid": "mcp-ical",
            "self": "#/mcpproviders/Omar-V2/servers/mcp-ical/meta",
            "xid": "/mcpproviders/Omar-V2/servers/mcp-ical/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:11.781457652Z",
            "modifiedat": "2025-05-26T16:42:11.781457652Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Omar-V2/servers/mcp-ical/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Omar-V2/servers/mcp-ical/versions",
          "versions": {
            "1": {
              "serverid": "mcp-ical",
              "versionid": "1",
              "self": "#/mcpproviders/Omar-V2/servers/mcp-ical/versions/1",
              "xid": "/mcpproviders/Omar-V2/servers/mcp-ical/versions/1",
              "epoch": 1,
              "name": "io.github.omar-v2/mcp-ical",
              "isdefault": true,
              "description": "A Model Context Protocol Server that allows you to interact with your MacOS Calendar through natural language.",
              "createdat": "2025-05-26T16:42:11.781457652Z",
              "modifiedat": "2025-05-26T16:42:11.781457652Z",
              "ancestor": "1",
              "id": "0d7bc864-fdf3-4afd-8b44-48468b12d550",
              "packages": [
                {
                  "name": "mcp-ical",
                  "package_arguments": [
                    {
                      "default": "mcp-ical",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp-ical",
                      "value_hint": "mcp-ical"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "930007673",
                "source": "github",
                "url": "https://github.com/Omar-V2/mcp-ical"
              },
              "resources": [
                {
                  "description": "List all available calendars that can be used with calendar operations.",
                  "name": "calendars://list",
                  "uritemplate": "calendars://list"
                }
              ],
              "tools": [
                {
                  "description": "List all available calendars.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_calendars"
                },
                {
                  "description": "List calendar events in a date range.",
                  "inputschema": {
                    "properties": {
                      "calendar_name": {
                        "description": "Optional calendar name to filter by",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "end_date": {
                        "description": "End date in ISO8601 format (YYYY-MM-DDT23:59:59).",
                        "type": "string"
                      },
                      "start_date": {
                        "description": "Start date in ISO8601 format (YYYY-MM-DDT00:00:00).",
                        "type": "string"
                      }
                    },
                    "required": [
                      "start_date",
                      "end_date"
                    ],
                    "type": "object"
                  },
                  "name": "list_events"
                },
                {
                  "description": "Create a new calendar event with details like title, time, location, notes, reminders, and recurrence.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_event"
                },
                {
                  "description": "Update an existing calendar event with new details such as time, location, notes, reminders, and recurrence.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_event"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:05Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Omedia": {
      "mcpproviderid": "Omedia",
      "self": "#/mcpproviders/Omedia",
      "xid": "/mcpproviders/Omedia",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:22.533708508Z",
      "modifiedat": "2025-05-26T16:41:22.533708508Z",

      "serversurl": "#/mcpproviders/Omedia/servers",
      "servers": {
        "mcp-server-drupal": {
          "serverid": "mcp-server-drupal",
          "self": "#/mcpproviders/Omedia/servers/mcp-server-drupal",
          "xid": "/mcpproviders/Omedia/servers/mcp-server-drupal",

          "metaurl": "#/mcpproviders/Omedia/servers/mcp-server-drupal/meta",
          "meta": {
            "serverid": "mcp-server-drupal",
            "self": "#/mcpproviders/Omedia/servers/mcp-server-drupal/meta",
            "xid": "/mcpproviders/Omedia/servers/mcp-server-drupal/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:22.533708508Z",
            "modifiedat": "2025-05-26T16:41:22.533708508Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Omedia/servers/mcp-server-drupal/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Omedia/servers/mcp-server-drupal/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-drupal",
              "versionid": "1",
              "self": "#/mcpproviders/Omedia/servers/mcp-server-drupal/versions/1",
              "xid": "/mcpproviders/Omedia/servers/mcp-server-drupal/versions/1",
              "epoch": 1,
              "name": "io.github.omedia/mcp-server-drupal",
              "isdefault": true,
              "description": "TS based companion MCP server for the Drupal MCP module that works with the STDIO transport.",
              "createdat": "2025-05-26T16:41:22.533708508Z",
              "modifiedat": "2025-05-26T16:41:22.533708508Z",
              "ancestor": "1",
              "id": "7902d399-3080-4926-afb8-4f98c3a7d870",
              "packages": [
                {
                  "name": "Omedia/mcp-server-drupal",
                  "registry_name": "docker",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "900629184",
                "source": "github",
                "url": "https://github.com/Omedia/mcp-server-drupal"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:05Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "PaddleHQ": {
      "mcpproviderid": "PaddleHQ",
      "self": "#/mcpproviders/PaddleHQ",
      "xid": "/mcpproviders/PaddleHQ",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:40.703390832Z",
      "modifiedat": "2025-05-26T16:41:40.703390832Z",

      "serversurl": "#/mcpproviders/PaddleHQ/servers",
      "servers": {
        "paddle-mcp-server": {
          "serverid": "paddle-mcp-server",
          "self": "#/mcpproviders/PaddleHQ/servers/paddle-mcp-server",
          "xid": "/mcpproviders/PaddleHQ/servers/paddle-mcp-server",

          "metaurl": "#/mcpproviders/PaddleHQ/servers/paddle-mcp-server/meta",
          "meta": {
            "serverid": "paddle-mcp-server",
            "self": "#/mcpproviders/PaddleHQ/servers/paddle-mcp-server/meta",
            "xid": "/mcpproviders/PaddleHQ/servers/paddle-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:40.703390832Z",
            "modifiedat": "2025-05-26T16:41:40.703390832Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/PaddleHQ/servers/paddle-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/PaddleHQ/servers/paddle-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "paddle-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/PaddleHQ/servers/paddle-mcp-server/versions/1",
              "xid": "/mcpproviders/PaddleHQ/servers/paddle-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.paddlehq/paddle-mcp-server",
              "isdefault": true,
              "description": "Interact with the Paddle API using AI assistants like Claude, or in AI-powered IDEs like Cursor. Manage product catalog, billing and subscriptions, and reports.",
              "createdat": "2025-05-26T16:41:40.703390832Z",
              "modifiedat": "2025-05-26T16:41:40.703390832Z",
              "ancestor": "1",
              "id": "be79836b-8a99-4e4e-9487-c81c02833f4a",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_api_key",
                      "name": "PADDLE_API_KEY"
                    },
                    {
                      "description": "sandbox",
                      "name": "PADDLE_ENVIRONMENT"
                    }
                  ],
                  "name": "@paddle/paddle-mcp",
                  "package_arguments": [
                    {
                      "default": "path/to/paddle-mcp-server/build/index.js",
                      "description": "Path to the mcp server entry point",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "path/to/paddle-mcp-server/build/index.js",
                      "value_hint": "path/to/paddle-mcp-server/build/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "955461567",
                "source": "github",
                "url": "https://github.com/PaddleHQ/paddle-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List products in your Paddle catalog",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "listProducts"
                },
                {
                  "description": "Create new products",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "createProduct"
                },
                {
                  "description": "List prices for products",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "listPrices"
                },
                {
                  "description": "Create new prices for products",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "createPrice"
                },
                {
                  "description": "List customers",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "listCustomers"
                },
                {
                  "description": "List transactions",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "listTransactions"
                },
                {
                  "description": "List subscriptions",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "listSubscriptions"
                },
                {
                  "description": "Create custom reports for financial analysis",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "createCustomReport"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:57Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ProgramComputer": {
      "mcpproviderid": "ProgramComputer",
      "self": "#/mcpproviders/ProgramComputer",
      "xid": "/mcpproviders/ProgramComputer",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:20.62162643Z",
      "modifiedat": "2025-05-26T16:41:20.62162643Z",

      "serversurl": "#/mcpproviders/ProgramComputer/servers",
      "servers": {
        "NASA-MCP-server": {
          "serverid": "NASA-MCP-server",
          "self": "#/mcpproviders/ProgramComputer/servers/NASA-MCP-server",
          "xid": "/mcpproviders/ProgramComputer/servers/NASA-MCP-server",

          "metaurl": "#/mcpproviders/ProgramComputer/servers/NASA-MCP-server/meta",
          "meta": {
            "serverid": "NASA-MCP-server",
            "self": "#/mcpproviders/ProgramComputer/servers/NASA-MCP-server/meta",
            "xid": "/mcpproviders/ProgramComputer/servers/NASA-MCP-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:20.62162643Z",
            "modifiedat": "2025-05-26T16:41:20.62162643Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ProgramComputer/servers/NASA-MCP-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ProgramComputer/servers/NASA-MCP-server/versions",
          "versions": {
            "1": {
              "serverid": "NASA-MCP-server",
              "versionid": "1",
              "self": "#/mcpproviders/ProgramComputer/servers/NASA-MCP-server/versions/1",
              "xid": "/mcpproviders/ProgramComputer/servers/NASA-MCP-server/versions/1",
              "epoch": 1,
              "name": "io.github.programcomputer/nasa-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for NASA APIs, providing a standardized interface for AI models to interact with NASA's vast array of data sources.",
              "createdat": "2025-05-26T16:41:20.62162643Z",
              "modifiedat": "2025-05-26T16:41:20.62162643Z",
              "ancestor": "1",
              "id": "6a44b030-46c7-4390-adf2-2a75652dee27",
              "packages": [
                {
                  "name": "@programcomputer/nasa-mcp-server",
                  "package_arguments": [
                    {
                      "default": "T2M,PRECTOTCORR,WS10M",
                      "description": "Comma-separated list",
                      "format": "string",
                      "is_required": true,
                      "name": "T2M,PRECTOTCORR,WS10M",
                      "type": "named",
                      "value": "T2M,PRECTOTCORR,WS10M",
                      "value_hint": "T2M,PRECTOTCORR,WS10M"
                    },
                    {
                      "default": "re",
                      "description": "Community identifier",
                      "format": "string",
                      "is_required": true,
                      "name": "re",
                      "type": "named",
                      "value": "re",
                      "value_hint": "re"
                    },
                    {
                      "default": "40.7128",
                      "description": "Latitude",
                      "format": "string",
                      "is_required": true,
                      "name": "40.7128",
                      "type": "named",
                      "value": "40.7128",
                      "value_hint": "40.7128"
                    },
                    {
                      "default": "-74.0060",
                      "description": "Longitude",
                      "format": "string",
                      "is_required": true,
                      "name": "-74.0060",
                      "type": "named",
                      "value": "-74.0060",
                      "value_hint": "-74.0060"
                    },
                    {
                      "default": "20220101",
                      "description": "Start date (YYYYMMDD)",
                      "format": "string",
                      "is_required": true,
                      "name": "20220101",
                      "type": "named",
                      "value": "20220101",
                      "value_hint": "20220101"
                    },
                    {
                      "default": "20220107",
                      "description": "End date (YYYYMMDD)",
                      "format": "string",
                      "is_required": true,
                      "name": "20220107",
                      "type": "named",
                      "value": "20220107",
                      "value_hint": "20220107"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.0.12"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "943596518",
                "source": "github",
                "url": "https://github.com/ProgramComputer/NASA-MCP-server"
              },
              "resources": [
                {
                  "description": "NASA Astronomy Picture of the Day",
                  "mimetype": "application/json",
                  "name": "nasa-apod-image",
                  "uritemplate": "nasa://apod/image?date={date}"
                },
                {
                  "description": "NASA EPIC Earth observation image",
                  "mimetype": "application/json",
                  "name": "nasa-epic-image",
                  "uritemplate": "nasa://epic/image?date={date}\u0026collection={collection}"
                },
                {
                  "description": "NASA Mars Rover photograph",
                  "mimetype": "image/jpeg",
                  "name": "mars-rover-photo",
                  "uritemplate": "nasa://mars-rover/photo?rover={rover}\u0026id={id}"
                },
                {
                  "description": "NASA Image and Video Library item",
                  "mimetype": "image/jpeg",
                  "name": "nasa-image",
                  "uritemplate": "nasa://images/item?nasa_id={nasa_id}"
                },
                {
                  "description": "NASA Global Imagery Browse Services (GIBS) satellite image",
                  "mimetype": "image/jpeg",
                  "name": "nasa-gibs-imagery",
                  "uritemplate": "nasa://gibs/imagery?layer={layer}\u0026date={date}"
                },
                {
                  "description": "JPL Small-Body Database entry",
                  "mimetype": "application/json",
                  "name": "jpl-asteroid-data",
                  "uritemplate": "jpl://sbdb?object={object}"
                },
                {
                  "description": "NASA Earth Landsat satellite imagery",
                  "mimetype": "application/json",
                  "name": "nasa-earth-imagery",
                  "uritemplate": "nasa://earth/imagery?lon={lon}\u0026lat={lat}\u0026date={date}"
                }
              ],
              "tools": [
                {
                  "description": "Fetch NASA's Astronomy Picture of the Day",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "description": "Count of random APODs to retrieve",
                        "type": "number"
                      },
                      "date": {
                        "description": "The date of the APOD image to retrieve (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "end_date": {
                        "description": "End date for date range search (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "start_date": {
                        "description": "Start date for date range search (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "thumbs": {
                        "description": "Return URL of thumbnail for video content",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "date"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_apod"
                },
                {
                  "description": "Near Earth Object Web Service - information about asteroids",
                  "inputschema": {
                    "properties": {
                      "asteroid_id": {
                        "description": "ID of a specific asteroid",
                        "type": "string"
                      },
                      "end_date": {
                        "description": "End date for asteroid search (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "start_date": {
                        "description": "Start date for asteroid search (YYYY-MM-DD)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "start_date",
                      "end_date"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_neo"
                },
                {
                  "description": "Earth Polychromatic Imaging Camera - views of Earth",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Image collection (natural or enhanced)",
                        "type": "string"
                      },
                      "date": {
                        "description": "Date of the image (YYYY-MM-DD)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "nasa_epic"
                },
                {
                  "description": "Global Imagery Browse Services - satellite imagery",
                  "inputschema": {
                    "properties": {
                      "date": {
                        "description": "Date of imagery (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "format": {
                        "description": "Image format (png, jpg, jpeg)",
                        "type": "string"
                      },
                      "layer": {
                        "description": "Layer name (e.g., MODIS_Terra_CorrectedReflectance_TrueColor)",
                        "type": "string"
                      },
                      "resolution": {
                        "description": "Resolution in pixels per degree",
                        "type": "number"
                      }
                    },
                    "required": [
                      "layer",
                      "date"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_gibs"
                },
                {
                  "description": "NASA Common Metadata Repository - search for NASA data collections",
                  "inputschema": {
                    "properties": {
                      "keyword": {
                        "description": "Search keyword",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Maximum number of results to return",
                        "type": "number"
                      },
                      "page": {
                        "description": "Page number for pagination",
                        "type": "number"
                      },
                      "sort_key": {
                        "description": "Field to sort results by",
                        "type": "string"
                      }
                    },
                    "required": [
                      "keyword"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_cmr"
                },
                {
                  "description": "NASA Fire Information for Resource Management System - fire data",
                  "inputschema": {
                    "properties": {
                      "days": {
                        "description": "Number of days of data to retrieve",
                        "type": "number"
                      },
                      "latitude": {
                        "description": "Latitude coordinate",
                        "type": "number"
                      },
                      "longitude": {
                        "description": "Longitude coordinate",
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_firms"
                },
                {
                  "description": "NASA Image and Video Library - search NASA's media archive",
                  "inputschema": {
                    "properties": {
                      "media_type": {
                        "description": "Media type (image, video, audio)",
                        "type": "string"
                      },
                      "page": {
                        "description": "Page number for pagination",
                        "type": "number"
                      },
                      "q": {
                        "description": "Search query",
                        "type": "string"
                      },
                      "year_end": {
                        "description": "End year for results",
                        "type": "string"
                      },
                      "year_start": {
                        "description": "Start year for results",
                        "type": "string"
                      }
                    },
                    "required": [
                      "q"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_images"
                },
                {
                  "description": "NASA Exoplanet Archive - data about planets beyond our solar system",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "description": "Maximum number of results",
                        "type": "number"
                      },
                      "order": {
                        "description": "Ordering of results",
                        "type": "string"
                      },
                      "select": {
                        "description": "Columns to return",
                        "type": "string"
                      },
                      "table": {
                        "description": "Database table to query",
                        "type": "string"
                      },
                      "where": {
                        "description": "Filter conditions",
                        "type": "string"
                      }
                    },
                    "required": [
                      "table"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_exoplanet"
                },
                {
                  "description": "Space Weather Database Of Notifications, Knowledge, Information",
                  "inputschema": {
                    "properties": {
                      "endDate": {
                        "description": "End date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "startDate": {
                        "description": "Start date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of space weather event",
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_donki"
                },
                {
                  "description": "NASA Mars Rover Photos - images from Mars rovers",
                  "inputschema": {
                    "properties": {
                      "camera": {
                        "description": "Camera name",
                        "type": "string"
                      },
                      "earth_date": {
                        "description": "Earth date of the photos (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "page": {
                        "description": "Page number for pagination",
                        "type": "number"
                      },
                      "rover": {
                        "description": "Name of the rover (curiosity, opportunity, spirit, perseverance)",
                        "type": "string"
                      },
                      "sol": {
                        "description": "Martian sol (day) of the photos",
                        "type": "number"
                      }
                    },
                    "required": [
                      "rover"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_mars_rover"
                },
                {
                  "description": "Earth Observatory Natural Event Tracker - natural events data",
                  "inputschema": {
                    "properties": {
                      "category": {
                        "description": "Event category (wildfires, volcanoes, etc.)",
                        "type": "string"
                      },
                      "days": {
                        "description": "Number of days to look back",
                        "type": "number"
                      },
                      "limit": {
                        "description": "Maximum number of events to return",
                        "type": "number"
                      },
                      "source": {
                        "description": "Data source",
                        "type": "string"
                      },
                      "status": {
                        "description": "Event status (open, closed)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "nasa_eonet"
                },
                {
                  "description": "Prediction of Worldwide Energy Resources - meteorological data",
                  "inputschema": {
                    "properties": {
                      "community": {
                        "description": "User community (RE, SB, AG, etc.)",
                        "type": "string"
                      },
                      "end": {
                        "description": "End date (YYYYMMDD)",
                        "type": "string"
                      },
                      "format": {
                        "description": "Response format (json, csv, etc.)",
                        "type": "string"
                      },
                      "latitude": {
                        "description": "Latitude coordinate",
                        "type": "number"
                      },
                      "longitude": {
                        "description": "Longitude coordinate",
                        "type": "number"
                      },
                      "parameters": {
                        "description": "Comma-separated data parameters",
                        "type": "string"
                      },
                      "start": {
                        "description": "Start date (YYYYMMDD)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "parameters",
                      "community",
                      "longitude",
                      "latitude",
                      "start",
                      "end"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_power"
                },
                {
                  "description": "Small-Body Database (SBDB) - asteroid and comet data",
                  "inputschema": {
                    "properties": {
                      "cad": {
                        "description": "Include close approach data",
                        "type": "boolean"
                      },
                      "sstr": {
                        "description": "Search string (e.g., asteroid name, number, or designation)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "sstr"
                    ],
                    "type": "object"
                  },
                  "name": "jpl_sbdb"
                },
                {
                  "description": "Fireball data - atmospheric impact events",
                  "inputschema": {
                    "properties": {
                      "date-max": {
                        "description": "End date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "date-min": {
                        "description": "Start date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Maximum number of results to return",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "jpl_fireball"
                },
                {
                  "description": "Julian Day number to/from calendar date/time converter",
                  "inputschema": {
                    "properties": {
                      "cd": {
                        "description": "Calendar date to convert to Julian date (YYYY-MM-DD or YYYY-MM-DDThh:mm:ss format)",
                        "type": "string"
                      },
                      "jd": {
                        "description": "Julian date to convert to calendar date",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "jpl_jd_cal"
                },
                {
                  "description": "Human-accessible NEOs (Near-Earth Objects) data",
                  "inputschema": {
                    "properties": {
                      "des": {
                        "description": "Object designation (e.g., '2000 SG344' or '433')",
                        "type": "string"
                      },
                      "dur": {
                        "description": "Minimum total mission duration (days). Values: 60-450, default: 450",
                        "type": "number"
                      },
                      "dv": {
                        "description": "Minimum total delta-V (km/s). Values: 4-12, default: 12",
                        "type": "number"
                      },
                      "h": {
                        "description": "Object's maximum absolute magnitude (mag). Values: 16-30",
                        "type": "number"
                      },
                      "launch": {
                        "description": "Launch window (year range). Values: 2020-2025, 2025-2030, 2030-2035, 2035-2040, 2040-2045, 2020-2045, default: 2020-2045",
                        "type": "string"
                      },
                      "occ": {
                        "description": "Object's maximum orbit condition code. Values: 0-8",
                        "type": "number"
                      },
                      "plot": {
                        "description": "Include base-64 encoded plot image",
                        "type": "boolean"
                      },
                      "spk": {
                        "description": "Object SPK-ID (e.g., '2000433')",
                        "type": "string"
                      },
                      "stay": {
                        "description": "Minimum stay time (days). Values: 8, 16, 24, 32, default: 8",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "jpl_nhats"
                },
                {
                  "description": "Asteroid and comet close approaches to the planets in the past and future",
                  "inputschema": {
                    "properties": {
                      "body": {
                        "description": "Body to find close approaches to (e.g., Earth, Mars, ALL). Default: Earth",
                        "type": "string"
                      },
                      "date-max": {
                        "description": "End date for search (YYYY-MM-DD). Default: +60 days",
                        "type": "string"
                      },
                      "date-min": {
                        "description": "Start date for search (YYYY-MM-DD). Default: now",
                        "type": "string"
                      },
                      "des": {
                        "description": "Object designation (e.g., '2000 SG344' or '433')",
                        "type": "string"
                      },
                      "dist-max": {
                        "description": "Maximum approach distance (e.g., 0.05, 10LD). Default: 0.05 au",
                        "type": "string"
                      },
                      "dist-min": {
                        "description": "Minimum approach distance. Default: none",
                        "type": "string"
                      },
                      "fullname": {
                        "description": "Include full object name in result. Default: false",
                        "type": "boolean"
                      },
                      "neo": {
                        "description": "Limit to NEOs. Default: true",
                        "type": "boolean"
                      },
                      "sort": {
                        "description": "Sort field: date, dist, dist-min, v-inf, v-rel, h, object. Default: date",
                        "type": "string"
                      },
                      "spk": {
                        "description": "Object SPK-ID (e.g., '2000433')",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "jpl_cad"
                },
                {
                  "description": "JPL Sentry - NEO Earth impact risk assessment data",
                  "inputschema": {
                    "properties": {
                      "all": {
                        "description": "Get all virtual impactors data",
                        "type": "boolean"
                      },
                      "date-max": {
                        "description": "End date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "date-min": {
                        "description": "Start date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "des": {
                        "description": "Object designation (e.g., '2011 AG5' or '29075')",
                        "type": "string"
                      },
                      "h-max": {
                        "description": "Maximum absolute magnitude (size filter)",
                        "type": "number"
                      },
                      "ip-min": {
                        "description": "Minimum impact probability",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Maximum number of results to return",
                        "type": "number"
                      },
                      "ps-min": {
                        "description": "Minimum Palermo Scale value",
                        "type": "string"
                      },
                      "removed": {
                        "description": "Get objects removed from Sentry monitoring",
                        "type": "boolean"
                      },
                      "spk": {
                        "description": "Object SPK-ID",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "jpl_sentry"
                },
                {
                  "description": "JPL Horizons - Solar system objects ephemeris data",
                  "inputschema": {
                    "properties": {
                      "CENTER": {
                        "description": "Coordinate center (e.g., '500@399' for Earth)",
                        "type": "string"
                      },
                      "COMMAND": {
                        "description": "Target object identifier (e.g., '499' for Mars, '1' for Ceres, 'C/2020 F3' for Comet NEOWISE)",
                        "type": "string"
                      },
                      "EPHEM_TYPE": {
                        "description": "Type of ephemeris (OBSERVER, VECTORS, ELEMENTS)",
                        "enum": [
                          "OBSERVER",
                          "VECTORS",
                          "ELEMENTS"
                        ],
                        "type": "string"
                      },
                      "MAKE_EPHEM": {
                        "description": "Generate ephemeris",
                        "enum": [
                          "YES",
                          "NO"
                        ],
                        "type": "string"
                      },
                      "OBJ_DATA": {
                        "description": "Include object data",
                        "enum": [
                          "YES",
                          "NO"
                        ],
                        "type": "string"
                      },
                      "OUT_UNITS": {
                        "description": "Output units for vector tables",
                        "enum": [
                          "KM-S",
                          "AU-D",
                          "KM-D"
                        ],
                        "type": "string"
                      },
                      "QUANTITIES": {
                        "description": "Observable quantities to include (e.g., 'A' for all, or '1,2,20,23' for specific ones)",
                        "type": "string"
                      },
                      "START_TIME": {
                        "description": "Start time for ephemeris (e.g., '2023-01-01')",
                        "type": "string"
                      },
                      "STEP_SIZE": {
                        "description": "Step size for ephemeris points (e.g., '1d' for daily, '1h' for hourly)",
                        "type": "string"
                      },
                      "STOP_TIME": {
                        "description": "Stop time for ephemeris (e.g., '2023-01-02')",
                        "type": "string"
                      },
                      "format": {
                        "description": "Response format (json, text)",
                        "enum": [
                          "json",
                          "text"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "COMMAND"
                    ],
                    "type": "object"
                  },
                  "name": "jpl_horizons"
                },
                {
                  "description": "JPL Horizons - Solar system objects ephemeris data (File Input)",
                  "inputschema": {
                    "properties": {
                      "CENTER": {
                        "description": "Coordinate center (e.g., '500@399' for Earth)",
                        "type": "string"
                      },
                      "COMMAND": {
                        "description": "Target object identifier (e.g., '499' for Mars, '1' for Ceres, 'C/2020 F3' for Comet NEOWISE)",
                        "type": "string"
                      },
                      "EPHEM_TYPE": {
                        "description": "Type of ephemeris (OBSERVER, VECTORS, ELEMENTS)",
                        "enum": [
                          "OBSERVER",
                          "VECTORS",
                          "ELEMENTS"
                        ],
                        "type": "string"
                      },
                      "MAKE_EPHEM": {
                        "description": "Generate ephemeris",
                        "enum": [
                          "YES",
                          "NO"
                        ],
                        "type": "string"
                      },
                      "OBJ_DATA": {
                        "description": "Include object data",
                        "enum": [
                          "YES",
                          "NO"
                        ],
                        "type": "string"
                      },
                      "OUT_UNITS": {
                        "description": "Output units for vector tables",
                        "enum": [
                          "KM-S",
                          "AU-D",
                          "KM-D"
                        ],
                        "type": "string"
                      },
                      "QUANTITIES": {
                        "description": "Observable quantities to include (e.g., 'A' for all, or '1,2,20,23' for specific ones)",
                        "type": "string"
                      },
                      "START_TIME": {
                        "description": "Start time for ephemeris (e.g., '2023-01-01')",
                        "type": "string"
                      },
                      "STEP_SIZE": {
                        "description": "Step size for ephemeris points (e.g., '1d' for daily, '1h' for hourly)",
                        "type": "string"
                      },
                      "STOP_TIME": {
                        "description": "Stop time for ephemeris (e.g., '2023-01-02')",
                        "type": "string"
                      },
                      "format": {
                        "description": "Response format (json, text)",
                        "enum": [
                          "json",
                          "text"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "COMMAND"
                    ],
                    "type": "object"
                  },
                  "name": "jpl_horizons_file"
                },
                {
                  "description": "JPL Three-Body Periodic Orbits Database",
                  "inputschema": {
                    "properties": {
                      "branch": {
                        "description": "Branch within family (N/S, E/W, etc., required for some families)",
                        "type": "string"
                      },
                      "family": {
                        "description": "Orbit family name (e.g., halo, dro, lyapunov)",
                        "type": "string"
                      },
                      "jacobimax": {
                        "description": "Maximum Jacobi constant",
                        "type": "number"
                      },
                      "jacobimin": {
                        "description": "Minimum Jacobi constant",
                        "type": "number"
                      },
                      "libr": {
                        "description": "Libration point (1-5, required for some families)",
                        "type": "integer"
                      },
                      "periodmax": {
                        "description": "Maximum period",
                        "type": "number"
                      },
                      "periodmin": {
                        "description": "Minimum period",
                        "type": "number"
                      },
                      "periodunits": {
                        "description": "Units for period (s, h, d, TU)",
                        "enum": [
                          "s",
                          "h",
                          "d",
                          "TU"
                        ],
                        "type": "string"
                      },
                      "stabmax": {
                        "description": "Maximum stability index",
                        "type": "number"
                      },
                      "stabmin": {
                        "description": "Minimum stability index",
                        "type": "number"
                      },
                      "sys": {
                        "description": "Three-body system (e.g., earth-moon, sun-earth)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "sys",
                      "family"
                    ],
                    "type": "object"
                  },
                  "name": "jpl_periodic_orbits"
                },
                {
                  "description": "NASA OSDR - Get data files for an OSD study",
                  "inputschema": {
                    "properties": {
                      "accession_number": {
                        "description": "OSD study accession number (e.g., '87')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "accession_number"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_osdr_files"
                },
                {
                  "description": "Scout - NEOCP orbits, ephemerides, and impact risk data",
                  "inputschema": {
                    "properties": {
                      "file": {
                        "description": "Type of data file to return (summary, ephem, obs, crit, all)",
                        "enum": [
                          "summary",
                          "ephem",
                          "obs",
                          "crit",
                          "all"
                        ],
                        "type": "string"
                      },
                      "limit": {
                        "description": "Limit number of results",
                        "type": "number"
                      },
                      "orbit_id": {
                        "description": "Scout internal orbit ID",
                        "type": "string"
                      },
                      "plot": {
                        "description": "Include plots in the response",
                        "type": "boolean"
                      },
                      "summary": {
                        "description": "Include summary data in the response",
                        "type": "boolean"
                      },
                      "tdes": {
                        "description": "Object temporary designation (e.g., P21Eolo)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "jpl_scout"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:01Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "RamXX": {
      "mcpproviderid": "RamXX",
      "self": "#/mcpproviders/RamXX",
      "xid": "/mcpproviders/RamXX",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:37.933095818Z",
      "modifiedat": "2025-05-26T16:42:37.933095818Z",

      "serversurl": "#/mcpproviders/RamXX/servers",
      "servers": {
        "mcp-tavily": {
          "serverid": "mcp-tavily",
          "self": "#/mcpproviders/RamXX/servers/mcp-tavily",
          "xid": "/mcpproviders/RamXX/servers/mcp-tavily",

          "metaurl": "#/mcpproviders/RamXX/servers/mcp-tavily/meta",
          "meta": {
            "serverid": "mcp-tavily",
            "self": "#/mcpproviders/RamXX/servers/mcp-tavily/meta",
            "xid": "/mcpproviders/RamXX/servers/mcp-tavily/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:37.933095818Z",
            "modifiedat": "2025-05-26T16:42:37.933095818Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/RamXX/servers/mcp-tavily/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/RamXX/servers/mcp-tavily/versions",
          "versions": {
            "1": {
              "serverid": "mcp-tavily",
              "versionid": "1",
              "self": "#/mcpproviders/RamXX/servers/mcp-tavily/versions/1",
              "xid": "/mcpproviders/RamXX/servers/mcp-tavily/versions/1",
              "epoch": 1,
              "name": "io.github.ramxx/mcp-tavily",
              "isdefault": true,
              "description": "An MCP server for Tavily's search API",
              "createdat": "2025-05-26T16:42:37.933095818Z",
              "modifiedat": "2025-05-26T16:42:37.933095818Z",
              "ancestor": "1",
              "id": "bdeb1cca-49ce-476a-87a2-f27c30b086bd",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_api_key_here",
                      "name": "TAVILY_API_KEY"
                    }
                  ],
                  "name": "mcp_tavily",
                  "package_arguments": [
                    {
                      "default": "-m mcp_server_tavily",
                      "description": "Python module execution: -m mcp_server_tavily",
                      "format": "string",
                      "is_required": true,
                      "name": "-m mcp_server_tavily",
                      "type": "named",
                      "value": "-m mcp_server_tavily",
                      "value_hint": "mcp_server_tavily"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.8"
                }
              ],
              "prompts": [
                {
                  "description": "Search the web using Tavily's AI-powered search engine",
                  "name": "tavily_web_search"
                },
                {
                  "description": "Search the web and get an AI-generated answer with supporting evidence",
                  "name": "tavily_answer_search"
                },
                {
                  "description": "Search recent news articles with Tavily's news search",
                  "name": "tavily_news_search"
                }
              ],
              "repository": {
                "id": "896967375",
                "source": "github",
                "url": "https://github.com/RamXX/mcp-tavily"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Performs comprehensive web searches with AI-powered content extraction.",
                  "inputschema": {
                    "properties": {
                      "exclude_domains": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "include_domains": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "max_results": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "search_depth": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "tavily_web_search"
                },
                {
                  "description": "Performs web searches and generates direct answers with supporting evidence.",
                  "inputschema": {
                    "properties": {
                      "exclude_domains": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "include_domains": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "max_results": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "search_depth": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "tavily_answer_search"
                },
                {
                  "description": "Searches recent news articles with publication dates.",
                  "inputschema": {
                    "properties": {
                      "days": {
                        "type": "integer"
                      },
                      "exclude_domains": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "include_domains": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "max_results": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "tavily_news_search"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:30Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "SaseQ": {
      "mcpproviderid": "SaseQ",
      "self": "#/mcpproviders/SaseQ",
      "xid": "/mcpproviders/SaseQ",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:14.679193083Z",
      "modifiedat": "2025-05-26T16:42:14.679193083Z",

      "serversurl": "#/mcpproviders/SaseQ/servers",
      "servers": {
        "discord-mcp": {
          "serverid": "discord-mcp",
          "self": "#/mcpproviders/SaseQ/servers/discord-mcp",
          "xid": "/mcpproviders/SaseQ/servers/discord-mcp",

          "metaurl": "#/mcpproviders/SaseQ/servers/discord-mcp/meta",
          "meta": {
            "serverid": "discord-mcp",
            "self": "#/mcpproviders/SaseQ/servers/discord-mcp/meta",
            "xid": "/mcpproviders/SaseQ/servers/discord-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:14.679193083Z",
            "modifiedat": "2025-05-26T16:42:14.679193083Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/SaseQ/servers/discord-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/SaseQ/servers/discord-mcp/versions",
          "versions": {
            "1": {
              "serverid": "discord-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/SaseQ/servers/discord-mcp/versions/1",
              "xid": "/mcpproviders/SaseQ/servers/discord-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.saseq/discord-mcp",
              "isdefault": true,
              "description": "A MCP server for the Discord integration. Enable your AI assistants to seamlessly interact with Discord. Enhance your Discord experience with powerful automation capabilities.",
              "createdat": "2025-05-26T16:42:14.679193083Z",
              "modifiedat": "2025-05-26T16:42:14.679193083Z",
              "ancestor": "1",
              "id": "ae4c8106-9947-4577-924e-c7106256dd69",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_DISCORD_BOT_TOKEN",
                      "name": "DISCORD_TOKEN"
                    }
                  ],
                  "name": "SaseQ/discord-mcp",
                  "package_arguments": [
                    {
                      "default": "https://gitmcp.io/SaseQ/discord-mcp",
                      "description": "Second positional argument",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "https://gitmcp.io/SaseQ/discord-mcp",
                      "value_hint": "https://gitmcp.io/SaseQ/discord-mcp"
                    }
                  ],
                  "registry_name": "npm",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "948723723",
                "source": "github",
                "url": "https://github.com/SaseQ/discord-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get detailed discord server information",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_server_info"
                },
                {
                  "description": "Send a message to a specific channel",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "send_message"
                },
                {
                  "description": "Edit a message from a specific channel",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "edit_message"
                },
                {
                  "description": "Delete a message from a specific channel",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_message"
                },
                {
                  "description": "Read recent message history from a specific channel",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "read_messages"
                },
                {
                  "description": "Send a private message to a specific user",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "send_private_message"
                },
                {
                  "description": "Edit a private message from a specific user",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "edit_private_message"
                },
                {
                  "description": "Delete a private message from a specific user",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_private_message"
                },
                {
                  "description": "Read recent message history from a specific user",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "read_private_messages"
                },
                {
                  "description": "Add a reaction (emoji) to a specific message",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "add_reaction"
                },
                {
                  "description": "Remove a specified reaction (emoji) from a message",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "remove_reaction"
                },
                {
                  "description": "Delete a channel",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_channel"
                },
                {
                  "description": "Find a channel type and ID using name and server ID",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "find_channel"
                },
                {
                  "description": "List of all channels",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_channels"
                },
                {
                  "description": "Create a new category for channels",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_category"
                },
                {
                  "description": "Delete a category",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_category"
                },
                {
                  "description": "Find a category ID using name and server ID",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "find_category"
                },
                {
                  "description": "List of channels in a specific category",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_channels_in_category"
                },
                {
                  "description": "Create a new webhook on a specific channel",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_webhook"
                },
                {
                  "description": "Delete a webhook",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_webhook"
                },
                {
                  "description": "List of webhooks on a specific channel",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_webhooks"
                },
                {
                  "description": "Send a message via webhook",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "send_webhook_message"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:56Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ShenghaiWang": {
      "mcpproviderid": "ShenghaiWang",
      "self": "#/mcpproviders/ShenghaiWang",
      "xid": "/mcpproviders/ShenghaiWang",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:06.725822717Z",
      "modifiedat": "2025-05-26T16:42:06.725822717Z",

      "serversurl": "#/mcpproviders/ShenghaiWang/servers",
      "servers": {
        "xcodebuild": {
          "serverid": "xcodebuild",
          "self": "#/mcpproviders/ShenghaiWang/servers/xcodebuild",
          "xid": "/mcpproviders/ShenghaiWang/servers/xcodebuild",

          "metaurl": "#/mcpproviders/ShenghaiWang/servers/xcodebuild/meta",
          "meta": {
            "serverid": "xcodebuild",
            "self": "#/mcpproviders/ShenghaiWang/servers/xcodebuild/meta",
            "xid": "/mcpproviders/ShenghaiWang/servers/xcodebuild/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:06.725822717Z",
            "modifiedat": "2025-05-26T16:42:06.725822717Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ShenghaiWang/servers/xcodebuild/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ShenghaiWang/servers/xcodebuild/versions",
          "versions": {
            "1": {
              "serverid": "xcodebuild",
              "versionid": "1",
              "self": "#/mcpproviders/ShenghaiWang/servers/xcodebuild/versions/1",
              "xid": "/mcpproviders/ShenghaiWang/servers/xcodebuild/versions/1",
              "epoch": 1,
              "name": "io.github.shenghaiwang/xcodebuild",
              "isdefault": true,
              "description": "MCP tool for building Xcode iOS workspace/project and feeding back error to LLMs.",
              "createdat": "2025-05-26T16:42:06.725822717Z",
              "modifiedat": "2025-05-26T16:42:06.725822717Z",
              "ancestor": "1",
              "id": "bce1c06f-6325-418a-91e2-0ff2f6cf8ffc",
              "packages": [
                {
                  "name": "mcpxcodebuild",
                  "registry_name": "unknown",
                  "version": "0.10.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "941391898",
                "source": "github",
                "url": "https://github.com/ShenghaiWang/xcodebuild"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Build iOS Xcode workspace/project",
                  "inputschema": {
                    "properties": {
                      "folder": {
                        "description": "The full path of the current folder that the iOS Xcode workspace/project sits",
                        "type": "string"
                      }
                    },
                    "required": [
                      "folder"
                    ],
                    "type": "object"
                  },
                  "name": "build"
                },
                {
                  "description": "Run test for iOS Xcode workspace/project",
                  "inputschema": {
                    "properties": {
                      "folder": {
                        "description": "The full path of the current folder that the iOS Xcode workspace/project sits",
                        "type": "string"
                      }
                    },
                    "required": [
                      "folder"
                    ],
                    "type": "object"
                  },
                  "name": "test"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:04Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Simon-Kansara": {
      "mcpproviderid": "Simon-Kansara",
      "self": "#/mcpproviders/Simon-Kansara",
      "xid": "/mcpproviders/Simon-Kansara",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:18.656750273Z",
      "modifiedat": "2025-05-26T16:42:18.656750273Z",

      "serversurl": "#/mcpproviders/Simon-Kansara/servers",
      "servers": {
        "ableton-live-mcp-server": {
          "serverid": "ableton-live-mcp-server",
          "self": "#/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server",
          "xid": "/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server",

          "metaurl": "#/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server/meta",
          "meta": {
            "serverid": "ableton-live-mcp-server",
            "self": "#/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server/meta",
            "xid": "/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:18.656750273Z",
            "modifiedat": "2025-05-26T16:42:18.656750273Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "ableton-live-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server/versions/1",
              "xid": "/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.simon-kansara/ableton-live-mcp-server",
              "isdefault": true,
              "description": "MCP Server implementation for Ableton Live OSC control",
              "createdat": "2025-05-26T16:42:18.656750273Z",
              "modifiedat": "2025-05-26T16:42:18.656750273Z",
              "ancestor": "1",
              "id": "60b95692-579f-4de4-8095-1efdca5d8591",
              "packages": [
                {
                  "name": "ableton-live-mcp-server",
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "938133354",
                "source": "github",
                "url": "https://github.com/Simon-Kansara/ableton-live-mcp-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:30Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "SimonB97": {
      "mcpproviderid": "SimonB97",
      "self": "#/mcpproviders/SimonB97",
      "xid": "/mcpproviders/SimonB97",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:28.305260326Z",
      "modifiedat": "2025-05-26T16:41:28.305260326Z",

      "serversurl": "#/mcpproviders/SimonB97/servers",
      "servers": {
        "win-cli-mcp-server": {
          "serverid": "win-cli-mcp-server",
          "self": "#/mcpproviders/SimonB97/servers/win-cli-mcp-server",
          "xid": "/mcpproviders/SimonB97/servers/win-cli-mcp-server",

          "metaurl": "#/mcpproviders/SimonB97/servers/win-cli-mcp-server/meta",
          "meta": {
            "serverid": "win-cli-mcp-server",
            "self": "#/mcpproviders/SimonB97/servers/win-cli-mcp-server/meta",
            "xid": "/mcpproviders/SimonB97/servers/win-cli-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:28.305260326Z",
            "modifiedat": "2025-05-26T16:41:28.305260326Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/SimonB97/servers/win-cli-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/SimonB97/servers/win-cli-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "win-cli-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/SimonB97/servers/win-cli-mcp-server/versions/1",
              "xid": "/mcpproviders/SimonB97/servers/win-cli-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.simonb97/win-cli-mcp-server",
              "isdefault": true,
              "description": "Model Context Protocol server for secure command-line interactions on Windows systems",
              "createdat": "2025-05-26T16:41:28.305260326Z",
              "modifiedat": "2025-05-26T16:41:28.305260326Z",
              "ancestor": "1",
              "id": "a8a08cbd-074f-49ba-8f98-3ef8583cc93b",
              "packages": [
                {
                  "name": "@simonb97/server-win-cli",
                  "registry_name": "unknown",
                  "version": "0.2.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "898475770",
                "source": "github",
                "url": "https://github.com/SimonB97/win-cli-mcp-server"
              },
              "resources": [
                {
                  "description": "SSH connection to {id} with host, port, and username",
                  "mimetype": "application/json",
                  "name": "SSH Connection",
                  "uritemplate": "ssh://{id}"
                },
                {
                  "description": "The current working directory of the CLI server",
                  "mimetype": "text/plain",
                  "name": "Current Working Directory",
                  "uritemplate": "cli://currentdir"
                },
                {
                  "description": "All SSH connection configurations",
                  "mimetype": "application/json",
                  "name": "SSH Configuration",
                  "uritemplate": "ssh://config"
                },
                {
                  "description": "Main CLI server configuration (excluding sensitive data)",
                  "mimetype": "application/json",
                  "name": "CLI Server Configuration",
                  "uritemplate": "cli://config"
                }
              ],
              "tools": [
                {
                  "description": "Execute a command in the specified shell (powershell, cmd, or gitbash)\n\nExample usage (PowerShell):\n```json\n{\n  \"shell\": \"powershell\",\n  \"command\": \"Get-Process | Select-Object -First 5\",\n  \"workingDir\": \"C:\\\\Users\\\\username\"\n}\n```\n\nExample usage (CMD):\n```json\n{\n  \"shell\": \"cmd\",\n  \"command\": \"dir /b\",\n  \"workingDir\": \"C:\\\\Projects\"\n}\n```\n\nExample usage (Git Bash):\n```json\n{\n  \"shell\": \"gitbash\",\n  \"command\": \"ls -la\",\n  \"workingDir\": \"/c/Users/username\"\n}\n```",
                  "inputschema": {
                    "properties": {
                      "command": {
                        "description": "Command to execute",
                        "type": "string"
                      },
                      "shell": {
                        "description": "Shell to use for command execution",
                        "enum": [
                          "powershell",
                          "cmd",
                          "gitbash"
                        ],
                        "type": "string"
                      },
                      "workingDir": {
                        "description": "Working directory for command execution (optional)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "shell",
                      "command"
                    ],
                    "type": "object"
                  },
                  "name": "execute_command"
                },
                {
                  "description": "Get the history of executed commands\n\nExample usage:\n```json\n{\n  \"limit\": 5\n}\n```\n\nExample response:\n```json\n[\n  {\n    \"command\": \"Get-Process\",\n    \"output\": \"...\",\n    \"timestamp\": \"2024-03-20T10:30:00Z\",\n    \"exitCode\": 0\n  }\n]\n```",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "description": "Maximum number of history entries to return (default: 10, max: 100)",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_command_history"
                },
                {
                  "description": "Execute a command on a remote host via SSH\n\nExample usage:\n```json\n{\n  \"connectionId\": \"raspberry-pi\",\n  \"command\": \"uname -a\"\n}\n```\n\nConfiguration required in config.json:\n```json\n{\n  \"ssh\": {\n    \"enabled\": true,\n    \"connections\": {\n      \"raspberry-pi\": {\n        \"host\": \"raspberrypi.local\",\n        \"port\": 22,\n        \"username\": \"pi\",\n        \"password\": \"raspberry\"\n      }\n    }\n  }\n}\n```",
                  "inputschema": {
                    "properties": {
                      "command": {
                        "description": "Command to execute",
                        "type": "string"
                      },
                      "connectionId": {
                        "description": "ID of the SSH connection to use",
                        "enum": [],
                        "type": "string"
                      }
                    },
                    "required": [
                      "connectionId",
                      "command"
                    ],
                    "type": "object"
                  },
                  "name": "ssh_execute"
                },
                {
                  "description": "Disconnect from an SSH server\n\nExample usage:\n```json\n{\n  \"connectionId\": \"raspberry-pi\"\n}\n```\n\nUse this to cleanly close SSH connections when they're no longer needed.",
                  "inputschema": {
                    "properties": {
                      "connectionId": {
                        "description": "ID of the SSH connection to disconnect",
                        "enum": [],
                        "type": "string"
                      }
                    },
                    "required": [
                      "connectionId"
                    ],
                    "type": "object"
                  },
                  "name": "ssh_disconnect"
                },
                {
                  "description": "Create a new SSH connection",
                  "inputschema": {
                    "properties": {
                      "connectionConfig": {
                        "properties": {
                          "host": {
                            "description": "Host of the SSH connection",
                            "type": "string"
                          },
                          "password": {
                            "description": "Password for the SSH connection",
                            "type": "string"
                          },
                          "port": {
                            "description": "Port of the SSH connection",
                            "type": "number"
                          },
                          "privateKeyPath": {
                            "description": "Path to the private key for the SSH connection",
                            "type": "string"
                          },
                          "username": {
                            "description": "Username for the SSH connection",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "connectionId": {
                        "description": "ID of the SSH connection",
                        "type": "string"
                      }
                    },
                    "required": [
                      "connectionId",
                      "connectionConfig"
                    ],
                    "type": "object"
                  },
                  "name": "create_ssh_connection"
                },
                {
                  "description": "Read all SSH connections",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "read_ssh_connections"
                },
                {
                  "description": "Update an existing SSH connection",
                  "inputschema": {
                    "properties": {
                      "connectionConfig": {
                        "properties": {
                          "host": {
                            "description": "Host of the SSH connection",
                            "type": "string"
                          },
                          "password": {
                            "description": "Password for the SSH connection",
                            "type": "string"
                          },
                          "port": {
                            "description": "Port of the SSH connection",
                            "type": "number"
                          },
                          "privateKeyPath": {
                            "description": "Path to the private key for the SSH connection",
                            "type": "string"
                          },
                          "username": {
                            "description": "Username for the SSH connection",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "connectionId": {
                        "description": "ID of the SSH connection to update",
                        "type": "string"
                      }
                    },
                    "required": [
                      "connectionId",
                      "connectionConfig"
                    ],
                    "type": "object"
                  },
                  "name": "update_ssh_connection"
                },
                {
                  "description": "Delete an existing SSH connection",
                  "inputschema": {
                    "properties": {
                      "connectionId": {
                        "description": "ID of the SSH connection to delete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "connectionId"
                    ],
                    "type": "object"
                  },
                  "name": "delete_ssh_connection"
                },
                {
                  "description": "Get the current working directory",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_current_directory"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:52Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Spathodea-Network": {
      "mcpproviderid": "Spathodea-Network",
      "self": "#/mcpproviders/Spathodea-Network",
      "xid": "/mcpproviders/Spathodea-Network",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:27.302661178Z",
      "modifiedat": "2025-05-26T16:41:27.302661178Z",

      "serversurl": "#/mcpproviders/Spathodea-Network/servers",
      "servers": {
        "opencti-mcp": {
          "serverid": "opencti-mcp",
          "self": "#/mcpproviders/Spathodea-Network/servers/opencti-mcp",
          "xid": "/mcpproviders/Spathodea-Network/servers/opencti-mcp",

          "metaurl": "#/mcpproviders/Spathodea-Network/servers/opencti-mcp/meta",
          "meta": {
            "serverid": "opencti-mcp",
            "self": "#/mcpproviders/Spathodea-Network/servers/opencti-mcp/meta",
            "xid": "/mcpproviders/Spathodea-Network/servers/opencti-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:27.302661178Z",
            "modifiedat": "2025-05-26T16:41:27.302661178Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Spathodea-Network/servers/opencti-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Spathodea-Network/servers/opencti-mcp/versions",
          "versions": {
            "1": {
              "serverid": "opencti-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/Spathodea-Network/servers/opencti-mcp/versions/1",
              "xid": "/mcpproviders/Spathodea-Network/servers/opencti-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.spathodea-network/opencti-mcp",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:27.302661178Z",
              "modifiedat": "2025-05-26T16:41:27.302661178Z",
              "ancestor": "1",
              "id": "c01d9a66-7a37-4f66-870d-38829c0047ea",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "${OPENCTI_URL}",
                      "name": "OPENCTI_URL"
                    },
                    {
                      "description": "${OPENCTI_TOKEN}",
                      "name": "OPENCTI_TOKEN"
                    }
                  ],
                  "name": "opencti-server",
                  "package_arguments": [
                    {
                      "default": "path/to/opencti-server/build/index.js",
                      "description": "Positional argument for package execution",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "path/to/opencti-server/build/index.js",
                      "value_hint": "path/to/opencti-server/build/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "909539706",
                "source": "github",
                "url": "https://github.com/Spathodea-Network/opencti-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "獲取最新的OpenCTI報告",
                  "inputschema": {
                    "properties": {
                      "first": {
                        "default": 10,
                        "description": "返回結果數量限制",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_latest_reports"
                },
                {
                  "description": "根據ID獲取OpenCTI報告",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "報告ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "get_report_by_id"
                },
                {
                  "description": "搜尋OpenCTI中的指標",
                  "inputschema": {
                    "properties": {
                      "first": {
                        "default": 10,
                        "description": "返回結果數量限制",
                        "type": "number"
                      },
                      "query": {
                        "description": "搜尋關鍵字",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_indicators"
                },
                {
                  "description": "搜尋OpenCTI中的惡意程式",
                  "inputschema": {
                    "properties": {
                      "first": {
                        "default": 10,
                        "description": "返回結果數量限制",
                        "type": "number"
                      },
                      "query": {
                        "description": "搜尋關鍵字",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_malware"
                },
                {
                  "description": "搜尋OpenCTI中的威脅行為者",
                  "inputschema": {
                    "properties": {
                      "first": {
                        "default": 10,
                        "description": "返回結果數量限制",
                        "type": "number"
                      },
                      "query": {
                        "description": "搜尋關鍵字",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_threat_actors"
                },
                {
                  "description": "根據ID獲取使用者資訊",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "使用者ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "get_user_by_id"
                },
                {
                  "description": "列出所有使用者",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_users"
                },
                {
                  "description": "列出所有群組",
                  "inputschema": {
                    "properties": {
                      "first": {
                        "default": 10,
                        "description": "返回結果數量限制",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_groups"
                },
                {
                  "description": "列出所有攻擊模式",
                  "inputschema": {
                    "properties": {
                      "first": {
                        "default": 10,
                        "description": "返回結果數量限制",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_attack_patterns"
                },
                {
                  "description": "根據名稱獲取行動資訊",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "description": "行動名稱",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "get_campaign_by_name"
                },
                {
                  "description": "列出所有連接器",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_connectors"
                },
                {
                  "description": "列出所有狀態模板",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_status_templates"
                },
                {
                  "description": "根據ID獲取檔案資訊",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "檔案ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "get_file_by_id"
                },
                {
                  "description": "列出所有檔案",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_files"
                },
                {
                  "description": "列出所有標記定義",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_marking_definitions"
                },
                {
                  "description": "列出所有標籤",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_labels"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:02Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "StarRocks": {
      "mcpproviderid": "StarRocks",
      "self": "#/mcpproviders/StarRocks",
      "xid": "/mcpproviders/StarRocks",
      "epoch": 1,
      "name": "StarRocks",
      "documentation": "https://github.com/StarRocks",
      "createdat": "2025-05-26T16:41:21.672954317Z",
      "modifiedat": "2025-05-26T16:41:21.672954317Z",

      "serversurl": "#/mcpproviders/StarRocks/servers",
      "servers": {},
      "serverscount": 0
    },
    "StevenStavrakis": {
      "mcpproviderid": "StevenStavrakis",
      "self": "#/mcpproviders/StevenStavrakis",
      "xid": "/mcpproviders/StevenStavrakis",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:50.94182209Z",
      "modifiedat": "2025-05-26T16:41:50.94182209Z",

      "serversurl": "#/mcpproviders/StevenStavrakis/servers",
      "servers": {
        "obsidian-mcp": {
          "serverid": "obsidian-mcp",
          "self": "#/mcpproviders/StevenStavrakis/servers/obsidian-mcp",
          "xid": "/mcpproviders/StevenStavrakis/servers/obsidian-mcp",

          "metaurl": "#/mcpproviders/StevenStavrakis/servers/obsidian-mcp/meta",
          "meta": {
            "serverid": "obsidian-mcp",
            "self": "#/mcpproviders/StevenStavrakis/servers/obsidian-mcp/meta",
            "xid": "/mcpproviders/StevenStavrakis/servers/obsidian-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:50.94182209Z",
            "modifiedat": "2025-05-26T16:41:50.94182209Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/StevenStavrakis/servers/obsidian-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/StevenStavrakis/servers/obsidian-mcp/versions",
          "versions": {
            "1": {
              "serverid": "obsidian-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/StevenStavrakis/servers/obsidian-mcp/versions/1",
              "xid": "/mcpproviders/StevenStavrakis/servers/obsidian-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.stevenstavrakis/obsidian-mcp",
              "isdefault": true,
              "description": "A simple MCP server for Obsidian",
              "createdat": "2025-05-26T16:41:50.94182209Z",
              "modifiedat": "2025-05-26T16:41:50.94182209Z",
              "ancestor": "1",
              "id": "752ef535-2865-4d95-bcc5-647a7be83f74",
              "packages": [
                {
                  "name": "obsidian-mcp",
                  "package_arguments": [
                    {
                      "default": "/path/to/your/vault",
                      "description": "/path/to/your/vault",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "/path/to/your/vault",
                      "value_hint": "/path/to/your/vault"
                    },
                    {
                      "default": "/path/to/your/vault2",
                      "description": "/path/to/your/vault2",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "/path/to/your/vault2",
                      "value_hint": "/path/to/your/vault2"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.0.6"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "906827503",
                "source": "github",
                "url": "https://github.com/StevenStavrakis/obsidian-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Read the contents of a note",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "read-note"
                },
                {
                  "description": "Create a new note",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create-note"
                },
                {
                  "description": "Edit an existing note",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "edit-note"
                },
                {
                  "description": "Delete a note",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete-note"
                },
                {
                  "description": "Move a note to a different location",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "move-note"
                },
                {
                  "description": "Create a new directory",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create-directory"
                },
                {
                  "description": "Search notes in the vault",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search-vault"
                },
                {
                  "description": "Add tags to a note",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "add-tags"
                },
                {
                  "description": "Remove tags from a note",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "remove-tags"
                },
                {
                  "description": "Rename a tag across all notes",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "rename-tag"
                },
                {
                  "description": "List and organize tags",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "manage-tags"
                },
                {
                  "description": "List all available vaults (helps with multi-vault setups)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list-available-vaults"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:35Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "TencentEdgeOne": {
      "mcpproviderid": "TencentEdgeOne",
      "self": "#/mcpproviders/TencentEdgeOne",
      "xid": "/mcpproviders/TencentEdgeOne",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:12.889231069Z",
      "modifiedat": "2025-05-26T16:42:12.889231069Z",

      "serversurl": "#/mcpproviders/TencentEdgeOne/servers",
      "servers": {
        "edgeone-pages-mcp": {
          "serverid": "edgeone-pages-mcp",
          "self": "#/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp",
          "xid": "/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp",

          "metaurl": "#/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp/meta",
          "meta": {
            "serverid": "edgeone-pages-mcp",
            "self": "#/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp/meta",
            "xid": "/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:12.889231069Z",
            "modifiedat": "2025-05-26T16:42:12.889231069Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp/versions",
          "versions": {
            "1": {
              "serverid": "edgeone-pages-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp/versions/1",
              "xid": "/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.tencentedgeone/edgeone-pages-mcp",
              "isdefault": true,
              "description": "An MCP service designed for deploying HTML content to EdgeOne Pages and obtaining an accessible public URL.",
              "createdat": "2025-05-26T16:42:12.889231069Z",
              "modifiedat": "2025-05-26T16:42:12.889231069Z",
              "ancestor": "1",
              "id": "f97607ba-eb50-4258-b46c-ce9fc6587fa9",
              "packages": [
                {
                  "name": "edgeone-pages-mcp",
                  "registry_name": "unknown",
                  "version": "0.0.9"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "954390434",
                "source": "github",
                "url": "https://github.com/TencentEdgeOne/edgeone-pages-mcp"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:09Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "TermiX-official": {
      "mcpproviderid": "TermiX-official",
      "self": "#/mcpproviders/TermiX-official",
      "xid": "/mcpproviders/TermiX-official",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:34.867410899Z",
      "modifiedat": "2025-05-26T16:41:34.867410899Z",

      "serversurl": "#/mcpproviders/TermiX-official/servers",
      "servers": {
        "bsc-mcp": {
          "serverid": "bsc-mcp",
          "self": "#/mcpproviders/TermiX-official/servers/bsc-mcp",
          "xid": "/mcpproviders/TermiX-official/servers/bsc-mcp",

          "metaurl": "#/mcpproviders/TermiX-official/servers/bsc-mcp/meta",
          "meta": {
            "serverid": "bsc-mcp",
            "self": "#/mcpproviders/TermiX-official/servers/bsc-mcp/meta",
            "xid": "/mcpproviders/TermiX-official/servers/bsc-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:34.867410899Z",
            "modifiedat": "2025-05-26T16:41:34.867410899Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/TermiX-official/servers/bsc-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/TermiX-official/servers/bsc-mcp/versions",
          "versions": {
            "1": {
              "serverid": "bsc-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/TermiX-official/servers/bsc-mcp/versions/1",
              "xid": "/mcpproviders/TermiX-official/servers/bsc-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.termix-official/bsc-mcp",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:34.867410899Z",
              "modifiedat": "2025-05-26T16:41:34.867410899Z",
              "ancestor": "1",
              "id": "36156772-6775-4b79-b560-b72ccaaca085",
              "packages": [
                {
                  "name": "bnbchain-mcp",
                  "registry_name": "unknown",
                  "version": "1.0.12"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "949735444",
                "source": "github",
                "url": "https://github.com/TermiX-official/bsc-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Send BNB to a wallet",
                  "name": "transferNativeToken"
                },
                {
                  "description": "Transfer BEP-20 token via symbol/address",
                  "name": "transferBEP20Token"
                },
                {
                  "description": "Swap tokens via PancakeSwap",
                  "name": "pancakeSwap"
                },
                {
                  "description": "Create meme token on Four.Meme",
                  "name": "createFourMeme"
                },
                {
                  "description": "Deploy a BEP-20 contract",
                  "name": "createBEP20Token"
                },
                {
                  "description": "Get token + native balance",
                  "name": "getBalance"
                },
                {
                  "description": "Custom contract calls via ABI",
                  "name": "callContractFunction"
                },
                {
                  "description": "Get wallet info for an address",
                  "name": "getWalletInfo"
                },
                {
                  "description": "Check token security of BSC tokens",
                  "name": "securityCheck"
                },
                {
                  "description": "Add liquidity to PancakeSwap",
                  "name": "pancakeAddLiquidity"
                },
                {
                  "description": "View your PancakeSwap positions",
                  "name": "pancakeMyPosition"
                },
                {
                  "description": "Remove liquidity from PancakeSwap",
                  "name": "pancakeRemovePosition"
                },
                {
                  "description": "Sell meme token on Four.Meme",
                  "name": "sellMemeToken"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:09Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "VectorInstitute": {
      "mcpproviderid": "VectorInstitute",
      "self": "#/mcpproviders/VectorInstitute",
      "xid": "/mcpproviders/VectorInstitute",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:46.27483677Z",
      "modifiedat": "2025-05-26T16:41:46.27483677Z",

      "serversurl": "#/mcpproviders/VectorInstitute/servers",
      "servers": {
        "mcp-goodnews": {
          "serverid": "mcp-goodnews",
          "self": "#/mcpproviders/VectorInstitute/servers/mcp-goodnews",
          "xid": "/mcpproviders/VectorInstitute/servers/mcp-goodnews",

          "metaurl": "#/mcpproviders/VectorInstitute/servers/mcp-goodnews/meta",
          "meta": {
            "serverid": "mcp-goodnews",
            "self": "#/mcpproviders/VectorInstitute/servers/mcp-goodnews/meta",
            "xid": "/mcpproviders/VectorInstitute/servers/mcp-goodnews/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:46.27483677Z",
            "modifiedat": "2025-05-26T16:41:46.27483677Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/VectorInstitute/servers/mcp-goodnews/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/VectorInstitute/servers/mcp-goodnews/versions",
          "versions": {
            "1": {
              "serverid": "mcp-goodnews",
              "versionid": "1",
              "self": "#/mcpproviders/VectorInstitute/servers/mcp-goodnews/versions/1",
              "xid": "/mcpproviders/VectorInstitute/servers/mcp-goodnews/versions/1",
              "epoch": 1,
              "name": "io.github.vectorinstitute/mcp-goodnews",
              "isdefault": true,
              "description": "A simple MCP application that delivers curated positive and uplifting news stories.",
              "createdat": "2025-05-26T16:41:46.27483677Z",
              "modifiedat": "2025-05-26T16:41:46.27483677Z",
              "ancestor": "1",
              "id": "91c0fc60-7dc9-4095-a05a-9f816738df67",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cnewsapi-api-key\u003e",
                      "name": "NEWS_API_KEY"
                    },
                    {
                      "description": "\u003ccohere-api-key\u003e",
                      "name": "COHERE_API_KEY"
                    }
                  ],
                  "name": "mcp-goodnews",
                  "package_arguments": [
                    {
                      "default": "--directory \u003cabsolute-path-to-cloned-repo\u003e/mcp-goodnews/src/mcp_goodnews",
                      "description": "Path to the source directory",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory \u003cabsolute-path-to-cloned-repo\u003e/mcp-goodnews/src/mcp_goodnews",
                      "type": "named",
                      "value": "--directory \u003cabsolute-path-to-cloned-repo\u003e/mcp-goodnews/src/mcp_goodnews",
                      "value_hint": "\u003cabsolute-path-to-cloned-repo\u003e/mcp-goodnews/src/mcp_goodnews"
                    },
                    {
                      "default": "server.py",
                      "description": "Python script to start the server",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "server.py",
                      "value_hint": "server.py"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "950810099",
                "source": "github",
                "url": "https://github.com/VectorInstitute/mcp-goodnews"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:29Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Verodat": {
      "mcpproviderid": "Verodat",
      "self": "#/mcpproviders/Verodat",
      "xid": "/mcpproviders/Verodat",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:26.050851896Z",
      "modifiedat": "2025-05-26T16:41:26.050851896Z",

      "serversurl": "#/mcpproviders/Verodat/servers",
      "servers": {
        "verodat-mcp-server": {
          "serverid": "verodat-mcp-server",
          "self": "#/mcpproviders/Verodat/servers/verodat-mcp-server",
          "xid": "/mcpproviders/Verodat/servers/verodat-mcp-server",

          "metaurl": "#/mcpproviders/Verodat/servers/verodat-mcp-server/meta",
          "meta": {
            "serverid": "verodat-mcp-server",
            "self": "#/mcpproviders/Verodat/servers/verodat-mcp-server/meta",
            "xid": "/mcpproviders/Verodat/servers/verodat-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:26.050851896Z",
            "modifiedat": "2025-05-26T16:41:26.050851896Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Verodat/servers/verodat-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Verodat/servers/verodat-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "verodat-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/Verodat/servers/verodat-mcp-server/versions/1",
              "xid": "/mcpproviders/Verodat/servers/verodat-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.verodat/verodat-mcp-server",
              "isdefault": true,
              "description": "Verodat MCP Server Implementation",
              "createdat": "2025-05-26T16:41:26.050851896Z",
              "modifiedat": "2025-05-26T16:41:26.050851896Z",
              "ancestor": "1",
              "id": "c0c30db1-cc08-426e-886f-0bdbcd31d101",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-api-key",
                      "name": "VERODAT_AI_API_KEY"
                    },
                    {
                      "description": "https://verodat.io/api/v3",
                      "name": "VERODAT_API_BASE_URL"
                    }
                  ],
                  "name": "verodat-mcp-server",
                  "package_arguments": [
                    {
                      "default": "path/to/verodat-mcp-server/build/src/consume.js",
                      "description": "Path to script file to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "path/to/verodat-mcp-server/build/src/consume.js",
                      "value_hint": "path/to/verodat-mcp-server/build/src/consume.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "924683561",
                "source": "github",
                "url": "https://github.com/Verodat/verodat-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve available accounts",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-accounts"
                },
                {
                  "description": "List workspaces within an account",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-workspaces"
                },
                {
                  "description": "List datasets in a workspace",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-datasets"
                },
                {
                  "description": "Retrieve actual data from a dataset",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-dataset-output"
                },
                {
                  "description": "Retrieve field definitions for a dataset",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-dataset-targetfields"
                },
                {
                  "description": "Retrieve existing AI queries",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-queries"
                },
                {
                  "description": "Get workspace context and data structure",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-ai-context"
                },
                {
                  "description": "Execute AI-powered queries on datasets",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "execute-ai-query"
                },
                {
                  "description": "Create a new dataset with defined schema",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "create-dataset"
                },
                {
                  "description": "Upload data rows to existing datasets",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "upload-dataset-rows"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:20Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "VeyraX": {
      "mcpproviderid": "VeyraX",
      "self": "#/mcpproviders/VeyraX",
      "xid": "/mcpproviders/VeyraX",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:24.604632257Z",
      "modifiedat": "2025-05-26T16:41:24.604632257Z",

      "serversurl": "#/mcpproviders/VeyraX/servers",
      "servers": {
        "veyrax-mcp": {
          "serverid": "veyrax-mcp",
          "self": "#/mcpproviders/VeyraX/servers/veyrax-mcp",
          "xid": "/mcpproviders/VeyraX/servers/veyrax-mcp",

          "metaurl": "#/mcpproviders/VeyraX/servers/veyrax-mcp/meta",
          "meta": {
            "serverid": "veyrax-mcp",
            "self": "#/mcpproviders/VeyraX/servers/veyrax-mcp/meta",
            "xid": "/mcpproviders/VeyraX/servers/veyrax-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:24.604632257Z",
            "modifiedat": "2025-05-26T16:41:24.604632257Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/VeyraX/servers/veyrax-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/VeyraX/servers/veyrax-mcp/versions",
          "versions": {
            "1": {
              "serverid": "veyrax-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/VeyraX/servers/veyrax-mcp/versions/1",
              "xid": "/mcpproviders/VeyraX/servers/veyrax-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.veyrax/veyrax-mcp",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:24.604632257Z",
              "modifiedat": "2025-05-26T16:41:24.604632257Z",
              "ancestor": "1",
              "id": "2cc83e0a-3ca5-4e21-b346-83254cc72e1f",
              "packages": [
                {
                  "name": "veyrax-mcp",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "942928935",
                "source": "github",
                "url": "https://github.com/VeyraX/veyrax-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "GetToolsTool"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "ToolCallTool"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "GetFlowTool"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:22Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Vortiago": {
      "mcpproviderid": "Vortiago",
      "self": "#/mcpproviders/Vortiago",
      "xid": "/mcpproviders/Vortiago",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:34.998600256Z",
      "modifiedat": "2025-05-26T16:41:35.073032852Z",

      "serversurl": "#/mcpproviders/Vortiago/servers",
      "servers": {
        "mcp-azure-devops": {
          "serverid": "mcp-azure-devops",
          "self": "#/mcpproviders/Vortiago/servers/mcp-azure-devops",
          "xid": "/mcpproviders/Vortiago/servers/mcp-azure-devops",

          "metaurl": "#/mcpproviders/Vortiago/servers/mcp-azure-devops/meta",
          "meta": {
            "serverid": "mcp-azure-devops",
            "self": "#/mcpproviders/Vortiago/servers/mcp-azure-devops/meta",
            "xid": "/mcpproviders/Vortiago/servers/mcp-azure-devops/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:35.073032852Z",
            "modifiedat": "2025-05-26T16:41:35.073032852Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Vortiago/servers/mcp-azure-devops/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Vortiago/servers/mcp-azure-devops/versions",
          "versions": {
            "1": {
              "serverid": "mcp-azure-devops",
              "versionid": "1",
              "self": "#/mcpproviders/Vortiago/servers/mcp-azure-devops/versions/1",
              "xid": "/mcpproviders/Vortiago/servers/mcp-azure-devops/versions/1",
              "epoch": 1,
              "name": "io.github.vortiago/mcp-azure-devops",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server enabling AI assistants to interact with Azure DevOps services via Python SDK.",
              "createdat": "2025-05-26T16:41:35.073032852Z",
              "modifiedat": "2025-05-26T16:41:35.073032852Z",
              "ancestor": "1",
              "id": "4502246b-f419-4879-a179-149c6d87a871",
              "packages": [
                {
                  "name": "mcp-azure-devops",
                  "registry_name": "unknown",
                  "version": "0.6.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "948085438",
                "source": "github",
                "url": "https://github.com/Vortiago/mcp-azure-devops"
              },
              "resources": [
                {
                  "description": "Work item resources accessible by ID.",
                  "mimetype": "application/json",
                  "name": "work_items",
                  "uritemplate": "/workitems/{id}"
                },
                {
                  "description": "List of accessible projects in the organization.",
                  "mimetype": "application/json",
                  "name": "projects",
                  "uritemplate": "/projects"
                },
                {
                  "description": "List of teams within the organization.",
                  "mimetype": "application/json",
                  "name": "teams",
                  "uritemplate": "/teams"
                }
              ],
              "tools": [
                {
                  "description": "Searches for work items using Work Item Query Language (WIQL). Use this tool to find work items matching specific criteria, search across projects, create dynamic reports, or identify work items assigned to specific team members.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The WIQL query string (e.g., \"SELECT * FROM workitems WHERE [System.State] = 'Active'\")",
                        "type": "string"
                      },
                      "top": {
                        "description": "Maximum number of results to return (default: 30)",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "query_work_items"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:42Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-outline": {
          "serverid": "mcp-outline",
          "self": "#/mcpproviders/Vortiago/servers/mcp-outline",
          "xid": "/mcpproviders/Vortiago/servers/mcp-outline",

          "metaurl": "#/mcpproviders/Vortiago/servers/mcp-outline/meta",
          "meta": {
            "serverid": "mcp-outline",
            "self": "#/mcpproviders/Vortiago/servers/mcp-outline/meta",
            "xid": "/mcpproviders/Vortiago/servers/mcp-outline/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:34.998600256Z",
            "modifiedat": "2025-05-26T16:41:34.998600256Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Vortiago/servers/mcp-outline/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Vortiago/servers/mcp-outline/versions",
          "versions": {
            "1": {
              "serverid": "mcp-outline",
              "versionid": "1",
              "self": "#/mcpproviders/Vortiago/servers/mcp-outline/versions/1",
              "xid": "/mcpproviders/Vortiago/servers/mcp-outline/versions/1",
              "epoch": 1,
              "name": "io.github.vortiago/mcp-outline",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server enabling AI assistants to interact with Outline documentation services.",
              "createdat": "2025-05-26T16:41:34.998600256Z",
              "modifiedat": "2025-05-26T16:41:34.998600256Z",
              "ancestor": "1",
              "id": "d6801d4f-2f27-4e67-8b70-10754b48ff0d",
              "packages": [
                {
                  "name": "mcp-outline",
                  "registry_name": "unknown",
                  "version": "0.2.2"
                }
              ],
              "repository": {
                "id": "953087223",
                "source": "github",
                "url": "https://github.com/Vortiago/mcp-outline"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:16Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "XGenerationLab": {
      "mcpproviderid": "XGenerationLab",
      "self": "#/mcpproviders/XGenerationLab",
      "xid": "/mcpproviders/XGenerationLab",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:30.573748664Z",
      "modifiedat": "2025-05-26T16:41:30.573748664Z",

      "serversurl": "#/mcpproviders/XGenerationLab/servers",
      "servers": {
        "xiyan_mcp_server": {
          "serverid": "xiyan_mcp_server",
          "self": "#/mcpproviders/XGenerationLab/servers/xiyan_mcp_server",
          "xid": "/mcpproviders/XGenerationLab/servers/xiyan_mcp_server",

          "metaurl": "#/mcpproviders/XGenerationLab/servers/xiyan_mcp_server/meta",
          "meta": {
            "serverid": "xiyan_mcp_server",
            "self": "#/mcpproviders/XGenerationLab/servers/xiyan_mcp_server/meta",
            "xid": "/mcpproviders/XGenerationLab/servers/xiyan_mcp_server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:30.573748664Z",
            "modifiedat": "2025-05-26T16:41:30.573748664Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/XGenerationLab/servers/xiyan_mcp_server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/XGenerationLab/servers/xiyan_mcp_server/versions",
          "versions": {
            "1": {
              "serverid": "xiyan_mcp_server",
              "versionid": "1",
              "self": "#/mcpproviders/XGenerationLab/servers/xiyan_mcp_server/versions/1",
              "xid": "/mcpproviders/XGenerationLab/servers/xiyan_mcp_server/versions/1",
              "epoch": 1,
              "name": "io.github.xgenerationlab/xiyan_mcp_server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that enables natural language queries to databases",
              "createdat": "2025-05-26T16:41:30.573748664Z",
              "modifiedat": "2025-05-26T16:41:30.573748664Z",
              "ancestor": "1",
              "id": "a33de229-5e89-468d-aa2a-570b0f6e3dfa",
              "packages": [
                {
                  "name": "xiyan_mcp_server",
                  "registry_name": "unknown",
                  "version": "0.1.5"
                }
              ],
              "prompts": [],
              "remotes": [
                {
                  "transport_type": "",
                  "url": "http://localhost:8000/sse"
                }
              ],
              "repository": {
                "id": "947753431",
                "source": "github",
                "url": "https://github.com/XGenerationLab/xiyan_mcp_server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:08Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "XeroAPI": {
      "mcpproviderid": "XeroAPI",
      "self": "#/mcpproviders/XeroAPI",
      "xid": "/mcpproviders/XeroAPI",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:42.4473975Z",
      "modifiedat": "2025-05-26T16:41:42.4473975Z",

      "serversurl": "#/mcpproviders/XeroAPI/servers",
      "servers": {
        "xero-mcp-server": {
          "serverid": "xero-mcp-server",
          "self": "#/mcpproviders/XeroAPI/servers/xero-mcp-server",
          "xid": "/mcpproviders/XeroAPI/servers/xero-mcp-server",

          "metaurl": "#/mcpproviders/XeroAPI/servers/xero-mcp-server/meta",
          "meta": {
            "serverid": "xero-mcp-server",
            "self": "#/mcpproviders/XeroAPI/servers/xero-mcp-server/meta",
            "xid": "/mcpproviders/XeroAPI/servers/xero-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:42.4473975Z",
            "modifiedat": "2025-05-26T16:41:42.4473975Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/XeroAPI/servers/xero-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/XeroAPI/servers/xero-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "xero-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/XeroAPI/servers/xero-mcp-server/versions/1",
              "xid": "/mcpproviders/XeroAPI/servers/xero-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.xeroapi/xero-mcp-server",
              "isdefault": true,
              "description": "An MCP server that integrates with the MCP protocol. https://modelcontextprotocol.io/introduction",
              "createdat": "2025-05-26T16:41:42.4473975Z",
              "modifiedat": "2025-05-26T16:41:42.4473975Z",
              "ancestor": "1",
              "id": "4bc3b6d3-666e-4bb7-8ad7-6b38bc9c5ab8",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_client_id_here",
                      "name": "XERO_CLIENT_ID"
                    },
                    {
                      "description": "your_client_secret_here",
                      "name": "XERO_CLIENT_SECRET"
                    }
                  ],
                  "name": "@xeroapi/xero-mcp-server",
                  "package_arguments": [
                    {
                      "default": "insert-your-file-path-here/xero-mcp-server/dist/index.js",
                      "description": "Path to MCP server entry file",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "insert-your-file-path-here/xero-mcp-server/dist/index.js",
                      "value_hint": "insert-your-file-path-here/xero-mcp-server/dist/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.0.12"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "949710667",
                "source": "github",
                "url": "https://github.com/XeroAPI/xero-mcp-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:25Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "YanxingLiu": {
      "mcpproviderid": "YanxingLiu",
      "self": "#/mcpproviders/YanxingLiu",
      "xid": "/mcpproviders/YanxingLiu",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:00.680787931Z",
      "modifiedat": "2025-05-26T16:42:00.680787931Z",

      "serversurl": "#/mcpproviders/YanxingLiu/servers",
      "servers": {
        "dify-mcp-server": {
          "serverid": "dify-mcp-server",
          "self": "#/mcpproviders/YanxingLiu/servers/dify-mcp-server",
          "xid": "/mcpproviders/YanxingLiu/servers/dify-mcp-server",

          "metaurl": "#/mcpproviders/YanxingLiu/servers/dify-mcp-server/meta",
          "meta": {
            "serverid": "dify-mcp-server",
            "self": "#/mcpproviders/YanxingLiu/servers/dify-mcp-server/meta",
            "xid": "/mcpproviders/YanxingLiu/servers/dify-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:00.680787931Z",
            "modifiedat": "2025-05-26T16:42:00.680787931Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/YanxingLiu/servers/dify-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/YanxingLiu/servers/dify-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "dify-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/YanxingLiu/servers/dify-mcp-server/versions/1",
              "xid": "/mcpproviders/YanxingLiu/servers/dify-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.yanxingliu/dify-mcp-server",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) Server for dify workflows",
              "createdat": "2025-05-26T16:42:00.680787931Z",
              "modifiedat": "2025-05-26T16:42:00.680787931Z",
              "ancestor": "1",
              "id": "5f64133c-70f4-4044-ac82-dcb2e7758c8c",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "https://cloud.dify.ai/v1",
                      "name": "DIFY_BASE_URL"
                    },
                    {
                      "description": "app-sk1,app-sk2",
                      "name": "DIFY_APP_SKS"
                    }
                  ],
                  "name": "dify-mcp-server",
                  "package_arguments": [
                    {
                      "default": "--directory /Users/lyx/Downloads/dify-mcp-server",
                      "description": "Directory path to operate in",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory /Users/lyx/Downloads/dify-mcp-server",
                      "type": "named",
                      "value": "--directory /Users/lyx/Downloads/dify-mcp-server",
                      "value_hint": "/Users/lyx/Downloads/dify-mcp-server"
                    },
                    {
                      "default": "dify_mcp_server",
                      "description": "Server script/module",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "dify_mcp_server",
                      "value_hint": "dify_mcp_server"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "908244326",
                "source": "github",
                "url": "https://github.com/YanxingLiu/dify-mcp-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:51Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "YuChenSSR": {
      "mcpproviderid": "YuChenSSR",
      "self": "#/mcpproviders/YuChenSSR",
      "xid": "/mcpproviders/YuChenSSR",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:56.208096333Z",
      "modifiedat": "2025-05-26T16:41:56.317397455Z",

      "serversurl": "#/mcpproviders/YuChenSSR/servers",
      "servers": {
        "mindmap-mcp-server": {
          "serverid": "mindmap-mcp-server",
          "self": "#/mcpproviders/YuChenSSR/servers/mindmap-mcp-server",
          "xid": "/mcpproviders/YuChenSSR/servers/mindmap-mcp-server",

          "metaurl": "#/mcpproviders/YuChenSSR/servers/mindmap-mcp-server/meta",
          "meta": {
            "serverid": "mindmap-mcp-server",
            "self": "#/mcpproviders/YuChenSSR/servers/mindmap-mcp-server/meta",
            "xid": "/mcpproviders/YuChenSSR/servers/mindmap-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:56.208096333Z",
            "modifiedat": "2025-05-26T16:41:56.208096333Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/YuChenSSR/servers/mindmap-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/YuChenSSR/servers/mindmap-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "mindmap-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/YuChenSSR/servers/mindmap-mcp-server/versions/1",
              "xid": "/mcpproviders/YuChenSSR/servers/mindmap-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.yuchenssr/mindmap-mcp-server",
              "isdefault": true,
              "description": "mindmap, mcp server, artifact",
              "createdat": "2025-05-26T16:41:56.208096333Z",
              "modifiedat": "2025-05-26T16:41:56.208096333Z",
              "ancestor": "1",
              "id": "7f9416dd-34cf-4f0d-bcfb-c87cbee3abf6",
              "packages": [
                {
                  "name": "mindmap-mcp-server",
                  "package_arguments": [
                    {
                      "default": "-i",
                      "description": "-i",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i"
                    },
                    {
                      "default": "-v /path/to/output/folder:/output",
                      "description": "-v /path/to/output/folder:/output",
                      "format": "string",
                      "is_required": true,
                      "name": "-v /path/to/output/folder:/output",
                      "type": "named",
                      "value": "-v /path/to/output/folder:/output",
                      "value_hint": "/path/to/output/folder:/output"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "0.1.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "951261036",
                "source": "github",
                "url": "https://github.com/YuChenSSR/mindmap-mcp-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:31Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "multi-ai-advisor-mcp": {
          "serverid": "multi-ai-advisor-mcp",
          "self": "#/mcpproviders/YuChenSSR/servers/multi-ai-advisor-mcp",
          "xid": "/mcpproviders/YuChenSSR/servers/multi-ai-advisor-mcp",

          "metaurl": "#/mcpproviders/YuChenSSR/servers/multi-ai-advisor-mcp/meta",
          "meta": {
            "serverid": "multi-ai-advisor-mcp",
            "self": "#/mcpproviders/YuChenSSR/servers/multi-ai-advisor-mcp/meta",
            "xid": "/mcpproviders/YuChenSSR/servers/multi-ai-advisor-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:56.317397455Z",
            "modifiedat": "2025-05-26T16:41:56.317397455Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/YuChenSSR/servers/multi-ai-advisor-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/YuChenSSR/servers/multi-ai-advisor-mcp/versions",
          "versions": {
            "1": {
              "serverid": "multi-ai-advisor-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/YuChenSSR/servers/multi-ai-advisor-mcp/versions/1",
              "xid": "/mcpproviders/YuChenSSR/servers/multi-ai-advisor-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.yuchenssr/multi-ai-advisor-mcp",
              "isdefault": true,
              "description": "council of models for decision",
              "createdat": "2025-05-26T16:41:56.317397455Z",
              "modifiedat": "2025-05-26T16:41:56.317397455Z",
              "ancestor": "1",
              "id": "abcce212-b3e1-4741-a8b3-86c95c276fb1",
              "packages": [
                {
                  "name": "multi-model-advisor",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "repository": {
                "id": "954021177",
                "source": "github",
                "url": "https://github.com/YuChenSSR/multi-ai-advisor-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:47Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "ZubeidHendricks": {
      "mcpproviderid": "ZubeidHendricks",
      "self": "#/mcpproviders/ZubeidHendricks",
      "xid": "/mcpproviders/ZubeidHendricks",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:28.2938476Z",
      "modifiedat": "2025-05-26T16:42:28.2938476Z",

      "serversurl": "#/mcpproviders/ZubeidHendricks/servers",
      "servers": {
        "youtube-mcp-server": {
          "serverid": "youtube-mcp-server",
          "self": "#/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server",
          "xid": "/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server",

          "metaurl": "#/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server/meta",
          "meta": {
            "serverid": "youtube-mcp-server",
            "self": "#/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server/meta",
            "xid": "/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:28.2938476Z",
            "modifiedat": "2025-05-26T16:42:28.2938476Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "youtube-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server/versions/1",
              "xid": "/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.zubeidhendricks/youtube-mcp-server",
              "isdefault": true,
              "description": "MCP Server for YouTube API, enabling video management, Shorts creation, and advanced analytics",
              "createdat": "2025-05-26T16:42:28.2938476Z",
              "modifiedat": "2025-05-26T16:42:28.2938476Z",
              "ancestor": "1",
              "id": "0278fd92-a009-4a47-a6df-5f77db37e6ab",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "${input:apiKey}",
                      "name": "YOUTUBE_API_KEY"
                    }
                  ],
                  "name": "zubeid-youtube-mcp-server",
                  "registry_name": "npm",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "909607678",
                "source": "github",
                "url": "https://github.com/ZubeidHendricks/youtube-mcp-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:14Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "aarora79": {
      "mcpproviderid": "aarora79",
      "self": "#/mcpproviders/aarora79",
      "xid": "/mcpproviders/aarora79",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:34.823640537Z",
      "modifiedat": "2025-05-26T16:42:34.823640537Z",

      "serversurl": "#/mcpproviders/aarora79/servers",
      "servers": {
        "aws-cost-explorer-mcp-server": {
          "serverid": "aws-cost-explorer-mcp-server",
          "self": "#/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server",
          "xid": "/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server",

          "metaurl": "#/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server/meta",
          "meta": {
            "serverid": "aws-cost-explorer-mcp-server",
            "self": "#/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server/meta",
            "xid": "/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:34.823640537Z",
            "modifiedat": "2025-05-26T16:42:34.823640537Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "aws-cost-explorer-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server/versions/1",
              "xid": "/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.aarora79/aws-cost-explorer-mcp-server",
              "isdefault": true,
              "description": "MCP server for understanding AWS spend",
              "createdat": "2025-05-26T16:42:34.823640537Z",
              "modifiedat": "2025-05-26T16:42:34.823640537Z",
              "ancestor": "1",
              "id": "9ddac40e-d776-4232-a00f-7e698eb2dca8",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_ACCESS_KEY_ID",
                      "name": "AWS_ACCESS_KEY_ID"
                    },
                    {
                      "description": "YOUR_SECRET_ACCESS_KEY",
                      "name": "AWS_SECRET_ACCESS_KEY"
                    },
                    {
                      "description": "us-east-1",
                      "name": "AWS_REGION"
                    },
                    {
                      "description": "YOUR_CLOUDWATCH_BEDROCK_MODEL_INVOCATION_LOG_GROUP_NAME",
                      "name": "BEDROCK_LOG_GROUP_NAME"
                    },
                    {
                      "description": "ROLE_NAME_FOR_THE_ROLE_TO_ASSUME_IN_OTHER_ACCOUNTS",
                      "name": "CROSS_ACCOUNT_ROLE_NAME"
                    },
                    {
                      "description": "stdio",
                      "name": "MCP_TRANSPORT"
                    }
                  ],
                  "name": "aws-cost-explorer-mcp",
                  "package_arguments": [
                    {
                      "default": "--directory /path/to/aws-cost-explorer-mcp-server",
                      "description": "Path to the directory.",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory /path/to/aws-cost-explorer-mcp-server",
                      "type": "named",
                      "value": "--directory /path/to/aws-cost-explorer-mcp-server",
                      "value_hint": "/path/to/aws-cost-explorer-mcp-server"
                    },
                    {
                      "default": "server.py",
                      "description": "Python script to run.",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "server.py",
                      "value_hint": "server.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "945535318",
                "source": "github",
                "url": "https://github.com/aarora79/aws-cost-explorer-mcp-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:28Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "abel9851": {
      "mcpproviderid": "abel9851",
      "self": "#/mcpproviders/abel9851",
      "xid": "/mcpproviders/abel9851",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:06.149112176Z",
      "modifiedat": "2025-05-26T16:42:06.149112176Z",

      "serversurl": "#/mcpproviders/abel9851/servers",
      "servers": {
        "mcp-server-mariadb": {
          "serverid": "mcp-server-mariadb",
          "self": "#/mcpproviders/abel9851/servers/mcp-server-mariadb",
          "xid": "/mcpproviders/abel9851/servers/mcp-server-mariadb",

          "metaurl": "#/mcpproviders/abel9851/servers/mcp-server-mariadb/meta",
          "meta": {
            "serverid": "mcp-server-mariadb",
            "self": "#/mcpproviders/abel9851/servers/mcp-server-mariadb/meta",
            "xid": "/mcpproviders/abel9851/servers/mcp-server-mariadb/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:06.149112176Z",
            "modifiedat": "2025-05-26T16:42:06.149112176Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/abel9851/servers/mcp-server-mariadb/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/abel9851/servers/mcp-server-mariadb/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-mariadb",
              "versionid": "1",
              "self": "#/mcpproviders/abel9851/servers/mcp-server-mariadb/versions/1",
              "xid": "/mcpproviders/abel9851/servers/mcp-server-mariadb/versions/1",
              "epoch": 1,
              "name": "io.github.abel9851/mcp-server-mariadb",
              "isdefault": true,
              "description": "An mcp server that provides read-only access to MariaDB.",
              "createdat": "2025-05-26T16:42:06.149112176Z",
              "modifiedat": "2025-05-26T16:42:06.149112176Z",
              "ancestor": "1",
              "id": "8197c60c-08c6-4d90-9d63-e64bf48ab6e4",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "127.0.0.1",
                      "name": "MARIADB_HOST"
                    },
                    {
                      "description": "USER",
                      "name": "MARIADB_USER"
                    },
                    {
                      "description": "PASSWORD",
                      "name": "MARIADB_PASSWORD"
                    },
                    {
                      "description": "DATABASE",
                      "name": "MARIADB_DATABASE"
                    },
                    {
                      "description": "3306",
                      "name": "MARIADB_PORT"
                    }
                  ],
                  "name": "mcp-server-mariadb",
                  "package_arguments": [
                    {
                      "default": "--directory /YOUR/SOURCE/PATH/mcp-server-mariadb/src/mcp_server_mariadb",
                      "description": "--directory /YOUR/SOURCE/PATH/mcp-server-mariadb/src/mcp_server_mariadb",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory /YOUR/SOURCE/PATH/mcp-server-mariadb/src/mcp_server_mariadb",
                      "type": "named",
                      "value": "--directory /YOUR/SOURCE/PATH/mcp-server-mariadb/src/mcp_server_mariadb",
                      "value_hint": "/YOUR/SOURCE/PATH/mcp-server-mariadb/src/mcp_server_mariadb"
                    },
                    {
                      "default": "server.py",
                      "description": "server.py",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "server.py",
                      "value_hint": "server.py"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "934896960",
                "source": "github",
                "url": "https://github.com/abel9851/mcp-server-mariadb"
              },
              "resources": [
                {
                  "description": "Expose schema list in database",
                  "name": "schema list"
                }
              ],
              "tools": [
                {
                  "description": "Execute read-only operations against MariDB",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "query_database"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:39Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "abhiz123": {
      "mcpproviderid": "abhiz123",
      "self": "#/mcpproviders/abhiz123",
      "xid": "/mcpproviders/abhiz123",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:57.636898454Z",
      "modifiedat": "2025-05-26T16:41:57.636898454Z",

      "serversurl": "#/mcpproviders/abhiz123/servers",
      "servers": {
        "todoist-mcp-server": {
          "serverid": "todoist-mcp-server",
          "self": "#/mcpproviders/abhiz123/servers/todoist-mcp-server",
          "xid": "/mcpproviders/abhiz123/servers/todoist-mcp-server",

          "metaurl": "#/mcpproviders/abhiz123/servers/todoist-mcp-server/meta",
          "meta": {
            "serverid": "todoist-mcp-server",
            "self": "#/mcpproviders/abhiz123/servers/todoist-mcp-server/meta",
            "xid": "/mcpproviders/abhiz123/servers/todoist-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:57.636898454Z",
            "modifiedat": "2025-05-26T16:41:57.636898454Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/abhiz123/servers/todoist-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/abhiz123/servers/todoist-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "todoist-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/abhiz123/servers/todoist-mcp-server/versions/1",
              "xid": "/mcpproviders/abhiz123/servers/todoist-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.abhiz123/todoist-mcp-server",
              "isdefault": true,
              "description": "MCP server for Todoist integration enabling natural language task management with Claude",
              "createdat": "2025-05-26T16:41:57.636898454Z",
              "modifiedat": "2025-05-26T16:41:57.636898454Z",
              "ancestor": "1",
              "id": "f79220af-20c6-4d21-b4f6-13f176b7f1d8",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_api_token_here",
                      "name": "TODOIST_API_TOKEN"
                    }
                  ],
                  "name": "@abhiz123/todoist-mcp-server",
                  "registry_name": "npm",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "898075293",
                "source": "github",
                "url": "https://github.com/abhiz123/todoist-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Create a new task in Todoist with optional description, due date, and priority",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "The content/title of the task",
                        "type": "string"
                      },
                      "description": {
                        "description": "Detailed description of the task (optional)",
                        "type": "string"
                      },
                      "due_string": {
                        "description": "Natural language due date like 'tomorrow', 'next Monday', 'Jan 23' (optional)",
                        "type": "string"
                      },
                      "priority": {
                        "description": "Task priority from 1 (normal) to 4 (urgent) (optional)",
                        "enum": [
                          1,
                          2,
                          3,
                          4
                        ],
                        "type": "number"
                      }
                    },
                    "required": [
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "todoist_create_task"
                },
                {
                  "description": "Get a list of tasks from Todoist with various filters",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "description": "Natural language filter like 'today', 'tomorrow', 'next week', 'priority 1', 'overdue' (optional)",
                        "type": "string"
                      },
                      "limit": {
                        "default": 10,
                        "description": "Maximum number of tasks to return (optional)",
                        "type": "number"
                      },
                      "priority": {
                        "description": "Filter by priority level (1-4) (optional)",
                        "enum": [
                          1,
                          2,
                          3,
                          4
                        ],
                        "type": "number"
                      },
                      "project_id": {
                        "description": "Filter tasks by project ID (optional)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "todoist_get_tasks"
                },
                {
                  "description": "Update an existing task in Todoist by searching for it by name and then updating it",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "New content/title for the task (optional)",
                        "type": "string"
                      },
                      "description": {
                        "description": "New description for the task (optional)",
                        "type": "string"
                      },
                      "due_string": {
                        "description": "New due date in natural language like 'tomorrow', 'next Monday' (optional)",
                        "type": "string"
                      },
                      "priority": {
                        "description": "New priority level from 1 (normal) to 4 (urgent) (optional)",
                        "enum": [
                          1,
                          2,
                          3,
                          4
                        ],
                        "type": "number"
                      },
                      "task_name": {
                        "description": "Name/content of the task to search for and update",
                        "type": "string"
                      }
                    },
                    "required": [
                      "task_name"
                    ],
                    "type": "object"
                  },
                  "name": "todoist_update_task"
                },
                {
                  "description": "Delete a task from Todoist by searching for it by name",
                  "inputschema": {
                    "properties": {
                      "task_name": {
                        "description": "Name/content of the task to search for and delete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "task_name"
                    ],
                    "type": "object"
                  },
                  "name": "todoist_delete_task"
                },
                {
                  "description": "Mark a task as complete by searching for it by name",
                  "inputschema": {
                    "properties": {
                      "task_name": {
                        "description": "Name/content of the task to search for and complete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "task_name"
                    ],
                    "type": "object"
                  },
                  "name": "todoist_complete_task"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:56Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "adenot": {
      "mcpproviderid": "adenot",
      "self": "#/mcpproviders/adenot",
      "xid": "/mcpproviders/adenot",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:30.145869192Z",
      "modifiedat": "2025-05-26T16:41:30.145869192Z",

      "serversurl": "#/mcpproviders/adenot/servers",
      "servers": {
        "mcp-google-search": {
          "serverid": "mcp-google-search",
          "self": "#/mcpproviders/adenot/servers/mcp-google-search",
          "xid": "/mcpproviders/adenot/servers/mcp-google-search",

          "metaurl": "#/mcpproviders/adenot/servers/mcp-google-search/meta",
          "meta": {
            "serverid": "mcp-google-search",
            "self": "#/mcpproviders/adenot/servers/mcp-google-search/meta",
            "xid": "/mcpproviders/adenot/servers/mcp-google-search/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:30.145869192Z",
            "modifiedat": "2025-05-26T16:41:30.145869192Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/adenot/servers/mcp-google-search/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/adenot/servers/mcp-google-search/versions",
          "versions": {
            "1": {
              "serverid": "mcp-google-search",
              "versionid": "1",
              "self": "#/mcpproviders/adenot/servers/mcp-google-search/versions/1",
              "xid": "/mcpproviders/adenot/servers/mcp-google-search/versions/1",
              "epoch": 1,
              "name": "io.github.adenot/mcp-google-search",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:30.145869192Z",
              "modifiedat": "2025-05-26T16:41:30.145869192Z",
              "ancestor": "1",
              "id": "d5076249-cb9d-4c5e-ae2e-544779ec1a04",
              "packages": [
                {
                  "name": "@adenot/mcp-google-search",
                  "registry_name": "unknown",
                  "version": "0.2.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "925498825",
                "source": "github",
                "url": "https://github.com/adenot/mcp-google-search"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Perform a web search query",
                  "inputschema": {
                    "properties": {
                      "num": {
                        "description": "Number of results (1-10)",
                        "maximum": 10,
                        "minimum": 1,
                        "type": "number"
                      },
                      "query": {
                        "description": "Search query",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search"
                },
                {
                  "description": "Fetch and extract text content from a webpage",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "description": "URL of the webpage to read",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "read_webpage"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:34Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "adityak74": {
      "mcpproviderid": "adityak74",
      "self": "#/mcpproviders/adityak74",
      "xid": "/mcpproviders/adityak74",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:22.389092161Z",
      "modifiedat": "2025-05-26T16:42:22.389092161Z",

      "serversurl": "#/mcpproviders/adityak74/servers",
      "servers": {
        "mcp-scholarly": {
          "serverid": "mcp-scholarly",
          "self": "#/mcpproviders/adityak74/servers/mcp-scholarly",
          "xid": "/mcpproviders/adityak74/servers/mcp-scholarly",

          "metaurl": "#/mcpproviders/adityak74/servers/mcp-scholarly/meta",
          "meta": {
            "serverid": "mcp-scholarly",
            "self": "#/mcpproviders/adityak74/servers/mcp-scholarly/meta",
            "xid": "/mcpproviders/adityak74/servers/mcp-scholarly/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:22.389092161Z",
            "modifiedat": "2025-05-26T16:42:22.389092161Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/adityak74/servers/mcp-scholarly/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/adityak74/servers/mcp-scholarly/versions",
          "versions": {
            "1": {
              "serverid": "mcp-scholarly",
              "versionid": "1",
              "self": "#/mcpproviders/adityak74/servers/mcp-scholarly/versions/1",
              "xid": "/mcpproviders/adityak74/servers/mcp-scholarly/versions/1",
              "epoch": 1,
              "name": "io.github.adityak74/mcp-scholarly",
              "isdefault": true,
              "description": "A MCP server to search for accurate academic articles.",
              "createdat": "2025-05-26T16:42:22.389092161Z",
              "modifiedat": "2025-05-26T16:42:22.389092161Z",
              "ancestor": "1",
              "id": "f43b2576-74d3-4b79-b9d0-0c5816835369",
              "packages": [
                {
                  "name": "mcp-scholarly",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "910698593",
                "source": "github",
                "url": "https://github.com/adityak74/mcp-scholarly"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Search arxiv for articles related to the given keyword.",
                  "inputschema": {
                    "properties": {
                      "keyword": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "keyword"
                    ],
                    "type": "object"
                  },
                  "name": "search-arxiv"
                },
                {
                  "description": "Search google scholar for articles related to the given keyword.",
                  "inputschema": {
                    "properties": {
                      "keyword": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "keyword"
                    ],
                    "type": "object"
                  },
                  "name": "search-google-scholar"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:43Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "agentrpc": {
      "mcpproviderid": "agentrpc",
      "self": "#/mcpproviders/agentrpc",
      "xid": "/mcpproviders/agentrpc",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:20.481450473Z",
      "modifiedat": "2025-05-26T16:41:20.481450473Z",

      "serversurl": "#/mcpproviders/agentrpc/servers",
      "servers": {
        "agentrpc": {
          "serverid": "agentrpc",
          "self": "#/mcpproviders/agentrpc/servers/agentrpc",
          "xid": "/mcpproviders/agentrpc/servers/agentrpc",

          "metaurl": "#/mcpproviders/agentrpc/servers/agentrpc/meta",
          "meta": {
            "serverid": "agentrpc",
            "self": "#/mcpproviders/agentrpc/servers/agentrpc/meta",
            "xid": "/mcpproviders/agentrpc/servers/agentrpc/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:20.481450473Z",
            "modifiedat": "2025-05-26T16:41:20.481450473Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/agentrpc/servers/agentrpc/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/agentrpc/servers/agentrpc/versions",
          "versions": {
            "1": {
              "serverid": "agentrpc",
              "versionid": "1",
              "self": "#/mcpproviders/agentrpc/servers/agentrpc/versions/1",
              "xid": "/mcpproviders/agentrpc/servers/agentrpc/versions/1",
              "epoch": 1,
              "name": "io.github.agentrpc/agentrpc",
              "isdefault": true,
              "description": "A universal RPC layer for AI agents. Connect to any function, any language, any framework, in minutes.",
              "createdat": "2025-05-26T16:41:20.481450473Z",
              "modifiedat": "2025-05-26T16:41:20.481450473Z",
              "ancestor": "1",
              "id": "c296f683-5578-474a-bbef-00cfc2716fbc",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cYOUR_API_SECRET\u003e",
                      "name": "AGENTRPC_API_SECRET"
                    }
                  ],
                  "name": "agentrpc/agentrpc",
                  "package_arguments": [
                    {
                      "default": "mcp",
                      "description": "Positional argument",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp",
                      "value_hint": "mcp"
                    }
                  ],
                  "registry_name": "npm",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "949728461",
                "source": "github",
                "url": "https://github.com/agentrpc/agentrpc"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:56:57Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "agree-able": {
      "mcpproviderid": "agree-able",
      "self": "#/mcpproviders/agree-able",
      "xid": "/mcpproviders/agree-able",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:39.690139663Z",
      "modifiedat": "2025-05-26T16:42:39.690139663Z",

      "serversurl": "#/mcpproviders/agree-able/servers",
      "servers": {
        "room-mcp": {
          "serverid": "room-mcp",
          "self": "#/mcpproviders/agree-able/servers/room-mcp",
          "xid": "/mcpproviders/agree-able/servers/room-mcp",

          "metaurl": "#/mcpproviders/agree-able/servers/room-mcp/meta",
          "meta": {
            "serverid": "room-mcp",
            "self": "#/mcpproviders/agree-able/servers/room-mcp/meta",
            "xid": "/mcpproviders/agree-able/servers/room-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:39.690139663Z",
            "modifiedat": "2025-05-26T16:42:39.690139663Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/agree-able/servers/room-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/agree-able/servers/room-mcp/versions",
          "versions": {
            "1": {
              "serverid": "room-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/agree-able/servers/room-mcp/versions/1",
              "xid": "/mcpproviders/agree-able/servers/room-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.agree-able/room-mcp",
              "isdefault": true,
              "description": "Allow MCP clients like claude-desktop to use rooms to coordinate with other agents",
              "createdat": "2025-05-26T16:42:39.690139663Z",
              "modifiedat": "2025-05-26T16:42:39.690139663Z",
              "ancestor": "1",
              "id": "b9bf1c69-4a64-47ec-a781-fb81d1922695",
              "packages": [
                {
                  "name": "@agree-able/room-mcp",
                  "registry_name": "unknown",
                  "version": "1.0.3"
                }
              ],
              "repository": {
                "id": "939073414",
                "source": "github",
                "url": "https://github.com/agree-able/room-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:03Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ahnlabio": {
      "mcpproviderid": "ahnlabio",
      "self": "#/mcpproviders/ahnlabio",
      "xid": "/mcpproviders/ahnlabio",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:28.895163064Z",
      "modifiedat": "2025-05-26T16:41:28.895163064Z",

      "serversurl": "#/mcpproviders/ahnlabio/servers",
      "servers": {
        "bicscan-mcp": {
          "serverid": "bicscan-mcp",
          "self": "#/mcpproviders/ahnlabio/servers/bicscan-mcp",
          "xid": "/mcpproviders/ahnlabio/servers/bicscan-mcp",

          "metaurl": "#/mcpproviders/ahnlabio/servers/bicscan-mcp/meta",
          "meta": {
            "serverid": "bicscan-mcp",
            "self": "#/mcpproviders/ahnlabio/servers/bicscan-mcp/meta",
            "xid": "/mcpproviders/ahnlabio/servers/bicscan-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:28.895163064Z",
            "modifiedat": "2025-05-26T16:41:28.895163064Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ahnlabio/servers/bicscan-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ahnlabio/servers/bicscan-mcp/versions",
          "versions": {
            "1": {
              "serverid": "bicscan-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ahnlabio/servers/bicscan-mcp/versions/1",
              "xid": "/mcpproviders/ahnlabio/servers/bicscan-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ahnlabio/bicscan-mcp",
              "isdefault": true,
              "description": "BICScan MCP Server",
              "createdat": "2025-05-26T16:41:28.895163064Z",
              "modifiedat": "2025-05-26T16:41:28.895163064Z",
              "ancestor": "1",
              "id": "36e14e79-6228-442f-b3c7-c7080b6282f0",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_BICSCAN_API_KEY_HERE",
                      "name": "BICSCAN_API_KEY"
                    }
                  ],
                  "name": "bicscan-mcp",
                  "package_arguments": [
                    {
                      "default": "--from git+https://github.com/ahnlabio/bicscan-mcp",
                      "description": "use repo url",
                      "format": "string",
                      "is_required": true,
                      "name": "--from git+https://github.com/ahnlabio/bicscan-mcp",
                      "type": "named",
                      "value": "--from git+https://github.com/ahnlabio/bicscan-mcp",
                      "value_hint": "git+https://github.com/ahnlabio/bicscan-mcp"
                    },
                    {
                      "default": "bicscan-mcp",
                      "description": "subcommand or positional argument",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "bicscan-mcp",
                      "value_hint": "bicscan-mcp"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "954410951",
                "source": "github",
                "url": "https://github.com/ahnlabio/bicscan-mcp"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:40Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ahujasid": {
      "mcpproviderid": "ahujasid",
      "self": "#/mcpproviders/ahujasid",
      "xid": "/mcpproviders/ahujasid",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:46.437284614Z",
      "modifiedat": "2025-05-26T16:41:46.527794622Z",

      "serversurl": "#/mcpproviders/ahujasid/servers",
      "servers": {
        "ableton-mcp": {
          "serverid": "ableton-mcp",
          "self": "#/mcpproviders/ahujasid/servers/ableton-mcp",
          "xid": "/mcpproviders/ahujasid/servers/ableton-mcp",

          "metaurl": "#/mcpproviders/ahujasid/servers/ableton-mcp/meta",
          "meta": {
            "serverid": "ableton-mcp",
            "self": "#/mcpproviders/ahujasid/servers/ableton-mcp/meta",
            "xid": "/mcpproviders/ahujasid/servers/ableton-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:46.437284614Z",
            "modifiedat": "2025-05-26T16:41:46.437284614Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ahujasid/servers/ableton-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ahujasid/servers/ableton-mcp/versions",
          "versions": {
            "1": {
              "serverid": "ableton-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ahujasid/servers/ableton-mcp/versions/1",
              "xid": "/mcpproviders/ahujasid/servers/ableton-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ahujasid/ableton-mcp",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:46.437284614Z",
              "modifiedat": "2025-05-26T16:41:46.437284614Z",
              "ancestor": "1",
              "id": "98b8992b-77cc-43a5-825e-d14270fd9ca5",
              "packages": [
                {
                  "name": "ableton-mcp",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "repository": {
                "id": "951429064",
                "source": "github",
                "url": "https://github.com/ahujasid/ableton-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:32Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "blender-mcp": {
          "serverid": "blender-mcp",
          "self": "#/mcpproviders/ahujasid/servers/blender-mcp",
          "xid": "/mcpproviders/ahujasid/servers/blender-mcp",

          "metaurl": "#/mcpproviders/ahujasid/servers/blender-mcp/meta",
          "meta": {
            "serverid": "blender-mcp",
            "self": "#/mcpproviders/ahujasid/servers/blender-mcp/meta",
            "xid": "/mcpproviders/ahujasid/servers/blender-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:46.527794622Z",
            "modifiedat": "2025-05-26T16:41:46.527794622Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ahujasid/servers/blender-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ahujasid/servers/blender-mcp/versions",
          "versions": {
            "1": {
              "serverid": "blender-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ahujasid/servers/blender-mcp/versions/1",
              "xid": "/mcpproviders/ahujasid/servers/blender-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ahujasid/blender-mcp",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:46.527794622Z",
              "modifiedat": "2025-05-26T16:41:46.527794622Z",
              "ancestor": "1",
              "id": "fd341719-247e-45e8-a911-ad7c336eb163",
              "packages": [
                {
                  "name": "blender-mcp",
                  "package_arguments": [
                    {
                      "default": "uvx",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "uvx",
                      "value_hint": "uvx"
                    },
                    {
                      "default": "blender-mcp",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "blender-mcp",
                      "value_hint": "blender-mcp"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.1.3"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "944414751",
                "source": "github",
                "url": "https://github.com/ahujasid/blender-mcp"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:02Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "alexarevalo9": {
      "mcpproviderid": "alexarevalo9",
      "self": "#/mcpproviders/alexarevalo9",
      "xid": "/mcpproviders/alexarevalo9",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:09.791645643Z",
      "modifiedat": "2025-05-26T16:42:09.791645643Z",

      "serversurl": "#/mcpproviders/alexarevalo9/servers",
      "servers": {
        "ticktick-mcp-server": {
          "serverid": "ticktick-mcp-server",
          "self": "#/mcpproviders/alexarevalo9/servers/ticktick-mcp-server",
          "xid": "/mcpproviders/alexarevalo9/servers/ticktick-mcp-server",

          "metaurl": "#/mcpproviders/alexarevalo9/servers/ticktick-mcp-server/meta",
          "meta": {
            "serverid": "ticktick-mcp-server",
            "self": "#/mcpproviders/alexarevalo9/servers/ticktick-mcp-server/meta",
            "xid": "/mcpproviders/alexarevalo9/servers/ticktick-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:09.791645643Z",
            "modifiedat": "2025-05-26T16:42:09.791645643Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/alexarevalo9/servers/ticktick-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/alexarevalo9/servers/ticktick-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "ticktick-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/alexarevalo9/servers/ticktick-mcp-server/versions/1",
              "xid": "/mcpproviders/alexarevalo9/servers/ticktick-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.alexarevalo9/ticktick-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server designed to integrate with the TickTick task management platform, enabling intelligent context-aware task operations and automation.",
              "createdat": "2025-05-26T16:42:09.791645643Z",
              "modifiedat": "2025-05-26T16:42:09.791645643Z",
              "ancestor": "1",
              "id": "5c1709d9-3f57-4dbd-a727-5ce383a59c32",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cYOUR_CLIENT_ID\u003e",
                      "name": "TICKTICK_CLIENT_ID"
                    },
                    {
                      "description": "\u003cYOUR_CLIENT_SECRET\u003e",
                      "name": "TICKTICK_CLIENT_SECRET"
                    },
                    {
                      "description": "\u003cYOUR_ACCESS_TOKEN\u003e",
                      "name": "TICKTICK_ACCESS_TOKEN"
                    }
                  ],
                  "name": "@alexarevalo.ai/mcp-server-ticktick",
                  "package_arguments": [
                    {
                      "default": "-i",
                      "description": "Run container in interactive mode",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i",
                      "value_hint": "-i"
                    },
                    {
                      "default": "--rm",
                      "description": "Automatically remove the container when it exits",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm",
                      "value_hint": "--rm"
                    },
                    {
                      "default": "-e TICKTICK_CLIENT_ID",
                      "description": "Set the TICKTICK_CLIENT_ID environment variable in the container",
                      "format": "string",
                      "is_required": true,
                      "name": "-e TICKTICK_CLIENT_ID",
                      "type": "named",
                      "value": "-e TICKTICK_CLIENT_ID",
                      "value_hint": "TICKTICK_CLIENT_ID"
                    },
                    {
                      "default": "-e TICKTICK_CLIENT_SECRET",
                      "description": "Set the TICKTICK_CLIENT_SECRET environment variable in the container",
                      "format": "string",
                      "is_required": true,
                      "name": "-e TICKTICK_CLIENT_SECRET",
                      "type": "named",
                      "value": "-e TICKTICK_CLIENT_SECRET",
                      "value_hint": "TICKTICK_CLIENT_SECRET"
                    },
                    {
                      "default": "-e TICKTICK_ACCESS_TOKEN",
                      "description": "Set the TICKTICK_ACCESS_TOKEN environment variable in the container",
                      "format": "string",
                      "is_required": true,
                      "name": "-e TICKTICK_ACCESS_TOKEN",
                      "type": "named",
                      "value": "-e TICKTICK_ACCESS_TOKEN",
                      "value_hint": "TICKTICK_ACCESS_TOKEN"
                    },
                    {
                      "default": "mcp/ticktick",
                      "description": "Docker image name",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp/ticktick",
                      "value_hint": "mcp/ticktick"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "1.1.9"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "957668156",
                "source": "github",
                "url": "https://github.com/alexarevalo9/ticktick-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get all user projects",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_user_projects"
                },
                {
                  "description": "Get a project by ID",
                  "inputschema": {
                    "properties": {
                      "projectId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectId"
                    ],
                    "type": "object"
                  },
                  "name": "get_project_by_id"
                },
                {
                  "description": "Get a project with its tasks and columns",
                  "inputschema": {
                    "properties": {
                      "projectId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectId"
                    ],
                    "type": "object"
                  },
                  "name": "get_project_with_data"
                },
                {
                  "description": "Create a new project",
                  "inputschema": {
                    "properties": {
                      "color": {
                        "type": "string"
                      },
                      "favorite": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "create_project"
                },
                {
                  "description": "Update an existing project",
                  "inputschema": {
                    "properties": {
                      "color": {
                        "type": "string"
                      },
                      "favorite": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      },
                      "projectId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectId"
                    ],
                    "type": "object"
                  },
                  "name": "update_project"
                },
                {
                  "description": "Delete a project",
                  "inputschema": {
                    "properties": {
                      "projectId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectId"
                    ],
                    "type": "object"
                  },
                  "name": "delete_project"
                },
                {
                  "description": "Get a task by ProjectId and TaskId",
                  "inputschema": {
                    "properties": {
                      "projectId": {
                        "type": "string"
                      },
                      "taskId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectId",
                      "taskId"
                    ],
                    "type": "object"
                  },
                  "name": "get_task_by_ids"
                },
                {
                  "description": "Create a new task",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "type": "string"
                      },
                      "desc": {
                        "type": "string"
                      },
                      "dueDate": {
                        "type": "string"
                      },
                      "isAllDay": {
                        "type": "boolean"
                      },
                      "items": {
                        "items": {
                          "properties": {
                            "completedTime": {
                              "type": "string"
                            },
                            "isAllDay": {
                              "type": "boolean"
                            },
                            "sortOrder": {
                              "type": "number"
                            },
                            "startDate": {
                              "type": "string"
                            },
                            "status": {
                              "type": "number"
                            },
                            "timeZone": {
                              "type": "string"
                            },
                            "title": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "title"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "priority": {
                        "type": "number"
                      },
                      "projectId": {
                        "type": "string"
                      },
                      "reminders": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "repeatFlag": {
                        "type": "string"
                      },
                      "sortOrder": {
                        "type": "string"
                      },
                      "startDate": {
                        "type": "string"
                      },
                      "timeZone": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "title",
                      "projectId"
                    ],
                    "type": "object"
                  },
                  "name": "create_task"
                },
                {
                  "description": "Update an existing task",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "type": "string"
                      },
                      "desc": {
                        "type": "string"
                      },
                      "dueDate": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "isAllDay": {
                        "type": "boolean"
                      },
                      "items": {
                        "items": {
                          "properties": {
                            "completedTime": {
                              "type": "string"
                            },
                            "isAllDay": {
                              "type": "boolean"
                            },
                            "sortOrder": {
                              "type": "number"
                            },
                            "startDate": {
                              "type": "string"
                            },
                            "status": {
                              "type": "number"
                            },
                            "timeZone": {
                              "type": "string"
                            },
                            "title": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "title"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "priority": {
                        "type": "number"
                      },
                      "projectId": {
                        "type": "string"
                      },
                      "reminders": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "repeatFlag": {
                        "type": "string"
                      },
                      "sortOrder": {
                        "type": "string"
                      },
                      "startDate": {
                        "type": "string"
                      },
                      "taskId": {
                        "type": "string"
                      },
                      "timeZone": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "taskId",
                      "id",
                      "projectId"
                    ],
                    "type": "object"
                  },
                  "name": "update_task"
                },
                {
                  "description": "Complete a task",
                  "inputschema": {
                    "properties": {
                      "projectId": {
                        "type": "string"
                      },
                      "taskId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "taskId",
                      "projectId"
                    ],
                    "type": "object"
                  },
                  "name": "complete_task"
                },
                {
                  "description": "Delete a task",
                  "inputschema": {
                    "properties": {
                      "projectId": {
                        "type": "string"
                      },
                      "taskId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "taskId",
                      "projectId"
                    ],
                    "type": "object"
                  },
                  "name": "delete_task"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:54Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "alibaba": {
      "mcpproviderid": "alibaba",
      "self": "#/mcpproviders/alibaba",
      "xid": "/mcpproviders/alibaba",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:09.179028048Z",
      "modifiedat": "2025-05-26T16:42:09.179028048Z",

      "serversurl": "#/mcpproviders/alibaba/servers",
      "servers": {
        "higress": {
          "serverid": "higress",
          "self": "#/mcpproviders/alibaba/servers/higress",
          "xid": "/mcpproviders/alibaba/servers/higress",

          "metaurl": "#/mcpproviders/alibaba/servers/higress/meta",
          "meta": {
            "serverid": "higress",
            "self": "#/mcpproviders/alibaba/servers/higress/meta",
            "xid": "/mcpproviders/alibaba/servers/higress/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:09.179028048Z",
            "modifiedat": "2025-05-26T16:42:09.179028048Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/alibaba/servers/higress/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/alibaba/servers/higress/versions",
          "versions": {
            "1": {
              "serverid": "higress",
              "versionid": "1",
              "self": "#/mcpproviders/alibaba/servers/higress/versions/1",
              "xid": "/mcpproviders/alibaba/servers/higress/versions/1",
              "epoch": 1,
              "name": "io.github.alibaba/higress",
              "isdefault": true,
              "description": "🤖 AI Gateway | AI Native API Gateway",
              "createdat": "2025-05-26T16:42:09.179028048Z",
              "modifiedat": "2025-05-26T16:42:09.179028048Z",
              "ancestor": "1",
              "id": "121af804-12e1-4ac3-add1-3f8e2da4a8fe",
              "packages": [
                {
                  "name": "alibaba/higress",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "558188628",
                "source": "github",
                "url": "https://github.com/alibaba/higress"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:29Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "aliyun": {
      "mcpproviderid": "aliyun",
      "self": "#/mcpproviders/aliyun",
      "xid": "/mcpproviders/aliyun",
      "epoch": 3,
      "createdat": "2025-05-26T16:42:25.609156042Z",
      "modifiedat": "2025-05-26T16:42:25.924451873Z",

      "serversurl": "#/mcpproviders/aliyun/servers",
      "servers": {
        "alibaba-cloud-ops-mcp-server": {
          "serverid": "alibaba-cloud-ops-mcp-server",
          "self": "#/mcpproviders/aliyun/servers/alibaba-cloud-ops-mcp-server",
          "xid": "/mcpproviders/aliyun/servers/alibaba-cloud-ops-mcp-server",

          "metaurl": "#/mcpproviders/aliyun/servers/alibaba-cloud-ops-mcp-server/meta",
          "meta": {
            "serverid": "alibaba-cloud-ops-mcp-server",
            "self": "#/mcpproviders/aliyun/servers/alibaba-cloud-ops-mcp-server/meta",
            "xid": "/mcpproviders/aliyun/servers/alibaba-cloud-ops-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:25.924451873Z",
            "modifiedat": "2025-05-26T16:42:25.924451873Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/aliyun/servers/alibaba-cloud-ops-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/aliyun/servers/alibaba-cloud-ops-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "alibaba-cloud-ops-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/aliyun/servers/alibaba-cloud-ops-mcp-server/versions/1",
              "xid": "/mcpproviders/aliyun/servers/alibaba-cloud-ops-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.aliyun/alibaba-cloud-ops-mcp-server",
              "isdefault": true,
              "description": "AlibabaCloud CloudOps MCP Server",
              "createdat": "2025-05-26T16:42:25.924451873Z",
              "modifiedat": "2025-05-26T16:42:25.924451873Z",
              "ancestor": "1",
              "id": "24303d73-1ee0-4119-b2f1-3a57c17de967",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "Your Access Key ID",
                      "name": "ALIBABA_CLOUD_ACCESS_KEY_ID"
                    },
                    {
                      "description": "Your Access Key SECRET",
                      "name": "ALIBABA_CLOUD_ACCESS_KEY_SECRET"
                    }
                  ],
                  "name": "alibaba-cloud-ops-mcp-server",
                  "registry_name": "unknown",
                  "version": "0.8.6"
                }
              ],
              "repository": {
                "id": "967873415",
                "source": "github",
                "url": "https://github.com/aliyun/alibaba-cloud-ops-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:06Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "alibabacloud-adb-mysql-mcp-server": {
          "serverid": "alibabacloud-adb-mysql-mcp-server",
          "self": "#/mcpproviders/aliyun/servers/alibabacloud-adb-mysql-mcp-server",
          "xid": "/mcpproviders/aliyun/servers/alibabacloud-adb-mysql-mcp-server",

          "metaurl": "#/mcpproviders/aliyun/servers/alibabacloud-adb-mysql-mcp-server/meta",
          "meta": {
            "serverid": "alibabacloud-adb-mysql-mcp-server",
            "self": "#/mcpproviders/aliyun/servers/alibabacloud-adb-mysql-mcp-server/meta",
            "xid": "/mcpproviders/aliyun/servers/alibabacloud-adb-mysql-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:25.78402343Z",
            "modifiedat": "2025-05-26T16:42:25.78402343Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/aliyun/servers/alibabacloud-adb-mysql-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/aliyun/servers/alibabacloud-adb-mysql-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "alibabacloud-adb-mysql-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/aliyun/servers/alibabacloud-adb-mysql-mcp-server/versions/1",
              "xid": "/mcpproviders/aliyun/servers/alibabacloud-adb-mysql-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.aliyun/alibabacloud-adb-mysql-mcp-server",
              "isdefault": true,
              "description": "AnalyticDB for MySQL MCP Server",
              "createdat": "2025-05-26T16:42:25.78402343Z",
              "modifiedat": "2025-05-26T16:42:25.78402343Z",
              "ancestor": "1",
              "id": "7f6e6610-4df3-490e-95e3-03ec954eb2ab",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "host",
                      "name": "ADB_MYSQL_HOST"
                    },
                    {
                      "description": "port",
                      "name": "ADB_MYSQL_PORT"
                    },
                    {
                      "description": "database_user",
                      "name": "ADB_MYSQL_USER"
                    },
                    {
                      "description": "database_password",
                      "name": "ADB_MYSQL_PASSWORD"
                    },
                    {
                      "description": "database",
                      "name": "ADB_MYSQL_DATABASE"
                    }
                  ],
                  "name": "adb-mysql-mcp-server",
                  "package_arguments": [
                    {
                      "default": "--with adb-mysql-mcp-server",
                      "description": "With flag and value",
                      "format": "string",
                      "is_required": true,
                      "name": "--with adb-mysql-mcp-server",
                      "type": "named",
                      "value": "--with adb-mysql-mcp-server",
                      "value_hint": "adb-mysql-mcp-server"
                    },
                    {
                      "default": "adb-mysql-mcp-server",
                      "description": "Script/module to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "adb-mysql-mcp-server",
                      "value_hint": "adb-mysql-mcp-server"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "1.0.0"
                }
              ],
              "repository": {
                "id": "956503834",
                "source": "github",
                "url": "https://github.com/aliyun/alibabacloud-adb-mysql-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:04Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "alibabacloud-hologres-mcp-server": {
          "serverid": "alibabacloud-hologres-mcp-server",
          "self": "#/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server",
          "xid": "/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server",

          "metaurl": "#/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server/meta",
          "meta": {
            "serverid": "alibabacloud-hologres-mcp-server",
            "self": "#/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server/meta",
            "xid": "/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:25.609156042Z",
            "modifiedat": "2025-05-26T16:42:25.609156042Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "alibabacloud-hologres-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server/versions/1",
              "xid": "/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.aliyun/alibabacloud-hologres-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:25.609156042Z",
              "modifiedat": "2025-05-26T16:42:25.609156042Z",
              "ancestor": "1",
              "id": "e67dda78-7d99-43e5-9e98-c80267f34940",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "host",
                      "name": "HOLOGRES_HOST"
                    },
                    {
                      "description": "port",
                      "name": "HOLOGRES_PORT"
                    },
                    {
                      "description": "access_id",
                      "name": "HOLOGRES_USER"
                    },
                    {
                      "description": "access_key",
                      "name": "HOLOGRES_PASSWORD"
                    },
                    {
                      "description": "database",
                      "name": "HOLOGRES_DATABASE"
                    }
                  ],
                  "name": "hologres-mcp-server",
                  "registry_name": "unknown",
                  "version": "0.1.9"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "951662313",
                "source": "github",
                "url": "https://github.com/aliyun/alibabacloud-hologres-mcp-server"
              },
              "resources": [
                {
                  "description": "Hologres is a PostgreSQL-compatible OLAP product. List all schemas in Hologres database",
                  "mimetype": "text/plain",
                  "name": "All Schemas",
                  "uritemplate": "hologres:///schemas"
                },
                {
                  "description": "List all tables in a specific schema",
                  "mimetype": "text/plain",
                  "name": "Schema Tables",
                  "uritemplate": "hologres:///{schema}/tables"
                },
                {
                  "description": "Get the DDL script of a table in a specific schema",
                  "mimetype": "text/plain",
                  "name": "Table DDL",
                  "uritemplate": "hologres:///{schema}/{table}/ddl"
                },
                {
                  "description": "Get statistics information of a table",
                  "mimetype": "text/plain",
                  "name": "Table Statistics",
                  "uritemplate": "hologres:///{schema}/{table}/statistic"
                },
                {
                  "description": "List all partitions of a partitioned table",
                  "mimetype": "text/plain",
                  "name": "Table Statistics",
                  "uritemplate": "hologres:///{schema}/{table}/partitions"
                },
                {
                  "description": "System information in Hologres, following are some common system_paths:\n\n'missing_stats_tables'    Shows the tables that are missing statistics.\n'stat_activity'    Shows the information of current running queries.\n'query_log/latest/\u003crow_limits\u003e'    Get recent query log history with specified number of rows.\n'query_log/user/\u003cuser_name\u003e/\u003crow_limits\u003e'    Get query log history for a specific user with row limits.\n'query_log/application/\u003capplication_name\u003e/\u003crow_limits\u003e'    Get query log history for a specific application with row limits.\n'query_log/failed/\u003cinterval\u003e/\u003crow_limits\u003e' - Get failed query log history with interval and specified number of rows.\n",
                  "mimetype": "text/plain",
                  "name": "System internal Information",
                  "uritemplate": "system:///{+system_path}"
                }
              ],
              "tools": [
                {
                  "description": "Execute SELECT SQL to query data from Hologres database.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The (SELECT) SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_select_sql"
                },
                {
                  "description": "Execute (INSERT, UPDATE, DELETE) SQL to insert, update, and delete data in Hologres databse.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The DML SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_dml_sql"
                },
                {
                  "description": "Execute (CREATE, ALTER, DROP) SQL statements to CREATE, ALTER, or DROP tables, views, procedures, GUCs etc. in Hologres databse.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The DDL SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_ddl_sql"
                },
                {
                  "description": "Execute the ANALYZE TABLE command to have Hologres collect table statistics, enabling QO to generate better query plans",
                  "inputschema": {
                    "properties": {
                      "schema": {
                        "description": "Schema name",
                        "type": "string"
                      },
                      "table": {
                        "description": "Table name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "schema",
                      "table"
                    ],
                    "type": "object"
                  },
                  "name": "gather_table_statistics"
                },
                {
                  "description": "Get query plan for a SQL query",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SQL query to analyze",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "get_query_plan"
                },
                {
                  "description": "Get actual execution plan with runtime statistics for a SQL query",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SQL query to analyze",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "get_execution_plan"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:31Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 3
    },
    "allen-munsch": {
      "mcpproviderid": "allen-munsch",
      "self": "#/mcpproviders/allen-munsch",
      "xid": "/mcpproviders/allen-munsch",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:40.177617063Z",
      "modifiedat": "2025-05-26T16:41:40.177617063Z",

      "serversurl": "#/mcpproviders/allen-munsch/servers",
      "servers": {
        "mcp-prefect": {
          "serverid": "mcp-prefect",
          "self": "#/mcpproviders/allen-munsch/servers/mcp-prefect",
          "xid": "/mcpproviders/allen-munsch/servers/mcp-prefect",

          "metaurl": "#/mcpproviders/allen-munsch/servers/mcp-prefect/meta",
          "meta": {
            "serverid": "mcp-prefect",
            "self": "#/mcpproviders/allen-munsch/servers/mcp-prefect/meta",
            "xid": "/mcpproviders/allen-munsch/servers/mcp-prefect/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:40.177617063Z",
            "modifiedat": "2025-05-26T16:41:40.177617063Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/allen-munsch/servers/mcp-prefect/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/allen-munsch/servers/mcp-prefect/versions",
          "versions": {
            "1": {
              "serverid": "mcp-prefect",
              "versionid": "1",
              "self": "#/mcpproviders/allen-munsch/servers/mcp-prefect/versions/1",
              "xid": "/mcpproviders/allen-munsch/servers/mcp-prefect/versions/1",
              "epoch": 1,
              "name": "io.github.allen-munsch/mcp-prefect",
              "isdefault": true,
              "description": "https://pypi.org/project/mcp-prefect/0.1.0/",
              "createdat": "2025-05-26T16:41:40.177617063Z",
              "modifiedat": "2025-05-26T16:41:40.177617063Z",
              "ancestor": "1",
              "id": "94872987-6992-4fec-ab4b-9ef5311b3108",
              "packages": [
                {
                  "name": "mcp-prefect",
                  "registry_name": "unknown",
                  "version": "0.1.1"
                }
              ],
              "repository": {
                "id": "956317848",
                "source": "github",
                "url": "https://github.com/allen-munsch/mcp-prefect"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:42Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "amornpan": {
      "mcpproviderid": "amornpan",
      "self": "#/mcpproviders/amornpan",
      "xid": "/mcpproviders/amornpan",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:24.903098139Z",
      "modifiedat": "2025-05-26T16:41:24.98063221Z",

      "serversurl": "#/mcpproviders/amornpan/servers",
      "servers": {
        "py-mcp-line": {
          "serverid": "py-mcp-line",
          "self": "#/mcpproviders/amornpan/servers/py-mcp-line",
          "xid": "/mcpproviders/amornpan/servers/py-mcp-line",

          "metaurl": "#/mcpproviders/amornpan/servers/py-mcp-line/meta",
          "meta": {
            "serverid": "py-mcp-line",
            "self": "#/mcpproviders/amornpan/servers/py-mcp-line/meta",
            "xid": "/mcpproviders/amornpan/servers/py-mcp-line/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:24.98063221Z",
            "modifiedat": "2025-05-26T16:41:24.98063221Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/amornpan/servers/py-mcp-line/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/amornpan/servers/py-mcp-line/versions",
          "versions": {
            "1": {
              "serverid": "py-mcp-line",
              "versionid": "1",
              "self": "#/mcpproviders/amornpan/servers/py-mcp-line/versions/1",
              "xid": "/mcpproviders/amornpan/servers/py-mcp-line/versions/1",
              "epoch": 1,
              "name": "io.github.amornpan/py-mcp-line",
              "isdefault": true,
              "description": "python mcp LINE",
              "createdat": "2025-05-26T16:41:24.98063221Z",
              "modifiedat": "2025-05-26T16:41:24.98063221Z",
              "ancestor": "1",
              "id": "3791bb07-364f-431c-acf4-331007c52571",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_channel_secret",
                      "name": "LINE_CHANNEL_SECRET"
                    },
                    {
                      "description": "your_access_token",
                      "name": "LINE_ACCESS_TOKEN"
                    },
                    {
                      "description": "8000",
                      "name": "SERVER_PORT"
                    },
                    {
                      "description": "data/messages.json",
                      "name": "MESSAGES_FILE"
                    }
                  ],
                  "name": "amornpan/py-mcp-line",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "940071130",
                "source": "github",
                "url": "https://github.com/amornpan/py-mcp-line"
              },
              "resources": [
                {
                  "description": "Lists available message types from the LINE Bot and provides access to messages such as text, sticker, and image messages in JSON format.",
                  "mimetype": "application/json",
                  "name": "LINE Bot messages",
                  "uritemplate": "line://{message_type}/data"
                }
              ],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:21Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "py-mcp-mssql": {
          "serverid": "py-mcp-mssql",
          "self": "#/mcpproviders/amornpan/servers/py-mcp-mssql",
          "xid": "/mcpproviders/amornpan/servers/py-mcp-mssql",

          "metaurl": "#/mcpproviders/amornpan/servers/py-mcp-mssql/meta",
          "meta": {
            "serverid": "py-mcp-mssql",
            "self": "#/mcpproviders/amornpan/servers/py-mcp-mssql/meta",
            "xid": "/mcpproviders/amornpan/servers/py-mcp-mssql/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:24.903098139Z",
            "modifiedat": "2025-05-26T16:41:24.903098139Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/amornpan/servers/py-mcp-mssql/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/amornpan/servers/py-mcp-mssql/versions",
          "versions": {
            "1": {
              "serverid": "py-mcp-mssql",
              "versionid": "1",
              "self": "#/mcpproviders/amornpan/servers/py-mcp-mssql/versions/1",
              "xid": "/mcpproviders/amornpan/servers/py-mcp-mssql/versions/1",
              "epoch": 1,
              "name": "io.github.amornpan/py-mcp-mssql",
              "isdefault": true,
              "description": "py-mcp-mssql",
              "createdat": "2025-05-26T16:41:24.903098139Z",
              "modifiedat": "2025-05-26T16:41:24.903098139Z",
              "ancestor": "1",
              "id": "0c9a70a7-7523-42b7-a951-b4c4b8077710",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_server",
                      "name": "MSSQL_SERVER"
                    },
                    {
                      "description": "your_database",
                      "name": "MSSQL_DATABASE"
                    },
                    {
                      "description": "your_username",
                      "name": "MSSQL_USER"
                    },
                    {
                      "description": "your_password",
                      "name": "MSSQL_PASSWORD"
                    },
                    {
                      "description": "{ODBC Driver 17 for SQL Server}",
                      "name": "MSSQL_DRIVER"
                    }
                  ],
                  "name": "amornpan/py-mcp-mssql",
                  "package_arguments": [
                    {
                      "default": "server.py",
                      "description": "script to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "server.py",
                      "value_hint": "server.py"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "922607489",
                "source": "github",
                "url": "https://github.com/amornpan/py-mcp-mssql"
              },
              "resources": [
                {
                  "description": "Lists all available tables in the database with URIs in the format mssql://\u003ctable_name\u003e/data; includes table descriptions and MIME types.",
                  "mimetype": "text/csv",
                  "name": "tables",
                  "uritemplate": "mssql://{table_name}/data"
                }
              ],
              "tools": [
                {
                  "description": "Executes SQL queries; supports both SELECT and modification queries; returns results in CSV format for SELECT queries and affected row count for modification queries.",
                  "inputschema": {
                    "properties": {
                      "arguments": {
                        "type": "object"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  },
                  "name": "call_tool"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:17Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "anaisbetts": {
      "mcpproviderid": "anaisbetts",
      "self": "#/mcpproviders/anaisbetts",
      "xid": "/mcpproviders/anaisbetts",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:27.664424665Z",
      "modifiedat": "2025-05-26T16:41:27.664424665Z",

      "serversurl": "#/mcpproviders/anaisbetts/servers",
      "servers": {
        "mcp-installer": {
          "serverid": "mcp-installer",
          "self": "#/mcpproviders/anaisbetts/servers/mcp-installer",
          "xid": "/mcpproviders/anaisbetts/servers/mcp-installer",

          "metaurl": "#/mcpproviders/anaisbetts/servers/mcp-installer/meta",
          "meta": {
            "serverid": "mcp-installer",
            "self": "#/mcpproviders/anaisbetts/servers/mcp-installer/meta",
            "xid": "/mcpproviders/anaisbetts/servers/mcp-installer/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:27.664424665Z",
            "modifiedat": "2025-05-26T16:41:27.664424665Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/anaisbetts/servers/mcp-installer/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/anaisbetts/servers/mcp-installer/versions",
          "versions": {
            "1": {
              "serverid": "mcp-installer",
              "versionid": "1",
              "self": "#/mcpproviders/anaisbetts/servers/mcp-installer/versions/1",
              "xid": "/mcpproviders/anaisbetts/servers/mcp-installer/versions/1",
              "epoch": 1,
              "name": "io.github.anaisbetts/mcp-installer",
              "isdefault": true,
              "description": "An MCP server that installs other MCP servers for you",
              "createdat": "2025-05-26T16:41:27.664424665Z",
              "modifiedat": "2025-05-26T16:41:27.664424665Z",
              "ancestor": "1",
              "id": "9f5885d3-fe18-483d-b7b2-f507b2f37ccb",
              "packages": [
                {
                  "name": "@anaisbetts/mcp-installer",
                  "registry_name": "npm",
                  "version": "0.5.0"
                }
              ],
              "repository": {
                "id": "894640711",
                "source": "github",
                "url": "https://github.com/anaisbetts/mcp-installer"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:47Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "anshumax": {
      "mcpproviderid": "anshumax",
      "self": "#/mcpproviders/anshumax",
      "xid": "/mcpproviders/anshumax",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:31.090319426Z",
      "modifiedat": "2025-05-26T16:41:31.090319426Z",

      "serversurl": "#/mcpproviders/anshumax/servers",
      "servers": {
        "world_bank_mcp_server": {
          "serverid": "world_bank_mcp_server",
          "self": "#/mcpproviders/anshumax/servers/world_bank_mcp_server",
          "xid": "/mcpproviders/anshumax/servers/world_bank_mcp_server",

          "metaurl": "#/mcpproviders/anshumax/servers/world_bank_mcp_server/meta",
          "meta": {
            "serverid": "world_bank_mcp_server",
            "self": "#/mcpproviders/anshumax/servers/world_bank_mcp_server/meta",
            "xid": "/mcpproviders/anshumax/servers/world_bank_mcp_server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:31.090319426Z",
            "modifiedat": "2025-05-26T16:41:31.090319426Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/anshumax/servers/world_bank_mcp_server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/anshumax/servers/world_bank_mcp_server/versions",
          "versions": {
            "1": {
              "serverid": "world_bank_mcp_server",
              "versionid": "1",
              "self": "#/mcpproviders/anshumax/servers/world_bank_mcp_server/versions/1",
              "xid": "/mcpproviders/anshumax/servers/world_bank_mcp_server/versions/1",
              "epoch": 1,
              "name": "io.github.anshumax/world_bank_mcp_server",
              "isdefault": true,
              "description": "An implementation of the Model Context Protocol for the World Bank open data API",
              "createdat": "2025-05-26T16:41:31.090319426Z",
              "modifiedat": "2025-05-26T16:41:31.090319426Z",
              "ancestor": "1",
              "id": "4e6fc5a4-eecb-46e4-a3ce-4310cbb8c3f4",
              "packages": [
                {
                  "name": "world_bank_mcp_server",
                  "package_arguments": [
                    {
                      "default": "--directory path/to/world_bank_mcp_server",
                      "description": "The directory to use",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory path/to/world_bank_mcp_server",
                      "type": "named",
                      "value": "--directory path/to/world_bank_mcp_server",
                      "value_hint": "path/to/world_bank_mcp_server"
                    },
                    {
                      "default": "world_bank_mcp_server",
                      "description": "The server script/module to execute",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "world_bank_mcp_server",
                      "value_hint": "world_bank_mcp_server"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "911984754",
                "source": "github",
                "url": "https://github.com/anshumax/world_bank_mcp_server"
              },
              "resources": [
                {
                  "description": "List of countries in the World Bank database",
                  "mimetype": "application/json",
                  "name": "Countries list",
                  "uritemplate": "https://api.worldbank.org/v2/country?format=json\u0026per_page=1000"
                },
                {
                  "description": "List of indicators in the World Bank database",
                  "mimetype": "application/json",
                  "name": "Indicators list",
                  "uritemplate": "https://api.worldbank.org/v2/indicator?format=json\u0026per_page=50000"
                }
              ],
              "tools": [
                {
                  "description": "Get values for an indicator for a specific country from the World Bank API",
                  "inputschema": {
                    "properties": {
                      "country_id": {
                        "description": "The ID of the country for which the indicator is to be queried",
                        "type": "string"
                      },
                      "indicator_id": {
                        "description": "The ID of the indicator to be queried",
                        "type": "string"
                      }
                    },
                    "required": [
                      "country_id",
                      "indicator_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_indicator_for_country"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:56Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "apache": {
      "mcpproviderid": "apache",
      "self": "#/mcpproviders/apache",
      "xid": "/mcpproviders/apache",
      "epoch": 2,
      "createdat": "2025-05-26T16:42:11.125626471Z",
      "modifiedat": "2025-05-26T16:42:11.278997321Z",

      "serversurl": "#/mcpproviders/apache/servers",
      "servers": {
        "iotdb": {
          "serverid": "iotdb",
          "self": "#/mcpproviders/apache/servers/iotdb",
          "xid": "/mcpproviders/apache/servers/iotdb",

          "metaurl": "#/mcpproviders/apache/servers/iotdb/meta",
          "versionsurl": "#/mcpproviders/apache/servers/iotdb/versions",
          "versions": {},
          "versionscount": 0
        },
        "iotdb-mcp-server": {
          "serverid": "iotdb-mcp-server",
          "self": "#/mcpproviders/apache/servers/iotdb-mcp-server",
          "xid": "/mcpproviders/apache/servers/iotdb-mcp-server",

          "metaurl": "#/mcpproviders/apache/servers/iotdb-mcp-server/meta",
          "meta": {
            "serverid": "iotdb-mcp-server",
            "self": "#/mcpproviders/apache/servers/iotdb-mcp-server/meta",
            "xid": "/mcpproviders/apache/servers/iotdb-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:11.125626471Z",
            "modifiedat": "2025-05-26T16:42:11.125626471Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/apache/servers/iotdb-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/apache/servers/iotdb-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "iotdb-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/apache/servers/iotdb-mcp-server/versions/1",
              "xid": "/mcpproviders/apache/servers/iotdb-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.apache/iotdb-mcp-server",
              "isdefault": true,
              "description": "Apache IoTDB MCP Server",
              "createdat": "2025-05-26T16:42:11.125626471Z",
              "modifiedat": "2025-05-26T16:42:11.125626471Z",
              "ancestor": "1",
              "id": "31d9b130-4676-45d9-930f-a8bc2d5a3b9e",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "127.0.0.1",
                      "name": "IOTDB_HOST"
                    },
                    {
                      "description": "6667",
                      "name": "IOTDB_PORT"
                    },
                    {
                      "description": "root",
                      "name": "IOTDB_USER"
                    },
                    {
                      "description": "root",
                      "name": "IOTDB_PASSWORD"
                    },
                    {
                      "description": "test",
                      "name": "IOTDB_DATABASE"
                    },
                    {
                      "description": "table",
                      "name": "IOTDB_SQL_DIALECT"
                    }
                  ],
                  "name": "iotdb-mcp-server",
                  "package_arguments": [
                    {
                      "default": "--directory YOUR_REPO_PATH/src/iotdb_mcp_server",
                      "description": "The working directory for the command",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory YOUR_REPO_PATH/src/iotdb_mcp_server",
                      "type": "named",
                      "value": "--directory YOUR_REPO_PATH/src/iotdb_mcp_server",
                      "value_hint": "YOUR_REPO_PATH/src/iotdb_mcp_server"
                    },
                    {
                      "default": "server.py",
                      "description": "Python script to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "server.py",
                      "value_hint": "server.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "959057712",
                "source": "github",
                "url": "https://github.com/apache/iotdb-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Execute SHOW/COUNT queries to read metadata from the database",
                  "inputschema": {
                    "properties": {
                      "query_sql": {
                        "description": "The SHOW/COUNT SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query_sql"
                    ],
                    "type": "object"
                  },
                  "name": "metadata_query"
                },
                {
                  "description": "Execute SELECT queries to read data from the database",
                  "inputschema": {
                    "properties": {
                      "query_sql": {
                        "description": "The SELECT SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query_sql"
                    ],
                    "type": "object"
                  },
                  "name": "select_query"
                },
                {
                  "description": "Execute SELECT queries to read data from the database",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SELECT SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "read_query"
                },
                {
                  "description": "Get a list of all tables in the database",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_tables"
                },
                {
                  "description": "View schema information for a specific table",
                  "inputschema": {
                    "properties": {
                      "table_name": {
                        "description": "Name of table to describe",
                        "type": "string"
                      }
                    },
                    "required": [
                      "table_name"
                    ],
                    "type": "object"
                  },
                  "name": "describe-table"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:10Z",
                "version": "0.0.1-seed"
              },

              "meta": {
                "serverid": "iotdb",
                "self": "#/mcpproviders/apache/servers/iotdb/meta",
                "xid": "/mcpproviders/apache/servers/iotdb/meta",
                "epoch": 1,
                "createdat": "2025-05-26T16:42:11.278997321Z",
                "modifiedat": "2025-05-26T16:42:11.278997321Z",
                "readonly": false,
                "compatibility": "none",

                "defaultversionid": "1",
                "defaultversionurl": "#/mcpproviders/apache/servers/iotdb/versions/1",
                "defaultversionsticky": false
              }
            },
            "1": {
              "serverid": "iotdb",
              "versionid": "1",
              "self": "#/mcpproviders/apache/servers/iotdb/versions/1",
              "xid": "/mcpproviders/apache/servers/iotdb/versions/1",
              "epoch": 1,
              "name": "io.github.apache/iotdb",
              "isdefault": true,
              "description": "Apache IoTDB",
              "createdat": "2025-05-26T16:42:11.278997321Z",
              "modifiedat": "2025-05-26T16:42:11.278997321Z",
              "ancestor": "1",
              "id": "330047d1-f8c2-4931-9347-d133f1717de3",
              "packages": [
                {
                  "name": "apache/iotdb",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "158975124",
                "source": "github",
                "url": "https://github.com/apache/iotdb"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:12Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 2
        }
      },
      "serverscount": 2
    },
    "apappascs": {
      "mcpproviderid": "apappascs",
      "self": "#/mcpproviders/apappascs",
      "xid": "/mcpproviders/apappascs",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:22.461714386Z",
      "modifiedat": "2025-05-26T16:41:22.461714386Z",

      "serversurl": "#/mcpproviders/apappascs/servers",
      "servers": {
        "mcp-servers-hub": {
          "serverid": "mcp-servers-hub",
          "self": "#/mcpproviders/apappascs/servers/mcp-servers-hub",
          "xid": "/mcpproviders/apappascs/servers/mcp-servers-hub",

          "metaurl": "#/mcpproviders/apappascs/servers/mcp-servers-hub/meta",
          "meta": {
            "serverid": "mcp-servers-hub",
            "self": "#/mcpproviders/apappascs/servers/mcp-servers-hub/meta",
            "xid": "/mcpproviders/apappascs/servers/mcp-servers-hub/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:22.461714386Z",
            "modifiedat": "2025-05-26T16:41:22.461714386Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/apappascs/servers/mcp-servers-hub/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/apappascs/servers/mcp-servers-hub/versions",
          "versions": {
            "1": {
              "serverid": "mcp-servers-hub",
              "versionid": "1",
              "self": "#/mcpproviders/apappascs/servers/mcp-servers-hub/versions/1",
              "xid": "/mcpproviders/apappascs/servers/mcp-servers-hub/versions/1",
              "epoch": 1,
              "name": "io.github.apappascs/mcp-servers-hub",
              "isdefault": true,
              "description": "Discover the most comprehensive and up-to-date collection of MCP servers in the market. This repository serves as a centralized hub, offering an extensive catalog of open-source and proprietary MCP servers, complete with features, documentation links, and contributors.",
              "createdat": "2025-05-26T16:41:22.461714386Z",
              "modifiedat": "2025-05-26T16:41:22.461714386Z",
              "ancestor": "1",
              "id": "41203071-aa7d-49f7-83a9-3f3c8429d178",
              "packages": [
                {
                  "name": "apappascs/mcp-servers-hub",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "907417434",
                "source": "github",
                "url": "https://github.com/apappascs/mcp-servers-hub"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:54Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "apeyroux": {
      "mcpproviderid": "apeyroux",
      "self": "#/mcpproviders/apeyroux",
      "xid": "/mcpproviders/apeyroux",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:35.831248964Z",
      "modifiedat": "2025-05-26T16:42:35.831248964Z",

      "serversurl": "#/mcpproviders/apeyroux/servers",
      "servers": {
        "mcp-xmind": {
          "serverid": "mcp-xmind",
          "self": "#/mcpproviders/apeyroux/servers/mcp-xmind",
          "xid": "/mcpproviders/apeyroux/servers/mcp-xmind",

          "metaurl": "#/mcpproviders/apeyroux/servers/mcp-xmind/meta",
          "meta": {
            "serverid": "mcp-xmind",
            "self": "#/mcpproviders/apeyroux/servers/mcp-xmind/meta",
            "xid": "/mcpproviders/apeyroux/servers/mcp-xmind/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:35.831248964Z",
            "modifiedat": "2025-05-26T16:42:35.831248964Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/apeyroux/servers/mcp-xmind/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/apeyroux/servers/mcp-xmind/versions",
          "versions": {
            "1": {
              "serverid": "mcp-xmind",
              "versionid": "1",
              "self": "#/mcpproviders/apeyroux/servers/mcp-xmind/versions/1",
              "xid": "/mcpproviders/apeyroux/servers/mcp-xmind/versions/1",
              "epoch": 1,
              "name": "io.github.apeyroux/mcp-xmind",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:35.831248964Z",
              "modifiedat": "2025-05-26T16:42:35.831248964Z",
              "ancestor": "1",
              "id": "cd63d589-6f0e-4d2d-8c9c-b6857f48cc62",
              "packages": [
                {
                  "name": "@41px/mcp-xmind",
                  "package_arguments": [
                    {
                      "default": "/Users/alex/XMind",
                      "description": "/Users/alex/XMind",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "/Users/alex/XMind",
                      "value_hint": "/Users/alex/XMind"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "1.1.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "902421970",
                "source": "github",
                "url": "https://github.com/apeyroux/mcp-xmind"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Parse and analyze XMind files\nExtract complete mind map structure",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "read_xmind"
                },
                {
                  "description": "Extract and analyze TODO tasks\nInclude task context and hierarchy",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_todo_tasks"
                },
                {
                  "description": "Recursively scan for XMind files\nFilter and organize results",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_xmind_directory"
                },
                {
                  "description": "Process multiple files simultaneously\nCompare and analyze across files",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "read_multiple_xmind_files"
                },
                {
                  "description": "Search files by name patterns\nRecursive directory scanning",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search_xmind_files"
                },
                {
                  "description": "Smart fuzzy path matching\nRanked search results\nComplete subtree extraction",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "extract_node"
                },
                {
                  "description": "Direct node access by ID\nFast and precise retrieval",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "extract_node_by_id"
                },
                {
                  "description": "Multi-criteria content search\nConfigurable search fields",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search_nodes"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:10Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "apify": {
      "mcpproviderid": "apify",
      "self": "#/mcpproviders/apify",
      "xid": "/mcpproviders/apify",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:24.076542121Z",
      "modifiedat": "2025-05-26T16:41:24.132451041Z",

      "serversurl": "#/mcpproviders/apify/servers",
      "servers": {
        "actors-mcp-server": {
          "serverid": "actors-mcp-server",
          "self": "#/mcpproviders/apify/servers/actors-mcp-server",
          "xid": "/mcpproviders/apify/servers/actors-mcp-server",

          "metaurl": "#/mcpproviders/apify/servers/actors-mcp-server/meta",
          "meta": {
            "serverid": "actors-mcp-server",
            "self": "#/mcpproviders/apify/servers/actors-mcp-server/meta",
            "xid": "/mcpproviders/apify/servers/actors-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:24.132451041Z",
            "modifiedat": "2025-05-26T16:41:24.132451041Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/apify/servers/actors-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/apify/servers/actors-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "actors-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/apify/servers/actors-mcp-server/versions/1",
              "xid": "/mcpproviders/apify/servers/actors-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.apify/actors-mcp-server",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) Server for Apify's Actors",
              "createdat": "2025-05-26T16:41:24.132451041Z",
              "modifiedat": "2025-05-26T16:41:24.132451041Z",
              "ancestor": "1",
              "id": "195dfdbd-bb15-4752-80b6-abc9212cd80f",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "${input:apify_token}",
                      "name": "APIFY_TOKEN"
                    }
                  ],
                  "name": "@apify/actors-mcp-server",
                  "package_arguments": [
                    {
                      "default": "--actors lukaskrivka/google-maps-with-contact-details,apify/instagram-scraper",
                      "description": "--actors lukaskrivka/google-maps-with-contact-details,apify/instagram-scraper",
                      "format": "string",
                      "is_required": true,
                      "name": "--actors lukaskrivka/google-maps-with-contact-details,apify/instagram-scraper",
                      "type": "named",
                      "value": "--actors lukaskrivka/google-maps-with-contact-details,apify/instagram-scraper",
                      "value_hint": "lukaskrivka/google-maps-with-contact-details,apify/instagram-scraper"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "0.1.31"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "911256711",
                "source": "github",
                "url": "https://github.com/apify/actors-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Tool wrapping the Apify RAG Web Browser Actor for web search and scraping.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "apify-slash-rag-web-browser"
                },
                {
                  "description": "Tool wrapping the Facebook Posts Scraper Actor to extract data from Facebook posts.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "apify-slash-facebook-posts-scraper"
                },
                {
                  "description": "Tool wrapping the Google Maps Email Extractor Actor to extract contact details.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "apify-slash-google-maps-with-contact-details"
                },
                {
                  "description": "Tool wrapping the Google Search Results Scraper Actor to scrape SERPs.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "apify-slash-google-search-scraper"
                },
                {
                  "description": "Tool wrapping the Instagram Scraper Actor to scrape Instagram data.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "apify-slash-instagram-scraper"
                },
                {
                  "description": "Add a tool, Actor or MCP-Server to available tools by Actor ID or tool full name. Does not execute the tool, only adds it.",
                  "inputschema": {
                    "properties": {
                      "actorName": {
                        "description": "Add a tool, Actor or MCP-Server to available tools by Actor ID or tool full name. Tool name is always composed from `username/name`",
                        "type": "string"
                      }
                    },
                    "required": [
                      "actorName"
                    ],
                    "type": "object"
                  },
                  "name": "add-tool"
                },
                {
                  "description": "Remove a tool, an Actor or MCP-Server by name from available tools.",
                  "inputschema": {
                    "properties": {
                      "toolName": {
                        "description": "Tool name to remove from available tools.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "toolName"
                    ],
                    "type": "object"
                  },
                  "name": "remove-tool"
                },
                {
                  "description": "Helper tool for searching Actors.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search-actor"
                },
                {
                  "description": "Helper tool for getting tool details.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-tool-details"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:16Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-server-rag-web-browser": {
          "serverid": "mcp-server-rag-web-browser",
          "self": "#/mcpproviders/apify/servers/mcp-server-rag-web-browser",
          "xid": "/mcpproviders/apify/servers/mcp-server-rag-web-browser",

          "metaurl": "#/mcpproviders/apify/servers/mcp-server-rag-web-browser/meta",
          "meta": {
            "serverid": "mcp-server-rag-web-browser",
            "self": "#/mcpproviders/apify/servers/mcp-server-rag-web-browser/meta",
            "xid": "/mcpproviders/apify/servers/mcp-server-rag-web-browser/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:24.076542121Z",
            "modifiedat": "2025-05-26T16:41:24.076542121Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/apify/servers/mcp-server-rag-web-browser/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/apify/servers/mcp-server-rag-web-browser/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-rag-web-browser",
              "versionid": "1",
              "self": "#/mcpproviders/apify/servers/mcp-server-rag-web-browser/versions/1",
              "xid": "/mcpproviders/apify/servers/mcp-server-rag-web-browser/versions/1",
              "epoch": 1,
              "name": "io.github.apify/mcp-server-rag-web-browser",
              "isdefault": true,
              "description": "A MCP Server for the RAG Web Browser Actor",
              "createdat": "2025-05-26T16:41:24.076542121Z",
              "modifiedat": "2025-05-26T16:41:24.076542121Z",
              "ancestor": "1",
              "id": "abcd869f-0159-408c-8965-9dbcc8c2d001",
              "packages": [
                {
                  "name": "@apify/mcp-server-rag-web-browser",
                  "registry_name": "unknown",
                  "version": "0.1.3"
                }
              ],
              "repository": {
                "id": "899577906",
                "source": "github",
                "url": "https://github.com/apify/mcp-server-rag-web-browser"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:14Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "apimatic": {
      "mcpproviderid": "apimatic",
      "self": "#/mcpproviders/apimatic",
      "xid": "/mcpproviders/apimatic",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:36.785957611Z",
      "modifiedat": "2025-05-26T16:41:36.785957611Z",

      "serversurl": "#/mcpproviders/apimatic/servers",
      "servers": {
        "apimatic-validator-mcp": {
          "serverid": "apimatic-validator-mcp",
          "self": "#/mcpproviders/apimatic/servers/apimatic-validator-mcp",
          "xid": "/mcpproviders/apimatic/servers/apimatic-validator-mcp",

          "metaurl": "#/mcpproviders/apimatic/servers/apimatic-validator-mcp/meta",
          "meta": {
            "serverid": "apimatic-validator-mcp",
            "self": "#/mcpproviders/apimatic/servers/apimatic-validator-mcp/meta",
            "xid": "/mcpproviders/apimatic/servers/apimatic-validator-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:36.785957611Z",
            "modifiedat": "2025-05-26T16:41:36.785957611Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/apimatic/servers/apimatic-validator-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/apimatic/servers/apimatic-validator-mcp/versions",
          "versions": {
            "1": {
              "serverid": "apimatic-validator-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/apimatic/servers/apimatic-validator-mcp/versions/1",
              "xid": "/mcpproviders/apimatic/servers/apimatic-validator-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.apimatic/apimatic-validator-mcp",
              "isdefault": true,
              "description": "APIMatic Validator MCP Server for validating OpenAPI specs via APIMatic's API with MCP",
              "createdat": "2025-05-26T16:41:36.785957611Z",
              "modifiedat": "2025-05-26T16:41:36.785957611Z",
              "ancestor": "1",
              "id": "5c95a170-d394-4b21-a100-bb953b872922",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cAdd your APIMatic token here\u003e",
                      "name": "APIMATIC_API_KEY"
                    }
                  ],
                  "name": "apimatic-validator---mcp",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "951214203",
                "source": "github",
                "url": "https://github.com/apimatic/apimatic-validator-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get validation summary for your OpenAPI spec using APIMatic",
                  "inputschema": {
                    "properties": {
                      "isYaml": {
                        "description": "Whether the OpenAPI file is in YAML format",
                        "type": "boolean"
                      },
                      "openApiFile": {
                        "description": "The OpenAPI file content as a string",
                        "type": "string"
                      }
                    },
                    "required": [
                      "openApiFile",
                      "isYaml"
                    ],
                    "type": "object"
                  },
                  "name": "validate-openapi-using-apimatic"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:18Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "appcypher": {
      "mcpproviderid": "appcypher",
      "self": "#/mcpproviders/appcypher",
      "xid": "/mcpproviders/appcypher",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:30.912568694Z",
      "modifiedat": "2025-05-26T16:42:30.912568694Z",

      "serversurl": "#/mcpproviders/appcypher/servers",
      "servers": {
        "awesome-mcp-servers": {
          "serverid": "awesome-mcp-servers",
          "self": "#/mcpproviders/appcypher/servers/awesome-mcp-servers",
          "xid": "/mcpproviders/appcypher/servers/awesome-mcp-servers",

          "metaurl": "#/mcpproviders/appcypher/servers/awesome-mcp-servers/meta",
          "meta": {
            "serverid": "awesome-mcp-servers",
            "self": "#/mcpproviders/appcypher/servers/awesome-mcp-servers/meta",
            "xid": "/mcpproviders/appcypher/servers/awesome-mcp-servers/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:30.912568694Z",
            "modifiedat": "2025-05-26T16:42:30.912568694Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/appcypher/servers/awesome-mcp-servers/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/appcypher/servers/awesome-mcp-servers/versions",
          "versions": {
            "1": {
              "serverid": "awesome-mcp-servers",
              "versionid": "1",
              "self": "#/mcpproviders/appcypher/servers/awesome-mcp-servers/versions/1",
              "xid": "/mcpproviders/appcypher/servers/awesome-mcp-servers/versions/1",
              "epoch": 1,
              "name": "io.github.appcypher/awesome-mcp-servers",
              "isdefault": true,
              "description": "Awesome MCP Servers - A curated list of Model Context Protocol servers",
              "createdat": "2025-05-26T16:42:30.912568694Z",
              "modifiedat": "2025-05-26T16:42:30.912568694Z",
              "ancestor": "1",
              "id": "0007544a-3948-4934-866b-b4a96fe53b55",
              "packages": [
                {
                  "name": "appcypher/awesome-mcp-servers",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "895801050",
                "source": "github",
                "url": "https://github.com/appcypher/awesome-mcp-servers"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:40Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ariadng": {
      "mcpproviderid": "ariadng",
      "self": "#/mcpproviders/ariadng",
      "xid": "/mcpproviders/ariadng",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:50.62011506Z",
      "modifiedat": "2025-05-26T16:41:50.62011506Z",

      "serversurl": "#/mcpproviders/ariadng/servers",
      "servers": {
        "metatrader-mcp-server": {
          "serverid": "metatrader-mcp-server",
          "self": "#/mcpproviders/ariadng/servers/metatrader-mcp-server",
          "xid": "/mcpproviders/ariadng/servers/metatrader-mcp-server",

          "metaurl": "#/mcpproviders/ariadng/servers/metatrader-mcp-server/meta",
          "meta": {
            "serverid": "metatrader-mcp-server",
            "self": "#/mcpproviders/ariadng/servers/metatrader-mcp-server/meta",
            "xid": "/mcpproviders/ariadng/servers/metatrader-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:50.62011506Z",
            "modifiedat": "2025-05-26T16:41:50.62011506Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ariadng/servers/metatrader-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ariadng/servers/metatrader-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "metatrader-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/ariadng/servers/metatrader-mcp-server/versions/1",
              "xid": "/mcpproviders/ariadng/servers/metatrader-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.ariadng/metatrader-mcp-server",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) to enable AI LLMs to trade using MetaTrader platform",
              "createdat": "2025-05-26T16:41:50.62011506Z",
              "modifiedat": "2025-05-26T16:41:50.62011506Z",
              "ancestor": "1",
              "id": "b3dbb84c-3e48-4cbc-a581-bb9ebe133cb4",
              "packages": [
                {
                  "name": "metatrader-mcp-server",
                  "package_arguments": [
                    {
                      "default": "--login \u003cYOUR_MT5_LOGIN\u003e",
                      "description": "\u003cYOUR_MT5_LOGIN\u003e",
                      "format": "string",
                      "is_required": true,
                      "name": "--login \u003cYOUR_MT5_LOGIN\u003e",
                      "type": "named",
                      "value": "--login \u003cYOUR_MT5_LOGIN\u003e",
                      "value_hint": "\u003cYOUR_MT5_LOGIN\u003e"
                    },
                    {
                      "default": "--password \u003cYOUR_MT5_PASSWORD\u003e",
                      "description": "\u003cYOUR_MT5_PASSWORD\u003e",
                      "format": "string",
                      "is_required": true,
                      "name": "--password \u003cYOUR_MT5_PASSWORD\u003e",
                      "type": "named",
                      "value": "--password \u003cYOUR_MT5_PASSWORD\u003e",
                      "value_hint": "\u003cYOUR_MT5_PASSWORD\u003e"
                    },
                    {
                      "default": "--server \u003cYOUR_MT5_SERVER\u003e",
                      "description": "\u003cYOUR_MT5_SERVER\u003e",
                      "format": "string",
                      "is_required": true,
                      "name": "--server \u003cYOUR_MT5_SERVER\u003e",
                      "type": "named",
                      "value": "--server \u003cYOUR_MT5_SERVER\u003e",
                      "value_hint": "\u003cYOUR_MT5_SERVER\u003e"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.2.8"
                }
              ],
              "repository": {
                "id": "963828488",
                "source": "github",
                "url": "https://github.com/ariadng/metatrader-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:09Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "arize-ai": {
      "mcpproviderid": "arize-ai",
      "self": "#/mcpproviders/arize-ai",
      "xid": "/mcpproviders/arize-ai",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:09.37613583Z",
      "modifiedat": "2025-05-26T16:42:09.37613583Z",

      "serversurl": "#/mcpproviders/arize-ai/servers",
      "servers": {
        "phoenix": {
          "serverid": "phoenix",
          "self": "#/mcpproviders/arize-ai/servers/phoenix",
          "xid": "/mcpproviders/arize-ai/servers/phoenix",

          "metaurl": "#/mcpproviders/arize-ai/servers/phoenix/meta",
          "meta": {
            "serverid": "phoenix",
            "self": "#/mcpproviders/arize-ai/servers/phoenix/meta",
            "xid": "/mcpproviders/arize-ai/servers/phoenix/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:09.37613583Z",
            "modifiedat": "2025-05-26T16:42:09.37613583Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/arize-ai/servers/phoenix/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/arize-ai/servers/phoenix/versions",
          "versions": {
            "1": {
              "serverid": "phoenix",
              "versionid": "1",
              "self": "#/mcpproviders/arize-ai/servers/phoenix/versions/1",
              "xid": "/mcpproviders/arize-ai/servers/phoenix/versions/1",
              "epoch": 1,
              "name": "io.github.arize-ai/phoenix",
              "isdefault": true,
              "description": "AI Observability \u0026 Evaluation",
              "createdat": "2025-05-26T16:42:09.37613583Z",
              "modifiedat": "2025-05-26T16:42:09.37613583Z",
              "ancestor": "1",
              "id": "de2d7f51-ca20-4fac-abdb-85a912d26375",
              "packages": [
                {
                  "name": "arize-phoenix",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "564072810",
                "source": "github",
                "url": "https://github.com/Arize-ai/phoenix"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:20Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "arturborycki": {
      "mcpproviderid": "arturborycki",
      "self": "#/mcpproviders/arturborycki",
      "xid": "/mcpproviders/arturborycki",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:42.753611642Z",
      "modifiedat": "2025-05-26T16:41:42.753611642Z",

      "serversurl": "#/mcpproviders/arturborycki/servers",
      "servers": {
        "mcp-teradata": {
          "serverid": "mcp-teradata",
          "self": "#/mcpproviders/arturborycki/servers/mcp-teradata",
          "xid": "/mcpproviders/arturborycki/servers/mcp-teradata",

          "metaurl": "#/mcpproviders/arturborycki/servers/mcp-teradata/meta",
          "meta": {
            "serverid": "mcp-teradata",
            "self": "#/mcpproviders/arturborycki/servers/mcp-teradata/meta",
            "xid": "/mcpproviders/arturborycki/servers/mcp-teradata/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:42.753611642Z",
            "modifiedat": "2025-05-26T16:41:42.753611642Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/arturborycki/servers/mcp-teradata/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/arturborycki/servers/mcp-teradata/versions",
          "versions": {
            "1": {
              "serverid": "mcp-teradata",
              "versionid": "1",
              "self": "#/mcpproviders/arturborycki/servers/mcp-teradata/versions/1",
              "xid": "/mcpproviders/arturborycki/servers/mcp-teradata/versions/1",
              "epoch": 1,
              "name": "io.github.arturborycki/mcp-teradata",
              "isdefault": true,
              "description": "MCP Server for Teradata database",
              "createdat": "2025-05-26T16:41:42.753611642Z",
              "modifiedat": "2025-05-26T16:41:42.753611642Z",
              "ancestor": "1",
              "id": "cb9e2dc2-e335-4271-8e8d-5aff43cd389b",
              "packages": [
                {
                  "name": "teradata-mcp",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "970353793",
                "source": "github",
                "url": "https://github.com/arturborycki/mcp-teradata"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:36Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "asusevski": {
      "mcpproviderid": "asusevski",
      "self": "#/mcpproviders/asusevski",
      "xid": "/mcpproviders/asusevski",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:45.660871027Z",
      "modifiedat": "2025-05-26T16:41:45.660871027Z",

      "serversurl": "#/mcpproviders/asusevski/servers",
      "servers": {
        "opendota-mcp-server": {
          "serverid": "opendota-mcp-server",
          "self": "#/mcpproviders/asusevski/servers/opendota-mcp-server",
          "xid": "/mcpproviders/asusevski/servers/opendota-mcp-server",

          "metaurl": "#/mcpproviders/asusevski/servers/opendota-mcp-server/meta",
          "meta": {
            "serverid": "opendota-mcp-server",
            "self": "#/mcpproviders/asusevski/servers/opendota-mcp-server/meta",
            "xid": "/mcpproviders/asusevski/servers/opendota-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:45.660871027Z",
            "modifiedat": "2025-05-26T16:41:45.660871027Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/asusevski/servers/opendota-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/asusevski/servers/opendota-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "opendota-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/asusevski/servers/opendota-mcp-server/versions/1",
              "xid": "/mcpproviders/asusevski/servers/opendota-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.asusevski/opendota-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:45.660871027Z",
              "modifiedat": "2025-05-26T16:41:45.660871027Z",
              "ancestor": "1",
              "id": "a81b1d9e-c1a5-4848-a3f5-350ea2872ae3",
              "packages": [
                {
                  "name": "opendota-mcp-server",
                  "package_arguments": [
                    {
                      "default": "bash",
                      "description": "bash",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "bash",
                      "value_hint": "bash"
                    },
                    {
                      "default": "-c",
                      "description": "-c",
                      "format": "string",
                      "is_required": true,
                      "name": "-c",
                      "type": "named",
                      "value": "-c",
                      "value_hint": "-c"
                    },
                    {
                      "default": "cd ~/opendota-mcp-server \u0026\u0026 source .venv/bin/activate \u0026\u0026 python src/opendota_server/server.py",
                      "description": "cd ~/opendota-mcp-server \u0026\u0026 source .venv/bin/activate \u0026\u0026 python src/opendota_server/server.py",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "cd ~/opendota-mcp-server \u0026\u0026 source .venv/bin/activate \u0026\u0026 python src/opendota_server/server.py",
                      "value_hint": "cd ~/opendota-mcp-server \u0026\u0026 source .venv/bin/activate \u0026\u0026 python src/opendota_server/server.py"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "941719334",
                "source": "github",
                "url": "https://github.com/asusevski/opendota-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve player information by account ID",
                  "name": "get_player_by_id"
                },
                {
                  "description": "Get recent matches for a player",
                  "name": "get_player_recent_matches"
                },
                {
                  "description": "Get detailed data for a specific match",
                  "name": "get_match_data"
                },
                {
                  "description": "Get win/loss statistics for a player",
                  "name": "get_player_win_loss"
                },
                {
                  "description": "Get a player's most played heroes",
                  "name": "get_player_heroes"
                },
                {
                  "description": "Get statistics for heroes",
                  "name": "get_hero_stats"
                },
                {
                  "description": "Search for players by name",
                  "name": "search_player"
                },
                {
                  "description": "Get list of professional players",
                  "name": "get_pro_players"
                },
                {
                  "description": "Get recent professional matches",
                  "name": "get_pro_matches"
                },
                {
                  "description": "Get players who have played with a specified player",
                  "name": "get_player_peers"
                },
                {
                  "description": "Get list of all Dota 2 heroes",
                  "name": "get_heroes"
                },
                {
                  "description": "Get player's overall stats totals",
                  "name": "get_player_totals"
                },
                {
                  "description": "Get player hero rankings",
                  "name": "get_player_rankings"
                },
                {
                  "description": "Get most common words used by player in chat",
                  "name": "get_player_wordcloud"
                },
                {
                  "description": "Get information about a team",
                  "name": "get_team_info"
                },
                {
                  "description": "Get recent public matches",
                  "name": "get_public_matches"
                },
                {
                  "description": "Get heroes played in a specific match",
                  "name": "get_match_heroes"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:06Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "atharvagupta2003": {
      "mcpproviderid": "atharvagupta2003",
      "self": "#/mcpproviders/atharvagupta2003",
      "xid": "/mcpproviders/atharvagupta2003",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:13.846891139Z",
      "modifiedat": "2025-05-26T16:42:13.846891139Z",

      "serversurl": "#/mcpproviders/atharvagupta2003/servers",
      "servers": {
        "mcp-stripe": {
          "serverid": "mcp-stripe",
          "self": "#/mcpproviders/atharvagupta2003/servers/mcp-stripe",
          "xid": "/mcpproviders/atharvagupta2003/servers/mcp-stripe",

          "metaurl": "#/mcpproviders/atharvagupta2003/servers/mcp-stripe/meta",
          "meta": {
            "serverid": "mcp-stripe",
            "self": "#/mcpproviders/atharvagupta2003/servers/mcp-stripe/meta",
            "xid": "/mcpproviders/atharvagupta2003/servers/mcp-stripe/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:13.846891139Z",
            "modifiedat": "2025-05-26T16:42:13.846891139Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/atharvagupta2003/servers/mcp-stripe/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/atharvagupta2003/servers/mcp-stripe/versions",
          "versions": {
            "1": {
              "serverid": "mcp-stripe",
              "versionid": "1",
              "self": "#/mcpproviders/atharvagupta2003/servers/mcp-stripe/versions/1",
              "xid": "/mcpproviders/atharvagupta2003/servers/mcp-stripe/versions/1",
              "epoch": 1,
              "name": "io.github.atharvagupta2003/mcp-stripe",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:13.846891139Z",
              "modifiedat": "2025-05-26T16:42:13.846891139Z",
              "ancestor": "1",
              "id": "e532ff07-269a-47fb-98ad-6315d7081ccb",
              "packages": [
                {
                  "name": "mcp-stripe",
                  "package_arguments": [
                    {
                      "default": "charge_id ch_abc123",
                      "description": "charge_id argument",
                      "format": "string",
                      "is_required": true,
                      "name": "charge_id ch_abc123",
                      "type": "named",
                      "value": "charge_id ch_abc123",
                      "value_hint": "ch_abc123"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "928410809",
                "source": "github",
                "url": "https://github.com/atharvagupta2003/mcp-stripe"
              },
              "resources": [
                {
                  "description": "Stores audit logs of customer, payment, and refund operations; supports structured logging for better traceability; uses MCP resource endpoints to retrieve audit data",
                  "name": "audit_logs",
                  "uritemplate": "/audit/logs"
                }
              ],
              "tools": [
                {
                  "description": "Create a new customer",
                  "inputschema": {
                    "properties": {
                      "email": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "email",
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "customer_create"
                },
                {
                  "description": "Retrieve a customer's details",
                  "inputschema": {
                    "properties": {
                      "customer_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "customer_id"
                    ],
                    "type": "object"
                  },
                  "name": "customer_retrieve"
                },
                {
                  "description": "Update customer information",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "customer_update"
                },
                {
                  "description": "Create a payment intent for processing payments",
                  "inputschema": {
                    "properties": {
                      "amount": {
                        "type": "integer"
                      },
                      "currency": {
                        "type": "string"
                      },
                      "customer": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "currency",
                      "customer"
                    ],
                    "type": "object"
                  },
                  "name": "payment_intent_create"
                },
                {
                  "description": "List recent charges",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "charge_list"
                },
                {
                  "description": "Create a refund for a charge",
                  "inputschema": {
                    "properties": {
                      "charge_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "charge_id"
                    ],
                    "type": "object"
                  },
                  "name": "refund_create"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:20Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "atlanhq": {
      "mcpproviderid": "atlanhq",
      "self": "#/mcpproviders/atlanhq",
      "xid": "/mcpproviders/atlanhq",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:51.279392061Z",
      "modifiedat": "2025-05-26T16:41:51.279392061Z",

      "serversurl": "#/mcpproviders/atlanhq/servers",
      "servers": {
        "agent-toolkit": {
          "serverid": "agent-toolkit",
          "self": "#/mcpproviders/atlanhq/servers/agent-toolkit",
          "xid": "/mcpproviders/atlanhq/servers/agent-toolkit",

          "metaurl": "#/mcpproviders/atlanhq/servers/agent-toolkit/meta",
          "meta": {
            "serverid": "agent-toolkit",
            "self": "#/mcpproviders/atlanhq/servers/agent-toolkit/meta",
            "xid": "/mcpproviders/atlanhq/servers/agent-toolkit/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:51.279392061Z",
            "modifiedat": "2025-05-26T16:41:51.279392061Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/atlanhq/servers/agent-toolkit/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/atlanhq/servers/agent-toolkit/versions",
          "versions": {
            "1": {
              "serverid": "agent-toolkit",
              "versionid": "1",
              "self": "#/mcpproviders/atlanhq/servers/agent-toolkit/versions/1",
              "xid": "/mcpproviders/atlanhq/servers/agent-toolkit/versions/1",
              "epoch": 1,
              "name": "io.github.atlanhq/agent-toolkit",
              "isdefault": true,
              "description": "Atlan AI Agent Toolkit",
              "createdat": "2025-05-26T16:41:51.279392061Z",
              "modifiedat": "2025-05-26T16:41:51.279392061Z",
              "ancestor": "1",
              "id": "c4888f33-5e27-449c-ba93-edf383b91686",
              "packages": [
                {
                  "name": "atlanhq/agent-toolkit",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "959799376",
                "source": "github",
                "url": "https://github.com/atlanhq/agent-toolkit"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Advanced asset search using FluentSearch with flexible conditions.",
                  "inputschema": {
                    "properties": {
                      "asset_type": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "object"
                          }
                        ]
                      },
                      "conditions": {
                        "oneOf": [
                          {
                            "type": "object"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "connection_qualified_name": {
                        "type": "string"
                      },
                      "date_range": {
                        "type": "object"
                      },
                      "directly_tagged": {
                        "type": "boolean"
                      },
                      "domain_guids": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "include_archived": {
                        "type": "boolean"
                      },
                      "include_attributes": {
                        "items": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object"
                            }
                          ]
                        },
                        "type": "array"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "min_somes": {
                        "type": "integer"
                      },
                      "negative_conditions": {
                        "type": "object"
                      },
                      "offset": {
                        "type": "integer"
                      },
                      "some_conditions": {
                        "type": "object"
                      },
                      "sort_by": {
                        "type": "string"
                      },
                      "sort_order": {
                        "type": "string"
                      },
                      "tags": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "name": "search_assets_tool"
                },
                {
                  "description": "Execute the search with the given query",
                  "inputschema": {
                    "properties": {
                      "dsl_query": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "required": [
                      "dsl_query"
                    ],
                    "type": "object"
                  },
                  "name": "get_assets_by_dsl_tool"
                },
                {
                  "description": "Traverse asset lineage in specified direction.",
                  "inputschema": {
                    "properties": {
                      "depth": {
                        "type": "integer"
                      },
                      "direction": {
                        "enum": [
                          "UPSTREAM",
                          "DOWNSTREAM"
                        ],
                        "type": "string"
                      },
                      "guid": {
                        "type": "string"
                      },
                      "immediate_neighbors": {
                        "type": "boolean"
                      },
                      "size": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "guid",
                      "direction"
                    ],
                    "type": "object"
                  },
                  "name": "traverse_lineage_tool"
                },
                {
                  "description": "Update one or multiple assets with different values for the same attribute.",
                  "inputschema": {
                    "properties": {
                      "assets": {
                        "oneOf": [
                          {
                            "type": "object"
                          },
                          {
                            "items": {
                              "type": "object"
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "attribute_name": {
                        "type": "string"
                      },
                      "attribute_values": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "assets",
                      "attribute_name",
                      "attribute_values"
                    ],
                    "type": "object"
                  },
                  "name": "update_assets_tool"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:24Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "aws-samples": {
      "mcpproviderid": "aws-samples",
      "self": "#/mcpproviders/aws-samples",
      "xid": "/mcpproviders/aws-samples",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:30.442931694Z",
      "modifiedat": "2025-05-26T16:41:30.442931694Z",

      "serversurl": "#/mcpproviders/aws-samples/servers",
      "servers": {
        "sample-mcp-server-s3": {
          "serverid": "sample-mcp-server-s3",
          "self": "#/mcpproviders/aws-samples/servers/sample-mcp-server-s3",
          "xid": "/mcpproviders/aws-samples/servers/sample-mcp-server-s3",

          "metaurl": "#/mcpproviders/aws-samples/servers/sample-mcp-server-s3/meta",
          "meta": {
            "serverid": "sample-mcp-server-s3",
            "self": "#/mcpproviders/aws-samples/servers/sample-mcp-server-s3/meta",
            "xid": "/mcpproviders/aws-samples/servers/sample-mcp-server-s3/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:30.442931694Z",
            "modifiedat": "2025-05-26T16:41:30.442931694Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/aws-samples/servers/sample-mcp-server-s3/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/aws-samples/servers/sample-mcp-server-s3/versions",
          "versions": {
            "1": {
              "serverid": "sample-mcp-server-s3",
              "versionid": "1",
              "self": "#/mcpproviders/aws-samples/servers/sample-mcp-server-s3/versions/1",
              "xid": "/mcpproviders/aws-samples/servers/sample-mcp-server-s3/versions/1",
              "epoch": 1,
              "name": "io.github.aws-samples/sample-mcp-server-s3",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:30.442931694Z",
              "modifiedat": "2025-05-26T16:41:30.442931694Z",
              "ancestor": "1",
              "id": "f7f8acea-8725-48ec-a2f8-08ee16c738db",
              "packages": [
                {
                  "name": "s3-mcp-server",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "907453245",
                "source": "github",
                "url": "https://github.com/aws-samples/sample-mcp-server-s3"
              },
              "resources": [
                {
                  "description": "Expose AWS S3 Data through Resources. Currently only PDF documents supported and limited to 1000 objects.",
                  "mimetype": "application/pdf",
                  "name": "PDF Documents",
                  "uritemplate": "s3://{bucket}/{object_key}"
                }
              ],
              "tools": [
                {
                  "description": "Returns a list of all buckets owned by the authenticated sender of the request. To grant IAM permission to use this operation, you must add the s3:ListAllMyBuckets policy action.",
                  "inputschema": {
                    "properties": {
                      "ContinuationToken": {
                        "description": "ContinuationToken indicates to Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key. You can use this ContinuationToken for pagination of the list results. Length Constraints: Minimum length of 0. Maximum length of 1024.",
                        "type": "string"
                      },
                      "MaxBuckets": {
                        "description": "Maximum number of buckets to be returned in response. When the number is more than the count of buckets that are owned by an AWS account, return all the buckets in response. Valid Range: Minimum value of 1. Maximum value of 10000.",
                        "type": "integer"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "ListBuckets"
                },
                {
                  "description": "Returns some or all (up to 1,000) of the objects in a bucket with each request. You can use the request parameters as selection criteria to return a subset of the objects in a bucket. To get a list of your buckets, see ListBuckets.",
                  "inputschema": {
                    "properties": {
                      "Bucket": {
                        "description": "When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format bucket_base_name--az-id--x-s3 (for example, DOC-EXAMPLE-BUCKET--usw2-az1--x-s3).",
                        "type": "string"
                      },
                      "ContinuationToken": {
                        "description": "ContinuationToken indicates to Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key. You can use this ContinuationToken for pagination of the list results.",
                        "type": "string"
                      },
                      "EncodingType": {
                        "description": "Encoding type used by Amazon S3 to encode the object keys in the response. Responses are encoded only in UTF-8. An object key can contain any Unicode character. However, the XML 1.0 parser can't parse certain characters, such as characters with an ASCII value from 0 to 10. For characters that aren't supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.",
                        "type": "string"
                      },
                      "FetchOwner": {
                        "description": "The owner field is not present in ListObjectsV2 by default. If you want to return the owner field with each key in the result, then set the FetchOwner field to true.",
                        "type": "boolean"
                      },
                      "MaxKeys": {
                        "description": "Sets the maximum number of keys returned in the response. By default, the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more.",
                        "type": "integer"
                      },
                      "Prefix": {
                        "description": "Limits the response to keys that begin with the specified prefix.",
                        "type": "string"
                      },
                      "StartAfter": {
                        "description": "StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "Bucket"
                    ],
                    "type": "object"
                  },
                  "name": "ListObjectsV2"
                },
                {
                  "description": "Retrieves an object from Amazon S3. In the GetObject request, specify the full key name for the object. General purpose buckets - Both the virtual-hosted-style requests and the path-style requests are supported. For a virtual hosted-style request example, if you have the object photos/2006/February/sample.jpg, specify the object key name as /photos/2006/February/sample.jpg. For a path-style request example, if you have the object photos/2006/February/sample.jpg in the bucket named examplebucket, specify the object key name as /examplebucket/photos/2006/February/sample.jpg. Directory buckets - Only virtual-hosted-style requests are supported. For a virtual hosted-style request example, if you have the object photos/2006/February/sample.jpg in the bucket named examplebucket--use1-az5--x-s3, specify the object key name as /photos/2006/February/sample.jpg. Also, when you make requests to this API operation, your requests are sent to the Zonal endpoint. These endpoints support virtual-hosted-style requests in the format https://bucket_name.s3express-az_id.region.amazonaws.com/key-name . Path-style requests are not supported.",
                  "inputschema": {
                    "properties": {
                      "Bucket": {
                        "description": "Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format bucket_base_name--az-id--x-s3 (for example, DOC-EXAMPLE-BUCKET--usw2-az1--x-s3).",
                        "type": "string"
                      },
                      "Key": {
                        "description": "Key of the object to get. Length Constraints: Minimum length of 1.",
                        "type": "string"
                      },
                      "PartNumber": {
                        "description": "Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object.",
                        "type": "integer"
                      },
                      "Range": {
                        "description": "Downloads the specified byte range of an object.",
                        "type": "string"
                      },
                      "VersionId": {
                        "description": "Version ID used to reference a specific version of the object. By default, the GetObject operation returns the current version of an object. To return a different version, use the versionId subresource.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "Bucket",
                      "Key"
                    ],
                    "type": "object"
                  },
                  "name": "GetObject"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:34Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "awslabs": {
      "mcpproviderid": "awslabs",
      "self": "#/mcpproviders/awslabs",
      "xid": "/mcpproviders/awslabs",
      "epoch": 1,
      "name": "Amazon Web Services - Labs",
      "description": "AWS Labs",
      "documentation": "https://github.com/awslabs",
      "createdat": "2025-05-26T16:42:25.145456988Z",
      "modifiedat": "2025-05-26T16:42:25.145456988Z",

      "serversurl": "#/mcpproviders/awslabs/servers",
      "servers": {},
      "serverscount": 0
    },
    "axiomhq": {
      "mcpproviderid": "axiomhq",
      "self": "#/mcpproviders/axiomhq",
      "xid": "/mcpproviders/axiomhq",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:24.415177983Z",
      "modifiedat": "2025-05-26T16:42:24.415177983Z",

      "serversurl": "#/mcpproviders/axiomhq/servers",
      "servers": {
        "mcp-server-axiom": {
          "serverid": "mcp-server-axiom",
          "self": "#/mcpproviders/axiomhq/servers/mcp-server-axiom",
          "xid": "/mcpproviders/axiomhq/servers/mcp-server-axiom",

          "metaurl": "#/mcpproviders/axiomhq/servers/mcp-server-axiom/meta",
          "meta": {
            "serverid": "mcp-server-axiom",
            "self": "#/mcpproviders/axiomhq/servers/mcp-server-axiom/meta",
            "xid": "/mcpproviders/axiomhq/servers/mcp-server-axiom/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:24.415177983Z",
            "modifiedat": "2025-05-26T16:42:24.415177983Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/axiomhq/servers/mcp-server-axiom/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/axiomhq/servers/mcp-server-axiom/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-axiom",
              "versionid": "1",
              "self": "#/mcpproviders/axiomhq/servers/mcp-server-axiom/versions/1",
              "xid": "/mcpproviders/axiomhq/servers/mcp-server-axiom/versions/1",
              "epoch": 1,
              "name": "io.github.axiomhq/mcp-server-axiom",
              "isdefault": true,
              "description": "Axiom Model Context Protocol Server",
              "createdat": "2025-05-26T16:42:24.415177983Z",
              "modifiedat": "2025-05-26T16:42:24.415177983Z",
              "ancestor": "1",
              "id": "ac19206d-f465-4c38-b62f-23635837b239",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "xaat-your-token",
                      "name": "AXIOM_TOKEN"
                    },
                    {
                      "description": "https://api.axiom.co",
                      "name": "AXIOM_URL"
                    },
                    {
                      "description": "your-org-id",
                      "name": "AXIOM_ORG_ID"
                    }
                  ],
                  "name": "axiomhq/mcp-server-axiom",
                  "package_arguments": [
                    {
                      "default": "--config /path/to/your/config.txt",
                      "description": "Specifies a configuration file",
                      "format": "string",
                      "is_required": true,
                      "name": "--config /path/to/your/config.txt",
                      "type": "named",
                      "value": "--config /path/to/your/config.txt",
                      "value_hint": "/path/to/your/config.txt"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "899010918",
                "source": "github",
                "url": "https://github.com/axiomhq/mcp-server-axiom"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Execute APL queries against Axiom datasets",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "queryApl"
                },
                {
                  "description": "List available Axiom datasets",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "listDatasets"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:32Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "azure": {
      "mcpproviderid": "azure",
      "self": "#/mcpproviders/azure",
      "xid": "/mcpproviders/azure",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:19.517987985Z",
      "modifiedat": "2025-05-26T16:42:19.517987985Z",

      "serversurl": "#/mcpproviders/azure/servers",
      "servers": {
        "azure-mcp": {
          "serverid": "azure-mcp",
          "self": "#/mcpproviders/azure/servers/azure-mcp",
          "xid": "/mcpproviders/azure/servers/azure-mcp",

          "metaurl": "#/mcpproviders/azure/servers/azure-mcp/meta",
          "meta": {
            "serverid": "azure-mcp",
            "self": "#/mcpproviders/azure/servers/azure-mcp/meta",
            "xid": "/mcpproviders/azure/servers/azure-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:19.517987985Z",
            "modifiedat": "2025-05-26T16:42:19.517987985Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/azure/servers/azure-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/azure/servers/azure-mcp/versions",
          "versions": {
            "1": {
              "serverid": "azure-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/azure/servers/azure-mcp/versions/1",
              "xid": "/mcpproviders/azure/servers/azure-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.azure/azure-mcp",
              "isdefault": true,
              "description": "The Azure MCP Server, bringing the power of Azure to your agents.",
              "createdat": "2025-05-26T16:42:19.517987985Z",
              "modifiedat": "2025-05-26T16:42:19.517987985Z",
              "ancestor": "1",
              "id": "a5f21d1d-1267-4a62-9deb-1bb961dc5b13",
              "packages": [
                {
                  "name": "Azure/azure-mcp",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "remotes": [
                {
                  "transport_type": "sse",
                  "url": "http://localhost:5008/sse"
                }
              ],
              "repository": {
                "id": "967503541",
                "source": "github",
                "url": "https://github.com/Azure/azure-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:35Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "badkk": {
      "mcpproviderid": "badkk",
      "self": "#/mcpproviders/badkk",
      "xid": "/mcpproviders/badkk",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:38.709984301Z",
      "modifiedat": "2025-05-26T16:41:38.709984301Z",

      "serversurl": "#/mcpproviders/badkk/servers",
      "servers": {
        "awesome-crypto-mcp-servers": {
          "serverid": "awesome-crypto-mcp-servers",
          "self": "#/mcpproviders/badkk/servers/awesome-crypto-mcp-servers",
          "xid": "/mcpproviders/badkk/servers/awesome-crypto-mcp-servers",

          "metaurl": "#/mcpproviders/badkk/servers/awesome-crypto-mcp-servers/meta",
          "meta": {
            "serverid": "awesome-crypto-mcp-servers",
            "self": "#/mcpproviders/badkk/servers/awesome-crypto-mcp-servers/meta",
            "xid": "/mcpproviders/badkk/servers/awesome-crypto-mcp-servers/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:38.709984301Z",
            "modifiedat": "2025-05-26T16:41:38.709984301Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/badkk/servers/awesome-crypto-mcp-servers/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/badkk/servers/awesome-crypto-mcp-servers/versions",
          "versions": {
            "1": {
              "serverid": "awesome-crypto-mcp-servers",
              "versionid": "1",
              "self": "#/mcpproviders/badkk/servers/awesome-crypto-mcp-servers/versions/1",
              "xid": "/mcpproviders/badkk/servers/awesome-crypto-mcp-servers/versions/1",
              "epoch": 1,
              "name": "io.github.badkk/awesome-crypto-mcp-servers",
              "isdefault": true,
              "description": "A collection of crypto MCP servers.",
              "createdat": "2025-05-26T16:41:38.709984301Z",
              "modifiedat": "2025-05-26T16:41:38.709984301Z",
              "ancestor": "1",
              "id": "a9d37e55-2034-40aa-8956-4c05c52b40c7",
              "packages": [
                {
                  "name": "badkk/awesome-crypto-mcp-servers",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "911501074",
                "source": "github",
                "url": "https://github.com/badkk/awesome-crypto-mcp-servers"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:38Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "baidubce": {
      "mcpproviderid": "baidubce",
      "self": "#/mcpproviders/baidubce",
      "xid": "/mcpproviders/baidubce",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:24.640189657Z",
      "modifiedat": "2025-05-26T16:42:24.640189657Z",

      "serversurl": "#/mcpproviders/baidubce/servers",
      "servers": {
        "app-builder": {
          "serverid": "app-builder",
          "self": "#/mcpproviders/baidubce/servers/app-builder",
          "xid": "/mcpproviders/baidubce/servers/app-builder",

          "metaurl": "#/mcpproviders/baidubce/servers/app-builder/meta",
          "meta": {
            "serverid": "app-builder",
            "self": "#/mcpproviders/baidubce/servers/app-builder/meta",
            "xid": "/mcpproviders/baidubce/servers/app-builder/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:24.640189657Z",
            "modifiedat": "2025-05-26T16:42:24.640189657Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/baidubce/servers/app-builder/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/baidubce/servers/app-builder/versions",
          "versions": {
            "1": {
              "serverid": "app-builder",
              "versionid": "1",
              "self": "#/mcpproviders/baidubce/servers/app-builder/versions/1",
              "xid": "/mcpproviders/baidubce/servers/app-builder/versions/1",
              "epoch": 1,
              "name": "io.github.baidubce/app-builder",
              "isdefault": true,
              "description": "appbuilder-sdk, 千帆AppBuilder-SDK帮助开发者灵活、快速的搭建AI原生应用",
              "createdat": "2025-05-26T16:42:24.640189657Z",
              "modifiedat": "2025-05-26T16:42:24.640189657Z",
              "ancestor": "1",
              "id": "b7e8b7c6-548b-49a7-9001-2bf1733ca539",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "${input:apiKey}",
                      "name": "API_KEY"
                    }
                  ],
                  "name": "baidubce/app-builder",
                  "registry_name": "npm",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "727502310",
                "source": "github",
                "url": "https://github.com/baidubce/app-builder"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve a list of all available AppBuilder applications.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_apps"
                },
                {
                  "description": "Create a new conversation session for a specific AppBuilder application.",
                  "inputschema": {
                    "properties": {
                      "app_id": {
                        "description": "The unique identifier of the target application",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app_id"
                    ],
                    "type": "object"
                  },
                  "name": "create_conversation"
                },
                {
                  "description": "Execute a conversation query with a specific AppBuilder application.",
                  "inputschema": {
                    "properties": {
                      "app_id": {
                        "description": "The unique identifier of the target application",
                        "type": "string"
                      },
                      "conversation_id": {
                        "description": "The conversation session identifier",
                        "type": "string"
                      },
                      "query": {
                        "description": "The input text/query to send to the application",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app_id",
                      "conversation_id",
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "run"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:44Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "baryhuang": {
      "mcpproviderid": "baryhuang",
      "self": "#/mcpproviders/baryhuang",
      "xid": "/mcpproviders/baryhuang",
      "epoch": 4,
      "createdat": "2025-05-26T16:42:31.130569835Z",
      "modifiedat": "2025-05-26T16:42:31.619209347Z",

      "serversurl": "#/mcpproviders/baryhuang/servers",
      "servers": {
        "mcp-headless-gmail": {
          "serverid": "mcp-headless-gmail",
          "self": "#/mcpproviders/baryhuang/servers/mcp-headless-gmail",
          "xid": "/mcpproviders/baryhuang/servers/mcp-headless-gmail",

          "metaurl": "#/mcpproviders/baryhuang/servers/mcp-headless-gmail/meta",
          "meta": {
            "serverid": "mcp-headless-gmail",
            "self": "#/mcpproviders/baryhuang/servers/mcp-headless-gmail/meta",
            "xid": "/mcpproviders/baryhuang/servers/mcp-headless-gmail/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:31.290169576Z",
            "modifiedat": "2025-05-26T16:42:31.290169576Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/baryhuang/servers/mcp-headless-gmail/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/baryhuang/servers/mcp-headless-gmail/versions",
          "versions": {
            "1": {
              "serverid": "mcp-headless-gmail",
              "versionid": "1",
              "self": "#/mcpproviders/baryhuang/servers/mcp-headless-gmail/versions/1",
              "xid": "/mcpproviders/baryhuang/servers/mcp-headless-gmail/versions/1",
              "epoch": 1,
              "name": "io.github.baryhuang/mcp-headless-gmail",
              "isdefault": true,
              "description": "A MCP (Model Context Protocol) server that provides get, send Gmails without local credential or token setup.",
              "createdat": "2025-05-26T16:42:31.290169576Z",
              "modifiedat": "2025-05-26T16:42:31.290169576Z",
              "ancestor": "1",
              "id": "83932f7e-8c4d-475b-b03b-f30bc31793d3",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_access_token",
                      "name": "google_access_token"
                    }
                  ],
                  "name": "mcp-server-headless-gmail",
                  "package_arguments": [
                    {
                      "default": "recipient@example.com",
                      "description": "Recipient email address",
                      "format": "string",
                      "is_required": true,
                      "name": "recipient@example.com",
                      "type": "named",
                      "value": "recipient@example.com",
                      "value_hint": "recipient@example.com"
                    },
                    {
                      "default": "Hello from MCP Gmail",
                      "description": "Email subject",
                      "format": "string",
                      "is_required": true,
                      "name": "Hello from MCP Gmail",
                      "type": "named",
                      "value": "Hello from MCP Gmail",
                      "value_hint": "Hello from MCP Gmail"
                    },
                    {
                      "default": "This is a test email sent via MCP Gmail server",
                      "description": "Plain text email body",
                      "format": "string",
                      "is_required": true,
                      "name": "This is a test email sent via MCP Gmail server",
                      "type": "named",
                      "value": "This is a test email sent via MCP Gmail server",
                      "value_hint": "This is a test email sent via MCP Gmail server"
                    },
                    {
                      "default": "\u003cp\u003eThis is a \u003cstrong\u003etest email\u003c/strong\u003e sent via MCP Gmail server\u003c/p\u003e",
                      "description": "HTML email body",
                      "format": "string",
                      "name": "\u003cp\u003eThis is a \u003cstrong\u003etest email\u003c/strong\u003e sent via MCP Gmail server\u003c/p\u003e",
                      "type": "named",
                      "value": "\u003cp\u003eThis is a \u003cstrong\u003etest email\u003c/strong\u003e sent via MCP Gmail server\u003c/p\u003e",
                      "value_hint": "\u003cp\u003eThis is a \u003cstrong\u003etest email\u003c/strong\u003e sent via MCP Gmail server\u003c/p\u003e"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "951719324",
                "source": "github",
                "url": "https://github.com/baryhuang/mcp-headless-gmail"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get most recent emails from Gmail with the first 1k characters of the body",
                  "inputschema": {
                    "properties": {
                      "access_token": {
                        "type": "string"
                      },
                      "client_id": {
                        "type": "string"
                      },
                      "client_secret": {
                        "type": "string"
                      },
                      "offset": {
                        "type": "integer"
                      },
                      "refresh_token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "access_token",
                      "refresh_token",
                      "client_id",
                      "client_secret"
                    ],
                    "type": "object"
                  },
                  "name": "gmail_get_emails"
                },
                {
                  "description": "Send emails through Gmail",
                  "inputschema": {
                    "properties": {
                      "access_token": {
                        "type": "string"
                      },
                      "client_id": {
                        "type": "string"
                      },
                      "client_secret": {
                        "type": "string"
                      },
                      "email_body": {
                        "type": "string"
                      },
                      "email_recipients": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "email_subject": {
                        "type": "string"
                      },
                      "refresh_token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "access_token",
                      "refresh_token",
                      "client_id",
                      "client_secret",
                      "email_body",
                      "email_subject",
                      "email_recipients"
                    ],
                    "type": "object"
                  },
                  "name": "gmail_send_email"
                },
                {
                  "description": "Refresh access tokens separately with automatic refresh token handling",
                  "inputschema": {
                    "properties": {
                      "client_id": {
                        "type": "string"
                      },
                      "client_secret": {
                        "type": "string"
                      },
                      "refresh_token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "refresh_token",
                      "client_id",
                      "client_secret"
                    ],
                    "type": "object"
                  },
                  "name": "gmail_refresh_token"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:16Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-remote-macos-use": {
          "serverid": "mcp-remote-macos-use",
          "self": "#/mcpproviders/baryhuang/servers/mcp-remote-macos-use",
          "xid": "/mcpproviders/baryhuang/servers/mcp-remote-macos-use",

          "metaurl": "#/mcpproviders/baryhuang/servers/mcp-remote-macos-use/meta",
          "meta": {
            "serverid": "mcp-remote-macos-use",
            "self": "#/mcpproviders/baryhuang/servers/mcp-remote-macos-use/meta",
            "xid": "/mcpproviders/baryhuang/servers/mcp-remote-macos-use/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:31.465101615Z",
            "modifiedat": "2025-05-26T16:42:31.465101615Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/baryhuang/servers/mcp-remote-macos-use/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/baryhuang/servers/mcp-remote-macos-use/versions",
          "versions": {
            "1": {
              "serverid": "mcp-remote-macos-use",
              "versionid": "1",
              "self": "#/mcpproviders/baryhuang/servers/mcp-remote-macos-use/versions/1",
              "xid": "/mcpproviders/baryhuang/servers/mcp-remote-macos-use/versions/1",
              "epoch": 1,
              "name": "io.github.baryhuang/mcp-remote-macos-use",
              "isdefault": true,
              "description": "The only general AI agent that does NOT requires extra API key, giving you full control on your local and remote MacOs from Claude Desktop App",
              "createdat": "2025-05-26T16:42:31.465101615Z",
              "modifiedat": "2025-05-26T16:42:31.465101615Z",
              "ancestor": "1",
              "id": "5e32ec37-7a46-4e84-9f19-845cd6b151f4",
              "packages": [
                {
                  "name": "mcp_remote_macos_use",
                  "package_arguments": [
                    {
                      "default": "-e MACOS_USERNAME=your_macos_username",
                      "description": "Pass environment variable MACOS_USERNAME",
                      "format": "string",
                      "is_required": true,
                      "name": "-e MACOS_USERNAME=your_macos_username",
                      "type": "named",
                      "value": "-e MACOS_USERNAME=your_macos_username",
                      "value_hint": "MACOS_USERNAME=your_macos_username"
                    },
                    {
                      "default": "-e MACOS_PASSWORD=your_macos_password",
                      "description": "Pass environment variable MACOS_PASSWORD",
                      "format": "string",
                      "is_required": true,
                      "name": "-e MACOS_PASSWORD=your_macos_password",
                      "type": "named",
                      "value": "-e MACOS_PASSWORD=your_macos_password",
                      "value_hint": "MACOS_PASSWORD=your_macos_password"
                    },
                    {
                      "default": "-e MACOS_HOST=your_macos_hostname_or_ip",
                      "description": "Pass environment variable MACOS_HOST",
                      "format": "string",
                      "is_required": true,
                      "name": "-e MACOS_HOST=your_macos_hostname_or_ip",
                      "type": "named",
                      "value": "-e MACOS_HOST=your_macos_hostname_or_ip",
                      "value_hint": "MACOS_HOST=your_macos_hostname_or_ip"
                    },
                    {
                      "default": "--rm",
                      "description": "Remove container when it exits",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm",
                      "value_hint": "--rm"
                    },
                    {
                      "default": "buryhuang/mcp-remote-macos-use:latest",
                      "description": "Docker image to use",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "buryhuang/mcp-remote-macos-use:latest",
                      "value_hint": "buryhuang/mcp-remote-macos-use:latest"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "952732612",
                "source": "github",
                "url": "https://github.com/baryhuang/mcp-remote-macos-use"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:52Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-server-any-openapi": {
          "serverid": "mcp-server-any-openapi",
          "self": "#/mcpproviders/baryhuang/servers/mcp-server-any-openapi",
          "xid": "/mcpproviders/baryhuang/servers/mcp-server-any-openapi",

          "metaurl": "#/mcpproviders/baryhuang/servers/mcp-server-any-openapi/meta",
          "meta": {
            "serverid": "mcp-server-any-openapi",
            "self": "#/mcpproviders/baryhuang/servers/mcp-server-any-openapi/meta",
            "xid": "/mcpproviders/baryhuang/servers/mcp-server-any-openapi/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:31.619209347Z",
            "modifiedat": "2025-05-26T16:42:31.619209347Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/baryhuang/servers/mcp-server-any-openapi/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/baryhuang/servers/mcp-server-any-openapi/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-any-openapi",
              "versionid": "1",
              "self": "#/mcpproviders/baryhuang/servers/mcp-server-any-openapi/versions/1",
              "xid": "/mcpproviders/baryhuang/servers/mcp-server-any-openapi/versions/1",
              "epoch": 1,
              "name": "io.github.baryhuang/mcp-server-any-openapi",
              "isdefault": true,
              "description": "A MCP server that enables Claude to discover and call any API endpoint through semantic search. Intelligently chunks OpenAPI specifications to handle large API documentation, with built-in request execution capabilities. Perfect for integrating private APIs with Claude Desktop.",
              "createdat": "2025-05-26T16:42:31.619209347Z",
              "modifiedat": "2025-05-26T16:42:31.619209347Z",
              "ancestor": "1",
              "id": "c52271b3-e48e-4896-b5a2-2ff93189b339",
              "packages": [
                {
                  "name": "mcp-server-any-openapi",
                  "package_arguments": [
                    {
                      "default": "-i",
                      "description": "Run in interactive mode",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i"
                    },
                    {
                      "default": "--rm",
                      "description": "Automatically remove the container when it exits",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm"
                    },
                    {
                      "default": "-e OPENAPI_JSON_DOCS_URL=https://api.example.com/openapi.json",
                      "description": "Set environment variable OPENAPI_JSON_DOCS_URL",
                      "format": "string",
                      "is_required": true,
                      "name": "-e OPENAPI_JSON_DOCS_URL=https://api.example.com/openapi.json",
                      "type": "named",
                      "value": "-e OPENAPI_JSON_DOCS_URL=https://api.example.com/openapi.json",
                      "value_hint": "OPENAPI_JSON_DOCS_URL=https://api.example.com/openapi.json"
                    },
                    {
                      "default": "-e MCP_API_PREFIX=finance",
                      "description": "Set environment variable MCP_API_PREFIX",
                      "format": "string",
                      "is_required": true,
                      "name": "-e MCP_API_PREFIX=finance",
                      "type": "named",
                      "value": "-e MCP_API_PREFIX=finance",
                      "value_hint": "MCP_API_PREFIX=finance"
                    },
                    {
                      "default": "-e GLOBAL_TOOL_PROMPT='Access to insights apis for ACME Financial Services abc.com .",
                      "description": "Set environment variable GLOBAL_TOOL_PROMPT",
                      "format": "string",
                      "is_required": true,
                      "name": "-e GLOBAL_TOOL_PROMPT='Access to insights apis for ACME Financial Services abc.com .",
                      "type": "named",
                      "value": "-e GLOBAL_TOOL_PROMPT='Access to insights apis for ACME Financial Services abc.com .",
                      "value_hint": "GLOBAL_TOOL_PROMPT='Access to insights apis for ACME Financial Services abc.com ."
                    },
                    {
                      "default": "buryhuang/mcp-server-any-openapi:latest",
                      "description": "Docker image name and tag",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "buryhuang/mcp-server-any-openapi:latest",
                      "value_hint": "buryhuang/mcp-server-any-openapi:latest"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "929659341",
                "source": "github",
                "url": "https://github.com/baryhuang/mcp-server-any-openapi"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:58Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-server-aws-resources-python": {
          "serverid": "mcp-server-aws-resources-python",
          "self": "#/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python",
          "xid": "/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python",

          "metaurl": "#/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python/meta",
          "meta": {
            "serverid": "mcp-server-aws-resources-python",
            "self": "#/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python/meta",
            "xid": "/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:31.130569835Z",
            "modifiedat": "2025-05-26T16:42:31.130569835Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-aws-resources-python",
              "versionid": "1",
              "self": "#/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python/versions/1",
              "xid": "/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python/versions/1",
              "epoch": 1,
              "name": "io.github.baryhuang/mcp-server-aws-resources-python",
              "isdefault": true,
              "description": "A Python-based MCP server that lets Claude run boto3 code to query and manage AWS resources. Execute powerful AWS operations directly through Claude with proper sandboxing and containerization. No need for complex setups - just pass your AWS credentials and start interacting with all AWS services.",
              "createdat": "2025-05-26T16:42:31.130569835Z",
              "modifiedat": "2025-05-26T16:42:31.130569835Z",
              "ancestor": "1",
              "id": "6dd26dd7-d5c3-4aa8-bb9a-3aba328790ad",
              "packages": [
                {
                  "name": "mcp-server-aws-resources",
                  "package_arguments": [
                    {
                      "default": "-i",
                      "description": "Keep STDIN open even if not attached",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i"
                    },
                    {
                      "default": "--rm",
                      "description": "Automatically remove the container when it exits",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm"
                    },
                    {
                      "default": "-e AWS_PROFILE=default",
                      "description": "Set environment variables in the container",
                      "format": "string",
                      "is_required": true,
                      "name": "-e AWS_PROFILE=default",
                      "type": "named",
                      "value": "-e AWS_PROFILE=default",
                      "value_hint": "AWS_PROFILE=default"
                    },
                    {
                      "default": "-v ~/.aws:/root/.aws",
                      "description": "Bind mount a volume",
                      "format": "string",
                      "is_required": true,
                      "name": "-v ~/.aws:/root/.aws",
                      "type": "named",
                      "value": "-v ~/.aws:/root/.aws",
                      "value_hint": "~/.aws:/root/.aws"
                    },
                    {
                      "default": "buryhuang/mcp-server-aws-resources:latest",
                      "description": "Docker image name with tag",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "buryhuang/mcp-server-aws-resources:latest",
                      "value_hint": "buryhuang/mcp-server-aws-resources:latest"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "916512524",
                "source": "github",
                "url": "https://github.com/baryhuang/mcp-server-aws-resources-python"
              },
              "resources": [
                {
                  "description": "A dynamic resource that provides access to AWS resources through boto3 queries",
                  "name": "aws://query_resources"
                }
              ],
              "tools": [
                {
                  "description": "Execute a boto3 code snippet to query or modify AWS resources",
                  "inputschema": {
                    "properties": {
                      "code_snippet": {
                        "description": "Python code using boto3 to query AWS resources",
                        "type": "string"
                      }
                    },
                    "required": [
                      "code_snippet"
                    ],
                    "type": "object"
                  },
                  "name": "aws_resources_query_or_modify"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:32Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 4
    },
    "basicmachines-co": {
      "mcpproviderid": "basicmachines-co",
      "self": "#/mcpproviders/basicmachines-co",
      "xid": "/mcpproviders/basicmachines-co",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:50.295774662Z",
      "modifiedat": "2025-05-26T16:41:50.295774662Z",

      "serversurl": "#/mcpproviders/basicmachines-co/servers",
      "servers": {
        "basic-memory": {
          "serverid": "basic-memory",
          "self": "#/mcpproviders/basicmachines-co/servers/basic-memory",
          "xid": "/mcpproviders/basicmachines-co/servers/basic-memory",

          "metaurl": "#/mcpproviders/basicmachines-co/servers/basic-memory/meta",
          "meta": {
            "serverid": "basic-memory",
            "self": "#/mcpproviders/basicmachines-co/servers/basic-memory/meta",
            "xid": "/mcpproviders/basicmachines-co/servers/basic-memory/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:50.295774662Z",
            "modifiedat": "2025-05-26T16:41:50.295774662Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/basicmachines-co/servers/basic-memory/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/basicmachines-co/servers/basic-memory/versions",
          "versions": {
            "1": {
              "serverid": "basic-memory",
              "versionid": "1",
              "self": "#/mcpproviders/basicmachines-co/servers/basic-memory/versions/1",
              "xid": "/mcpproviders/basicmachines-co/servers/basic-memory/versions/1",
              "epoch": 1,
              "name": "io.github.basicmachines-co/basic-memory",
              "isdefault": true,
              "description": "Basic Memory is a knowledge management system that allows you to build a persistent semantic graph from conversations with AI assistants, stored in standard Markdown files on your computer. Integrates directly with Obsidan.md",
              "createdat": "2025-05-26T16:41:50.295774662Z",
              "modifiedat": "2025-05-26T16:41:50.295774662Z",
              "ancestor": "1",
              "id": "377dba9b-63cc-4ca9-bb39-97f5e12497b4",
              "packages": [
                {
                  "name": "basic-memory",
                  "package_arguments": [
                    {
                      "default": "mcp",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp",
                      "value_hint": "mcp"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.12.3"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "897595329",
                "source": "github",
                "url": "https://github.com/basicmachines-co/basic-memory"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get recent activity from across the knowledge base.\n\nTimeframe supports natural language formats like:\n- \"2 days ago\"  \n- \"last week\"\n- \"yesterday\" \n- \"today\"\n- \"3 weeks ago\"\nOr standard formats like \"7d\"",
                  "inputschema": {
                    "properties": {
                      "depth": {
                        "type": "integer"
                      },
                      "max_related": {
                        "type": "integer"
                      },
                      "page": {
                        "type": "integer"
                      },
                      "page_size": {
                        "type": "integer"
                      },
                      "timeframe": {
                        "type": "string"
                      },
                      "type": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "recent_activity"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:49Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "bazinga012": {
      "mcpproviderid": "bazinga012",
      "self": "#/mcpproviders/bazinga012",
      "xid": "/mcpproviders/bazinga012",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:47.584287641Z",
      "modifiedat": "2025-05-26T16:41:47.584287641Z",

      "serversurl": "#/mcpproviders/bazinga012/servers",
      "servers": {
        "mcp_code_executor": {
          "serverid": "mcp_code_executor",
          "self": "#/mcpproviders/bazinga012/servers/mcp_code_executor",
          "xid": "/mcpproviders/bazinga012/servers/mcp_code_executor",

          "metaurl": "#/mcpproviders/bazinga012/servers/mcp_code_executor/meta",
          "meta": {
            "serverid": "mcp_code_executor",
            "self": "#/mcpproviders/bazinga012/servers/mcp_code_executor/meta",
            "xid": "/mcpproviders/bazinga012/servers/mcp_code_executor/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:47.584287641Z",
            "modifiedat": "2025-05-26T16:41:47.584287641Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/bazinga012/servers/mcp_code_executor/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/bazinga012/servers/mcp_code_executor/versions",
          "versions": {
            "1": {
              "serverid": "mcp_code_executor",
              "versionid": "1",
              "self": "#/mcpproviders/bazinga012/servers/mcp_code_executor/versions/1",
              "xid": "/mcpproviders/bazinga012/servers/mcp_code_executor/versions/1",
              "epoch": 1,
              "name": "io.github.bazinga012/mcp_code_executor",
              "isdefault": true,
              "description": "The MCP Code Executor is an MCP server that allows LLMs to execute Python code within a specified Conda environment.",
              "createdat": "2025-05-26T16:41:47.584287641Z",
              "modifiedat": "2025-05-26T16:41:47.584287641Z",
              "ancestor": "1",
              "id": "0cdfed38-6495-42a3-a837-3788f35aadd3",
              "packages": [
                {
                  "name": "code_execution_server",
                  "package_arguments": [
                    {
                      "default": "/path/to/code/storage/my_script_abc123.py",
                      "description": "file_path positional argument for the code file to be read",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "/path/to/code/storage/my_script_abc123.py",
                      "value_hint": "/path/to/code/storage/my_script_abc123.py"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.2.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "928420039",
                "source": "github",
                "url": "https://github.com/bazinga012/mcp_code_executor"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:37Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "benborla": {
      "mcpproviderid": "benborla",
      "self": "#/mcpproviders/benborla",
      "xid": "/mcpproviders/benborla",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:03.223721405Z",
      "modifiedat": "2025-05-26T16:42:03.223721405Z",

      "serversurl": "#/mcpproviders/benborla/servers",
      "servers": {
        "mcp-server-mysql": {
          "serverid": "mcp-server-mysql",
          "self": "#/mcpproviders/benborla/servers/mcp-server-mysql",
          "xid": "/mcpproviders/benborla/servers/mcp-server-mysql",

          "metaurl": "#/mcpproviders/benborla/servers/mcp-server-mysql/meta",
          "meta": {
            "serverid": "mcp-server-mysql",
            "self": "#/mcpproviders/benborla/servers/mcp-server-mysql/meta",
            "xid": "/mcpproviders/benborla/servers/mcp-server-mysql/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:03.223721405Z",
            "modifiedat": "2025-05-26T16:42:03.223721405Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/benborla/servers/mcp-server-mysql/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/benborla/servers/mcp-server-mysql/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-mysql",
              "versionid": "1",
              "self": "#/mcpproviders/benborla/servers/mcp-server-mysql/versions/1",
              "xid": "/mcpproviders/benborla/servers/mcp-server-mysql/versions/1",
              "epoch": 1,
              "name": "io.github.benborla/mcp-server-mysql",
              "isdefault": true,
              "description": "A Model Context Protocol server that provides read-only access to MySQL databases. This server enables LLMs to inspect database schemas and execute read-only queries.",
              "createdat": "2025-05-26T16:42:03.223721405Z",
              "modifiedat": "2025-05-26T16:42:03.223721405Z",
              "ancestor": "1",
              "id": "22fbb4c3-d5fd-4191-af7a-c78686cc6123",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "127.0.0.1",
                      "name": "MYSQL_HOST"
                    },
                    {
                      "description": "3306",
                      "name": "MYSQL_PORT"
                    },
                    {
                      "description": "root",
                      "name": "MYSQL_USER"
                    },
                    {
                      "description": "your_password",
                      "name": "MYSQL_PASS"
                    },
                    {
                      "description": "your_database",
                      "name": "MYSQL_DB"
                    }
                  ],
                  "name": "@benborla29/mcp-server-mysql",
                  "package_arguments": [
                    {
                      "default": "/full/path/to/mcp-server-mysql/dist/index.js",
                      "description": "Path to the MCP server MySQL entry point.",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "/full/path/to/mcp-server-mysql/dist/index.js",
                      "value_hint": "/full/path/to/mcp-server-mysql/dist/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "2.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "900806525",
                "source": "github",
                "url": "https://github.com/benborla/mcp-server-mysql"
              },
              "resources": [
                {
                  "description": "Database and table name with schema suffix",
                  "mimetype": "application/json",
                  "name": "database schema",
                  "uritemplate": "{database}/{table}/schema"
                }
              ],
              "tools": [
                {
                  "description": "Run SQL queries against MySQL database (Multi-DB mode enabled) with support for: INSERT, UPDATE, DELETE, DDL and READ operations (Schema-specific permissions enabled)",
                  "inputschema": {
                    "properties": {
                      "sql": {
                        "description": "The SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "sql"
                    ],
                    "type": "object"
                  },
                  "name": "mysql_query"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:51Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "bharathvaj-ganesan": {
      "mcpproviderid": "bharathvaj-ganesan",
      "self": "#/mcpproviders/bharathvaj-ganesan",
      "xid": "/mcpproviders/bharathvaj-ganesan",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:25.959517585Z",
      "modifiedat": "2025-05-26T16:41:25.959517585Z",

      "serversurl": "#/mcpproviders/bharathvaj-ganesan/servers",
      "servers": {
        "whois-mcp": {
          "serverid": "whois-mcp",
          "self": "#/mcpproviders/bharathvaj-ganesan/servers/whois-mcp",
          "xid": "/mcpproviders/bharathvaj-ganesan/servers/whois-mcp",

          "metaurl": "#/mcpproviders/bharathvaj-ganesan/servers/whois-mcp/meta",
          "meta": {
            "serverid": "whois-mcp",
            "self": "#/mcpproviders/bharathvaj-ganesan/servers/whois-mcp/meta",
            "xid": "/mcpproviders/bharathvaj-ganesan/servers/whois-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:25.959517585Z",
            "modifiedat": "2025-05-26T16:41:25.959517585Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/bharathvaj-ganesan/servers/whois-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/bharathvaj-ganesan/servers/whois-mcp/versions",
          "versions": {
            "1": {
              "serverid": "whois-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/bharathvaj-ganesan/servers/whois-mcp/versions/1",
              "xid": "/mcpproviders/bharathvaj-ganesan/servers/whois-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.bharathvaj-ganesan/whois-mcp",
              "isdefault": true,
              "description": "MCP Server for whois lookups.",
              "createdat": "2025-05-26T16:41:25.959517585Z",
              "modifiedat": "2025-05-26T16:41:25.959517585Z",
              "ancestor": "1",
              "id": "5f5a497c-673d-4988-b86b-c3bcaaf1a317",
              "packages": [
                {
                  "name": "@bharathvaj/whois-mcp",
                  "registry_name": "npm",
                  "version": "1.0.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "943452732",
                "source": "github",
                "url": "https://github.com/bharathvaj-ganesan/whois-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Looksup whois information about the domain",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "whois_domain"
                },
                {
                  "description": "Looksup whois information about the Top Level Domain (TLD)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "whois_tld"
                },
                {
                  "description": "Looksup whois information about the IP",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "whois_ip"
                },
                {
                  "description": "Looksup whois information about the Autonomous System Number (ASN)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "whois_as"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:47Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "bigcodegen": {
      "mcpproviderid": "bigcodegen",
      "self": "#/mcpproviders/bigcodegen",
      "xid": "/mcpproviders/bigcodegen",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:37.527789647Z",
      "modifiedat": "2025-05-26T16:41:37.527789647Z",

      "serversurl": "#/mcpproviders/bigcodegen/servers",
      "servers": {
        "mcp-neovim-server": {
          "serverid": "mcp-neovim-server",
          "self": "#/mcpproviders/bigcodegen/servers/mcp-neovim-server",
          "xid": "/mcpproviders/bigcodegen/servers/mcp-neovim-server",

          "metaurl": "#/mcpproviders/bigcodegen/servers/mcp-neovim-server/meta",
          "meta": {
            "serverid": "mcp-neovim-server",
            "self": "#/mcpproviders/bigcodegen/servers/mcp-neovim-server/meta",
            "xid": "/mcpproviders/bigcodegen/servers/mcp-neovim-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:37.527789647Z",
            "modifiedat": "2025-05-26T16:41:37.527789647Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/bigcodegen/servers/mcp-neovim-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/bigcodegen/servers/mcp-neovim-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-neovim-server",
              "versionid": "1",
              "self": "#/mcpproviders/bigcodegen/servers/mcp-neovim-server/versions/1",
              "xid": "/mcpproviders/bigcodegen/servers/mcp-neovim-server/versions/1",
              "epoch": 1,
              "name": "io.github.bigcodegen/mcp-neovim-server",
              "isdefault": true,
              "description": "Control Neovim using Model Context Protocol (MCP) and the official neovim/node-client JavaScript library",
              "createdat": "2025-05-26T16:41:37.527789647Z",
              "modifiedat": "2025-05-26T16:41:37.527789647Z",
              "ancestor": "1",
              "id": "d9d7e246-d3f4-4214-aa79-fe1981c73c2e",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "true",
                      "name": "ALLOW_SHELL_COMMANDS"
                    },
                    {
                      "description": "/tmp/nvim",
                      "name": "NVIM_SOCKET_PATH"
                    }
                  ],
                  "name": "mcp-neovim-server",
                  "registry_name": "npm",
                  "version": "0.4.2"
                }
              ],
              "prompts": [
                {
                  "arguments": [],
                  "description": "Empty prompt list since no prompts are supported",
                  "name": "empty"
                }
              ],
              "repository": {
                "id": "907120691",
                "source": "github",
                "url": "https://github.com/bigcodegen/mcp-neovim-server"
              },
              "resources": [
                {
                  "description": "Current neovim text editor session",
                  "mimetype": "text/plain",
                  "name": "Current neovim text editor session",
                  "uritemplate": "nvim://session"
                },
                {
                  "description": "List of all open buffers in the current Neovim session",
                  "mimetype": "application/json",
                  "name": "Open Neovim buffers",
                  "uritemplate": "nvim://buffers"
                }
              ],
              "tools": [
                {
                  "description": "Current VIM text editor buffer with line numbers shown",
                  "inputschema": {
                    "properties": {
                      "filename": {
                        "description": "Optional file name to view a specific buffer",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "vim_buffer"
                },
                {
                  "description": "Send a command to VIM for navigation, spot editing, and line deletion",
                  "inputschema": {
                    "properties": {
                      "command": {
                        "description": "Vim command to execute (use ! prefix for shell commands if enabled)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "command"
                    ],
                    "type": "object"
                  },
                  "name": "vim_command"
                },
                {
                  "description": "Get the status of the VIM editor",
                  "inputschema": {
                    "properties": {
                      "filename": {
                        "description": "Optional file name to get status for a specific buffer",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "vim_status"
                },
                {
                  "description": "Edit lines using insert, replace, or replaceAll in the VIM editor",
                  "inputschema": {
                    "properties": {
                      "lines": {
                        "description": "The text content to insert or use as replacement",
                        "type": "string"
                      },
                      "mode": {
                        "description": "Whether to insert new content, replace existing content, or replace entire buffer",
                        "enum": [
                          "insert",
                          "replace",
                          "replaceAll"
                        ],
                        "type": "string"
                      },
                      "startLine": {
                        "description": "The line number where editing should begin (1-indexed)",
                        "type": "number"
                      }
                    },
                    "required": [
                      "startLine",
                      "mode",
                      "lines"
                    ],
                    "type": "object"
                  },
                  "name": "vim_edit"
                },
                {
                  "description": "Manipulate Neovim windows (split, vsplit, close, navigate)",
                  "inputschema": {
                    "properties": {
                      "command": {
                        "description": "Window manipulation command: split or vsplit to create new window, only to keep just current window, close to close current window, or wincmd with h/j/k/l to navigate between windows",
                        "enum": [
                          "split",
                          "vsplit",
                          "only",
                          "close",
                          "wincmd h",
                          "wincmd j",
                          "wincmd k",
                          "wincmd l"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "command"
                    ],
                    "type": "object"
                  },
                  "name": "vim_window"
                },
                {
                  "description": "Set a mark at a specific position",
                  "inputschema": {
                    "properties": {
                      "column": {
                        "description": "The column number where the mark should be placed (0-indexed)",
                        "type": "number"
                      },
                      "line": {
                        "description": "The line number where the mark should be placed (1-indexed)",
                        "type": "number"
                      },
                      "mark": {
                        "description": "Single lowercase letter [a-z] to use as the mark name",
                        "pattern": "^[a-z]$",
                        "type": "string"
                      }
                    },
                    "required": [
                      "mark",
                      "line",
                      "column"
                    ],
                    "type": "object"
                  },
                  "name": "vim_mark"
                },
                {
                  "description": "Set content of a register",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "The text content to store in the specified register",
                        "type": "string"
                      },
                      "register": {
                        "description": "Register name - a lowercase letter [a-z] or double-quote [\"] for the unnamed register",
                        "pattern": "^[a-z\"]$",
                        "type": "string"
                      }
                    },
                    "required": [
                      "register",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "vim_register"
                },
                {
                  "description": "Make a visual selection",
                  "inputschema": {
                    "properties": {
                      "endColumn": {
                        "description": "The ending column number for visual selection (0-indexed)",
                        "type": "number"
                      },
                      "endLine": {
                        "description": "The ending line number for visual selection (1-indexed)",
                        "type": "number"
                      },
                      "startColumn": {
                        "description": "The starting column number for visual selection (0-indexed)",
                        "type": "number"
                      },
                      "startLine": {
                        "description": "The starting line number for visual selection (1-indexed)",
                        "type": "number"
                      }
                    },
                    "required": [
                      "startLine",
                      "startColumn",
                      "endLine",
                      "endColumn"
                    ],
                    "type": "object"
                  },
                  "name": "vim_visual"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:16Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "bitrise-io": {
      "mcpproviderid": "bitrise-io",
      "self": "#/mcpproviders/bitrise-io",
      "xid": "/mcpproviders/bitrise-io",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:25.23034655Z",
      "modifiedat": "2025-05-26T16:41:25.23034655Z",

      "serversurl": "#/mcpproviders/bitrise-io/servers",
      "servers": {
        "bitrise-mcp": {
          "serverid": "bitrise-mcp",
          "self": "#/mcpproviders/bitrise-io/servers/bitrise-mcp",
          "xid": "/mcpproviders/bitrise-io/servers/bitrise-mcp",

          "metaurl": "#/mcpproviders/bitrise-io/servers/bitrise-mcp/meta",
          "meta": {
            "serverid": "bitrise-mcp",
            "self": "#/mcpproviders/bitrise-io/servers/bitrise-mcp/meta",
            "xid": "/mcpproviders/bitrise-io/servers/bitrise-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:25.23034655Z",
            "modifiedat": "2025-05-26T16:41:25.23034655Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/bitrise-io/servers/bitrise-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/bitrise-io/servers/bitrise-mcp/versions",
          "versions": {
            "1": {
              "serverid": "bitrise-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/bitrise-io/servers/bitrise-mcp/versions/1",
              "xid": "/mcpproviders/bitrise-io/servers/bitrise-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.bitrise-io/bitrise-mcp",
              "isdefault": true,
              "description": "MCP Server for the Bitrise API, enabling app management, build operations, artifact management and more.",
              "createdat": "2025-05-26T16:41:25.23034655Z",
              "modifiedat": "2025-05-26T16:41:25.23034655Z",
              "ancestor": "1",
              "id": "9e07df79-22e2-464d-a842-06f08b875196",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cYOUR_PAT\u003e",
                      "name": "BITRISE_TOKEN"
                    }
                  ],
                  "name": "bitrise-mcp",
                  "package_arguments": [
                    {
                      "default": "--from git+https://github.com/bitrise-io/bitrise-mcp@v1.1.0",
                      "description": "source package location",
                      "format": "string",
                      "is_required": true,
                      "name": "--from git+https://github.com/bitrise-io/bitrise-mcp@v1.1.0",
                      "type": "named",
                      "value": "--from git+https://github.com/bitrise-io/bitrise-mcp@v1.1.0",
                      "value_hint": "git+https://github.com/bitrise-io/bitrise-mcp@v1.1.0"
                    },
                    {
                      "default": "bitrise-mcp",
                      "description": "local entrypoint command",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "bitrise-mcp",
                      "value_hint": "bitrise-mcp"
                    },
                    {
                      "default": "--enabled-api-groups cache-items,pipelines",
                      "description": "list of enabled API groups",
                      "format": "string",
                      "is_required": true,
                      "name": "--enabled-api-groups cache-items,pipelines",
                      "type": "named",
                      "value": "--enabled-api-groups cache-items,pipelines",
                      "value_hint": "cache-items,pipelines"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "958502546",
                "source": "github",
                "url": "https://github.com/bitrise-io/bitrise-mcp"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:44Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "boston343": {
      "mcpproviderid": "boston343",
      "self": "#/mcpproviders/boston343",
      "xid": "/mcpproviders/boston343",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:19.935573408Z",
      "modifiedat": "2025-05-26T16:42:19.935573408Z",

      "serversurl": "#/mcpproviders/boston343/servers",
      "servers": {
        "starwind-ui-mcp": {
          "serverid": "starwind-ui-mcp",
          "self": "#/mcpproviders/boston343/servers/starwind-ui-mcp",
          "xid": "/mcpproviders/boston343/servers/starwind-ui-mcp",

          "metaurl": "#/mcpproviders/boston343/servers/starwind-ui-mcp/meta",
          "meta": {
            "serverid": "starwind-ui-mcp",
            "self": "#/mcpproviders/boston343/servers/starwind-ui-mcp/meta",
            "xid": "/mcpproviders/boston343/servers/starwind-ui-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:19.935573408Z",
            "modifiedat": "2025-05-26T16:42:19.935573408Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/boston343/servers/starwind-ui-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/boston343/servers/starwind-ui-mcp/versions",
          "versions": {
            "1": {
              "serverid": "starwind-ui-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/boston343/servers/starwind-ui-mcp/versions/1",
              "xid": "/mcpproviders/boston343/servers/starwind-ui-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.boston343/starwind-ui-mcp",
              "isdefault": true,
              "description": "Local MCP server implementation for Starwind UI that you can use with Cursor, Windsurf, and other AI tools",
              "createdat": "2025-05-26T16:42:19.935573408Z",
              "modifiedat": "2025-05-26T16:42:19.935573408Z",
              "ancestor": "1",
              "id": "8a0bb0a3-74c3-41c1-9b9f-2974dd1576fe",
              "packages": [
                {
                  "name": "@starwind-ui/mcp",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "948419950",
                "source": "github",
                "url": "https://github.com/starwind-ui/starwind-ui-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:15Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "box-community": {
      "mcpproviderid": "box-community",
      "self": "#/mcpproviders/box-community",
      "xid": "/mcpproviders/box-community",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:53.610464266Z",
      "modifiedat": "2025-05-26T16:41:53.610464266Z",

      "serversurl": "#/mcpproviders/box-community/servers",
      "servers": {
        "mcp-server-box": {
          "serverid": "mcp-server-box",
          "self": "#/mcpproviders/box-community/servers/mcp-server-box",
          "xid": "/mcpproviders/box-community/servers/mcp-server-box",

          "metaurl": "#/mcpproviders/box-community/servers/mcp-server-box/meta",
          "meta": {
            "serverid": "mcp-server-box",
            "self": "#/mcpproviders/box-community/servers/mcp-server-box/meta",
            "xid": "/mcpproviders/box-community/servers/mcp-server-box/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:53.610464266Z",
            "modifiedat": "2025-05-26T16:41:53.610464266Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/box-community/servers/mcp-server-box/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/box-community/servers/mcp-server-box/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-box",
              "versionid": "1",
              "self": "#/mcpproviders/box-community/servers/mcp-server-box/versions/1",
              "xid": "/mcpproviders/box-community/servers/mcp-server-box/versions/1",
              "epoch": 1,
              "name": "io.github.box-community/mcp-server-box",
              "isdefault": true,
              "description": "An MCP server capable of interacting with the Box API",
              "createdat": "2025-05-26T16:41:53.610464266Z",
              "modifiedat": "2025-05-26T16:41:53.610464266Z",
              "ancestor": "1",
              "id": "46bcb36f-ede9-412e-8181-7c7ece41fa04",
              "packages": [
                {
                  "name": "mcp-server-box",
                  "package_arguments": [
                    {
                      "default": "src/mcp_server_box.py",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "src/mcp_server_box.py",
                      "value_hint": "src/mcp_server_box.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "938387717",
                "source": "github",
                "url": "https://github.com/box-community/mcp-server-box"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get your current user information and check connection status.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "box_who_am_i"
                },
                {
                  "description": "Start the Box application authorization process.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "box_authorize_app_tool"
                },
                {
                  "description": "Search for files in Box.",
                  "inputschema": {
                    "properties": {
                      "ancestor_folder_ids": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "file_extensions": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "query": {
                        "type": "string"
                      },
                      "where_to_look_for_query": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "box_search_tool"
                },
                {
                  "description": "Read the text content of a Box file.",
                  "inputschema": {
                    "properties": {
                      "file_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "file_id"
                    ],
                    "type": "object"
                  },
                  "name": "box_read_tool"
                },
                {
                  "description": "Ask Box AI about a file.",
                  "inputschema": {
                    "properties": {
                      "file_id": {
                        "type": "string"
                      },
                      "prompt": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "file_id",
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "box_ask_ai_tool"
                },
                {
                  "description": "Locate a folder by name.",
                  "inputschema": {
                    "properties": {
                      "folder_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "folder_name"
                    ],
                    "type": "object"
                  },
                  "name": "box_search_folder_by_name"
                },
                {
                  "description": "Extract data from a file using AI.",
                  "inputschema": {
                    "properties": {
                      "fields": {
                        "type": "string"
                      },
                      "file_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "file_id",
                      "fields"
                    ],
                    "type": "object"
                  },
                  "name": "box_ai_extract_data"
                },
                {
                  "description": "List folder contents.",
                  "inputschema": {
                    "properties": {
                      "folder_id": {
                        "type": "string"
                      },
                      "is_recursive": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "folder_id",
                      "is_recursive"
                    ],
                    "type": "object"
                  },
                  "name": "box_list_folder_content_by_folder_id"
                },
                {
                  "description": "Create, update, or delete folders in Box.",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "type": "string"
                      },
                      "description": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "folder_id": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "name": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "parent_id": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "recursive": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "action"
                    ],
                    "type": "object"
                  },
                  "name": "box_manage_folder_tool"
                },
                {
                  "description": "Upload content as a file to Box.",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "type": "string"
                      },
                      "file_name": {
                        "type": "string"
                      },
                      "folder_id": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "content",
                      "file_name"
                    ],
                    "type": "object"
                  },
                  "name": "box_upload_file_tool"
                },
                {
                  "description": "Download a file from Box and return its content.",
                  "inputschema": {
                    "properties": {
                      "file_id": {
                        "type": "string"
                      },
                      "save_file": {
                        "type": "boolean"
                      },
                      "save_path": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "file_id"
                    ],
                    "type": "object"
                  },
                  "name": "box_download_file_tool"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:46Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "browserbase": {
      "mcpproviderid": "browserbase",
      "self": "#/mcpproviders/browserbase",
      "xid": "/mcpproviders/browserbase",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:21.47072933Z",
      "modifiedat": "2025-05-26T16:41:21.47072933Z",

      "serversurl": "#/mcpproviders/browserbase/servers",
      "servers": {
        "mcp-server-browserbase": {
          "serverid": "mcp-server-browserbase",
          "self": "#/mcpproviders/browserbase/servers/mcp-server-browserbase",
          "xid": "/mcpproviders/browserbase/servers/mcp-server-browserbase",

          "metaurl": "#/mcpproviders/browserbase/servers/mcp-server-browserbase/meta",
          "meta": {
            "serverid": "mcp-server-browserbase",
            "self": "#/mcpproviders/browserbase/servers/mcp-server-browserbase/meta",
            "xid": "/mcpproviders/browserbase/servers/mcp-server-browserbase/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:21.47072933Z",
            "modifiedat": "2025-05-26T16:41:21.47072933Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/browserbase/servers/mcp-server-browserbase/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/browserbase/servers/mcp-server-browserbase/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-browserbase",
              "versionid": "1",
              "self": "#/mcpproviders/browserbase/servers/mcp-server-browserbase/versions/1",
              "xid": "/mcpproviders/browserbase/servers/mcp-server-browserbase/versions/1",
              "epoch": 1,
              "name": "io.github.browserbase/mcp-server-browserbase",
              "isdefault": true,
              "description": "Allow LLMs to control a browser with Browserbase and Stagehand",
              "createdat": "2025-05-26T16:41:21.47072933Z",
              "modifiedat": "2025-05-26T16:41:21.47072933Z",
              "ancestor": "1",
              "id": "84dcab53-bfa3-4375-b69e-d519eb00af0f",
              "packages": [
                {
                  "name": "browserbase/mcp-server-browserbase",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "899184149",
                "source": "github",
                "url": "https://github.com/browserbase/mcp-server-browserbase"
              },
              "resources": [
                {
                  "description": "Screenshot resources identified by name",
                  "mimetype": "image/png",
                  "name": "Screenshot",
                  "uritemplate": "screenshot://{name}"
                }
              ],
              "tools": [
                {
                  "description": "Create a new cloud browser session using Browserbase",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "browserbase_create_session"
                },
                {
                  "description": "Navigate to a URL",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "browserbase_navigate"
                },
                {
                  "description": "Takes a screenshot of the current page. Use this tool to learn where you are on the page when controlling the browser with Stagehand. Only use this tool when the other tools are not sufficient to get the information you need.",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "browserbase_screenshot"
                },
                {
                  "description": "Click an element on the page",
                  "inputschema": {
                    "properties": {
                      "selector": {
                        "description": "CSS selector for element to click",
                        "type": "string"
                      }
                    },
                    "required": [
                      "selector"
                    ],
                    "type": "object"
                  },
                  "name": "browserbase_click"
                },
                {
                  "description": "Fill out an input field",
                  "inputschema": {
                    "properties": {
                      "selector": {
                        "description": "CSS selector for input field",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value to fill",
                        "type": "string"
                      }
                    },
                    "required": [
                      "selector",
                      "value"
                    ],
                    "type": "object"
                  },
                  "name": "browserbase_fill"
                },
                {
                  "description": "Extract all text content from the current page",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "browserbase_get_text"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:48Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "burningion": {
      "mcpproviderid": "burningion",
      "self": "#/mcpproviders/burningion",
      "xid": "/mcpproviders/burningion",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:32.816991809Z",
      "modifiedat": "2025-05-26T16:41:32.816991809Z",

      "serversurl": "#/mcpproviders/burningion/servers",
      "servers": {
        "video-editing-mcp": {
          "serverid": "video-editing-mcp",
          "self": "#/mcpproviders/burningion/servers/video-editing-mcp",
          "xid": "/mcpproviders/burningion/servers/video-editing-mcp",

          "metaurl": "#/mcpproviders/burningion/servers/video-editing-mcp/meta",
          "meta": {
            "serverid": "video-editing-mcp",
            "self": "#/mcpproviders/burningion/servers/video-editing-mcp/meta",
            "xid": "/mcpproviders/burningion/servers/video-editing-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:32.816991809Z",
            "modifiedat": "2025-05-26T16:41:32.816991809Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/burningion/servers/video-editing-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/burningion/servers/video-editing-mcp/versions",
          "versions": {
            "1": {
              "serverid": "video-editing-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/burningion/servers/video-editing-mcp/versions/1",
              "xid": "/mcpproviders/burningion/servers/video-editing-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.burningion/video-editing-mcp",
              "isdefault": true,
              "description": "MCP Interface for Video Jungle",
              "createdat": "2025-05-26T16:41:32.816991809Z",
              "modifiedat": "2025-05-26T16:41:32.816991809Z",
              "ancestor": "1",
              "id": "6b136dc5-ffcf-41b0-bf5f-e5dff5d47981",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "1",
                      "name": "LOAD_PHOTOS_DB"
                    }
                  ],
                  "name": "video-editor-mcp",
                  "package_arguments": [
                    {
                      "default": "--directory /Users/\u003cPATH_TO\u003e/video-jungle-mcp",
                      "description": "Directory to use",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory /Users/\u003cPATH_TO\u003e/video-jungle-mcp",
                      "type": "named",
                      "value": "--directory /Users/\u003cPATH_TO\u003e/video-jungle-mcp",
                      "value_hint": "/Users/\u003cPATH_TO\u003e/video-jungle-mcp"
                    },
                    {
                      "default": "video-editor-mcp",
                      "description": "Script or module name",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "video-editor-mcp",
                      "value_hint": "video-editor-mcp"
                    },
                    {
                      "default": "\u003cYOURAPIKEY\u003e",
                      "description": "API Key input",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "\u003cYOURAPIKEY\u003e",
                      "value_hint": "\u003cYOURAPIKEY\u003e"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.25"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "898031405",
                "source": "github",
                "url": "https://github.com/burningion/video-editing-mcp"
              },
              "resources": [
                {
                  "description": "Access individual videos and projects via custom vj:// URI scheme.",
                  "name": "videos",
                  "uritemplate": "vj://{video_or_project_id}"
                }
              ],
              "tools": [
                {
                  "description": "Add a video from a URL and returns a vj:// URI to reference the video file.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "add-video"
                },
                {
                  "description": "Search videos using embeddings and keywords, returning video matches.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search-videos"
                },
                {
                  "description": "Generate a rendered video edit from a set of video files.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "generate-edit-from-videos"
                },
                {
                  "description": "Generate an edit from a single input video file.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "generate-edit-from-single-video"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:26Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "buryhuang": {
      "mcpproviderid": "buryhuang",
      "self": "#/mcpproviders/buryhuang",
      "xid": "/mcpproviders/buryhuang",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:25.24401044Z",
      "modifiedat": "2025-05-26T16:42:25.24401044Z",

      "serversurl": "#/mcpproviders/buryhuang/servers",
      "servers": {
        "mcp-hubspot": {
          "serverid": "mcp-hubspot",
          "self": "#/mcpproviders/buryhuang/servers/mcp-hubspot",
          "xid": "/mcpproviders/buryhuang/servers/mcp-hubspot",

          "metaurl": "#/mcpproviders/buryhuang/servers/mcp-hubspot/meta",
          "meta": {
            "serverid": "mcp-hubspot",
            "self": "#/mcpproviders/buryhuang/servers/mcp-hubspot/meta",
            "xid": "/mcpproviders/buryhuang/servers/mcp-hubspot/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:25.24401044Z",
            "modifiedat": "2025-05-26T16:42:25.24401044Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/buryhuang/servers/mcp-hubspot/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/buryhuang/servers/mcp-hubspot/versions",
          "versions": {
            "1": {
              "serverid": "mcp-hubspot",
              "versionid": "1",
              "self": "#/mcpproviders/buryhuang/servers/mcp-hubspot/versions/1",
              "xid": "/mcpproviders/buryhuang/servers/mcp-hubspot/versions/1",
              "epoch": 1,
              "name": "io.github.buryhuang/mcp-hubspot",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that enables AI assistants to interact with HubSpot CRM data, providing built-in vector storage and caching mechanisms help overcome HubSpot API limitations while improving response times.",
              "createdat": "2025-05-26T16:42:25.24401044Z",
              "modifiedat": "2025-05-26T16:42:25.24401044Z",
              "ancestor": "1",
              "id": "aef75131-e237-4b91-a2b8-c0f416d3618f",
              "packages": [
                {
                  "name": "mcp-server-hubspot",
                  "package_arguments": [
                    {
                      "default": "-i",
                      "description": "Attach stdin even if not attached",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i",
                      "value_hint": "-i"
                    },
                    {
                      "default": "--rm",
                      "description": "Remove container after exit",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm",
                      "value_hint": "--rm"
                    },
                    {
                      "default": "-e HUBSPOT_ACCESS_TOKEN=your_token",
                      "description": "Set HUBSPOT_ACCESS_TOKEN environment variable in the container",
                      "format": "string",
                      "is_required": true,
                      "name": "-e HUBSPOT_ACCESS_TOKEN=your_token",
                      "type": "named",
                      "value": "-e HUBSPOT_ACCESS_TOKEN=your_token",
                      "value_hint": "HUBSPOT_ACCESS_TOKEN=your_token"
                    },
                    {
                      "default": "-v /path/to/storage:/storage",
                      "description": "Optional persistent storage for state files",
                      "format": "string",
                      "name": "-v /path/to/storage:/storage",
                      "type": "named",
                      "value": "-v /path/to/storage:/storage",
                      "value_hint": "/path/to/storage:/storage"
                    },
                    {
                      "default": "buryhuang/mcp-hubspot:latest",
                      "description": "Docker image to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "buryhuang/mcp-hubspot:latest",
                      "value_hint": "buryhuang/mcp-hubspot:latest"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "0.2.0"
                }
              ],
              "repository": {
                "id": "908899631",
                "source": "github",
                "url": "https://github.com/peakmojo/mcp-hubspot"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:06Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "bytebase": {
      "mcpproviderid": "bytebase",
      "self": "#/mcpproviders/bytebase",
      "xid": "/mcpproviders/bytebase",
      "epoch": 1,
      "name": "Bytebase",
      "description": "Database DevSecOps for Developer, DBA, Security, and Platform Engineering Teams.",
      "documentation": "https://github.com/bytebase",
      "createdat": "2025-05-26T16:41:55.777317753Z",
      "modifiedat": "2025-05-26T16:41:55.777317753Z",

      "serversurl": "#/mcpproviders/bytebase/servers",
      "servers": {},
      "serverscount": 0
    },
    "calclavia": {
      "mcpproviderid": "calclavia",
      "self": "#/mcpproviders/calclavia",
      "xid": "/mcpproviders/calclavia",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:10.523835701Z",
      "modifiedat": "2025-05-26T16:42:10.523835701Z",

      "serversurl": "#/mcpproviders/calclavia/servers",
      "servers": {
        "mcp-obsidian": {
          "serverid": "mcp-obsidian",
          "self": "#/mcpproviders/calclavia/servers/mcp-obsidian",
          "xid": "/mcpproviders/calclavia/servers/mcp-obsidian",

          "metaurl": "#/mcpproviders/calclavia/servers/mcp-obsidian/meta",
          "meta": {
            "serverid": "mcp-obsidian",
            "self": "#/mcpproviders/calclavia/servers/mcp-obsidian/meta",
            "xid": "/mcpproviders/calclavia/servers/mcp-obsidian/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:10.523835701Z",
            "modifiedat": "2025-05-26T16:42:10.523835701Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/calclavia/servers/mcp-obsidian/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/calclavia/servers/mcp-obsidian/versions",
          "versions": {
            "1": {
              "serverid": "mcp-obsidian",
              "versionid": "1",
              "self": "#/mcpproviders/calclavia/servers/mcp-obsidian/versions/1",
              "xid": "/mcpproviders/calclavia/servers/mcp-obsidian/versions/1",
              "epoch": 1,
              "name": "io.github.calclavia/mcp-obsidian",
              "isdefault": true,
              "description": "A connector for Claude Desktop to read and search an Obsidian vault.",
              "createdat": "2025-05-26T16:42:10.523835701Z",
              "modifiedat": "2025-05-26T16:42:10.523835701Z",
              "ancestor": "1",
              "id": "ab58cca1-94ad-42d8-be13-980556ac552b",
              "packages": [
                {
                  "name": "mcp-obsidian",
                  "package_arguments": [
                    {
                      "default": "${input:vaultPath}",
                      "description": "Path to Obsidian vault",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "${input:vaultPath}",
                      "value_hint": "${input:vaultPath}"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "1.0.0"
                }
              ],
              "repository": {
                "id": "895882011",
                "source": "github",
                "url": "https://github.com/smithery-ai/mcp-obsidian"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:33Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "calvernaz": {
      "mcpproviderid": "calvernaz",
      "self": "#/mcpproviders/calvernaz",
      "xid": "/mcpproviders/calvernaz",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:29.002676747Z",
      "modifiedat": "2025-05-26T16:41:29.002676747Z",

      "serversurl": "#/mcpproviders/calvernaz/servers",
      "servers": {
        "alphavantage": {
          "serverid": "alphavantage",
          "self": "#/mcpproviders/calvernaz/servers/alphavantage",
          "xid": "/mcpproviders/calvernaz/servers/alphavantage",

          "metaurl": "#/mcpproviders/calvernaz/servers/alphavantage/meta",
          "meta": {
            "serverid": "alphavantage",
            "self": "#/mcpproviders/calvernaz/servers/alphavantage/meta",
            "xid": "/mcpproviders/calvernaz/servers/alphavantage/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:29.002676747Z",
            "modifiedat": "2025-05-26T16:41:29.002676747Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/calvernaz/servers/alphavantage/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/calvernaz/servers/alphavantage/versions",
          "versions": {
            "1": {
              "serverid": "alphavantage",
              "versionid": "1",
              "self": "#/mcpproviders/calvernaz/servers/alphavantage/versions/1",
              "xid": "/mcpproviders/calvernaz/servers/alphavantage/versions/1",
              "epoch": 1,
              "name": "io.github.calvernaz/alphavantage",
              "isdefault": true,
              "description": "A MCP server for the stock market data API, Alphavantage API.",
              "createdat": "2025-05-26T16:41:29.002676747Z",
              "modifiedat": "2025-05-26T16:41:29.002676747Z",
              "ancestor": "1",
              "id": "cac9fd2a-2c08-441f-a94d-16c67821221f",
              "packages": [
                {
                  "name": "alphavantage",
                  "registry_name": "unknown",
                  "version": "0.3.10"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "899668514",
                "source": "github",
                "url": "https://github.com/calvernaz/alphavantage"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:50Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "carterlasalle": {
      "mcpproviderid": "carterlasalle",
      "self": "#/mcpproviders/carterlasalle",
      "xid": "/mcpproviders/carterlasalle",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:38.584263255Z",
      "modifiedat": "2025-05-26T16:41:38.584263255Z",

      "serversurl": "#/mcpproviders/carterlasalle/servers",
      "servers": {
        "mac_messages_mcp": {
          "serverid": "mac_messages_mcp",
          "self": "#/mcpproviders/carterlasalle/servers/mac_messages_mcp",
          "xid": "/mcpproviders/carterlasalle/servers/mac_messages_mcp",

          "metaurl": "#/mcpproviders/carterlasalle/servers/mac_messages_mcp/meta",
          "meta": {
            "serverid": "mac_messages_mcp",
            "self": "#/mcpproviders/carterlasalle/servers/mac_messages_mcp/meta",
            "xid": "/mcpproviders/carterlasalle/servers/mac_messages_mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:38.584263255Z",
            "modifiedat": "2025-05-26T16:41:38.584263255Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/carterlasalle/servers/mac_messages_mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/carterlasalle/servers/mac_messages_mcp/versions",
          "versions": {
            "1": {
              "serverid": "mac_messages_mcp",
              "versionid": "1",
              "self": "#/mcpproviders/carterlasalle/servers/mac_messages_mcp/versions/1",
              "xid": "/mcpproviders/carterlasalle/servers/mac_messages_mcp/versions/1",
              "epoch": 1,
              "name": "io.github.carterlasalle/mac_messages_mcp",
              "isdefault": true,
              "description": "An MCP server that securely interfaces with your iMessage database via the Model Context Protocol (MCP), allowing LLMs to query and analyze iMessage conversations. It includes robust phone number validation, attachment processing, contact management, group chat handling, and full support for sending and receiving messages.",
              "createdat": "2025-05-26T16:41:38.584263255Z",
              "modifiedat": "2025-05-26T16:41:38.584263255Z",
              "ancestor": "1",
              "id": "e7e51609-0d23-4d96-8063-d136bd993c93",
              "packages": [
                {
                  "name": "mac-messages-mcp",
                  "registry_name": "unknown",
                  "version": "0.6.6"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "947677712",
                "source": "github",
                "url": "https://github.com/carterlasalle/mac_messages_mcp"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:34Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "chaindead": {
      "mcpproviderid": "chaindead",
      "self": "#/mcpproviders/chaindead",
      "xid": "/mcpproviders/chaindead",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:44.507109504Z",
      "modifiedat": "2025-05-26T16:41:44.507109504Z",

      "serversurl": "#/mcpproviders/chaindead/servers",
      "servers": {
        "telegram-mcp": {
          "serverid": "telegram-mcp",
          "self": "#/mcpproviders/chaindead/servers/telegram-mcp",
          "xid": "/mcpproviders/chaindead/servers/telegram-mcp",

          "metaurl": "#/mcpproviders/chaindead/servers/telegram-mcp/meta",
          "meta": {
            "serverid": "telegram-mcp",
            "self": "#/mcpproviders/chaindead/servers/telegram-mcp/meta",
            "xid": "/mcpproviders/chaindead/servers/telegram-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:44.507109504Z",
            "modifiedat": "2025-05-26T16:41:44.507109504Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/chaindead/servers/telegram-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/chaindead/servers/telegram-mcp/versions",
          "versions": {
            "1": {
              "serverid": "telegram-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/chaindead/servers/telegram-mcp/versions/1",
              "xid": "/mcpproviders/chaindead/servers/telegram-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.chaindead/telegram-mcp",
              "isdefault": true,
              "description": "Telegram MCP for managing dialogs, messages, drafts, read statuses, and more.",
              "createdat": "2025-05-26T16:41:44.507109504Z",
              "modifiedat": "2025-05-26T16:41:44.507109504Z",
              "ancestor": "1",
              "id": "0cd13ce0-2f67-414a-afb1-4e11dd3e4cba",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cyour-app-id\u003e",
                      "name": "TG_APP_ID"
                    },
                    {
                      "description": "\u003cyour-api-hash\u003e",
                      "name": "TG_API_HASH"
                    }
                  ],
                  "name": "chaindead/telegram-mcp",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [
                {
                  "arguments": [],
                  "description": "Prompts for managing messages such as checking unread messages, summarizing, analyzing, and preparing draft responses.",
                  "name": "Message Management"
                },
                {
                  "arguments": [],
                  "description": "Prompts for analyzing dialogs and suggesting folder structures or categorization.",
                  "name": "Organization"
                },
                {
                  "arguments": [],
                  "description": "Prompts for monitoring chats, drafting responses, and checking unanswered questions.",
                  "name": "Communication"
                }
              ],
              "repository": {
                "id": "958652024",
                "source": "github",
                "url": "https://github.com/chaindead/telegram-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get current account information",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "tg_me"
                },
                {
                  "description": "List dialogs with optional unread filter",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "tg_dialogs"
                },
                {
                  "description": "Mark dialog as read",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "tg_read"
                },
                {
                  "description": "Retrieve messages from specific dialog",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "tg_dialog"
                },
                {
                  "description": "Send draft messages to any dialog",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "tg_send"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:34Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "chargebee": {
      "mcpproviderid": "chargebee",
      "self": "#/mcpproviders/chargebee",
      "xid": "/mcpproviders/chargebee",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:29.221330238Z",
      "modifiedat": "2025-05-26T16:41:29.221330238Z",

      "serversurl": "#/mcpproviders/chargebee/servers",
      "servers": {
        "agentkit": {
          "serverid": "agentkit",
          "self": "#/mcpproviders/chargebee/servers/agentkit",
          "xid": "/mcpproviders/chargebee/servers/agentkit",

          "metaurl": "#/mcpproviders/chargebee/servers/agentkit/meta",
          "meta": {
            "serverid": "agentkit",
            "self": "#/mcpproviders/chargebee/servers/agentkit/meta",
            "xid": "/mcpproviders/chargebee/servers/agentkit/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:29.221330238Z",
            "modifiedat": "2025-05-26T16:41:29.221330238Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/chargebee/servers/agentkit/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/chargebee/servers/agentkit/versions",
          "versions": {
            "1": {
              "serverid": "agentkit",
              "versionid": "1",
              "self": "#/mcpproviders/chargebee/servers/agentkit/versions/1",
              "xid": "/mcpproviders/chargebee/servers/agentkit/versions/1",
              "epoch": 1,
              "name": "io.github.chargebee/agentkit",
              "isdefault": true,
              "description": "Seamlessly integrate AI agents with Chargebee using AgentKit for smarter billing and subscription workflows.",
              "createdat": "2025-05-26T16:41:29.221330238Z",
              "modifiedat": "2025-05-26T16:41:29.221330238Z",
              "ancestor": "1",
              "id": "59a97c76-20ff-48a2-8c1d-89cc66b57697",
              "packages": [
                {
                  "name": "@chargebee/agentkit-repo",
                  "registry_name": "unknown",
                  "version": "0.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "946416125",
                "source": "github",
                "url": "https://github.com/chargebee/agentkit"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:50Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "chatmcp": {
      "mcpproviderid": "chatmcp",
      "self": "#/mcpproviders/chatmcp",
      "xid": "/mcpproviders/chatmcp",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:08.229133975Z",
      "modifiedat": "2025-05-26T16:42:08.229133975Z",

      "serversurl": "#/mcpproviders/chatmcp/servers",
      "servers": {
        "mcp-directory": {
          "serverid": "mcp-directory",
          "self": "#/mcpproviders/chatmcp/servers/mcp-directory",
          "xid": "/mcpproviders/chatmcp/servers/mcp-directory",

          "metaurl": "#/mcpproviders/chatmcp/servers/mcp-directory/meta",
          "meta": {
            "serverid": "mcp-directory",
            "self": "#/mcpproviders/chatmcp/servers/mcp-directory/meta",
            "xid": "/mcpproviders/chatmcp/servers/mcp-directory/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:08.229133975Z",
            "modifiedat": "2025-05-26T16:42:08.229133975Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/chatmcp/servers/mcp-directory/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/chatmcp/servers/mcp-directory/versions",
          "versions": {
            "1": {
              "serverid": "mcp-directory",
              "versionid": "1",
              "self": "#/mcpproviders/chatmcp/servers/mcp-directory/versions/1",
              "xid": "/mcpproviders/chatmcp/servers/mcp-directory/versions/1",
              "epoch": 1,
              "name": "io.github.chatmcp/mcp-directory",
              "isdefault": true,
              "description": "directory for Awesome MCP Servers",
              "createdat": "2025-05-26T16:42:08.229133975Z",
              "modifiedat": "2025-05-26T16:42:08.229133975Z",
              "ancestor": "1",
              "id": "53bef572-b137-447a-bb2f-9fdd37926619",
              "packages": [
                {
                  "name": "navfast",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "899309258",
                "source": "github",
                "url": "https://github.com/chatmcp/mcpso"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:17:06Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "chigwell": {
      "mcpproviderid": "chigwell",
      "self": "#/mcpproviders/chigwell",
      "xid": "/mcpproviders/chigwell",
      "epoch": 1,
      "name": "Eugene Evstafev",
      "description": "https://www.linkedin.com/in/eugene-evstafev-716669181/",
      "documentation": "https://github.com/chigwell",
      "createdat": "2025-05-26T16:42:05.481099408Z",
      "modifiedat": "2025-05-26T16:42:05.481099408Z",

      "serversurl": "#/mcpproviders/chigwell/servers",
      "servers": {},
      "serverscount": 0
    },
    "chroma-core": {
      "mcpproviderid": "chroma-core",
      "self": "#/mcpproviders/chroma-core",
      "xid": "/mcpproviders/chroma-core",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:41.490957058Z",
      "modifiedat": "2025-05-26T16:42:41.490957058Z",

      "serversurl": "#/mcpproviders/chroma-core/servers",
      "servers": {
        "chroma-mcp": {
          "serverid": "chroma-mcp",
          "self": "#/mcpproviders/chroma-core/servers/chroma-mcp",
          "xid": "/mcpproviders/chroma-core/servers/chroma-mcp",

          "metaurl": "#/mcpproviders/chroma-core/servers/chroma-mcp/meta",
          "meta": {
            "serverid": "chroma-mcp",
            "self": "#/mcpproviders/chroma-core/servers/chroma-mcp/meta",
            "xid": "/mcpproviders/chroma-core/servers/chroma-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:41.490957058Z",
            "modifiedat": "2025-05-26T16:42:41.490957058Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/chroma-core/servers/chroma-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/chroma-core/servers/chroma-mcp/versions",
          "versions": {
            "1": {
              "serverid": "chroma-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/chroma-core/servers/chroma-mcp/versions/1",
              "xid": "/mcpproviders/chroma-core/servers/chroma-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.chroma-core/chroma-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation that provides database capabilities for Chroma",
              "createdat": "2025-05-26T16:42:41.490957058Z",
              "modifiedat": "2025-05-26T16:42:41.490957058Z",
              "ancestor": "1",
              "id": "97de67c4-a78f-4ea7-9233-4da9fe6752cf",
              "packages": [
                {
                  "name": "chroma-mcp",
                  "registry_name": "unknown",
                  "version": "0.2.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "930632525",
                "source": "github",
                "url": "https://github.com/chroma-core/chroma-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List all collections with pagination support",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "offset": {
                        "type": [
                          "integer",
                          "null"
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "name": "chroma_list_collections"
                },
                {
                  "description": "Create a new collection with optional HNSW configuration",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "ef_construction": {
                        "type": "integer"
                      },
                      "ef_search": {
                        "type": "integer"
                      },
                      "max_neighbors": {
                        "type": "integer"
                      },
                      "space": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_create_collection"
                },
                {
                  "description": "View a sample of documents in a collection",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_peek_collection"
                },
                {
                  "description": "Get detailed information about a collection",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_get_collection_info"
                },
                {
                  "description": "Get the number of documents in a collection",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_get_collection_count"
                },
                {
                  "description": "Update a collection's name or metadata",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "new_metadata": {
                        "type": "object"
                      },
                      "new_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_modify_collection"
                },
                {
                  "description": "Delete a collection",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_delete_collection"
                },
                {
                  "description": "Add documents with optional metadata and custom IDs",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "documents": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "ids": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "metadatas": {
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "collection_name",
                      "documents"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_add_documents"
                },
                {
                  "description": "Query documents using semantic search with advanced filtering",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "include": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "n_results": {
                        "type": "integer"
                      },
                      "query_texts": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "where": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "collection_name",
                      "query_texts"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_query_documents"
                },
                {
                  "description": "Retrieve documents by IDs or filters with pagination",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "ids": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "include": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "offset": {
                        "type": "integer"
                      },
                      "where": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_get_documents"
                },
                {
                  "description": "Update existing documents' content, metadata, or embeddings",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "documents": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "embeddings": {
                        "items": {
                          "items": {
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "type": "array"
                      },
                      "ids": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "metadatas": {
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "collection_name",
                      "ids"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_update_documents"
                },
                {
                  "description": "Delete specific documents from a collection",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "ids": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "collection_name",
                      "ids"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_delete_documents"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:54Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "chuckbryan": {
      "mcpproviderid": "chuckbryan",
      "self": "#/mcpproviders/chuckbryan",
      "xid": "/mcpproviders/chuckbryan",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:10.332585336Z",
      "modifiedat": "2025-05-26T16:42:10.332585336Z",

      "serversurl": "#/mcpproviders/chuckbryan/servers",
      "servers": {
        "ynabmcpserver": {
          "serverid": "ynabmcpserver",
          "self": "#/mcpproviders/chuckbryan/servers/ynabmcpserver",
          "xid": "/mcpproviders/chuckbryan/servers/ynabmcpserver",

          "metaurl": "#/mcpproviders/chuckbryan/servers/ynabmcpserver/meta",
          "meta": {
            "serverid": "ynabmcpserver",
            "self": "#/mcpproviders/chuckbryan/servers/ynabmcpserver/meta",
            "xid": "/mcpproviders/chuckbryan/servers/ynabmcpserver/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:10.332585336Z",
            "modifiedat": "2025-05-26T16:42:10.332585336Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/chuckbryan/servers/ynabmcpserver/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/chuckbryan/servers/ynabmcpserver/versions",
          "versions": {
            "1": {
              "serverid": "ynabmcpserver",
              "versionid": "1",
              "self": "#/mcpproviders/chuckbryan/servers/ynabmcpserver/versions/1",
              "xid": "/mcpproviders/chuckbryan/servers/ynabmcpserver/versions/1",
              "epoch": 1,
              "name": "io.github.chuckbryan/ynabmcpserver",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:10.332585336Z",
              "modifiedat": "2025-05-26T16:42:10.332585336Z",
              "ancestor": "1",
              "id": "c859bceb-143a-43dc-84e6-8ad8f707fcb0",
              "packages": [
                {
                  "name": "ynabmcpserver",
                  "registry_name": "unknown",
                  "version": "0.0.0"
                }
              ],
              "repository": {
                "id": "982820266",
                "source": "github",
                "url": "https://github.com/ChuckBryan/ynabmcpserver"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:12Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ckreiling": {
      "mcpproviderid": "ckreiling",
      "self": "#/mcpproviders/ckreiling",
      "xid": "/mcpproviders/ckreiling",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:27.166532241Z",
      "modifiedat": "2025-05-26T16:41:27.166532241Z",

      "serversurl": "#/mcpproviders/ckreiling/servers",
      "servers": {
        "mcp-server-docker": {
          "serverid": "mcp-server-docker",
          "self": "#/mcpproviders/ckreiling/servers/mcp-server-docker",
          "xid": "/mcpproviders/ckreiling/servers/mcp-server-docker",

          "metaurl": "#/mcpproviders/ckreiling/servers/mcp-server-docker/meta",
          "meta": {
            "serverid": "mcp-server-docker",
            "self": "#/mcpproviders/ckreiling/servers/mcp-server-docker/meta",
            "xid": "/mcpproviders/ckreiling/servers/mcp-server-docker/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:27.166532241Z",
            "modifiedat": "2025-05-26T16:41:27.166532241Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ckreiling/servers/mcp-server-docker/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ckreiling/servers/mcp-server-docker/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-docker",
              "versionid": "1",
              "self": "#/mcpproviders/ckreiling/servers/mcp-server-docker/versions/1",
              "xid": "/mcpproviders/ckreiling/servers/mcp-server-docker/versions/1",
              "epoch": 1,
              "name": "io.github.ckreiling/mcp-server-docker",
              "isdefault": true,
              "description": "MCP server for Docker",
              "createdat": "2025-05-26T16:41:27.166532241Z",
              "modifiedat": "2025-05-26T16:41:27.166532241Z",
              "ancestor": "1",
              "id": "d2aacd5b-0642-4832-8629-58272a922e4b",
              "packages": [
                {
                  "name": "mcp-server-docker",
                  "registry_name": "unknown",
                  "version": "0.2.0"
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Unique name of the project",
                      "name": "name",
                      "required": true
                    },
                    {
                      "description": "Describe containers you want",
                      "name": "containers",
                      "required": true
                    }
                  ],
                  "description": "Treat the LLM like a Docker Compose manager",
                  "name": "docker_compose"
                }
              ],
              "repository": {
                "id": "899787279",
                "source": "github",
                "url": "https://github.com/ckreiling/mcp-server-docker"
              },
              "resources": [
                {
                  "description": "Live logs for container {container.name}",
                  "mimetype": "text/plain",
                  "name": "Logs for container",
                  "uritemplate": "docker://containers/{id}/logs"
                },
                {
                  "description": "Live resource usage stats for container {container.name}",
                  "mimetype": "application/json",
                  "name": "Stats for container",
                  "uritemplate": "docker://containers/{id}/stats"
                }
              ],
              "tools": [
                {
                  "description": "List all Docker containers",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_containers"
                },
                {
                  "description": "Create a new Docker container",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_container"
                },
                {
                  "description": "Run an image in a new Docker container (preferred over `create_container` + `start_container`)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "run_container"
                },
                {
                  "description": "Stop and remove a container, then run a new container. Fails if the container does not exist.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "recreate_container"
                },
                {
                  "description": "Start a Docker container",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "start_container"
                },
                {
                  "description": "Fetch logs for a Docker container",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "fetch_container_logs"
                },
                {
                  "description": "Stop a Docker container",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "stop_container"
                },
                {
                  "description": "Remove a Docker container",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "remove_container"
                },
                {
                  "description": "List Docker images",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_images"
                },
                {
                  "description": "Pull a Docker image",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "pull_image"
                },
                {
                  "description": "Push a Docker image",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "push_image"
                },
                {
                  "description": "Build a Docker image from a Dockerfile",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "build_image"
                },
                {
                  "description": "Remove a Docker image",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "remove_image"
                },
                {
                  "description": "List Docker networks",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_networks"
                },
                {
                  "description": "Create a Docker network",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_network"
                },
                {
                  "description": "Remove a Docker network",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "remove_network"
                },
                {
                  "description": "List Docker volumes",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_volumes"
                },
                {
                  "description": "Create a Docker volume",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_volume"
                },
                {
                  "description": "Remove a Docker volume",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "remove_volume"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:01Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "clafollett": {
      "mcpproviderid": "clafollett",
      "self": "#/mcpproviders/clafollett",
      "xid": "/mcpproviders/clafollett",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:24.445767777Z",
      "modifiedat": "2025-05-26T16:41:24.445767777Z",

      "serversurl": "#/mcpproviders/clafollett/servers",
      "servers": {
        "fdic-bank-find-mcp-server": {
          "serverid": "fdic-bank-find-mcp-server",
          "self": "#/mcpproviders/clafollett/servers/fdic-bank-find-mcp-server",
          "xid": "/mcpproviders/clafollett/servers/fdic-bank-find-mcp-server",

          "metaurl": "#/mcpproviders/clafollett/servers/fdic-bank-find-mcp-server/meta",
          "meta": {
            "serverid": "fdic-bank-find-mcp-server",
            "self": "#/mcpproviders/clafollett/servers/fdic-bank-find-mcp-server/meta",
            "xid": "/mcpproviders/clafollett/servers/fdic-bank-find-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:24.445767777Z",
            "modifiedat": "2025-05-26T16:41:24.445767777Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/clafollett/servers/fdic-bank-find-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/clafollett/servers/fdic-bank-find-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "fdic-bank-find-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/clafollett/servers/fdic-bank-find-mcp-server/versions/1",
              "xid": "/mcpproviders/clafollett/servers/fdic-bank-find-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.clafollett/fdic-bank-find-mcp-server",
              "isdefault": true,
              "description": "MCP Server to wrap the FDIC Bank Find API",
              "createdat": "2025-05-26T16:41:24.445767777Z",
              "modifiedat": "2025-05-26T16:41:24.445767777Z",
              "ancestor": "1",
              "id": "1f0ecfb3-f362-459d-b217-f146079c3c3b",
              "packages": [
                {
                  "name": "clafollett/fdic-bank-find-mcp-server",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "971755349",
                "source": "github",
                "url": "https://github.com/clafollett/fdic-bank-find-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:43Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "clemensv": {
      "mcpproviderid": "clemensv",
      "self": "#/mcpproviders/clemensv",
      "xid": "/mcpproviders/clemensv",
      "epoch": 1,
      "name": "Clemens Vasters",
      "description": "Messaging Architect at Microsoft. Azure Event Hubs, Azure Event Grid, Azure Service Bus, Azure Relay. OASIS AMQP TC co-chair, CNCF CloudEvents spec author",
      "documentation": "https://github.com/clemensv",
      "createdat": "2025-05-26T16:41:34.575566128Z",
      "modifiedat": "2025-05-26T16:41:34.575566128Z",

      "serversurl": "#/mcpproviders/clemensv/servers",
      "servers": {},
      "serverscount": 0
    },
    "cloudflare": {
      "mcpproviderid": "cloudflare",
      "self": "#/mcpproviders/cloudflare",
      "xid": "/mcpproviders/cloudflare",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:40.860456801Z",
      "modifiedat": "2025-05-26T16:41:40.860456801Z",

      "serversurl": "#/mcpproviders/cloudflare/servers",
      "servers": {
        "mcp-server-cloudflare": {
          "serverid": "mcp-server-cloudflare",
          "self": "#/mcpproviders/cloudflare/servers/mcp-server-cloudflare",
          "xid": "/mcpproviders/cloudflare/servers/mcp-server-cloudflare",

          "metaurl": "#/mcpproviders/cloudflare/servers/mcp-server-cloudflare/meta",
          "meta": {
            "serverid": "mcp-server-cloudflare",
            "self": "#/mcpproviders/cloudflare/servers/mcp-server-cloudflare/meta",
            "xid": "/mcpproviders/cloudflare/servers/mcp-server-cloudflare/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:40.860456801Z",
            "modifiedat": "2025-05-26T16:41:40.860456801Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/cloudflare/servers/mcp-server-cloudflare/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/cloudflare/servers/mcp-server-cloudflare/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-cloudflare",
              "versionid": "1",
              "self": "#/mcpproviders/cloudflare/servers/mcp-server-cloudflare/versions/1",
              "xid": "/mcpproviders/cloudflare/servers/mcp-server-cloudflare/versions/1",
              "epoch": 1,
              "name": "io.github.cloudflare/mcp-server-cloudflare",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:40.860456801Z",
              "modifiedat": "2025-05-26T16:41:40.860456801Z",
              "ancestor": "1",
              "id": "2ad7c503-7daa-46c8-9295-8a1ed53271a6",
              "packages": [
                {
                  "name": "@cloudflare/mcp-server-cloudflare",
                  "package_arguments": [
                    {
                      "default": "https://observability.mcp.cloudflare.com/sse",
                      "description": "URL to SSE endpoint for observability",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "https://observability.mcp.cloudflare.com/sse",
                      "value_hint": "https://observability.mcp.cloudflare.com/sse"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "remotes": [
                {
                  "transport_type": "sse",
                  "url": "https://observability.mcp.cloudflare.com/sse"
                },
                {
                  "transport_type": "sse",
                  "url": "https://bindings.mcp.cloudflare.com/sse"
                }
              ],
              "repository": {
                "id": "895268756",
                "source": "github",
                "url": "https://github.com/cloudflare/mcp-server-cloudflare"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List all Workers in your account",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "worker_list"
                },
                {
                  "description": "Get a Worker's script content",
                  "inputschema": {
                    "properties": {
                      "scriptName": {
                        "description": "The name of the worker script to retrieve",
                        "type": "string"
                      }
                    },
                    "required": [
                      "scriptName"
                    ],
                    "type": "object"
                  },
                  "name": "worker_get_worker"
                },
                {
                  "description": "Analyze recent logs for a Cloudflare Worker by worker name",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "worker_logs_by_worker_name"
                },
                {
                  "description": "Analyze recent logs across all workers for a specific request by Cloudflare Ray ID",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "worker_logs_by_ray_id"
                },
                {
                  "description": "Get available telemetry keys for a Cloudflare Worker",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "worker_logs_keys"
                },
                {
                  "description": "List all accounts in your Cloudflare account",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "accounts_list"
                },
                {
                  "description": "Set active account to be used for tool calls that require accountId",
                  "inputschema": {
                    "properties": {
                      "activeAccountIdParam": {
                        "description": "The accountId present in the users Cloudflare account, that should be the active accountId.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "activeAccountIdParam"
                    ],
                    "type": "object"
                  },
                  "name": "set_active_account"
                },
                {
                  "description": "List all of the D1 databases in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "description": "Optional database name filter",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "page": {
                        "type": "number"
                      },
                      "per_page": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "page",
                      "per_page"
                    ],
                    "type": "object"
                  },
                  "name": "d1_databases_list"
                },
                {
                  "description": "Create a new D1 database in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "primary_location_hint": {
                        "description": "Optional primary location hint",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "d1_database_create"
                },
                {
                  "description": "Delete a d1 database in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "database_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "database_id"
                    ],
                    "type": "object"
                  },
                  "name": "d1_database_delete"
                },
                {
                  "description": "Get a D1 database in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "database_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "database_id"
                    ],
                    "type": "object"
                  },
                  "name": "d1_database_get"
                },
                {
                  "description": "Query a D1 database in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "database_id": {
                        "type": "string"
                      },
                      "params": {
                        "type": [
                          "object",
                          "null"
                        ]
                      },
                      "sql": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "database_id",
                      "sql"
                    ],
                    "type": "object"
                  },
                  "name": "d1_database_query"
                },
                {
                  "description": "List all of the kv namespaces in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "params": {
                        "optional": true,
                        "type": "object"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "kv_namespaces_list"
                },
                {
                  "description": "Create a new kv namespace in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "title": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "title"
                    ],
                    "type": "object"
                  },
                  "name": "kv_namespace_create"
                },
                {
                  "description": "Delete a kv namespace in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "namespace_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "namespace_id"
                    ],
                    "type": "object"
                  },
                  "name": "kv_namespace_delete"
                },
                {
                  "description": "Get details of a kv namespace in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "namespace_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "namespace_id"
                    ],
                    "type": "object"
                  },
                  "name": "kv_namespace_get"
                },
                {
                  "description": "Update the title of a kv namespace in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "namespace_id": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "namespace_id",
                      "title"
                    ],
                    "type": "object"
                  },
                  "name": "kv_namespace_update"
                },
                {
                  "description": "List r2 buckets in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "cursor": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "direction": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "name_contains": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "per_page": {
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "start_after": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "r2_buckets_list"
                },
                {
                  "description": "Create a new r2 bucket in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "r2_bucket_create"
                },
                {
                  "description": "Get details about a specific R2 bucket",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "r2_bucket_get"
                },
                {
                  "description": "Delete an R2 bucket",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "r2_bucket_delete"
                },
                {
                  "description": "Start or reset the container",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "container_initialize"
                },
                {
                  "description": "Ping the container for liveliness",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "container_ping"
                },
                {
                  "description": "Run a command in a container and return the results from stdout",
                  "inputschema": {
                    "properties": {
                      "args": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "args"
                    ],
                    "type": "object"
                  },
                  "name": "container_exec"
                },
                {
                  "description": "Delete file and its contents",
                  "inputschema": {
                    "properties": {
                      "args": {
                        "properties": {
                          "path": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "args"
                    ],
                    "type": "object"
                  },
                  "name": "container_file_delete"
                },
                {
                  "description": "Create a new file with the provided contents, overwriting the file if it already exists",
                  "inputschema": {
                    "properties": {
                      "args": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "args"
                    ],
                    "type": "object"
                  },
                  "name": "container_file_write"
                },
                {
                  "description": "List working directory file tree",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "container_files_list"
                },
                {
                  "description": "Read a specific file or directory",
                  "inputschema": {
                    "properties": {
                      "args": {
                        "properties": {
                          "path": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "args"
                    ],
                    "type": "object"
                  },
                  "name": "container_file_read"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:05Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "co-browser": {
      "mcpproviderid": "co-browser",
      "self": "#/mcpproviders/co-browser",
      "xid": "/mcpproviders/co-browser",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:48.070995836Z",
      "modifiedat": "2025-05-26T16:41:48.219843161Z",

      "serversurl": "#/mcpproviders/co-browser/servers",
      "servers": {
        "attestable-mcp-server": {
          "serverid": "attestable-mcp-server",
          "self": "#/mcpproviders/co-browser/servers/attestable-mcp-server",
          "xid": "/mcpproviders/co-browser/servers/attestable-mcp-server",

          "metaurl": "#/mcpproviders/co-browser/servers/attestable-mcp-server/meta",
          "meta": {
            "serverid": "attestable-mcp-server",
            "self": "#/mcpproviders/co-browser/servers/attestable-mcp-server/meta",
            "xid": "/mcpproviders/co-browser/servers/attestable-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:48.070995836Z",
            "modifiedat": "2025-05-26T16:41:48.070995836Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/co-browser/servers/attestable-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/co-browser/servers/attestable-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "attestable-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/co-browser/servers/attestable-mcp-server/versions/1",
              "xid": "/mcpproviders/co-browser/servers/attestable-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.co-browser/attestable-mcp-server",
              "isdefault": true,
              "description": "Verify that any MCP server is running the intended and untampered code via hardware attestation.",
              "createdat": "2025-05-26T16:41:48.070995836Z",
              "modifiedat": "2025-05-26T16:41:48.070995836Z",
              "ancestor": "1",
              "id": "05ca6ccc-d6e1-47ab-ab8d-25949db9ada7",
              "packages": [
                {
                  "name": "attestable-mcp-server",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "955641588",
                "source": "github",
                "url": "https://github.com/co-browser/attestable-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Fetches a website and returns its content",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "description": "URL to fetch",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "fetch"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:19Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "browser-use-mcp-server": {
          "serverid": "browser-use-mcp-server",
          "self": "#/mcpproviders/co-browser/servers/browser-use-mcp-server",
          "xid": "/mcpproviders/co-browser/servers/browser-use-mcp-server",

          "metaurl": "#/mcpproviders/co-browser/servers/browser-use-mcp-server/meta",
          "meta": {
            "serverid": "browser-use-mcp-server",
            "self": "#/mcpproviders/co-browser/servers/browser-use-mcp-server/meta",
            "xid": "/mcpproviders/co-browser/servers/browser-use-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:48.219843161Z",
            "modifiedat": "2025-05-26T16:41:48.219843161Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/co-browser/servers/browser-use-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/co-browser/servers/browser-use-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "browser-use-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/co-browser/servers/browser-use-mcp-server/versions/1",
              "xid": "/mcpproviders/co-browser/servers/browser-use-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.co-browser/browser-use-mcp-server",
              "isdefault": true,
              "description": "Browse the web, directly from Cursor etc.",
              "createdat": "2025-05-26T16:41:48.219843161Z",
              "modifiedat": "2025-05-26T16:41:48.219843161Z",
              "ancestor": "1",
              "id": "27b05d20-fd9c-437d-a86c-923629491ff5",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-api-key",
                      "name": "OPENAI_API_KEY"
                    }
                  ],
                  "name": "browser-use-mcp-server",
                  "package_arguments": [
                    {
                      "default": "server",
                      "description": "server",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "server",
                      "value_hint": "server"
                    },
                    {
                      "default": "--port 8000",
                      "description": "--port 8000",
                      "format": "string",
                      "is_required": true,
                      "name": "--port 8000",
                      "type": "named",
                      "value": "--port 8000",
                      "value_hint": "8000"
                    },
                    {
                      "default": "--stdio",
                      "description": "--stdio",
                      "format": "string",
                      "is_required": true,
                      "name": "--stdio",
                      "type": "named",
                      "value": "--stdio"
                    },
                    {
                      "default": "--proxy-port 9000",
                      "description": "--proxy-port 9000",
                      "format": "string",
                      "is_required": true,
                      "name": "--proxy-port 9000",
                      "type": "named",
                      "value": "--proxy-port 9000",
                      "value_hint": "9000"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "943806192",
                "source": "github",
                "url": "https://github.com/co-browser/browser-use-mcp-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:07Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "codacy": {
      "mcpproviderid": "codacy",
      "self": "#/mcpproviders/codacy",
      "xid": "/mcpproviders/codacy",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:52.399203734Z",
      "modifiedat": "2025-05-26T16:41:52.399203734Z",

      "serversurl": "#/mcpproviders/codacy/servers",
      "servers": {
        "codacy-mcp-server": {
          "serverid": "codacy-mcp-server",
          "self": "#/mcpproviders/codacy/servers/codacy-mcp-server",
          "xid": "/mcpproviders/codacy/servers/codacy-mcp-server",

          "metaurl": "#/mcpproviders/codacy/servers/codacy-mcp-server/meta",
          "meta": {
            "serverid": "codacy-mcp-server",
            "self": "#/mcpproviders/codacy/servers/codacy-mcp-server/meta",
            "xid": "/mcpproviders/codacy/servers/codacy-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:52.399203734Z",
            "modifiedat": "2025-05-26T16:41:52.399203734Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/codacy/servers/codacy-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/codacy/servers/codacy-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "codacy-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/codacy/servers/codacy-mcp-server/versions/1",
              "xid": "/mcpproviders/codacy/servers/codacy-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.codacy/codacy-mcp-server",
              "isdefault": true,
              "description": "Codacy's MCP Server implementation",
              "createdat": "2025-05-26T16:41:52.399203734Z",
              "modifiedat": "2025-05-26T16:41:52.399203734Z",
              "ancestor": "1",
              "id": "c746fe90-e3f6-4328-82c1-aeef49a2b6d9",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cYOUR_TOKEN\u003e",
                      "name": "CODACY_ACCOUNT_TOKEN"
                    },
                    {
                      "description": "\u003cVERSION\u003e",
                      "name": "CODACY_CLI_VERSION"
                    }
                  ],
                  "name": "@codacy/codacy-mcp",
                  "registry_name": "unknown",
                  "version": "0.0.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "954645052",
                "source": "github",
                "url": "https://github.com/codacy/codacy-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List repositories in an organization with pagination support.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_organization_repositories"
                },
                {
                  "description": "Primary tool to list security items/issues/vulnerabilities/findings related to organization security and risk management (SRM).",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_search_organization_srm_items"
                },
                {
                  "description": "Tool to search security items in a repository.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_search_repository_srm_items"
                },
                {
                  "description": "Lists and filters code quality issues in a repository.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_repository_issues"
                },
                {
                  "description": "List pull requests from a repository that the user has access to.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_repository_pull_requests"
                },
                {
                  "description": "List files in a repository with pagination support.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_files"
                },
                {
                  "description": "Get the issue list for a file in a repository.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_file_issues"
                },
                {
                  "description": "Get coverage information for a file in the head commit of a repository branch.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_file_coverage"
                },
                {
                  "description": "Get diff coverage information for all files in a pull request.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_pull_request_files_coverage"
                },
                {
                  "description": "Returns the human-readable Git diff of a pull request.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_pull_request_git_diff"
                },
                {
                  "description": "Returns a list of issues found in a pull request.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_pull_request_issues"
                },
                {
                  "description": "Get repository with analysis data.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_repository_with_analysis"
                },
                {
                  "description": "Get file with analysis data.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_file_with_analysis"
                },
                {
                  "description": "Get the list of duplication clones for a file in a repository.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_file_clones"
                },
                {
                  "description": "Get repository pull request details.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_repository_pull_request"
                },
                {
                  "description": "Get details of a specific issue.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_issue"
                },
                {
                  "description": "Get pattern details.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_pattern"
                },
                {
                  "description": "List patterns for repository tools.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_repository_tool_patterns"
                },
                {
                  "description": "List available tools.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_tools"
                },
                {
                  "description": "List tools for a repository.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_repository_tools"
                },
                {
                  "description": "List organizations.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_organizations"
                },
                {
                  "description": "Uses Codacy's command-line tool to analyze code.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_cli_analyze"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:07Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "comet-ml": {
      "mcpproviderid": "comet-ml",
      "self": "#/mcpproviders/comet-ml",
      "xid": "/mcpproviders/comet-ml",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:54.651616541Z",
      "modifiedat": "2025-05-26T16:41:54.748294798Z",

      "serversurl": "#/mcpproviders/comet-ml/servers",
      "servers": {
        "opik": {
          "serverid": "opik",
          "self": "#/mcpproviders/comet-ml/servers/opik",
          "xid": "/mcpproviders/comet-ml/servers/opik",

          "metaurl": "#/mcpproviders/comet-ml/servers/opik/meta",
          "versionsurl": "#/mcpproviders/comet-ml/servers/opik/versions",
          "versions": {},
          "versionscount": 0
        },
        "opik-mcp": {
          "serverid": "opik-mcp",
          "self": "#/mcpproviders/comet-ml/servers/opik-mcp",
          "xid": "/mcpproviders/comet-ml/servers/opik-mcp",

          "metaurl": "#/mcpproviders/comet-ml/servers/opik-mcp/meta",
          "meta": {
            "serverid": "opik-mcp",
            "self": "#/mcpproviders/comet-ml/servers/opik-mcp/meta",
            "xid": "/mcpproviders/comet-ml/servers/opik-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:54.748294798Z",
            "modifiedat": "2025-05-26T16:41:54.748294798Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/comet-ml/servers/opik-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/comet-ml/servers/opik-mcp/versions",
          "versions": {
            "1": {
              "serverid": "opik-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/comet-ml/servers/opik-mcp/versions/1",
              "xid": "/mcpproviders/comet-ml/servers/opik-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.comet-ml/opik-mcp",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) implementation for Opik enabling seamless IDE integration and unified access to prompts, projects, traces, and metrics. ",
              "createdat": "2025-05-26T16:41:54.748294798Z",
              "modifiedat": "2025-05-26T16:41:54.748294798Z",
              "ancestor": "1",
              "id": "61b3cbd8-8eee-4bef-a0ef-5fcaf6449201",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "https://www.comet.com/opik/api",
                      "name": "OPIK_API_BASE_URL"
                    },
                    {
                      "description": "YOUR_API_KEY",
                      "name": "OPIK_API_KEY"
                    },
                    {
                      "description": "default",
                      "name": "OPIK_WORKSPACE_NAME"
                    }
                  ],
                  "name": "test-opik-mcp",
                  "package_arguments": [
                    {
                      "default": "--apiUrl https://www.comet.com/opik/api",
                      "description": "API URL for the opik MCP server",
                      "format": "string",
                      "is_required": true,
                      "name": "--apiUrl https://www.comet.com/opik/api",
                      "type": "named",
                      "value": "--apiUrl https://www.comet.com/opik/api",
                      "value_hint": "https://www.comet.com/opik/api"
                    },
                    {
                      "default": "--apiKey YOUR_API_KEY",
                      "description": "API Key for authentication",
                      "format": "string",
                      "is_required": true,
                      "name": "--apiKey YOUR_API_KEY",
                      "type": "named",
                      "value": "--apiKey YOUR_API_KEY",
                      "value_hint": "YOUR_API_KEY"
                    },
                    {
                      "default": "--workspace default",
                      "description": "Workspace name",
                      "format": "string",
                      "is_required": true,
                      "name": "--workspace default",
                      "type": "named",
                      "value": "--workspace default",
                      "value_hint": "default"
                    },
                    {
                      "default": "--debug true",
                      "description": "Enable debug mode",
                      "format": "string",
                      "is_required": true,
                      "name": "--debug true",
                      "type": "named",
                      "value": "--debug true",
                      "value_hint": "true"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.0.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "946763772",
                "source": "github",
                "url": "https://github.com/comet-ml/opik-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get information about the Opik server configuration",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "random_string": {
                        "description": "Dummy parameter for no-parameter tools",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_server_info"
                },
                {
                  "description": "Get information about the Opik server configuration",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "random_string": {
                        "description": "Dummy parameter for no-parameter tools",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "mcp__get_server_info"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:14Z",
                "version": "0.0.1-seed"
              },

              "meta": {
                "serverid": "opik",
                "self": "#/mcpproviders/comet-ml/servers/opik/meta",
                "xid": "/mcpproviders/comet-ml/servers/opik/meta",
                "epoch": 1,
                "createdat": "2025-05-26T16:41:54.651616541Z",
                "modifiedat": "2025-05-26T16:41:54.651616541Z",
                "readonly": false,
                "compatibility": "none",

                "defaultversionid": "1",
                "defaultversionurl": "#/mcpproviders/comet-ml/servers/opik/versions/1",
                "defaultversionsticky": false
              }
            },
            "1": {
              "serverid": "opik",
              "versionid": "1",
              "self": "#/mcpproviders/comet-ml/servers/opik/versions/1",
              "xid": "/mcpproviders/comet-ml/servers/opik/versions/1",
              "epoch": 1,
              "name": "io.github.comet-ml/opik",
              "isdefault": true,
              "description": "Debug, evaluate, and monitor your LLM applications, RAG systems, and agentic workflows with comprehensive tracing, automated evaluations, and production-ready dashboards.",
              "createdat": "2025-05-26T16:41:54.651616541Z",
              "modifiedat": "2025-05-26T16:41:54.651616541Z",
              "ancestor": "1",
              "id": "c8be6fef-88d0-41e0-9906-8670233d81f8",
              "packages": [
                {
                  "name": "comet-ml/opik",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "638951438",
                "source": "github",
                "url": "https://github.com/comet-ml/opik"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:15Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 2
        }
      },
      "serverscount": 2
    },
    "couchbase-ecosystem": {
      "mcpproviderid": "couchbase-ecosystem",
      "self": "#/mcpproviders/couchbase-ecosystem",
      "xid": "/mcpproviders/couchbase-ecosystem",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:23.984608291Z",
      "modifiedat": "2025-05-26T16:41:23.984608291Z",

      "serversurl": "#/mcpproviders/couchbase-ecosystem/servers",
      "servers": {
        "mcp-server-couchbase": {
          "serverid": "mcp-server-couchbase",
          "self": "#/mcpproviders/couchbase-ecosystem/servers/mcp-server-couchbase",
          "xid": "/mcpproviders/couchbase-ecosystem/servers/mcp-server-couchbase",

          "metaurl": "#/mcpproviders/couchbase-ecosystem/servers/mcp-server-couchbase/meta",
          "meta": {
            "serverid": "mcp-server-couchbase",
            "self": "#/mcpproviders/couchbase-ecosystem/servers/mcp-server-couchbase/meta",
            "xid": "/mcpproviders/couchbase-ecosystem/servers/mcp-server-couchbase/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:23.984608291Z",
            "modifiedat": "2025-05-26T16:41:23.984608291Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/couchbase-ecosystem/servers/mcp-server-couchbase/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/couchbase-ecosystem/servers/mcp-server-couchbase/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-couchbase",
              "versionid": "1",
              "self": "#/mcpproviders/couchbase-ecosystem/servers/mcp-server-couchbase/versions/1",
              "xid": "/mcpproviders/couchbase-ecosystem/servers/mcp-server-couchbase/versions/1",
              "epoch": 1,
              "name": "io.github.couchbase-ecosystem/mcp-server-couchbase",
              "isdefault": true,
              "description": "MCP Server to interact with data in Couchbase Clusters",
              "createdat": "2025-05-26T16:41:23.984608291Z",
              "modifiedat": "2025-05-26T16:41:23.984608291Z",
              "ancestor": "1",
              "id": "3f49614c-5424-4875-92ef-9697923375cf",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "couchbases://connection-string",
                      "name": "CB_CONNECTION_STRING"
                    },
                    {
                      "description": "username",
                      "name": "CB_USERNAME"
                    },
                    {
                      "description": "password",
                      "name": "CB_PASSWORD"
                    },
                    {
                      "description": "bucket_name",
                      "name": "CB_BUCKET_NAME"
                    }
                  ],
                  "name": "mcp-couchbase",
                  "package_arguments": [
                    {
                      "default": "--directory path/to/cloned/repo/mcp-server-couchbase/",
                      "description": "Specify directory to work in.",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory path/to/cloned/repo/mcp-server-couchbase/",
                      "type": "named",
                      "value": "--directory path/to/cloned/repo/mcp-server-couchbase/",
                      "value_hint": "path/to/cloned/repo/mcp-server-couchbase/"
                    },
                    {
                      "default": "src/mcp_server.py",
                      "description": "Positional argument for Python script to execute.",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "src/mcp_server.py",
                      "value_hint": "src/mcp_server.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.2.0"
                }
              ],
              "repository": {
                "id": "955488295",
                "source": "github",
                "url": "https://github.com/Couchbase-Ecosystem/mcp-server-couchbase"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:19Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "cr7258": {
      "mcpproviderid": "cr7258",
      "self": "#/mcpproviders/cr7258",
      "xid": "/mcpproviders/cr7258",
      "epoch": 1,
      "name": "Se7en",
      "description": "Passionate about Cloud Native, AI Infra, Elastic Stack | @higress-group Maintainer\r\n",
      "documentation": "https://github.com/cr7258",
      "createdat": "2025-05-26T16:41:53.380863805Z",
      "modifiedat": "2025-05-26T16:41:53.380863805Z",

      "serversurl": "#/mcpproviders/cr7258/servers",
      "servers": {},
      "serverscount": 0
    },
    "cyberchitta": {
      "mcpproviderid": "cyberchitta",
      "self": "#/mcpproviders/cyberchitta",
      "xid": "/mcpproviders/cyberchitta",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:44.004870974Z",
      "modifiedat": "2025-05-26T16:41:44.108987437Z",

      "serversurl": "#/mcpproviders/cyberchitta/servers",
      "servers": {
        "llm-context.py": {
          "serverid": "llm-context.py",
          "self": "#/mcpproviders/cyberchitta/servers/llm-context.py",
          "xid": "/mcpproviders/cyberchitta/servers/llm-context.py",

          "metaurl": "#/mcpproviders/cyberchitta/servers/llm-context.py/meta",
          "meta": {
            "serverid": "llm-context.py",
            "self": "#/mcpproviders/cyberchitta/servers/llm-context.py/meta",
            "xid": "/mcpproviders/cyberchitta/servers/llm-context.py/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:44.108987437Z",
            "modifiedat": "2025-05-26T16:41:44.108987437Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/cyberchitta/servers/llm-context.py/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/cyberchitta/servers/llm-context.py/versions",
          "versions": {
            "1": {
              "serverid": "llm-context.py",
              "versionid": "1",
              "self": "#/mcpproviders/cyberchitta/servers/llm-context.py/versions/1",
              "xid": "/mcpproviders/cyberchitta/servers/llm-context.py/versions/1",
              "epoch": 1,
              "name": "io.github.cyberchitta/llm-context.py",
              "isdefault": true,
              "description": "Share code with LLMs via Model Context Protocol or clipboard. Rule-based customization enables easy switching between different tasks (like code review and documentation). Includes smart code outlining.",
              "createdat": "2025-05-26T16:41:44.108987437Z",
              "modifiedat": "2025-05-26T16:41:44.108987437Z",
              "ancestor": "1",
              "id": "b9f04c6e-0d22-4f17-af83-ccde8b03e4e8",
              "packages": [
                {
                  "name": "llm-context",
                  "package_arguments": [
                    {
                      "default": "--from llm-context",
                      "description": "Named argument --from with value llm-context",
                      "format": "string",
                      "is_required": true,
                      "name": "--from llm-context",
                      "type": "named",
                      "value": "--from llm-context",
                      "value_hint": "llm-context"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.3.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "789457378",
                "source": "github",
                "url": "https://github.com/cyberchitta/llm-context.py"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:30Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "scrapling-fetch-mcp": {
          "serverid": "scrapling-fetch-mcp",
          "self": "#/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp",
          "xid": "/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp",

          "metaurl": "#/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp/meta",
          "meta": {
            "serverid": "scrapling-fetch-mcp",
            "self": "#/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp/meta",
            "xid": "/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:44.004870974Z",
            "modifiedat": "2025-05-26T16:41:44.004870974Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp/versions",
          "versions": {
            "1": {
              "serverid": "scrapling-fetch-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp/versions/1",
              "xid": "/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.cyberchitta/scrapling-fetch-mcp",
              "isdefault": true,
              "description": "Helps AI assistants access text content from bot-protected websites. MCP server that fetches HTML/markdown from sites with anti-automation measures using Scrapling.",
              "createdat": "2025-05-26T16:41:44.004870974Z",
              "modifiedat": "2025-05-26T16:41:44.004870974Z",
              "ancestor": "1",
              "id": "874336ad-3dfa-467f-8356-3de7d8b2b93d",
              "packages": [
                {
                  "name": "scrapling-fetch-mcp",
                  "registry_name": "unknown",
                  "version": "0.1.6"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "947737843",
                "source": "github",
                "url": "https://github.com/cyberchitta/scrapling-fetch-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieves complete web pages with pagination support",
                  "inputschema": {
                    "properties": {
                      "max_length": {
                        "type": "integer"
                      },
                      "mode": {
                        "type": "string"
                      },
                      "start_index": {
                        "type": "integer"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url",
                      "mode"
                    ],
                    "type": "object"
                  },
                  "name": "s-fetch-page"
                },
                {
                  "description": "Extracts content matching regex patterns with surrounding context",
                  "inputschema": {
                    "properties": {
                      "context_chars": {
                        "type": "integer"
                      },
                      "mode": {
                        "type": "string"
                      },
                      "search_pattern": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url",
                      "mode",
                      "search_pattern",
                      "context_chars"
                    ],
                    "type": "object"
                  },
                  "name": "s-fetch-pattern"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:45Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "da-okazaki": {
      "mcpproviderid": "da-okazaki",
      "self": "#/mcpproviders/da-okazaki",
      "xid": "/mcpproviders/da-okazaki",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:38.21488475Z",
      "modifiedat": "2025-05-26T16:42:38.21488475Z",

      "serversurl": "#/mcpproviders/da-okazaki/servers",
      "servers": {
        "mcp-neo4j-server": {
          "serverid": "mcp-neo4j-server",
          "self": "#/mcpproviders/da-okazaki/servers/mcp-neo4j-server",
          "xid": "/mcpproviders/da-okazaki/servers/mcp-neo4j-server",

          "metaurl": "#/mcpproviders/da-okazaki/servers/mcp-neo4j-server/meta",
          "meta": {
            "serverid": "mcp-neo4j-server",
            "self": "#/mcpproviders/da-okazaki/servers/mcp-neo4j-server/meta",
            "xid": "/mcpproviders/da-okazaki/servers/mcp-neo4j-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:38.21488475Z",
            "modifiedat": "2025-05-26T16:42:38.21488475Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/da-okazaki/servers/mcp-neo4j-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/da-okazaki/servers/mcp-neo4j-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-neo4j-server",
              "versionid": "1",
              "self": "#/mcpproviders/da-okazaki/servers/mcp-neo4j-server/versions/1",
              "xid": "/mcpproviders/da-okazaki/servers/mcp-neo4j-server/versions/1",
              "epoch": 1,
              "name": "io.github.da-okazaki/mcp-neo4j-server",
              "isdefault": true,
              "description": "mcp-neo4j-server",
              "createdat": "2025-05-26T16:42:38.21488475Z",
              "modifiedat": "2025-05-26T16:42:38.21488475Z",
              "ancestor": "1",
              "id": "b4c38c39-7381-49fa-b7b4-75e2604ed93d",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "bolt://localhost:7687",
                      "name": "NEO4J_URI"
                    },
                    {
                      "description": "neo4j",
                      "name": "NEO4J_USERNAME"
                    },
                    {
                      "description": "your-password",
                      "name": "NEO4J_PASSWORD"
                    }
                  ],
                  "name": "@alanse/mcp-neo4j-server",
                  "registry_name": "npm",
                  "version": "0.1.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "912380178",
                "source": "github",
                "url": "https://github.com/da-okazaki/mcp-neo4j-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Execute a Cypher query on Neo4j database",
                  "inputschema": {
                    "properties": {
                      "params": {
                        "additionalProperties": true,
                        "description": "Query parameters",
                        "type": "object"
                      },
                      "query": {
                        "description": "Cypher query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_query"
                },
                {
                  "description": "Create a new node in Neo4j",
                  "inputschema": {
                    "properties": {
                      "label": {
                        "description": "Node label",
                        "type": "string"
                      },
                      "properties": {
                        "additionalProperties": true,
                        "description": "Node properties",
                        "type": "object"
                      }
                    },
                    "required": [
                      "label",
                      "properties"
                    ],
                    "type": "object"
                  },
                  "name": "create_node"
                },
                {
                  "description": "Create a relationship between two nodes",
                  "inputschema": {
                    "properties": {
                      "fromNodeId": {
                        "description": "ID of the source node",
                        "type": "number"
                      },
                      "properties": {
                        "additionalProperties": true,
                        "description": "Relationship properties",
                        "type": "object"
                      },
                      "toNodeId": {
                        "description": "ID of the target node",
                        "type": "number"
                      },
                      "type": {
                        "description": "Relationship type",
                        "type": "string"
                      }
                    },
                    "required": [
                      "fromNodeId",
                      "toNodeId",
                      "type"
                    ],
                    "type": "object"
                  },
                  "name": "create_relationship"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:14Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "daobataotie": {
      "mcpproviderid": "daobataotie",
      "self": "#/mcpproviders/daobataotie",
      "xid": "/mcpproviders/daobataotie",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:31.504626073Z",
      "modifiedat": "2025-05-26T16:41:31.504626073Z",

      "serversurl": "#/mcpproviders/daobataotie/servers",
      "servers": {
        "mssql-mcp": {
          "serverid": "mssql-mcp",
          "self": "#/mcpproviders/daobataotie/servers/mssql-mcp",
          "xid": "/mcpproviders/daobataotie/servers/mssql-mcp",

          "metaurl": "#/mcpproviders/daobataotie/servers/mssql-mcp/meta",
          "meta": {
            "serverid": "mssql-mcp",
            "self": "#/mcpproviders/daobataotie/servers/mssql-mcp/meta",
            "xid": "/mcpproviders/daobataotie/servers/mssql-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:31.504626073Z",
            "modifiedat": "2025-05-26T16:41:31.504626073Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/daobataotie/servers/mssql-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/daobataotie/servers/mssql-mcp/versions",
          "versions": {
            "1": {
              "serverid": "mssql-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/daobataotie/servers/mssql-mcp/versions/1",
              "xid": "/mcpproviders/daobataotie/servers/mssql-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.daobataotie/mssql-mcp",
              "isdefault": true,
              "description": "mssql mcp server",
              "createdat": "2025-05-26T16:41:31.504626073Z",
              "modifiedat": "2025-05-26T16:41:31.504626073Z",
              "ancestor": "1",
              "id": "aaf985be-8d3d-41db-b69f-437cd09d85c6",
              "packages": [
                {
                  "name": "daobataotie/mssql-mcp",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "用于生成初始数据的主题",
                      "name": "topic",
                      "required": true
                    }
                  ],
                  "description": "一个用于在 MSSQL 数据库中创建初始数据并演示 MSSQL MCP 服务器功能的提示",
                  "name": "mcp-demo"
                }
              ],
              "repository": {
                "id": "947666059",
                "source": "github",
                "url": "https://github.com/daobataotie/mssql-mcp"
              },
              "resources": [
                {
                  "description": "一个实时更新的业务洞察文档",
                  "mimetype": "text/plain",
                  "name": "业务洞察备忘录",
                  "uritemplate": "memo://insights"
                }
              ],
              "tools": [
                {
                  "description": "在 MSSQL 数据库上执行 SELECT 查询",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "要执行的 SELECT SQL 查询",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "read_query"
                },
                {
                  "description": "在 MSSQL 数据库上执行 INSERT、UPDATE 或 DELETE 查询",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "要执行的 SQL 查询",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "write_query"
                },
                {
                  "description": "在 MSSQL 数据库中创建新表",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "CREATE TABLE SQL 语句",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "create_table"
                },
                {
                  "description": "列出 MSSQL 数据库中的所有表",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_tables"
                },
                {
                  "description": "获取特定表的架构信息",
                  "inputschema": {
                    "properties": {
                      "table_name": {
                        "description": "要描述的表名",
                        "type": "string"
                      }
                    },
                    "required": [
                      "table_name"
                    ],
                    "type": "object"
                  },
                  "name": "describe_table"
                },
                {
                  "description": "向备忘录添加业务洞察",
                  "inputschema": {
                    "properties": {
                      "insight": {
                        "description": "从数据分析中发现的业务洞察",
                        "type": "string"
                      }
                    },
                    "required": [
                      "insight"
                    ],
                    "type": "object"
                  },
                  "name": "append_insight"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:19Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "datastax": {
      "mcpproviderid": "datastax",
      "self": "#/mcpproviders/datastax",
      "xid": "/mcpproviders/datastax",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:32.687948929Z",
      "modifiedat": "2025-05-26T16:41:32.687948929Z",

      "serversurl": "#/mcpproviders/datastax/servers",
      "servers": {
        "astra-db-mcp": {
          "serverid": "astra-db-mcp",
          "self": "#/mcpproviders/datastax/servers/astra-db-mcp",
          "xid": "/mcpproviders/datastax/servers/astra-db-mcp",

          "metaurl": "#/mcpproviders/datastax/servers/astra-db-mcp/meta",
          "meta": {
            "serverid": "astra-db-mcp",
            "self": "#/mcpproviders/datastax/servers/astra-db-mcp/meta",
            "xid": "/mcpproviders/datastax/servers/astra-db-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:32.687948929Z",
            "modifiedat": "2025-05-26T16:41:32.687948929Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/datastax/servers/astra-db-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/datastax/servers/astra-db-mcp/versions",
          "versions": {
            "1": {
              "serverid": "astra-db-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/datastax/servers/astra-db-mcp/versions/1",
              "xid": "/mcpproviders/datastax/servers/astra-db-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.datastax/astra-db-mcp",
              "isdefault": true,
              "description": "An MCP server for Astra DB workloads",
              "createdat": "2025-05-26T16:41:32.687948929Z",
              "modifiedat": "2025-05-26T16:41:32.687948929Z",
              "ancestor": "1",
              "id": "50f15d97-7d84-49f7-9232-f797e006358d",
              "packages": [
                {
                  "name": "@datastax/astra-db-mcp",
                  "registry_name": "unknown",
                  "version": "1.2.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "943241240",
                "source": "github",
                "url": "https://github.com/datastax/astra-db-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get all collections in the database",
                  "name": "GetCollections"
                },
                {
                  "description": "Create a new collection in the database",
                  "name": "CreateCollection"
                },
                {
                  "description": "Update an existing collection in the database",
                  "name": "UpdateCollection"
                },
                {
                  "description": "Delete a collection from the database",
                  "name": "DeleteCollection"
                },
                {
                  "description": "List records from a collection in the database",
                  "name": "ListRecords"
                },
                {
                  "description": "Get a specific record from a collection by ID",
                  "name": "GetRecord"
                },
                {
                  "description": "Create a new record in a collection",
                  "name": "CreateRecord"
                },
                {
                  "description": "Update an existing record in a collection",
                  "name": "UpdateRecord"
                },
                {
                  "description": "Delete a record from a collection",
                  "name": "DeleteRecord"
                },
                {
                  "description": "Find records in a collection by field value",
                  "name": "FindRecord"
                },
                {
                  "description": "Create multiple records in a collection at once",
                  "name": "BulkCreateRecords"
                },
                {
                  "description": "Update multiple records in a collection at once",
                  "name": "BulkUpdateRecords"
                },
                {
                  "description": "Delete multiple records from a collection at once",
                  "name": "BulkDeleteRecords"
                },
                {
                  "description": "Open a web browser for authentication and setup",
                  "name": "OpenBrowser"
                },
                {
                  "description": "Get assistance with adding Astra DB client to your MCP client",
                  "name": "HelpAddToClient"
                },
                {
                  "description": "Get estimate of the number of documents in a collection",
                  "name": "EstimateDocumentCount"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:57:22Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "datastrato": {
      "mcpproviderid": "datastrato",
      "self": "#/mcpproviders/datastrato",
      "xid": "/mcpproviders/datastrato",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:32.013229276Z",
      "modifiedat": "2025-05-26T16:42:32.013229276Z",

      "serversurl": "#/mcpproviders/datastrato/servers",
      "servers": {
        "mcp-server-gravitino": {
          "serverid": "mcp-server-gravitino",
          "self": "#/mcpproviders/datastrato/servers/mcp-server-gravitino",
          "xid": "/mcpproviders/datastrato/servers/mcp-server-gravitino",

          "metaurl": "#/mcpproviders/datastrato/servers/mcp-server-gravitino/meta",
          "meta": {
            "serverid": "mcp-server-gravitino",
            "self": "#/mcpproviders/datastrato/servers/mcp-server-gravitino/meta",
            "xid": "/mcpproviders/datastrato/servers/mcp-server-gravitino/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:32.013229276Z",
            "modifiedat": "2025-05-26T16:42:32.013229276Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/datastrato/servers/mcp-server-gravitino/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/datastrato/servers/mcp-server-gravitino/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-gravitino",
              "versionid": "1",
              "self": "#/mcpproviders/datastrato/servers/mcp-server-gravitino/versions/1",
              "xid": "/mcpproviders/datastrato/servers/mcp-server-gravitino/versions/1",
              "epoch": 1,
              "name": "io.github.datastrato/mcp-server-gravitino",
              "isdefault": true,
              "description": "MCP server for Apache Gravitino(incubating)",
              "createdat": "2025-05-26T16:42:32.013229276Z",
              "modifiedat": "2025-05-26T16:42:32.013229276Z",
              "ancestor": "1",
              "id": "fee5894b-e255-408d-9cd2-e6ee29d78d78",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "http://localhost:8090",
                      "name": "GRAVITINO_URI"
                    },
                    {
                      "description": "admin",
                      "name": "GRAVITINO_USERNAME"
                    },
                    {
                      "description": "admin",
                      "name": "GRAVITINO_PASSWORD"
                    },
                    {
                      "description": "metalake_demo",
                      "name": "GRAVITINO_METALAKE"
                    }
                  ],
                  "name": "mcp-server-gravitino",
                  "package_arguments": [
                    {
                      "default": "--directory /Users/user/workspace/mcp-server-gravitino",
                      "description": "Set working directory",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory /Users/user/workspace/mcp-server-gravitino",
                      "type": "named",
                      "value": "--directory /Users/user/workspace/mcp-server-gravitino",
                      "value_hint": "/Users/user/workspace/mcp-server-gravitino"
                    },
                    {
                      "default": "--with fastmcp",
                      "description": "Add fastmcp",
                      "format": "string",
                      "is_required": true,
                      "name": "--with fastmcp",
                      "type": "named",
                      "value": "--with fastmcp",
                      "value_hint": "fastmcp"
                    },
                    {
                      "default": "--with httpx",
                      "description": "Add httpx",
                      "format": "string",
                      "is_required": true,
                      "name": "--with httpx",
                      "type": "named",
                      "value": "--with httpx",
                      "value_hint": "httpx"
                    },
                    {
                      "default": "--with mcp-server-gravitino",
                      "description": "Add mcp-server-gravitino",
                      "format": "string",
                      "is_required": true,
                      "name": "--with mcp-server-gravitino",
                      "type": "named",
                      "value": "--with mcp-server-gravitino",
                      "value_hint": "mcp-server-gravitino"
                    },
                    {
                      "default": "python",
                      "description": "Run python",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "python",
                      "value_hint": "python"
                    },
                    {
                      "default": "-m mcp_server_gravitino.server",
                      "description": "Run module",
                      "format": "string",
                      "is_required": true,
                      "name": "-m mcp_server_gravitino.server",
                      "type": "named",
                      "value": "-m mcp_server_gravitino.server",
                      "value_hint": "mcp_server_gravitino.server"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "966588444",
                "source": "github",
                "url": "https://github.com/datastrato/mcp-server-gravitino"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:02Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ddukbg": {
      "mcpproviderid": "ddukbg",
      "self": "#/mcpproviders/ddukbg",
      "xid": "/mcpproviders/ddukbg",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:40.283114108Z",
      "modifiedat": "2025-05-26T16:42:40.283114108Z",

      "serversurl": "#/mcpproviders/ddukbg/servers",
      "servers": {
        "github-enterprise-mcp": {
          "serverid": "github-enterprise-mcp",
          "self": "#/mcpproviders/ddukbg/servers/github-enterprise-mcp",
          "xid": "/mcpproviders/ddukbg/servers/github-enterprise-mcp",

          "metaurl": "#/mcpproviders/ddukbg/servers/github-enterprise-mcp/meta",
          "meta": {
            "serverid": "github-enterprise-mcp",
            "self": "#/mcpproviders/ddukbg/servers/github-enterprise-mcp/meta",
            "xid": "/mcpproviders/ddukbg/servers/github-enterprise-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:40.283114108Z",
            "modifiedat": "2025-05-26T16:42:40.283114108Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ddukbg/servers/github-enterprise-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ddukbg/servers/github-enterprise-mcp/versions",
          "versions": {
            "1": {
              "serverid": "github-enterprise-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ddukbg/servers/github-enterprise-mcp/versions/1",
              "xid": "/mcpproviders/ddukbg/servers/github-enterprise-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ddukbg/github-enterprise-mcp",
              "isdefault": true,
              "description": "github-enterprise-mcp",
              "createdat": "2025-05-26T16:42:40.283114108Z",
              "modifiedat": "2025-05-26T16:42:40.283114108Z",
              "ancestor": "1",
              "id": "cc190d52-686a-4286-812d-c4542161203d",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "https://github.your-company.com/api/v3",
                      "name": "GITHUB_ENTERPRISE_URL"
                    },
                    {
                      "description": "your_github_token",
                      "name": "GITHUB_TOKEN"
                    }
                  ],
                  "name": "@ddukbg/github-enterprise-mcp",
                  "registry_name": "npm",
                  "version": "1.3.0"
                }
              ],
              "repository": {
                "id": "953844812",
                "source": "github",
                "url": "https://github.com/containerelic/github-enterprise-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:07Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "deepfates": {
      "mcpproviderid": "deepfates",
      "self": "#/mcpproviders/deepfates",
      "xid": "/mcpproviders/deepfates",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:54.470068474Z",
      "modifiedat": "2025-05-26T16:41:54.470068474Z",

      "serversurl": "#/mcpproviders/deepfates/servers",
      "servers": {
        "mcp-replicate": {
          "serverid": "mcp-replicate",
          "self": "#/mcpproviders/deepfates/servers/mcp-replicate",
          "xid": "/mcpproviders/deepfates/servers/mcp-replicate",

          "metaurl": "#/mcpproviders/deepfates/servers/mcp-replicate/meta",
          "meta": {
            "serverid": "mcp-replicate",
            "self": "#/mcpproviders/deepfates/servers/mcp-replicate/meta",
            "xid": "/mcpproviders/deepfates/servers/mcp-replicate/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:54.470068474Z",
            "modifiedat": "2025-05-26T16:41:54.470068474Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/deepfates/servers/mcp-replicate/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/deepfates/servers/mcp-replicate/versions",
          "versions": {
            "1": {
              "serverid": "mcp-replicate",
              "versionid": "1",
              "self": "#/mcpproviders/deepfates/servers/mcp-replicate/versions/1",
              "xid": "/mcpproviders/deepfates/servers/mcp-replicate/versions/1",
              "epoch": 1,
              "name": "io.github.deepfates/mcp-replicate",
              "isdefault": true,
              "description": "Model Context Protocol server for Replicate's API",
              "createdat": "2025-05-26T16:41:54.470068474Z",
              "modifiedat": "2025-05-26T16:41:54.470068474Z",
              "ancestor": "1",
              "id": "ab0a0d85-7031-4eb0-bd01-5db69fb8c667",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_token_here",
                      "name": "REPLICATE_API_TOKEN"
                    }
                  ],
                  "name": "mcp-replicate",
                  "registry_name": "unknown",
                  "version": "0.1.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "913589706",
                "source": "github",
                "url": "https://github.com/deepfates/mcp-replicate"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Find models using semantic search",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search_models"
                },
                {
                  "description": "Browse available models",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_models"
                },
                {
                  "description": "Get details about a specific model",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_model"
                },
                {
                  "description": "Browse model collections",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_collections"
                },
                {
                  "description": "Get details about a specific collection",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_collection"
                },
                {
                  "description": "Run a model with your inputs",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_prediction"
                },
                {
                  "description": "Check a prediction's status",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_prediction"
                },
                {
                  "description": "Stop a running prediction",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "cancel_prediction"
                },
                {
                  "description": "See your recent predictions",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_predictions"
                },
                {
                  "description": "Open an image in your browser",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "view_image"
                },
                {
                  "description": "Clean up cached images",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "clear_image_cache"
                },
                {
                  "description": "Check cache usage",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_image_cache_stats"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:28Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "delorenj": {
      "mcpproviderid": "delorenj",
      "self": "#/mcpproviders/delorenj",
      "xid": "/mcpproviders/delorenj",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:30.675819419Z",
      "modifiedat": "2025-05-26T16:41:30.675819419Z",

      "serversurl": "#/mcpproviders/delorenj/servers",
      "servers": {
        "mcp-server-ticketmaster": {
          "serverid": "mcp-server-ticketmaster",
          "self": "#/mcpproviders/delorenj/servers/mcp-server-ticketmaster",
          "xid": "/mcpproviders/delorenj/servers/mcp-server-ticketmaster",

          "metaurl": "#/mcpproviders/delorenj/servers/mcp-server-ticketmaster/meta",
          "meta": {
            "serverid": "mcp-server-ticketmaster",
            "self": "#/mcpproviders/delorenj/servers/mcp-server-ticketmaster/meta",
            "xid": "/mcpproviders/delorenj/servers/mcp-server-ticketmaster/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:30.675819419Z",
            "modifiedat": "2025-05-26T16:41:30.675819419Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/delorenj/servers/mcp-server-ticketmaster/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/delorenj/servers/mcp-server-ticketmaster/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-ticketmaster",
              "versionid": "1",
              "self": "#/mcpproviders/delorenj/servers/mcp-server-ticketmaster/versions/1",
              "xid": "/mcpproviders/delorenj/servers/mcp-server-ticketmaster/versions/1",
              "epoch": 1,
              "name": "io.github.delorenj/mcp-server-ticketmaster",
              "isdefault": true,
              "description": "A Ticketmaster MCP server that provides query capabilites from the Discovery API",
              "createdat": "2025-05-26T16:41:30.675819419Z",
              "modifiedat": "2025-05-26T16:41:30.675819419Z",
              "ancestor": "1",
              "id": "7f7268e0-670a-4630-83da-acc1090264c3",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-api-key-here",
                      "name": "TICKETMASTER_API_KEY"
                    }
                  ],
                  "name": "@delorenj/mcp-server-ticketmaster",
                  "registry_name": "npm",
                  "version": "0.2.5"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "918433694",
                "source": "github",
                "url": "https://github.com/delorenj/mcp-server-ticketmaster"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Search for events, venues, or attractions on Ticketmaster",
                  "inputschema": {
                    "properties": {
                      "attractionId": {
                        "description": "Specific attraction ID to search",
                        "type": "string"
                      },
                      "city": {
                        "description": "City name",
                        "type": "string"
                      },
                      "classificationName": {
                        "description": "Event classification/category (e.g., \"Sports\", \"Music\")",
                        "type": "string"
                      },
                      "countryCode": {
                        "description": "Country code (e.g., US, CA)",
                        "type": "string"
                      },
                      "endDate": {
                        "description": "End date in YYYY-MM-DD format",
                        "type": "string"
                      },
                      "format": {
                        "default": "json",
                        "description": "Output format (defaults to json)",
                        "enum": [
                          "json",
                          "text"
                        ],
                        "type": "string"
                      },
                      "keyword": {
                        "description": "Search keyword or term",
                        "type": "string"
                      },
                      "startDate": {
                        "description": "Start date in YYYY-MM-DD format",
                        "type": "string"
                      },
                      "stateCode": {
                        "description": "State code (e.g., NY, CA)",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of search to perform",
                        "enum": [
                          "event",
                          "venue",
                          "attraction"
                        ],
                        "type": "string"
                      },
                      "venueId": {
                        "description": "Specific venue ID to search",
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  },
                  "name": "search_ticketmaster"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:48Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "descope-sample-apps": {
      "mcpproviderid": "descope-sample-apps",
      "self": "#/mcpproviders/descope-sample-apps",
      "xid": "/mcpproviders/descope-sample-apps",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:10.139033885Z",
      "modifiedat": "2025-05-26T16:42:10.139033885Z",

      "serversurl": "#/mcpproviders/descope-sample-apps/servers",
      "servers": {
        "descope-mcp-server": {
          "serverid": "descope-mcp-server",
          "self": "#/mcpproviders/descope-sample-apps/servers/descope-mcp-server",
          "xid": "/mcpproviders/descope-sample-apps/servers/descope-mcp-server",

          "metaurl": "#/mcpproviders/descope-sample-apps/servers/descope-mcp-server/meta",
          "meta": {
            "serverid": "descope-mcp-server",
            "self": "#/mcpproviders/descope-sample-apps/servers/descope-mcp-server/meta",
            "xid": "/mcpproviders/descope-sample-apps/servers/descope-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:10.139033885Z",
            "modifiedat": "2025-05-26T16:42:10.139033885Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/descope-sample-apps/servers/descope-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/descope-sample-apps/servers/descope-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "descope-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/descope-sample-apps/servers/descope-mcp-server/versions/1",
              "xid": "/mcpproviders/descope-sample-apps/servers/descope-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.descope-sample-apps/descope-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:10.139033885Z",
              "modifiedat": "2025-05-26T16:42:10.139033885Z",
              "ancestor": "1",
              "id": "bac14e5d-08c4-4b69-8e40-b845632d26ed",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-descope-project-id-here",
                      "name": "DESCOPE_PROJECT_ID"
                    },
                    {
                      "description": "your-descope-management-key-here",
                      "name": "DESCOPE_MANAGEMENT_KEY"
                    }
                  ],
                  "name": "descope-mcp-server",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "repository": {
                "id": "921929368",
                "source": "github",
                "url": "https://github.com/descope-sample-apps/descope-mcp-server-stdio"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:41Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "designcomputer": {
      "mcpproviderid": "designcomputer",
      "self": "#/mcpproviders/designcomputer",
      "xid": "/mcpproviders/designcomputer",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:45.492369486Z",
      "modifiedat": "2025-05-26T16:41:45.492369486Z",

      "serversurl": "#/mcpproviders/designcomputer/servers",
      "servers": {
        "mysql_mcp_server": {
          "serverid": "mysql_mcp_server",
          "self": "#/mcpproviders/designcomputer/servers/mysql_mcp_server",
          "xid": "/mcpproviders/designcomputer/servers/mysql_mcp_server",

          "metaurl": "#/mcpproviders/designcomputer/servers/mysql_mcp_server/meta",
          "meta": {
            "serverid": "mysql_mcp_server",
            "self": "#/mcpproviders/designcomputer/servers/mysql_mcp_server/meta",
            "xid": "/mcpproviders/designcomputer/servers/mysql_mcp_server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:45.492369486Z",
            "modifiedat": "2025-05-26T16:41:45.492369486Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/designcomputer/servers/mysql_mcp_server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/designcomputer/servers/mysql_mcp_server/versions",
          "versions": {
            "1": {
              "serverid": "mysql_mcp_server",
              "versionid": "1",
              "self": "#/mcpproviders/designcomputer/servers/mysql_mcp_server/versions/1",
              "xid": "/mcpproviders/designcomputer/servers/mysql_mcp_server/versions/1",
              "epoch": 1,
              "name": "io.github.designcomputer/mysql_mcp_server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that enables secure interaction with MySQL databases",
              "createdat": "2025-05-26T16:41:45.492369486Z",
              "modifiedat": "2025-05-26T16:41:45.492369486Z",
              "ancestor": "1",
              "id": "56577627-939e-4f31-8c96-654586538eb5",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "localhost",
                      "name": "MYSQL_HOST"
                    },
                    {
                      "description": "3306",
                      "name": "MYSQL_PORT"
                    },
                    {
                      "description": "your_username",
                      "name": "MYSQL_USER"
                    },
                    {
                      "description": "your_password",
                      "name": "MYSQL_PASSWORD"
                    },
                    {
                      "description": "your_database",
                      "name": "MYSQL_DATABASE"
                    }
                  ],
                  "name": "mysql_mcp_server",
                  "package_arguments": [
                    {
                      "default": "--from mysql-mcp-server",
                      "description": "Specify the origin of the package",
                      "format": "string",
                      "is_required": true,
                      "name": "--from mysql-mcp-server",
                      "type": "named",
                      "value": "--from mysql-mcp-server",
                      "value_hint": "mysql-mcp-server"
                    },
                    {
                      "default": "mysql_mcp_server",
                      "description": "Name of the MCP server executable",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mysql_mcp_server",
                      "value_hint": "mysql_mcp_server"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.2.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "898128804",
                "source": "github",
                "url": "https://github.com/designcomputer/mysql_mcp_server"
              },
              "resources": [
                {
                  "description": "Data in table: {table}",
                  "mimetype": "text/plain",
                  "name": "Table",
                  "uritemplate": "mysql://{table}/data"
                }
              ],
              "tools": [
                {
                  "description": "Execute an SQL query on the MySQL server",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_sql"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:54Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "devhub": {
      "mcpproviderid": "devhub",
      "self": "#/mcpproviders/devhub",
      "xid": "/mcpproviders/devhub",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:22.294823532Z",
      "modifiedat": "2025-05-26T16:41:22.294823532Z",

      "serversurl": "#/mcpproviders/devhub/servers",
      "servers": {
        "devhub-cms-mcp": {
          "serverid": "devhub-cms-mcp",
          "self": "#/mcpproviders/devhub/servers/devhub-cms-mcp",
          "xid": "/mcpproviders/devhub/servers/devhub-cms-mcp",

          "metaurl": "#/mcpproviders/devhub/servers/devhub-cms-mcp/meta",
          "meta": {
            "serverid": "devhub-cms-mcp",
            "self": "#/mcpproviders/devhub/servers/devhub-cms-mcp/meta",
            "xid": "/mcpproviders/devhub/servers/devhub-cms-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:22.294823532Z",
            "modifiedat": "2025-05-26T16:41:22.294823532Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/devhub/servers/devhub-cms-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/devhub/servers/devhub-cms-mcp/versions",
          "versions": {
            "1": {
              "serverid": "devhub-cms-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/devhub/servers/devhub-cms-mcp/versions/1",
              "xid": "/mcpproviders/devhub/servers/devhub-cms-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.devhub/devhub-cms-mcp",
              "isdefault": true,
              "description": "DevHub CMS LLM integration through the Model Context Protocol",
              "createdat": "2025-05-26T16:41:22.294823532Z",
              "modifiedat": "2025-05-26T16:41:22.294823532Z",
              "ancestor": "1",
              "id": "1743c861-7e1a-42b2-a300-6059fcd82cb9",
              "packages": [
                {
                  "name": "devhub-cms-mcp",
                  "registry_name": "unknown",
                  "version": "0.3.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "950064178",
                "source": "github",
                "url": "https://github.com/devhub/devhub-cms-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get the hours of operation for a DevHub location",
                  "name": "get_hours_of_operation"
                },
                {
                  "description": "Get all businesses within the DevHub account",
                  "name": "get_businesses"
                },
                {
                  "description": "Get all locations for a business",
                  "name": "get_locations"
                },
                {
                  "description": "Update the hours of operation for a DevHub location",
                  "name": "update_hours"
                },
                {
                  "description": "Get the DevHub site ID from a URL.",
                  "name": "site_from_url"
                },
                {
                  "description": "Upload an image to the DevHub media gallery",
                  "name": "upload_image"
                },
                {
                  "description": "Get a single blog post",
                  "name": "get_blog_post"
                },
                {
                  "description": "Create a new blog post",
                  "name": "create_blog_post"
                },
                {
                  "description": "Update a single blog post",
                  "name": "update_blog_post"
                },
                {
                  "description": "Get the nearest DevHub location",
                  "name": "get_nearest_location"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:24Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "diegobit": {
      "mcpproviderid": "diegobit",
      "self": "#/mcpproviders/diegobit",
      "xid": "/mcpproviders/diegobit",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:29.689712795Z",
      "modifiedat": "2025-05-26T16:42:29.689712795Z",

      "serversurl": "#/mcpproviders/diegobit/servers",
      "servers": {
        "aranet4-mcp-server": {
          "serverid": "aranet4-mcp-server",
          "self": "#/mcpproviders/diegobit/servers/aranet4-mcp-server",
          "xid": "/mcpproviders/diegobit/servers/aranet4-mcp-server",

          "metaurl": "#/mcpproviders/diegobit/servers/aranet4-mcp-server/meta",
          "meta": {
            "serverid": "aranet4-mcp-server",
            "self": "#/mcpproviders/diegobit/servers/aranet4-mcp-server/meta",
            "xid": "/mcpproviders/diegobit/servers/aranet4-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:29.689712795Z",
            "modifiedat": "2025-05-26T16:42:29.689712795Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/diegobit/servers/aranet4-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/diegobit/servers/aranet4-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "aranet4-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/diegobit/servers/aranet4-mcp-server/versions/1",
              "xid": "/mcpproviders/diegobit/servers/aranet4-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.diegobit/aranet4-mcp-server",
              "isdefault": true,
              "description": "SImple MCP server to manage your aranet4 device and local db.",
              "createdat": "2025-05-26T16:42:29.689712795Z",
              "modifiedat": "2025-05-26T16:42:29.689712795Z",
              "ancestor": "1",
              "id": "775bd83c-b33a-471c-9deb-8a444fb4ac79",
              "packages": [
                {
                  "name": "aranet4-mcp-server",
                  "package_arguments": [
                    {
                      "default": "--directory {{PATH_TO_SRC}}/aranet4-mcp-server/",
                      "description": "Directory flag and its value",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory {{PATH_TO_SRC}}/aranet4-mcp-server/",
                      "type": "named",
                      "value": "--directory {{PATH_TO_SRC}}/aranet4-mcp-server/",
                      "value_hint": "{{PATH_TO_SRC}}/aranet4-mcp-server/"
                    },
                    {
                      "default": "src/server.py",
                      "description": "Python server file",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "src/server.py",
                      "value_hint": "src/server.py"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "965063885",
                "source": "github",
                "url": "https://github.com/diegobit/aranet4-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:10Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "dinghuazhou": {
      "mcpproviderid": "dinghuazhou",
      "self": "#/mcpproviders/dinghuazhou",
      "xid": "/mcpproviders/dinghuazhou",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:01.222382493Z",
      "modifiedat": "2025-05-26T16:42:01.222382493Z",

      "serversurl": "#/mcpproviders/dinghuazhou/servers",
      "servers": {
        "sample-mcp-server-tos": {
          "serverid": "sample-mcp-server-tos",
          "self": "#/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos",
          "xid": "/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos",

          "metaurl": "#/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos/meta",
          "meta": {
            "serverid": "sample-mcp-server-tos",
            "self": "#/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos/meta",
            "xid": "/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:01.222382493Z",
            "modifiedat": "2025-05-26T16:42:01.222382493Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos/versions",
          "versions": {
            "1": {
              "serverid": "sample-mcp-server-tos",
              "versionid": "1",
              "self": "#/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos/versions/1",
              "xid": "/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos/versions/1",
              "epoch": 1,
              "name": "io.github.dinghuazhou/sample-mcp-server-tos",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:01.222382493Z",
              "modifiedat": "2025-05-26T16:42:01.222382493Z",
              "ancestor": "1",
              "id": "5f14d558-f478-43b5-8dde-20c9997f196a",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your ak",
                      "name": "VOLC_ACCESSKEY"
                    },
                    {
                      "description": "your sk",
                      "name": "VOLC_SECRETKEY"
                    },
                    {
                      "description": "tos region",
                      "name": "REGION"
                    },
                    {
                      "description": "tos endpoint",
                      "name": "TOS_ENDPOINT"
                    },
                    {
                      "description": "your security token",
                      "name": "SECURITY_TOKEN"
                    },
                    {
                      "description": "your specific bucket",
                      "name": "TOS_BUCKET"
                    }
                  ],
                  "name": "mcp-server-tos",
                  "package_arguments": [
                    {
                      "default": "git+https://github.com/volcengine/ai-app-lab#subdirectory=mcp/server/mcp_server_tos",
                      "description": "Git repository URL with subdirectory parameter",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "git+https://github.com/volcengine/ai-app-lab#subdirectory=mcp/server/mcp_server_tos",
                      "value_hint": "git+https://github.com/volcengine/ai-app-lab#subdirectory=mcp/server/mcp_server_tos"
                    },
                    {
                      "default": "mcp-server-tos",
                      "description": "Server entry point",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp-server-tos",
                      "value_hint": "mcp-server-tos"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "947289080",
                "source": "github",
                "url": "https://github.com/dinghuazhou/sample-mcp-server-tos"
              },
              "resources": [
                {
                  "description": "Buckets resource for TOS",
                  "name": "bucket",
                  "uritemplate": "/buckets/{bucket}"
                },
                {
                  "description": "Objects resource for TOS",
                  "name": "object",
                  "uritemplate": "/buckets/{bucket}/objects/{key}"
                }
              ],
              "tools": [
                {
                  "description": "Returns a list of all buckets owned by the authenticated sender of the request",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_buckets"
                },
                {
                  "description": "Returns some or all (up to 1,000) of the objects in a bucket with each request",
                  "inputschema": {
                    "properties": {
                      "bucket": {
                        "type": "string"
                      },
                      "continuation_token": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "prefix": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "start_after": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "bucket"
                    ],
                    "type": "object"
                  },
                  "name": "list_objects"
                },
                {
                  "description": "Retrieves an object from volcengine TOS. In the GetObject request, specify the full key name for the object.",
                  "inputschema": {
                    "properties": {
                      "bucket": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "bucket",
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "get_object"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:36Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "djannot": {
      "mcpproviderid": "djannot",
      "self": "#/mcpproviders/djannot",
      "xid": "/mcpproviders/djannot",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:22.22624156Z",
      "modifiedat": "2025-05-26T16:41:22.22624156Z",

      "serversurl": "#/mcpproviders/djannot/servers",
      "servers": {
        "puppeteer-vision-mcp": {
          "serverid": "puppeteer-vision-mcp",
          "self": "#/mcpproviders/djannot/servers/puppeteer-vision-mcp",
          "xid": "/mcpproviders/djannot/servers/puppeteer-vision-mcp",

          "metaurl": "#/mcpproviders/djannot/servers/puppeteer-vision-mcp/meta",
          "meta": {
            "serverid": "puppeteer-vision-mcp",
            "self": "#/mcpproviders/djannot/servers/puppeteer-vision-mcp/meta",
            "xid": "/mcpproviders/djannot/servers/puppeteer-vision-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:22.22624156Z",
            "modifiedat": "2025-05-26T16:41:22.22624156Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/djannot/servers/puppeteer-vision-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/djannot/servers/puppeteer-vision-mcp/versions",
          "versions": {
            "1": {
              "serverid": "puppeteer-vision-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/djannot/servers/puppeteer-vision-mcp/versions/1",
              "xid": "/mcpproviders/djannot/servers/puppeteer-vision-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.djannot/puppeteer-vision-mcp",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:22.22624156Z",
              "modifiedat": "2025-05-26T16:41:22.22624156Z",
              "ancestor": "1",
              "id": "7997496a-c366-4949-9ca7-6741bcfdf2a0",
              "packages": [
                {
                  "name": "puppeteer-vision-mcp-server",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "982891249",
                "source": "github",
                "url": "https://github.com/djannot/puppeteer-vision-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:57Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "dmayboroda": {
      "mcpproviderid": "dmayboroda",
      "self": "#/mcpproviders/dmayboroda",
      "xid": "/mcpproviders/dmayboroda",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:06.353244037Z",
      "modifiedat": "2025-05-26T16:42:06.353244037Z",

      "serversurl": "#/mcpproviders/dmayboroda/servers",
      "servers": {
        "minima": {
          "serverid": "minima",
          "self": "#/mcpproviders/dmayboroda/servers/minima",
          "xid": "/mcpproviders/dmayboroda/servers/minima",

          "metaurl": "#/mcpproviders/dmayboroda/servers/minima/meta",
          "meta": {
            "serverid": "minima",
            "self": "#/mcpproviders/dmayboroda/servers/minima/meta",
            "xid": "/mcpproviders/dmayboroda/servers/minima/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:06.353244037Z",
            "modifiedat": "2025-05-26T16:42:06.353244037Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/dmayboroda/servers/minima/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/dmayboroda/servers/minima/versions",
          "versions": {
            "1": {
              "serverid": "minima",
              "versionid": "1",
              "self": "#/mcpproviders/dmayboroda/servers/minima/versions/1",
              "xid": "/mcpproviders/dmayboroda/servers/minima/versions/1",
              "epoch": 1,
              "name": "io.github.dmayboroda/minima",
              "isdefault": true,
              "description": "On-premises conversational RAG with configurable containers",
              "createdat": "2025-05-26T16:42:06.353244037Z",
              "modifiedat": "2025-05-26T16:42:06.353244037Z",
              "ancestor": "1",
              "id": "a0774c2f-cd94-44d6-b441-d606f20c2087",
              "packages": [
                {
                  "name": "dmayboroda/minima",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Context to search",
                      "name": "context",
                      "required": true
                    }
                  ],
                  "description": "Find a context in a local files",
                  "name": "query"
                }
              ],
              "repository": {
                "id": "882486617",
                "source": "github",
                "url": "https://github.com/dmayboroda/minima"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Find a context in local files (PDF, CSV, DOCX, MD, TXT)",
                  "inputschema": {
                    "properties": {
                      "text": {
                        "description": "context to find",
                        "type": "string"
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "query"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:33Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "dogukanakkaya": {
      "mcpproviderid": "dogukanakkaya",
      "self": "#/mcpproviders/dogukanakkaya",
      "xid": "/mcpproviders/dogukanakkaya",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:28.03980981Z",
      "modifiedat": "2025-05-26T16:42:28.03980981Z",

      "serversurl": "#/mcpproviders/dogukanakkaya/servers",
      "servers": {
        "pulumi-mcp-server": {
          "serverid": "pulumi-mcp-server",
          "self": "#/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server",
          "xid": "/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server",

          "metaurl": "#/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server/meta",
          "meta": {
            "serverid": "pulumi-mcp-server",
            "self": "#/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server/meta",
            "xid": "/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:28.03980981Z",
            "modifiedat": "2025-05-26T16:42:28.03980981Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "pulumi-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server/versions/1",
              "xid": "/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.dogukanakkaya/pulumi-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:28.03980981Z",
              "modifiedat": "2025-05-26T16:42:28.03980981Z",
              "ancestor": "1",
              "id": "4f9043b6-e17a-494e-89d4-52c3f39999ac",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "${YOUR_TOKEN}",
                      "name": "PULUMI_ACCESS_TOKEN"
                    }
                  ],
                  "name": "pulumi-mcp-server",
                  "package_arguments": [
                    {
                      "default": "-i",
                      "description": "-i",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i",
                      "value_hint": "-i"
                    },
                    {
                      "default": "--rm",
                      "description": "--rm",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm",
                      "value_hint": "--rm"
                    },
                    {
                      "default": "--name pulumi-mcp-server",
                      "description": "--name pulumi-mcp-server",
                      "format": "string",
                      "is_required": true,
                      "name": "--name pulumi-mcp-server",
                      "type": "named",
                      "value": "--name pulumi-mcp-server",
                      "value_hint": "pulumi-mcp-server"
                    },
                    {
                      "default": "-e PULUMI_ACCESS_TOKEN",
                      "description": "-e PULUMI_ACCESS_TOKEN",
                      "format": "string",
                      "is_required": true,
                      "name": "-e PULUMI_ACCESS_TOKEN",
                      "type": "named",
                      "value": "-e PULUMI_ACCESS_TOKEN",
                      "value_hint": "PULUMI_ACCESS_TOKEN"
                    },
                    {
                      "default": "dogukanakkaya/pulumi-mcp-server",
                      "description": "dogukanakkaya/pulumi-mcp-server",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "dogukanakkaya/pulumi-mcp-server",
                      "value_hint": "dogukanakkaya/pulumi-mcp-server"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "951615631",
                "source": "github",
                "url": "https://github.com/dogukanakkaya/pulumi-mcp-server"
              },
              "resources": [
                {
                  "name": "Pulumi Stacks",
                  "uritemplate": "pulumi://{organization}"
                }
              ],
              "tools": [
                {
                  "description": "Create a new Pulumi stack",
                  "inputschema": {
                    "properties": {
                      "organization": {
                        "description": "Organization name to create the stack in",
                        "type": "string"
                      },
                      "project": {
                        "description": "Project name",
                        "type": "string"
                      },
                      "stackName": {
                        "description": "Stack name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "organization",
                      "project",
                      "stackName"
                    ],
                    "type": "object"
                  },
                  "name": "create_pulumi_stack"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:55Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "domdomegg": {
      "mcpproviderid": "domdomegg",
      "self": "#/mcpproviders/domdomegg",
      "xid": "/mcpproviders/domdomegg",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:13.089525841Z",
      "modifiedat": "2025-05-26T16:42:13.089525841Z",

      "serversurl": "#/mcpproviders/domdomegg/servers",
      "servers": {
        "airtable-mcp-server": {
          "serverid": "airtable-mcp-server",
          "self": "#/mcpproviders/domdomegg/servers/airtable-mcp-server",
          "xid": "/mcpproviders/domdomegg/servers/airtable-mcp-server",

          "metaurl": "#/mcpproviders/domdomegg/servers/airtable-mcp-server/meta",
          "meta": {
            "serverid": "airtable-mcp-server",
            "self": "#/mcpproviders/domdomegg/servers/airtable-mcp-server/meta",
            "xid": "/mcpproviders/domdomegg/servers/airtable-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:13.089525841Z",
            "modifiedat": "2025-05-26T16:42:13.089525841Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/domdomegg/servers/airtable-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/domdomegg/servers/airtable-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "airtable-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/domdomegg/servers/airtable-mcp-server/versions/1",
              "xid": "/mcpproviders/domdomegg/servers/airtable-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.domdomegg/airtable-mcp-server",
              "isdefault": true,
              "description": "🗂️🤖 Airtable Model Context Protocol Server, for allowing AI systems to interact with your Airtable bases",
              "createdat": "2025-05-26T16:42:13.089525841Z",
              "modifiedat": "2025-05-26T16:42:13.089525841Z",
              "ancestor": "1",
              "id": "a4902ee8-060c-47d1-9dfc-ec6af1a9c398",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "pat123.abc123",
                      "name": "AIRTABLE_API_KEY"
                    }
                  ],
                  "name": "airtable-mcp-server",
                  "registry_name": "npm",
                  "version": "1.4.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "902495626",
                "source": "github",
                "url": "https://github.com/domdomegg/airtable-mcp-server"
              },
              "resources": [
                {
                  "description": "Schema of a specific table in an Airtable base",
                  "mimetype": "application/json",
                  "name": "Airtable Table Schema",
                  "uritemplate": "airtable://{baseId}/{tableId}/schema"
                }
              ],
              "tools": [
                {
                  "description": "List records from a table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_records"
                },
                {
                  "description": "Search for records containing specific text",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search_records"
                },
                {
                  "description": "List all accessible Airtable bases",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_bases"
                },
                {
                  "description": "List all tables in a specific base",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_tables"
                },
                {
                  "description": "Get detailed information about a specific table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "describe_table"
                },
                {
                  "description": "Get a specific record by ID",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_record"
                },
                {
                  "description": "Create a new record in a table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_record"
                },
                {
                  "description": "Update up to 10 records in a table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_records"
                },
                {
                  "description": "Delete records from a table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_records"
                },
                {
                  "description": "Create a new table in a base",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_table"
                },
                {
                  "description": "Update a table's name or description",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_table"
                },
                {
                  "description": "Create a new field in a table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_field"
                },
                {
                  "description": "Update a field's name or description",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_field"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:45Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "donghyun-chae": {
      "mcpproviderid": "donghyun-chae",
      "self": "#/mcpproviders/donghyun-chae",
      "xid": "/mcpproviders/donghyun-chae",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:49.31328502Z",
      "modifiedat": "2025-05-26T16:41:49.31328502Z",

      "serversurl": "#/mcpproviders/donghyun-chae/servers",
      "servers": {
        "mcp-amadeus": {
          "serverid": "mcp-amadeus",
          "self": "#/mcpproviders/donghyun-chae/servers/mcp-amadeus",
          "xid": "/mcpproviders/donghyun-chae/servers/mcp-amadeus",

          "metaurl": "#/mcpproviders/donghyun-chae/servers/mcp-amadeus/meta",
          "meta": {
            "serverid": "mcp-amadeus",
            "self": "#/mcpproviders/donghyun-chae/servers/mcp-amadeus/meta",
            "xid": "/mcpproviders/donghyun-chae/servers/mcp-amadeus/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:49.31328502Z",
            "modifiedat": "2025-05-26T16:41:49.31328502Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/donghyun-chae/servers/mcp-amadeus/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/donghyun-chae/servers/mcp-amadeus/versions",
          "versions": {
            "1": {
              "serverid": "mcp-amadeus",
              "versionid": "1",
              "self": "#/mcpproviders/donghyun-chae/servers/mcp-amadeus/versions/1",
              "xid": "/mcpproviders/donghyun-chae/servers/mcp-amadeus/versions/1",
              "epoch": 1,
              "name": "io.github.donghyun-chae/mcp-amadeus",
              "isdefault": true,
              "description": "Amadeus MCP(Model Context Protocol) Server",
              "createdat": "2025-05-26T16:41:49.31328502Z",
              "modifiedat": "2025-05-26T16:41:49.31328502Z",
              "ancestor": "1",
              "id": "ad6e04de-5f80-4274-9464-c6bbff533ad3",
              "packages": [
                {
                  "name": "mcp-amadeus",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "963136865",
                "source": "github",
                "url": "https://github.com/donghyun-chae/mcp-amadeus"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieves flight offers from the Amadeus Flight Offers Search API.",
                  "inputschema": {
                    "properties": {
                      "departure_date": {
                        "type": "string"
                      },
                      "destination": {
                        "type": "string"
                      },
                      "origin": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "origin",
                      "destination",
                      "departure_date"
                    ],
                    "type": "object"
                  },
                  "name": "get_flight_offers"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:51Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "dschuler36": {
      "mcpproviderid": "dschuler36",
      "self": "#/mcpproviders/dschuler36",
      "xid": "/mcpproviders/dschuler36",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:48.477878592Z",
      "modifiedat": "2025-05-26T16:41:48.477878592Z",

      "serversurl": "#/mcpproviders/dschuler36/servers",
      "servers": {
        "reaper-mcp-server": {
          "serverid": "reaper-mcp-server",
          "self": "#/mcpproviders/dschuler36/servers/reaper-mcp-server",
          "xid": "/mcpproviders/dschuler36/servers/reaper-mcp-server",

          "metaurl": "#/mcpproviders/dschuler36/servers/reaper-mcp-server/meta",
          "meta": {
            "serverid": "reaper-mcp-server",
            "self": "#/mcpproviders/dschuler36/servers/reaper-mcp-server/meta",
            "xid": "/mcpproviders/dschuler36/servers/reaper-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:48.477878592Z",
            "modifiedat": "2025-05-26T16:41:48.477878592Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/dschuler36/servers/reaper-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/dschuler36/servers/reaper-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "reaper-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/dschuler36/servers/reaper-mcp-server/versions/1",
              "xid": "/mcpproviders/dschuler36/servers/reaper-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.dschuler36/reaper-mcp-server",
              "isdefault": true,
              "description": "An MCP Server for interacting with Reaper projects.",
              "createdat": "2025-05-26T16:41:48.477878592Z",
              "modifiedat": "2025-05-26T16:41:48.477878592Z",
              "ancestor": "1",
              "id": "c214300b-5fcc-48fb-ad3a-bb2d14b0403d",
              "packages": [
                {
                  "name": "reaper-mcp-server",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "917958763",
                "source": "github",
                "url": "https://github.com/dschuler36/reaper-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Finds all Reaper projects in the directory you specified in the config.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "find_reaper_projects"
                },
                {
                  "description": "Parses a Reaper project and returns a JSON object.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "parse_reaper_project"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:19Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "dvcrn": {
      "mcpproviderid": "dvcrn",
      "self": "#/mcpproviders/dvcrn",
      "xid": "/mcpproviders/dvcrn",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:19.723040865Z",
      "modifiedat": "2025-05-26T16:42:19.723040865Z",

      "serversurl": "#/mcpproviders/dvcrn/servers",
      "servers": {
        "mcp-server-siri-shortcuts": {
          "serverid": "mcp-server-siri-shortcuts",
          "self": "#/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts",
          "xid": "/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts",

          "metaurl": "#/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts/meta",
          "meta": {
            "serverid": "mcp-server-siri-shortcuts",
            "self": "#/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts/meta",
            "xid": "/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:19.723040865Z",
            "modifiedat": "2025-05-26T16:42:19.723040865Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-siri-shortcuts",
              "versionid": "1",
              "self": "#/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts/versions/1",
              "xid": "/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts/versions/1",
              "epoch": 1,
              "name": "io.github.dvcrn/mcp-server-siri-shortcuts",
              "isdefault": true,
              "description": "MCP for calling Siri Shorcuts from LLMs",
              "createdat": "2025-05-26T16:42:19.723040865Z",
              "modifiedat": "2025-05-26T16:42:19.723040865Z",
              "ancestor": "1",
              "id": "fbef362d-ba4b-4708-8579-332d2a57582d",
              "packages": [
                {
                  "name": "mcp-server-siri-shortcuts",
                  "registry_name": "npm",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "938652536",
                "source": "github",
                "url": "https://github.com/dvcrn/mcp-server-siri-shortcuts"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Lists all available Siri shortcuts on the system",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_shortcuts"
                },
                {
                  "description": "Opens a shortcut in the Shortcuts app",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "open_shortcut"
                },
                {
                  "description": "Runs a shortcut with optional input",
                  "inputschema": {
                    "properties": {
                      "input": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "run_shortcut"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:57Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "dynatrace-oss": {
      "mcpproviderid": "dynatrace-oss",
      "self": "#/mcpproviders/dynatrace-oss",
      "xid": "/mcpproviders/dynatrace-oss",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:25.669844628Z",
      "modifiedat": "2025-05-26T16:41:25.669844628Z",

      "serversurl": "#/mcpproviders/dynatrace-oss/servers",
      "servers": {
        "dynatrace-mcp": {
          "serverid": "dynatrace-mcp",
          "self": "#/mcpproviders/dynatrace-oss/servers/dynatrace-mcp",
          "xid": "/mcpproviders/dynatrace-oss/servers/dynatrace-mcp",

          "metaurl": "#/mcpproviders/dynatrace-oss/servers/dynatrace-mcp/meta",
          "meta": {
            "serverid": "dynatrace-mcp",
            "self": "#/mcpproviders/dynatrace-oss/servers/dynatrace-mcp/meta",
            "xid": "/mcpproviders/dynatrace-oss/servers/dynatrace-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:25.669844628Z",
            "modifiedat": "2025-05-26T16:41:25.669844628Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/dynatrace-oss/servers/dynatrace-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/dynatrace-oss/servers/dynatrace-mcp/versions",
          "versions": {
            "1": {
              "serverid": "dynatrace-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/dynatrace-oss/servers/dynatrace-mcp/versions/1",
              "xid": "/mcpproviders/dynatrace-oss/servers/dynatrace-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.dynatrace-oss/dynatrace-mcp",
              "isdefault": true,
              "description": "MCP server for Dynatrace Observability",
              "createdat": "2025-05-26T16:41:25.669844628Z",
              "modifiedat": "2025-05-26T16:41:25.669844628Z",
              "ancestor": "1",
              "id": "3afff2d4-d77f-42c2-bf39-ce786ecb0ecf",
              "packages": [
                {
                  "name": "@dynatrace-oss/dynatrace-mcp-server",
                  "registry_name": "unknown",
                  "version": "0.1.2"
                }
              ],
              "repository": {
                "id": "971357826",
                "source": "github",
                "url": "https://github.com/dynatrace-oss/dynatrace-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:26Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "e2b-dev": {
      "mcpproviderid": "e2b-dev",
      "self": "#/mcpproviders/e2b-dev",
      "xid": "/mcpproviders/e2b-dev",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:54.940546079Z",
      "modifiedat": "2025-05-26T16:41:54.940546079Z",

      "serversurl": "#/mcpproviders/e2b-dev/servers",
      "servers": {
        "mcp-server": {
          "serverid": "mcp-server",
          "self": "#/mcpproviders/e2b-dev/servers/mcp-server",
          "xid": "/mcpproviders/e2b-dev/servers/mcp-server",

          "metaurl": "#/mcpproviders/e2b-dev/servers/mcp-server/meta",
          "meta": {
            "serverid": "mcp-server",
            "self": "#/mcpproviders/e2b-dev/servers/mcp-server/meta",
            "xid": "/mcpproviders/e2b-dev/servers/mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:54.940546079Z",
            "modifiedat": "2025-05-26T16:41:54.940546079Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/e2b-dev/servers/mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/e2b-dev/servers/mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/e2b-dev/servers/mcp-server/versions/1",
              "xid": "/mcpproviders/e2b-dev/servers/mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.e2b-dev/mcp-server",
              "isdefault": true,
              "description": "Giving Claude ability to run code with E2B via MCP (Model Context Protocol)",
              "createdat": "2025-05-26T16:41:54.940546079Z",
              "modifiedat": "2025-05-26T16:41:54.940546079Z",
              "ancestor": "1",
              "id": "1f25c28f-9afe-4f34-9e29-d18aab507255",
              "packages": [
                {
                  "name": "e2b-mcp-root",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "896943331",
                "source": "github",
                "url": "https://github.com/e2b-dev/mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Run python code in a secure sandbox by E2B. Using the Jupyter Notebook syntax.",
                  "inputschema": {
                    "properties": {
                      "code": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "code"
                    ],
                    "type": "object"
                  },
                  "name": "run_code"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:28Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "edgee-cloud": {
      "mcpproviderid": "edgee-cloud",
      "self": "#/mcpproviders/edgee-cloud",
      "xid": "/mcpproviders/edgee-cloud",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:15.135463238Z",
      "modifiedat": "2025-05-26T16:42:15.135463238Z",

      "serversurl": "#/mcpproviders/edgee-cloud/servers",
      "servers": {
        "mcp-server-edgee": {
          "serverid": "mcp-server-edgee",
          "self": "#/mcpproviders/edgee-cloud/servers/mcp-server-edgee",
          "xid": "/mcpproviders/edgee-cloud/servers/mcp-server-edgee",

          "metaurl": "#/mcpproviders/edgee-cloud/servers/mcp-server-edgee/meta",
          "meta": {
            "serverid": "mcp-server-edgee",
            "self": "#/mcpproviders/edgee-cloud/servers/mcp-server-edgee/meta",
            "xid": "/mcpproviders/edgee-cloud/servers/mcp-server-edgee/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:15.135463238Z",
            "modifiedat": "2025-05-26T16:42:15.135463238Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/edgee-cloud/servers/mcp-server-edgee/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/edgee-cloud/servers/mcp-server-edgee/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-edgee",
              "versionid": "1",
              "self": "#/mcpproviders/edgee-cloud/servers/mcp-server-edgee/versions/1",
              "xid": "/mcpproviders/edgee-cloud/servers/mcp-server-edgee/versions/1",
              "epoch": 1,
              "name": "io.github.edgee-cloud/mcp-server-edgee",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:15.135463238Z",
              "modifiedat": "2025-05-26T16:42:15.135463238Z",
              "ancestor": "1",
              "id": "7c870985-c457-4221-8088-977680764f70",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cYOUR_TOKEN\u003e",
                      "name": "EDGEE_TOKEN"
                    }
                  ],
                  "name": "@edgee/mcp-server-edgee",
                  "registry_name": "npm",
                  "version": "0.1.3"
                }
              ],
              "repository": {
                "id": "957822597",
                "source": "github",
                "url": "https://github.com/edgee-cloud/mcp-server-edgee"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:30Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "edwin-finance": {
      "mcpproviderid": "edwin-finance",
      "self": "#/mcpproviders/edwin-finance",
      "xid": "/mcpproviders/edwin-finance",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:38.472301567Z",
      "modifiedat": "2025-05-26T16:42:38.472301567Z",

      "serversurl": "#/mcpproviders/edwin-finance/servers",
      "servers": {
        "edwin": {
          "serverid": "edwin",
          "self": "#/mcpproviders/edwin-finance/servers/edwin",
          "xid": "/mcpproviders/edwin-finance/servers/edwin",

          "metaurl": "#/mcpproviders/edwin-finance/servers/edwin/meta",
          "meta": {
            "serverid": "edwin",
            "self": "#/mcpproviders/edwin-finance/servers/edwin/meta",
            "xid": "/mcpproviders/edwin-finance/servers/edwin/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:38.472301567Z",
            "modifiedat": "2025-05-26T16:42:38.472301567Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/edwin-finance/servers/edwin/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/edwin-finance/servers/edwin/versions",
          "versions": {
            "1": {
              "serverid": "edwin",
              "versionid": "1",
              "self": "#/mcpproviders/edwin-finance/servers/edwin/versions/1",
              "xid": "/mcpproviders/edwin-finance/servers/edwin/versions/1",
              "epoch": 1,
              "name": "io.github.edwin-finance/edwin",
              "isdefault": true,
              "description": "Empowering AI agents to dominate DeFAI",
              "createdat": "2025-05-26T16:42:38.472301567Z",
              "modifiedat": "2025-05-26T16:42:38.472301567Z",
              "ancestor": "1",
              "id": "995ac56a-5ec7-4411-a86c-4ebfef9c9605",
              "packages": [
                {
                  "name": "edwin-sdk",
                  "registry_name": "unknown",
                  "version": "0.8.29"
                }
              ],
              "repository": {
                "id": "918664127",
                "source": "github",
                "url": "https://github.com/edwin-finance/edwin"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:11Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "elastic": {
      "mcpproviderid": "elastic",
      "self": "#/mcpproviders/elastic",
      "xid": "/mcpproviders/elastic",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:27.809883098Z",
      "modifiedat": "2025-05-26T16:42:27.809883098Z",

      "serversurl": "#/mcpproviders/elastic/servers",
      "servers": {
        "mcp-server-elasticsearch": {
          "serverid": "mcp-server-elasticsearch",
          "self": "#/mcpproviders/elastic/servers/mcp-server-elasticsearch",
          "xid": "/mcpproviders/elastic/servers/mcp-server-elasticsearch",

          "metaurl": "#/mcpproviders/elastic/servers/mcp-server-elasticsearch/meta",
          "meta": {
            "serverid": "mcp-server-elasticsearch",
            "self": "#/mcpproviders/elastic/servers/mcp-server-elasticsearch/meta",
            "xid": "/mcpproviders/elastic/servers/mcp-server-elasticsearch/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:27.809883098Z",
            "modifiedat": "2025-05-26T16:42:27.809883098Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/elastic/servers/mcp-server-elasticsearch/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/elastic/servers/mcp-server-elasticsearch/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-elasticsearch",
              "versionid": "1",
              "self": "#/mcpproviders/elastic/servers/mcp-server-elasticsearch/versions/1",
              "xid": "/mcpproviders/elastic/servers/mcp-server-elasticsearch/versions/1",
              "epoch": 1,
              "name": "io.github.elastic/mcp-server-elasticsearch",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:27.809883098Z",
              "modifiedat": "2025-05-26T16:42:27.809883098Z",
              "ancestor": "1",
              "id": "1b8a16d9-0648-4790-b853-d919a6be16e9",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-elasticsearch-url",
                      "name": "ES_URL"
                    },
                    {
                      "description": "your-api-key",
                      "name": "ES_API_KEY"
                    }
                  ],
                  "name": "@elastic/mcp-server-elasticsearch",
                  "package_arguments": [
                    {
                      "default": "/path/to/your/project/dist/index.js",
                      "description": "/path/to/your/project/dist/index.js",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "/path/to/your/project/dist/index.js",
                      "value_hint": "/path/to/your/project/dist/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "953992846",
                "source": "github",
                "url": "https://github.com/elastic/mcp-server-elasticsearch"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List all available Elasticsearch indices",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_indices"
                },
                {
                  "description": "Get field mappings for a specific Elasticsearch index",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_mappings"
                },
                {
                  "description": "Perform an Elasticsearch search with the provided query DSL",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search"
                },
                {
                  "description": "Get shard information for all or specific indices",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_shards"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:37Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "elie222": {
      "mcpproviderid": "elie222",
      "self": "#/mcpproviders/elie222",
      "xid": "/mcpproviders/elie222",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:35.923166734Z",
      "modifiedat": "2025-05-26T16:41:35.923166734Z",

      "serversurl": "#/mcpproviders/elie222/servers",
      "servers": {
        "inbox-zero": {
          "serverid": "inbox-zero",
          "self": "#/mcpproviders/elie222/servers/inbox-zero",
          "xid": "/mcpproviders/elie222/servers/inbox-zero",

          "metaurl": "#/mcpproviders/elie222/servers/inbox-zero/meta",
          "meta": {
            "serverid": "inbox-zero",
            "self": "#/mcpproviders/elie222/servers/inbox-zero/meta",
            "xid": "/mcpproviders/elie222/servers/inbox-zero/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:35.923166734Z",
            "modifiedat": "2025-05-26T16:41:35.923166734Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/elie222/servers/inbox-zero/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/elie222/servers/inbox-zero/versions",
          "versions": {
            "1": {
              "serverid": "inbox-zero",
              "versionid": "1",
              "self": "#/mcpproviders/elie222/servers/inbox-zero/versions/1",
              "xid": "/mcpproviders/elie222/servers/inbox-zero/versions/1",
              "epoch": 1,
              "name": "io.github.elie222/inbox-zero",
              "isdefault": true,
              "description": "The world's best AI personal assistant for email. Open source app to help you reach inbox zero fast.",
              "createdat": "2025-05-26T16:41:35.923166734Z",
              "modifiedat": "2025-05-26T16:41:35.923166734Z",
              "ancestor": "1",
              "id": "afd9f984-ea69-4a8c-86ac-fdb58f3ab37c",
              "packages": [
                {
                  "name": "inbox-zero",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "665613753",
                "source": "github",
                "url": "https://github.com/elie222/inbox-zero"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get emails needing reply",
                  "inputschema": {
                    "properties": {
                      "olderThan": {
                        "description": "Time range to look back",
                        "enum": [
                          "3d",
                          "1w",
                          "2w",
                          "1m"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "olderThan"
                    ],
                    "type": "object"
                  },
                  "name": "get-emails-needing-reply"
                },
                {
                  "description": "Get emails needing follow-up",
                  "inputschema": {
                    "properties": {
                      "olderThan": {
                        "description": "Time range to look back",
                        "enum": [
                          "3d",
                          "1w",
                          "2w",
                          "1m"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "olderThan"
                    ],
                    "type": "object"
                  },
                  "name": "get-emails-needing-follow-up"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:41Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "eqtylab": {
      "mcpproviderid": "eqtylab",
      "self": "#/mcpproviders/eqtylab",
      "xid": "/mcpproviders/eqtylab",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:56.049282575Z",
      "modifiedat": "2025-05-26T16:41:56.049282575Z",

      "serversurl": "#/mcpproviders/eqtylab/servers",
      "servers": {
        "mcp-guardian": {
          "serverid": "mcp-guardian",
          "self": "#/mcpproviders/eqtylab/servers/mcp-guardian",
          "xid": "/mcpproviders/eqtylab/servers/mcp-guardian",

          "metaurl": "#/mcpproviders/eqtylab/servers/mcp-guardian/meta",
          "meta": {
            "serverid": "mcp-guardian",
            "self": "#/mcpproviders/eqtylab/servers/mcp-guardian/meta",
            "xid": "/mcpproviders/eqtylab/servers/mcp-guardian/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:56.049282575Z",
            "modifiedat": "2025-05-26T16:41:56.049282575Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/eqtylab/servers/mcp-guardian/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/eqtylab/servers/mcp-guardian/versions",
          "versions": {
            "1": {
              "serverid": "mcp-guardian",
              "versionid": "1",
              "self": "#/mcpproviders/eqtylab/servers/mcp-guardian/versions/1",
              "xid": "/mcpproviders/eqtylab/servers/mcp-guardian/versions/1",
              "epoch": 1,
              "name": "io.github.eqtylab/mcp-guardian",
              "isdefault": true,
              "description": "Manage / Proxy / Secure your MCP Servers",
              "createdat": "2025-05-26T16:41:56.049282575Z",
              "modifiedat": "2025-05-26T16:41:56.049282575Z",
              "ancestor": "1",
              "id": "04b4489b-db48-4aaa-98f6-036bcf5fd483",
              "packages": [
                {
                  "name": "eqtylab/mcp-guardian",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "926222936",
                "source": "github",
                "url": "https://github.com/eqtylab/mcp-guardian"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:58Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ergut": {
      "mcpproviderid": "ergut",
      "self": "#/mcpproviders/ergut",
      "xid": "/mcpproviders/ergut",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:38.442140913Z",
      "modifiedat": "2025-05-26T16:41:38.442140913Z",

      "serversurl": "#/mcpproviders/ergut/servers",
      "servers": {
        "mcp-bigquery-server": {
          "serverid": "mcp-bigquery-server",
          "self": "#/mcpproviders/ergut/servers/mcp-bigquery-server",
          "xid": "/mcpproviders/ergut/servers/mcp-bigquery-server",

          "metaurl": "#/mcpproviders/ergut/servers/mcp-bigquery-server/meta",
          "meta": {
            "serverid": "mcp-bigquery-server",
            "self": "#/mcpproviders/ergut/servers/mcp-bigquery-server/meta",
            "xid": "/mcpproviders/ergut/servers/mcp-bigquery-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:38.442140913Z",
            "modifiedat": "2025-05-26T16:41:38.442140913Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ergut/servers/mcp-bigquery-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ergut/servers/mcp-bigquery-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-bigquery-server",
              "versionid": "1",
              "self": "#/mcpproviders/ergut/servers/mcp-bigquery-server/versions/1",
              "xid": "/mcpproviders/ergut/servers/mcp-bigquery-server/versions/1",
              "epoch": 1,
              "name": "io.github.ergut/mcp-bigquery-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that provides secure, read-only access to BigQuery datasets. Enables Large Language Models (LLMs) to safely query and analyze data through a standardized interface.",
              "createdat": "2025-05-26T16:41:38.442140913Z",
              "modifiedat": "2025-05-26T16:41:38.442140913Z",
              "ancestor": "1",
              "id": "e3053bd5-1a4d-473c-a41b-f83ab1a46174",
              "packages": [
                {
                  "name": "@ergut/mcp-bigquery-server",
                  "package_arguments": [
                    {
                      "default": "--project-id your-project-id",
                      "description": "--project-id your-project-id",
                      "format": "string",
                      "is_required": true,
                      "name": "--project-id your-project-id",
                      "type": "named",
                      "value": "--project-id your-project-id",
                      "value_hint": "your-project-id"
                    },
                    {
                      "default": "--location us-central1",
                      "description": "--location us-central1",
                      "format": "string",
                      "is_required": true,
                      "name": "--location us-central1",
                      "type": "named",
                      "value": "--location us-central1",
                      "value_hint": "us-central1"
                    },
                    {
                      "default": "--key-file /path/to/service-account-key.json",
                      "description": "--key-file /path/to/service-account-key.json",
                      "format": "string",
                      "is_required": true,
                      "name": "--key-file /path/to/service-account-key.json",
                      "type": "named",
                      "value": "--key-file /path/to/service-account-key.json",
                      "value_hint": "/path/to/service-account-key.json"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.0.3"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "898108083",
                "source": "github",
                "url": "https://github.com/ergut/mcp-bigquery-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:54Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "esignaturescom": {
      "mcpproviderid": "esignaturescom",
      "self": "#/mcpproviders/esignaturescom",
      "xid": "/mcpproviders/esignaturescom",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:47.088665308Z",
      "modifiedat": "2025-05-26T16:41:47.088665308Z",

      "serversurl": "#/mcpproviders/esignaturescom/servers",
      "servers": {
        "mcp-server-esignatures": {
          "serverid": "mcp-server-esignatures",
          "self": "#/mcpproviders/esignaturescom/servers/mcp-server-esignatures",
          "xid": "/mcpproviders/esignaturescom/servers/mcp-server-esignatures",

          "metaurl": "#/mcpproviders/esignaturescom/servers/mcp-server-esignatures/meta",
          "meta": {
            "serverid": "mcp-server-esignatures",
            "self": "#/mcpproviders/esignaturescom/servers/mcp-server-esignatures/meta",
            "xid": "/mcpproviders/esignaturescom/servers/mcp-server-esignatures/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:47.088665308Z",
            "modifiedat": "2025-05-26T16:41:47.088665308Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/esignaturescom/servers/mcp-server-esignatures/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/esignaturescom/servers/mcp-server-esignatures/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-esignatures",
              "versionid": "1",
              "self": "#/mcpproviders/esignaturescom/servers/mcp-server-esignatures/versions/1",
              "xid": "/mcpproviders/esignaturescom/servers/mcp-server-esignatures/versions/1",
              "epoch": 1,
              "name": "io.github.esignaturescom/mcp-server-esignatures",
              "isdefault": true,
              "description": "MCP server for eSignatures (https://esignatures.com)",
              "createdat": "2025-05-26T16:41:47.088665308Z",
              "modifiedat": "2025-05-26T16:41:47.088665308Z",
              "ancestor": "1",
              "id": "d689b152-64e8-4f5d-a937-91331fa3a771",
              "packages": [
                {
                  "name": "mcp-server-esignatures",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "922105354",
                "source": "github",
                "url": "https://github.com/esignaturescom/mcp-server-esignatures"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Creates a new contract. The contract can be a draft which the user can customize/send, or the contract can be sent instantly. So called 'signature fields' like Name/Date/signature-line must be left out, they are all handled automatically. Contract owners can customize the content by replacing {{placeholder fields}} inside the content, and the signers can fill in Signer fields when they sign the contract.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_contract"
                },
                {
                  "description": "Responds with the contract details, contract_id, status, final PDF url if present, title, labels, metadata, expiry time if present, and signer details with all signer events (signer events are included only for recent contracts, with rate limiting).",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "query_contract"
                },
                {
                  "description": "Withdraws a sent contract.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "withdraw_contract"
                },
                {
                  "description": "Deletes a contract. The contract can only be deleted if it's a test contract or a draft contract.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_contract"
                },
                {
                  "description": "Returns the the details of the latest 100 contracts.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_recent_contracts"
                },
                {
                  "description": "Creates a reusable contract template for contracts to be based on.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_template"
                },
                {
                  "description": "Updates the title, labels or the content of a contract template.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_template"
                },
                {
                  "description": "Responds with the template details, template_id, title, labels, created_at, list of the Placeholder fields in the template, list of Signer fields int he template, and the full content inside document_elements",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "query_template"
                },
                {
                  "description": "Deletes a contract template.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_template"
                },
                {
                  "description": "Lists the templates.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_templates"
                },
                {
                  "description": "Creates a HTTPS link for editing a contract template; sends an invitation email if an email is provided..",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "add_template_collaborator"
                },
                {
                  "description": "Removes the template collaborator",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "remove_template_collaborator"
                },
                {
                  "description": "Returns the list of template collaborators, including their GUID, name, email, and the HTTPS link for editing the template",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_template_collaborators"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:39Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "evalstate": {
      "mcpproviderid": "evalstate",
      "self": "#/mcpproviders/evalstate",
      "xid": "/mcpproviders/evalstate",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:26.821715488Z",
      "modifiedat": "2025-05-26T16:42:26.821715488Z",

      "serversurl": "#/mcpproviders/evalstate/servers",
      "servers": {
        "mcp-hfspace": {
          "serverid": "mcp-hfspace",
          "self": "#/mcpproviders/evalstate/servers/mcp-hfspace",
          "xid": "/mcpproviders/evalstate/servers/mcp-hfspace",

          "metaurl": "#/mcpproviders/evalstate/servers/mcp-hfspace/meta",
          "meta": {
            "serverid": "mcp-hfspace",
            "self": "#/mcpproviders/evalstate/servers/mcp-hfspace/meta",
            "xid": "/mcpproviders/evalstate/servers/mcp-hfspace/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:26.821715488Z",
            "modifiedat": "2025-05-26T16:42:26.821715488Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/evalstate/servers/mcp-hfspace/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/evalstate/servers/mcp-hfspace/versions",
          "versions": {
            "1": {
              "serverid": "mcp-hfspace",
              "versionid": "1",
              "self": "#/mcpproviders/evalstate/servers/mcp-hfspace/versions/1",
              "xid": "/mcpproviders/evalstate/servers/mcp-hfspace/versions/1",
              "epoch": 1,
              "name": "io.github.evalstate/mcp-hfspace",
              "isdefault": true,
              "description": "MCP Server to Use HuggingFace spaces, easy configuration and Claude Desktop mode. ",
              "createdat": "2025-05-26T16:42:26.821715488Z",
              "modifiedat": "2025-05-26T16:42:26.821715488Z",
              "ancestor": "1",
              "id": "532d7690-7a65-470f-81da-2ba3042bee05",
              "packages": [
                {
                  "name": "@llmindset/mcp-hfspace",
                  "package_arguments": [
                    {
                      "default": "--work-dir=~/mcp-files/ or x:/temp/mcp-files/",
                      "description": "--work-dir=~/mcp-files/ or x:/temp/mcp-files/",
                      "format": "string",
                      "is_required": true,
                      "name": "--work-dir=~/mcp-files/ or x:/temp/mcp-files/",
                      "type": "named",
                      "value": "--work-dir=~/mcp-files/ or x:/temp/mcp-files/",
                      "value_hint": "~/mcp-files/ or x:/temp/mcp-files/"
                    },
                    {
                      "default": "--HF_TOKEN=HF_{optional token}",
                      "description": "--HF_TOKEN=HF_{optional token}",
                      "format": "string",
                      "is_required": true,
                      "name": "--HF_TOKEN=HF_{optional token}",
                      "type": "named",
                      "value": "--HF_TOKEN=HF_{optional token}",
                      "value_hint": "HF_{optional token}"
                    },
                    {
                      "default": "Qwen/Qwen2-72B-Instruct",
                      "description": "Qwen/Qwen2-72B-Instruct",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "Qwen/Qwen2-72B-Instruct",
                      "value_hint": "Qwen/Qwen2-72B-Instruct"
                    },
                    {
                      "default": "black-forest-labs/FLUX.1-schnell",
                      "description": "black-forest-labs/FLUX.1-schnell",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "black-forest-labs/FLUX.1-schnell",
                      "value_hint": "black-forest-labs/FLUX.1-schnell"
                    },
                    {
                      "default": "space/example/specific-endpint",
                      "description": "space/example/specific-endpint",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "space/example/specific-endpint",
                      "value_hint": "space/example/specific-endpint"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "0.5.4"
                }
              ],
              "prompts": [
                {
                  "arguments": [],
                  "description": "List of available resources.",
                  "name": "Available Resources"
                },
                {
                  "arguments": [],
                  "description": "Prompt template from endpoint FLUX.1-schnell",
                  "name": "FLUX.1-schnell"
                },
                {
                  "arguments": [],
                  "description": "Prompt template from endpoint shuttleai/shuttle-jaguar",
                  "name": "shuttleai/shuttle-jaguar"
                },
                {
                  "arguments": [],
                  "description": "Prompt template from endpoint styletts2/styletts2",
                  "name": "styletts2/styletts2"
                },
                {
                  "arguments": [],
                  "description": "Prompt template from endpoint Qwen/QVQ-72B-preview",
                  "name": "Qwen/QVQ-72B-preview"
                }
              ],
              "repository": {
                "id": "898049335",
                "source": "github",
                "url": "https://github.com/evalstate/mcp-hfspace"
              },
              "resources": [
                {
                  "description": "List of available files and resources in the working directory.",
                  "mimetype": "text/markdown",
                  "name": "available-files",
                  "uritemplate": "resource://mcp-hfspace/available-files"
                }
              ],
              "tools": [
                {
                  "description": "A list of available file and resources. If the User requests things like 'most recent image' or 'the audio' use this tool to identify the intended resource. This tool returns 'resource uri', 'name', 'size', 'last modified'  and 'mime type' in a markdown table",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "available-files"
                },
                {
                  "description": "Use semantic search to find an endpoint on the `Hugging Face Spaces` service. The search term will usually be 3-7 words describing a task or activity the Person is trying to accomplish. The results are returned in a markdown table. Present all results to the Person. Await specific guidance from the Person before making further Tool calls.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The semantic search term to use.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "search-spaces"
                },
                {
                  "description": "Endpoint tool loaded from Hugging Face Space",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "FLUX.1-schnell"
                },
                {
                  "description": "Endpoint tool loaded from Hugging Face Space",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "shuttleai/shuttle-jaguar"
                },
                {
                  "description": "Endpoint tool loaded from Hugging Face Space",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "styletts2/styletts2"
                },
                {
                  "description": "Endpoint tool loaded from Hugging Face Space",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "Qwen/QVQ-72B-preview"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:10Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "exa-labs": {
      "mcpproviderid": "exa-labs",
      "self": "#/mcpproviders/exa-labs",
      "xid": "/mcpproviders/exa-labs",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:26.323569119Z",
      "modifiedat": "2025-05-26T16:41:26.323569119Z",

      "serversurl": "#/mcpproviders/exa-labs/servers",
      "servers": {
        "exa-mcp-server": {
          "serverid": "exa-mcp-server",
          "self": "#/mcpproviders/exa-labs/servers/exa-mcp-server",
          "xid": "/mcpproviders/exa-labs/servers/exa-mcp-server",

          "metaurl": "#/mcpproviders/exa-labs/servers/exa-mcp-server/meta",
          "meta": {
            "serverid": "exa-mcp-server",
            "self": "#/mcpproviders/exa-labs/servers/exa-mcp-server/meta",
            "xid": "/mcpproviders/exa-labs/servers/exa-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:26.323569119Z",
            "modifiedat": "2025-05-26T16:41:26.323569119Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/exa-labs/servers/exa-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/exa-labs/servers/exa-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "exa-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/exa-labs/servers/exa-mcp-server/versions/1",
              "xid": "/mcpproviders/exa-labs/servers/exa-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.exa-labs/exa-mcp-server",
              "isdefault": true,
              "description": "Claude can perform Web Search | Exa with MCP (Model Context Protocol)",
              "createdat": "2025-05-26T16:41:26.323569119Z",
              "modifiedat": "2025-05-26T16:41:26.323569119Z",
              "ancestor": "1",
              "id": "2a2aa283-57c8-474f-8a27-27954214cb6b",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-api-key-here",
                      "name": "EXA_API_KEY"
                    }
                  ],
                  "name": "exa-mcp-server",
                  "package_arguments": [
                    {
                      "default": "--tools=web_search_exa,research_paper_search,company_research,crawling,competitor_finder,linkedin_search,wikipedia_search_exa,github_search",
                      "description": "Comma-separated list of tools",
                      "format": "string",
                      "is_required": true,
                      "name": "--tools=web_search_exa,research_paper_search,company_research,crawling,competitor_finder,linkedin_search,wikipedia_search_exa,github_search",
                      "type": "named",
                      "value": "--tools=web_search_exa,research_paper_search,company_research,crawling,competitor_finder,linkedin_search,wikipedia_search_exa,github_search",
                      "value_hint": "web_search_exa,research_paper_search,company_research,crawling,competitor_finder,linkedin_search,wikipedia_search_exa,github_search"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "0.3.10"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "895291604",
                "source": "github",
                "url": "https://github.com/exa-labs/exa-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Performs real-time web searches with optimized results and content extraction",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "web_search"
                },
                {
                  "description": "Specialized search focused on academic papers and research content",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "research_paper_search"
                },
                {
                  "description": "Dedicated Twitter/X.com search that finds tweets, profiles, and conversations",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "twitter_search"
                },
                {
                  "description": "Comprehensive company research tool that crawls company websites to gather detailed information about businesses",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "company_research"
                },
                {
                  "description": "Extracts content from specific URLs, useful for reading articles, PDFs, or any web page when you have the exact URL",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "crawling"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:43Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "executeautomation": {
      "mcpproviderid": "executeautomation",
      "self": "#/mcpproviders/executeautomation",
      "xid": "/mcpproviders/executeautomation",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:20.551195519Z",
      "modifiedat": "2025-05-26T16:41:20.551195519Z",

      "serversurl": "#/mcpproviders/executeautomation/servers",
      "servers": {
        "mcp-playwright": {
          "serverid": "mcp-playwright",
          "self": "#/mcpproviders/executeautomation/servers/mcp-playwright",
          "xid": "/mcpproviders/executeautomation/servers/mcp-playwright",

          "metaurl": "#/mcpproviders/executeautomation/servers/mcp-playwright/meta",
          "meta": {
            "serverid": "mcp-playwright",
            "self": "#/mcpproviders/executeautomation/servers/mcp-playwright/meta",
            "xid": "/mcpproviders/executeautomation/servers/mcp-playwright/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:20.551195519Z",
            "modifiedat": "2025-05-26T16:41:20.551195519Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/executeautomation/servers/mcp-playwright/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/executeautomation/servers/mcp-playwright/versions",
          "versions": {
            "1": {
              "serverid": "mcp-playwright",
              "versionid": "1",
              "self": "#/mcpproviders/executeautomation/servers/mcp-playwright/versions/1",
              "xid": "/mcpproviders/executeautomation/servers/mcp-playwright/versions/1",
              "epoch": 1,
              "name": "io.github.executeautomation/mcp-playwright",
              "isdefault": true,
              "description": "Playwright Model Context Protocol Server - Tool to automate Browsers and APIs in Claude Desktop, Cline, Cursor IDE and More 🔌",
              "createdat": "2025-05-26T16:41:20.551195519Z",
              "modifiedat": "2025-05-26T16:41:20.551195519Z",
              "ancestor": "1",
              "id": "328e3069-005e-4179-add1-c13b18db4102",
              "packages": [
                {
                  "name": "@executeautomation/playwright-mcp-server",
                  "registry_name": "npm",
                  "version": "1.0.5"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "898077246",
                "source": "github",
                "url": "https://github.com/executeautomation/mcp-playwright"
              },
              "resources": [
                {
                  "description": "Browser console logs resource",
                  "mimetype": "text/plain",
                  "name": "Browser console logs",
                  "uritemplate": "console://logs"
                },
                {
                  "description": "Screenshots of the browser pages",
                  "mimetype": "image/png",
                  "name": "Screenshot resource",
                  "uritemplate": "screenshot://{name}"
                }
              ],
              "tools": [
                {
                  "description": "Browser automation tools for interaction, screenshots, test code generation, web scraping, and JS execution",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "(from createToolDefinitions)"
                },
                {
                  "name": "(detailed tool definitions not fully extracted)"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:38Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "fastnai": {
      "mcpproviderid": "fastnai",
      "self": "#/mcpproviders/fastnai",
      "xid": "/mcpproviders/fastnai",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:32.280283396Z",
      "modifiedat": "2025-05-26T16:42:32.280283396Z",

      "serversurl": "#/mcpproviders/fastnai/servers",
      "servers": {
        "mcp-fastn": {
          "serverid": "mcp-fastn",
          "self": "#/mcpproviders/fastnai/servers/mcp-fastn",
          "xid": "/mcpproviders/fastnai/servers/mcp-fastn",

          "metaurl": "#/mcpproviders/fastnai/servers/mcp-fastn/meta",
          "meta": {
            "serverid": "mcp-fastn",
            "self": "#/mcpproviders/fastnai/servers/mcp-fastn/meta",
            "xid": "/mcpproviders/fastnai/servers/mcp-fastn/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:32.280283396Z",
            "modifiedat": "2025-05-26T16:42:32.280283396Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/fastnai/servers/mcp-fastn/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/fastnai/servers/mcp-fastn/versions",
          "versions": {
            "1": {
              "serverid": "mcp-fastn",
              "versionid": "1",
              "self": "#/mcpproviders/fastnai/servers/mcp-fastn/versions/1",
              "xid": "/mcpproviders/fastnai/servers/mcp-fastn/versions/1",
              "epoch": 1,
              "name": "io.github.fastnai/mcp-fastn",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:32.280283396Z",
              "modifiedat": "2025-05-26T16:42:32.280283396Z",
              "ancestor": "1",
              "id": "3d7c6822-88bd-4569-a099-1e58b9b365b0",
              "packages": [
                {
                  "name": "fastn",
                  "package_arguments": [
                    {
                      "default": "fastn-server.py",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "fastn-server.py",
                      "value_hint": "fastn-server.py"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "950266465",
                "source": "github",
                "url": "https://github.com/fastnai/mcp-fastn"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:38Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "fatwang2": {
      "mcpproviderid": "fatwang2",
      "self": "#/mcpproviders/fatwang2",
      "xid": "/mcpproviders/fatwang2",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:15.334204563Z",
      "modifiedat": "2025-05-26T16:42:15.334204563Z",

      "serversurl": "#/mcpproviders/fatwang2/servers",
      "servers": {
        "search1api-mcp": {
          "serverid": "search1api-mcp",
          "self": "#/mcpproviders/fatwang2/servers/search1api-mcp",
          "xid": "/mcpproviders/fatwang2/servers/search1api-mcp",

          "metaurl": "#/mcpproviders/fatwang2/servers/search1api-mcp/meta",
          "meta": {
            "serverid": "search1api-mcp",
            "self": "#/mcpproviders/fatwang2/servers/search1api-mcp/meta",
            "xid": "/mcpproviders/fatwang2/servers/search1api-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:15.334204563Z",
            "modifiedat": "2025-05-26T16:42:15.334204563Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/fatwang2/servers/search1api-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/fatwang2/servers/search1api-mcp/versions",
          "versions": {
            "1": {
              "serverid": "search1api-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/fatwang2/servers/search1api-mcp/versions/1",
              "xid": "/mcpproviders/fatwang2/servers/search1api-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.fatwang2/search1api-mcp",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:15.334204563Z",
              "modifiedat": "2025-05-26T16:42:15.334204563Z",
              "ancestor": "1",
              "id": "cb1647e0-2df7-4f2a-b63b-cfaea1e5e98a",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_SEARCH1API_KEY",
                      "name": "SEARCH1API_KEY"
                    }
                  ],
                  "name": "search1api-mcp",
                  "registry_name": "npm",
                  "version": "0.2.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "894382523",
                "source": "github",
                "url": "https://github.com/fatwang2/search1api-mcp"
              },
              "resources": [
                {
                  "description": "Basic information about Search1API capabilities",
                  "mimetype": "application/json",
                  "name": "Search1API Information",
                  "uritemplate": "search1api://info"
                }
              ],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:01:48Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "felores": {
      "mcpproviderid": "felores",
      "self": "#/mcpproviders/felores",
      "xid": "/mcpproviders/felores",
      "epoch": 3,
      "createdat": "2025-05-26T16:42:08.415526392Z",
      "modifiedat": "2025-05-26T16:42:08.769994315Z",

      "serversurl": "#/mcpproviders/felores/servers",
      "servers": {
        "airtable-mcp": {
          "serverid": "airtable-mcp",
          "self": "#/mcpproviders/felores/servers/airtable-mcp",
          "xid": "/mcpproviders/felores/servers/airtable-mcp",

          "metaurl": "#/mcpproviders/felores/servers/airtable-mcp/meta",
          "meta": {
            "serverid": "airtable-mcp",
            "self": "#/mcpproviders/felores/servers/airtable-mcp/meta",
            "xid": "/mcpproviders/felores/servers/airtable-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:08.415526392Z",
            "modifiedat": "2025-05-26T16:42:08.415526392Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/felores/servers/airtable-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/felores/servers/airtable-mcp/versions",
          "versions": {
            "1": {
              "serverid": "airtable-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/felores/servers/airtable-mcp/versions/1",
              "xid": "/mcpproviders/felores/servers/airtable-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.felores/airtable-mcp",
              "isdefault": true,
              "description": "Search, create and update Airtable bases, tables, fields, and records using Claude Desktop and MCP (Model Context Protocol) clients",
              "createdat": "2025-05-26T16:42:08.415526392Z",
              "modifiedat": "2025-05-26T16:42:08.415526392Z",
              "ancestor": "1",
              "id": "04216a87-0760-4f25-b809-42ffbfbb8962",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_api_key_here",
                      "name": "AIRTABLE_API_KEY"
                    }
                  ],
                  "name": "@felores/airtable-mcp-server",
                  "package_arguments": [
                    {
                      "default": "path/to/airtable-mcp/build/index.js",
                      "description": "Positional argument for the package entry point",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "path/to/airtable-mcp/build/index.js",
                      "value_hint": "path/to/airtable-mcp/build/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.3.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "904238387",
                "source": "github",
                "url": "https://github.com/felores/airtable-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List all accessible Airtable bases",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_bases"
                },
                {
                  "description": "List all tables in a base",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id"
                    ],
                    "type": "object"
                  },
                  "name": "list_tables"
                },
                {
                  "description": "Create a new table in a base",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "description": {
                        "description": "Description of the table",
                        "type": "string"
                      },
                      "fields": {
                        "description": "Initial fields for the table",
                        "items": {
                          "properties": {
                            "description": {
                              "description": "Description of the field",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the field",
                              "type": "string"
                            },
                            "options": {
                              "description": "Field-specific options",
                              "type": "object"
                            },
                            "type": {
                              "description": "Type of the field (e.g., singleLineText, multilineText, number, etc.)",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "table_name": {
                        "description": "Name of the new table",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_name"
                    ],
                    "type": "object"
                  },
                  "name": "create_table"
                },
                {
                  "description": "Update a table's schema",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "description": {
                        "description": "New description for the table",
                        "type": "string"
                      },
                      "name": {
                        "description": "New name for the table",
                        "type": "string"
                      },
                      "table_id": {
                        "description": "ID of the table to update",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_id"
                    ],
                    "type": "object"
                  },
                  "name": "update_table"
                },
                {
                  "description": "Create a new field in a table",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "field": {
                        "properties": {
                          "description": {
                            "description": "Description of the field",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the field",
                            "type": "string"
                          },
                          "options": {
                            "description": "Field-specific options",
                            "type": "object"
                          },
                          "type": {
                            "description": "Type of the field",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ],
                        "type": "object"
                      },
                      "table_id": {
                        "description": "ID of the table",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_id",
                      "field"
                    ],
                    "type": "object"
                  },
                  "name": "create_field"
                },
                {
                  "description": "Update a field in a table",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "field_id": {
                        "description": "ID of the field to update",
                        "type": "string"
                      },
                      "table_id": {
                        "description": "ID of the table",
                        "type": "string"
                      },
                      "updates": {
                        "properties": {
                          "description": {
                            "description": "New description for the field",
                            "type": "string"
                          },
                          "name": {
                            "description": "New name for the field",
                            "type": "string"
                          },
                          "options": {
                            "description": "New field-specific options",
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_id",
                      "field_id",
                      "updates"
                    ],
                    "type": "object"
                  },
                  "name": "update_field"
                },
                {
                  "description": "List records in a table",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "max_records": {
                        "description": "Maximum number of records to return",
                        "type": "number"
                      },
                      "table_name": {
                        "description": "Name of the table",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_name"
                    ],
                    "type": "object"
                  },
                  "name": "list_records"
                },
                {
                  "description": "Create a new record in a table",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "fields": {
                        "description": "Record fields as key-value pairs",
                        "type": "object"
                      },
                      "table_name": {
                        "description": "Name of the table",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_name",
                      "fields"
                    ],
                    "type": "object"
                  },
                  "name": "create_record"
                },
                {
                  "description": "Update an existing record in a table",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "fields": {
                        "description": "Record fields to update as key-value pairs",
                        "type": "object"
                      },
                      "record_id": {
                        "description": "ID of the record to update",
                        "type": "string"
                      },
                      "table_name": {
                        "description": "Name of the table",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_name",
                      "record_id",
                      "fields"
                    ],
                    "type": "object"
                  },
                  "name": "update_record"
                },
                {
                  "description": "Delete a record from a table",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "record_id": {
                        "description": "ID of the record to delete",
                        "type": "string"
                      },
                      "table_name": {
                        "description": "Name of the table",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_name",
                      "record_id"
                    ],
                    "type": "object"
                  },
                  "name": "delete_record"
                },
                {
                  "description": "Search for records in a table",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "field_name": {
                        "description": "Name of the field to search in",
                        "type": "string"
                      },
                      "table_name": {
                        "description": "Name of the table",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value to search for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_name",
                      "field_name",
                      "value"
                    ],
                    "type": "object"
                  },
                  "name": "search_records"
                },
                {
                  "description": "Get a single record by its ID",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "record_id": {
                        "description": "ID of the record to retrieve",
                        "type": "string"
                      },
                      "table_name": {
                        "description": "Name of the table",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_name",
                      "record_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_record"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:48Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "cloudinary-mcp-server": {
          "serverid": "cloudinary-mcp-server",
          "self": "#/mcpproviders/felores/servers/cloudinary-mcp-server",
          "xid": "/mcpproviders/felores/servers/cloudinary-mcp-server",

          "metaurl": "#/mcpproviders/felores/servers/cloudinary-mcp-server/meta",
          "meta": {
            "serverid": "cloudinary-mcp-server",
            "self": "#/mcpproviders/felores/servers/cloudinary-mcp-server/meta",
            "xid": "/mcpproviders/felores/servers/cloudinary-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:08.646052382Z",
            "modifiedat": "2025-05-26T16:42:08.646052382Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/felores/servers/cloudinary-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/felores/servers/cloudinary-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "cloudinary-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/felores/servers/cloudinary-mcp-server/versions/1",
              "xid": "/mcpproviders/felores/servers/cloudinary-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.felores/cloudinary-mcp-server",
              "isdefault": true,
              "description": "MCP (Model Context Protocol) server for uploading media to Cloudinary using Claude Desktop",
              "createdat": "2025-05-26T16:42:08.646052382Z",
              "modifiedat": "2025-05-26T16:42:08.646052382Z",
              "ancestor": "1",
              "id": "7baddfbe-3618-41d8-befe-40fc2aabcd8e",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_cloud_name",
                      "name": "CLOUDINARY_CLOUD_NAME"
                    },
                    {
                      "description": "your_api_key",
                      "name": "CLOUDINARY_API_KEY"
                    },
                    {
                      "description": "your_api_secret",
                      "name": "CLOUDINARY_API_SECRET"
                    }
                  ],
                  "name": "@felores/cloudinary-mcp-server",
                  "package_arguments": [
                    {
                      "default": "c:/path/to/cloudinary-mcp-server/dist/index.js",
                      "description": "Path to the package entrypoint",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "c:/path/to/cloudinary-mcp-server/dist/index.js",
                      "value_hint": "c:/path/to/cloudinary-mcp-server/dist/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.1.3"
                }
              ],
              "repository": {
                "id": "913564273",
                "source": "github",
                "url": "https://github.com/felores/cloudinary-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:32Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "placid-mcp-server": {
          "serverid": "placid-mcp-server",
          "self": "#/mcpproviders/felores/servers/placid-mcp-server",
          "xid": "/mcpproviders/felores/servers/placid-mcp-server",

          "metaurl": "#/mcpproviders/felores/servers/placid-mcp-server/meta",
          "meta": {
            "serverid": "placid-mcp-server",
            "self": "#/mcpproviders/felores/servers/placid-mcp-server/meta",
            "xid": "/mcpproviders/felores/servers/placid-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:08.769994315Z",
            "modifiedat": "2025-05-26T16:42:08.769994315Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/felores/servers/placid-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/felores/servers/placid-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "placid-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/felores/servers/placid-mcp-server/versions/1",
              "xid": "/mcpproviders/felores/servers/placid-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.felores/placid-mcp-server",
              "isdefault": true,
              "description": "Generate image and video creatives using Placid.app templates in MCP compatible hosts",
              "createdat": "2025-05-26T16:42:08.769994315Z",
              "modifiedat": "2025-05-26T16:42:08.769994315Z",
              "ancestor": "1",
              "id": "cfe44c73-8b61-48c9-9d7f-b28e98d23b5b",
              "packages": [
                {
                  "name": "@felores/placid-mcp-server",
                  "registry_name": "unknown",
                  "version": "1.7.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "915853970",
                "source": "github",
                "url": "https://github.com/felores/placid-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Lists available Placid templates with filtering options. Each template includes its title, ID, preview image URL, available layers, and tags.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "placid_list_templates"
                },
                {
                  "description": "Generate videos by combining Placid templates with dynamic content like videos, images, and text.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "placid_generate_video"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:34Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 3
    },
    "ferrislucas": {
      "mcpproviderid": "ferrislucas",
      "self": "#/mcpproviders/ferrislucas",
      "xid": "/mcpproviders/ferrislucas",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:21.011080867Z",
      "modifiedat": "2025-05-26T16:41:21.011080867Z",

      "serversurl": "#/mcpproviders/ferrislucas/servers",
      "servers": {
        "iterm-mcp": {
          "serverid": "iterm-mcp",
          "self": "#/mcpproviders/ferrislucas/servers/iterm-mcp",
          "xid": "/mcpproviders/ferrislucas/servers/iterm-mcp",

          "metaurl": "#/mcpproviders/ferrislucas/servers/iterm-mcp/meta",
          "meta": {
            "serverid": "iterm-mcp",
            "self": "#/mcpproviders/ferrislucas/servers/iterm-mcp/meta",
            "xid": "/mcpproviders/ferrislucas/servers/iterm-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:21.011080867Z",
            "modifiedat": "2025-05-26T16:41:21.011080867Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ferrislucas/servers/iterm-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ferrislucas/servers/iterm-mcp/versions",
          "versions": {
            "1": {
              "serverid": "iterm-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ferrislucas/servers/iterm-mcp/versions/1",
              "xid": "/mcpproviders/ferrislucas/servers/iterm-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ferrislucas/iterm-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol server that executes commands in the current iTerm session - useful for REPL and CLI assistance",
              "createdat": "2025-05-26T16:41:21.011080867Z",
              "modifiedat": "2025-05-26T16:41:21.011080867Z",
              "ancestor": "1",
              "id": "dcac9b0e-b18c-4570-947c-7a6d351b02df",
              "packages": [
                {
                  "name": "iterm-mcp",
                  "registry_name": "npm",
                  "version": "1.2.5"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "914173426",
                "source": "github",
                "url": "https://github.com/ferrislucas/iterm-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Writes text to the active iTerm terminal - often used to run a command in the terminal",
                  "inputschema": {
                    "properties": {
                      "command": {
                        "description": "The command to run or text to write to the terminal",
                        "type": "string"
                      }
                    },
                    "required": [
                      "command"
                    ],
                    "type": "object"
                  },
                  "name": "write_to_terminal"
                },
                {
                  "description": "Reads the output from the active iTerm terminal",
                  "inputschema": {
                    "properties": {
                      "linesOfOutput": {
                        "description": "The number of lines of output to read.",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "linesOfOutput"
                    ],
                    "type": "object"
                  },
                  "name": "read_terminal_output"
                },
                {
                  "description": "Sends a control character to the active iTerm terminal (e.g., Control-C, or special sequences like ']' for telnet escape)",
                  "inputschema": {
                    "properties": {
                      "letter": {
                        "description": "The letter corresponding to the control character (e.g., 'C' for Control-C, ']' for telnet escape)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "letter"
                    ],
                    "type": "object"
                  },
                  "name": "send_control_character"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:32Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "financial-datasets": {
      "mcpproviderid": "financial-datasets",
      "self": "#/mcpproviders/financial-datasets",
      "xid": "/mcpproviders/financial-datasets",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:33.099811459Z",
      "modifiedat": "2025-05-26T16:41:33.099811459Z",

      "serversurl": "#/mcpproviders/financial-datasets/servers",
      "servers": {
        "mcp-server": {
          "serverid": "mcp-server",
          "self": "#/mcpproviders/financial-datasets/servers/mcp-server",
          "xid": "/mcpproviders/financial-datasets/servers/mcp-server",

          "metaurl": "#/mcpproviders/financial-datasets/servers/mcp-server/meta",
          "meta": {
            "serverid": "mcp-server",
            "self": "#/mcpproviders/financial-datasets/servers/mcp-server/meta",
            "xid": "/mcpproviders/financial-datasets/servers/mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:33.099811459Z",
            "modifiedat": "2025-05-26T16:41:33.099811459Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/financial-datasets/servers/mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/financial-datasets/servers/mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/financial-datasets/servers/mcp-server/versions/1",
              "xid": "/mcpproviders/financial-datasets/servers/mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.financial-datasets/mcp-server",
              "isdefault": true,
              "description": "An MCP server for interacting with the Financial Datasets stock market API.",
              "createdat": "2025-05-26T16:41:33.099811459Z",
              "modifiedat": "2025-05-26T16:41:33.099811459Z",
              "ancestor": "1",
              "id": "2d870a4e-d521-4d66-a471-abce884ea07b",
              "packages": [
                {
                  "name": "mcp-server",
                  "package_arguments": [
                    {
                      "default": "server.py",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "server.py",
                      "value_hint": "server.py"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "944516885",
                "source": "github",
                "url": "https://github.com/financial-datasets/mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get income statements for a company.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "integer"
                      },
                      "period": {
                        "type": "string"
                      },
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker"
                    ],
                    "type": "object"
                  },
                  "name": "get_income_statements"
                },
                {
                  "description": "Get balance sheets for a company.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "integer"
                      },
                      "period": {
                        "type": "string"
                      },
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker"
                    ],
                    "type": "object"
                  },
                  "name": "get_balance_sheets"
                },
                {
                  "description": "Get cash flow statements for a company.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "integer"
                      },
                      "period": {
                        "type": "string"
                      },
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker"
                    ],
                    "type": "object"
                  },
                  "name": "get_cash_flow_statements"
                },
                {
                  "description": "Get the current / latest price of a company.",
                  "inputschema": {
                    "properties": {
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker"
                    ],
                    "type": "object"
                  },
                  "name": "get_current_stock_price"
                },
                {
                  "description": "Gets historical stock prices for a company.",
                  "inputschema": {
                    "properties": {
                      "end_date": {
                        "type": "string"
                      },
                      "interval": {
                        "type": "string"
                      },
                      "interval_multiplier": {
                        "type": "integer"
                      },
                      "start_date": {
                        "type": "string"
                      },
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker",
                      "start_date",
                      "end_date"
                    ],
                    "type": "object"
                  },
                  "name": "get_historical_stock_prices"
                },
                {
                  "description": "Get news for a company.",
                  "inputschema": {
                    "properties": {
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker"
                    ],
                    "type": "object"
                  },
                  "name": "get_company_news"
                },
                {
                  "description": "Gets all available crypto tickers.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_available_crypto_tickers"
                },
                {
                  "description": "Gets historical prices for a crypto currency.",
                  "inputschema": {
                    "properties": {
                      "end_date": {
                        "type": "string"
                      },
                      "interval": {
                        "type": "string"
                      },
                      "interval_multiplier": {
                        "type": "integer"
                      },
                      "start_date": {
                        "type": "string"
                      },
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker",
                      "start_date",
                      "end_date"
                    ],
                    "type": "object"
                  },
                  "name": "get_crypto_prices"
                },
                {
                  "description": "Gets historical prices for a crypto currency.",
                  "inputschema": {
                    "properties": {
                      "end_date": {
                        "type": "string"
                      },
                      "interval": {
                        "type": "string"
                      },
                      "interval_multiplier": {
                        "type": "integer"
                      },
                      "start_date": {
                        "type": "string"
                      },
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker",
                      "start_date",
                      "end_date"
                    ],
                    "type": "object"
                  },
                  "name": "get_historical_crypto_prices"
                },
                {
                  "description": "Get the current / latest price of a crypto currency.",
                  "inputschema": {
                    "properties": {
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker"
                    ],
                    "type": "object"
                  },
                  "name": "get_current_crypto_price"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:53Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "fireproof-storage": {
      "mcpproviderid": "fireproof-storage",
      "self": "#/mcpproviders/fireproof-storage",
      "xid": "/mcpproviders/fireproof-storage",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:28.193160734Z",
      "modifiedat": "2025-05-26T16:41:28.193160734Z",

      "serversurl": "#/mcpproviders/fireproof-storage/servers",
      "servers": {
        "mcp-database-server": {
          "serverid": "mcp-database-server",
          "self": "#/mcpproviders/fireproof-storage/servers/mcp-database-server",
          "xid": "/mcpproviders/fireproof-storage/servers/mcp-database-server",

          "metaurl": "#/mcpproviders/fireproof-storage/servers/mcp-database-server/meta",
          "meta": {
            "serverid": "mcp-database-server",
            "self": "#/mcpproviders/fireproof-storage/servers/mcp-database-server/meta",
            "xid": "/mcpproviders/fireproof-storage/servers/mcp-database-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:28.193160734Z",
            "modifiedat": "2025-05-26T16:41:28.193160734Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/fireproof-storage/servers/mcp-database-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/fireproof-storage/servers/mcp-database-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-database-server",
              "versionid": "1",
              "self": "#/mcpproviders/fireproof-storage/servers/mcp-database-server/versions/1",
              "xid": "/mcpproviders/fireproof-storage/servers/mcp-database-server/versions/1",
              "epoch": 1,
              "name": "io.github.fireproof-storage/mcp-database-server",
              "isdefault": true,
              "description": "Store and load JSON documents from LLM tool use",
              "createdat": "2025-05-26T16:41:28.193160734Z",
              "modifiedat": "2025-05-26T16:41:28.193160734Z",
              "ancestor": "1",
              "id": "0bee6074-d16a-4482-a315-5b8f0f1abcf1",
              "packages": [
                {
                  "name": "todos",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "904432283",
                "source": "github",
                "url": "https://github.com/fireproof-storage/mcp-database-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Save a JSON document",
                  "inputschema": {
                    "properties": {
                      "doc": {
                        "description": "JSON document to save",
                        "type": "object"
                      }
                    },
                    "required": [
                      "doc"
                    ],
                    "type": "object"
                  },
                  "name": "save_json_doc"
                },
                {
                  "description": "Load a JSON document by ID",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "ID of document to load",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "load_json_doc"
                },
                {
                  "description": "Delete a JSON document by ID",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "ID of document to delete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "delete_json_doc"
                },
                {
                  "description": "Query JSON documents sorted by a field",
                  "inputschema": {
                    "properties": {
                      "sort_field": {
                        "description": "Field to sort results by",
                        "type": "string"
                      }
                    },
                    "required": [
                      "sort_field"
                    ],
                    "type": "object"
                  },
                  "name": "query_json_docs"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:57Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "furey": {
      "mcpproviderid": "furey",
      "self": "#/mcpproviders/furey",
      "xid": "/mcpproviders/furey",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:36.054797633Z",
      "modifiedat": "2025-05-26T16:41:36.054797633Z",

      "serversurl": "#/mcpproviders/furey/servers",
      "servers": {
        "mongodb-lens": {
          "serverid": "mongodb-lens",
          "self": "#/mcpproviders/furey/servers/mongodb-lens",
          "xid": "/mcpproviders/furey/servers/mongodb-lens",

          "metaurl": "#/mcpproviders/furey/servers/mongodb-lens/meta",
          "meta": {
            "serverid": "mongodb-lens",
            "self": "#/mcpproviders/furey/servers/mongodb-lens/meta",
            "xid": "/mcpproviders/furey/servers/mongodb-lens/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:36.054797633Z",
            "modifiedat": "2025-05-26T16:41:36.054797633Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/furey/servers/mongodb-lens/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/furey/servers/mongodb-lens/versions",
          "versions": {
            "1": {
              "serverid": "mongodb-lens",
              "versionid": "1",
              "self": "#/mcpproviders/furey/servers/mongodb-lens/versions/1",
              "xid": "/mcpproviders/furey/servers/mongodb-lens/versions/1",
              "epoch": 1,
              "name": "io.github.furey/mongodb-lens",
              "isdefault": true,
              "description": "🍃🔎 MongoDB Lens: Full Featured MCP Server for MongoDB Databases",
              "createdat": "2025-05-26T16:41:36.054797633Z",
              "modifiedat": "2025-05-26T16:41:36.054797633Z",
              "ancestor": "1",
              "id": "b4970e5b-1259-4ff9-a40a-c570f27d0930",
              "packages": [
                {
                  "name": "mongodb-lens",
                  "registry_name": "unknown",
                  "version": "9.1.4"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "945309383",
                "source": "github",
                "url": "https://github.com/furey/mongodb-lens"
              },
              "resources": [
                {
                  "description": "List of all accessible MongoDB databases",
                  "name": "databases",
                  "uritemplate": "mongodb://databases"
                },
                {
                  "description": "MongoDB database users and roles",
                  "name": "database-users",
                  "uritemplate": "mongodb://database/users"
                },
                {
                  "description": "Database change streams and event triggers configuration",
                  "name": "database-triggers",
                  "uritemplate": "mongodb://database/triggers"
                },
                {
                  "description": "MongoDB stored JavaScript functions",
                  "name": "stored-functions",
                  "uritemplate": "mongodb://database/functions"
                },
                {
                  "description": "List of collections in the current database",
                  "name": "collections",
                  "uritemplate": "mongodb://collections"
                },
                {
                  "description": "Index information for a MongoDB collection",
                  "name": "collection-indexes",
                  "uritemplate": "mongodb://collection/{name}/indexes"
                },
                {
                  "description": "Schema information for a MongoDB collection",
                  "name": "collection-schema",
                  "uritemplate": "mongodb://collection/{name}/schema"
                },
                {
                  "description": "Performance statistics for a MongoDB collection",
                  "name": "collection-stats",
                  "uritemplate": "mongodb://collection/{name}/stats"
                },
                {
                  "description": "Validation rules for a MongoDB collection",
                  "name": "collection-validation",
                  "uritemplate": "mongodb://collection/{name}/validation"
                },
                {
                  "description": "MongoDB server status information",
                  "name": "server-status",
                  "uritemplate": "mongodb://server/status"
                },
                {
                  "description": "MongoDB replica set status and configuration",
                  "name": "replica-status",
                  "uritemplate": "mongodb://server/replica"
                },
                {
                  "description": "Real-time MongoDB performance metrics and profiling data",
                  "name": "performance-metrics",
                  "uritemplate": "mongodb://server/metrics"
                }
              ],
              "tools": [
                {
                  "description": "Connect to a different MongoDB URI or alias",
                  "inputschema": {
                    "properties": {
                      "uri": {
                        "type": "string"
                      },
                      "validateConnection": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "uri",
                      "validateConnection"
                    ],
                    "type": "object"
                  },
                  "name": "connect-mongodb"
                },
                {
                  "description": "Connect back to the original MongoDB URI used at startup",
                  "inputschema": {
                    "properties": {
                      "validateConnection": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "validateConnection"
                    ],
                    "type": "object"
                  },
                  "name": "connect-original"
                },
                {
                  "description": "Add a new MongoDB connection alias",
                  "inputschema": {
                    "properties": {
                      "alias": {
                        "type": "string"
                      },
                      "uri": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "alias",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "name": "add-connection-alias"
                },
                {
                  "description": "List all configured MongoDB connection aliases",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list-connections"
                },
                {
                  "description": "List all accessible MongoDB databases",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list-databases"
                },
                {
                  "description": "Get the name of the current database",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "current-database"
                },
                {
                  "description": "Create a new MongoDB database with option to switch",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "switch": {
                        "type": "string"
                      },
                      "validateName": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "switch",
                      "validateName"
                    ],
                    "type": "object"
                  },
                  "name": "create-database"
                },
                {
                  "description": "Switch to a specific database",
                  "inputschema": {
                    "properties": {
                      "database": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "database"
                    ],
                    "type": "object"
                  },
                  "name": "use-database"
                },
                {
                  "description": "Drop a database (requires confirmation)",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "drop-database"
                },
                {
                  "description": "Create a new database user",
                  "inputschema": {
                    "properties": {
                      "password": {
                        "type": "string"
                      },
                      "roles": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "username",
                      "password",
                      "roles"
                    ],
                    "type": "object"
                  },
                  "name": "create-user"
                },
                {
                  "description": "Drop an existing database user",
                  "inputschema": {
                    "properties": {
                      "token": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "username"
                    ],
                    "type": "object"
                  },
                  "name": "drop-user"
                },
                {
                  "description": "List collections in the current database",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list-collections"
                },
                {
                  "description": "Create a new collection with options",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "options": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "options"
                    ],
                    "type": "object"
                  },
                  "name": "create-collection"
                },
                {
                  "description": "Drop a collection (requires confirmation)",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "drop-collection"
                },
                {
                  "description": "Rename an existing collection",
                  "inputschema": {
                    "properties": {
                      "dropTarget": {
                        "type": "string"
                      },
                      "newName": {
                        "type": "string"
                      },
                      "oldName": {
                        "type": "string"
                      },
                      "token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "oldName",
                      "newName",
                      "dropTarget"
                    ],
                    "type": "object"
                  },
                  "name": "rename-collection"
                },
                {
                  "description": "Run validation on a collection to check for inconsistencies",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "full": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "full"
                    ],
                    "type": "object"
                  },
                  "name": "validate-collection"
                },
                {
                  "description": "Get unique values for a field",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "field": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "field",
                      "filter"
                    ],
                    "type": "object"
                  },
                  "name": "distinct-values"
                },
                {
                  "description": "Run queries with filters and projections",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "projection": {
                        "type": "string"
                      },
                      "skip": {
                        "type": "integer"
                      },
                      "sort": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "filter",
                      "limit",
                      "skip"
                    ],
                    "type": "object"
                  },
                  "name": "find-documents"
                },
                {
                  "description": "Count documents with optional filter",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "filter"
                    ],
                    "type": "object"
                  },
                  "name": "count-documents"
                },
                {
                  "description": "Insert one or multiple documents into a collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "document": {
                        "type": "string"
                      },
                      "options": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "document"
                    ],
                    "type": "object"
                  },
                  "name": "insert-document"
                },
                {
                  "description": "Update specific documents in a collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      },
                      "options": {
                        "type": "string"
                      },
                      "update": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "filter",
                      "update"
                    ],
                    "type": "object"
                  },
                  "name": "update-document"
                },
                {
                  "description": "Delete document(s) (requires confirmation)",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      },
                      "many": {
                        "type": "string"
                      },
                      "token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "filter",
                      "many"
                    ],
                    "type": "object"
                  },
                  "name": "delete-document"
                },
                {
                  "description": "Run aggregation pipelines",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "pipeline": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "pipeline",
                      "limit"
                    ],
                    "type": "object"
                  },
                  "name": "aggregate-data"
                },
                {
                  "description": "Create new index on collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "keys": {
                        "type": "string"
                      },
                      "options": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "keys"
                    ],
                    "type": "object"
                  },
                  "name": "create-index"
                },
                {
                  "description": "Drop an existing index from a collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "indexName": {
                        "type": "string"
                      },
                      "token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "indexName"
                    ],
                    "type": "object"
                  },
                  "name": "drop-index"
                },
                {
                  "description": "Get database or collection statistics",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "target": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "target"
                    ],
                    "type": "object"
                  },
                  "name": "get-stats"
                },
                {
                  "description": "Automatically infer schema from collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "sampleSize": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "collection",
                      "sampleSize"
                    ],
                    "type": "object"
                  },
                  "name": "analyze-schema"
                },
                {
                  "description": "Generate a JSON Schema validator for a collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "strictness": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "strictness"
                    ],
                    "type": "object"
                  },
                  "name": "generate-schema-validator"
                },
                {
                  "description": "Compare schemas between two collections",
                  "inputschema": {
                    "properties": {
                      "sampleSize": {
                        "type": "integer"
                      },
                      "sourceCollection": {
                        "type": "string"
                      },
                      "targetCollection": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "sourceCollection",
                      "targetCollection",
                      "sampleSize"
                    ],
                    "type": "object"
                  },
                  "name": "compare-schemas"
                },
                {
                  "description": "Analyze query performance",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      },
                      "verbosity": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "filter",
                      "verbosity"
                    ],
                    "type": "object"
                  },
                  "name": "explain-query"
                },
                {
                  "description": "Analyze query patterns and suggest optimizations",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "duration": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "collection",
                      "duration"
                    ],
                    "type": "object"
                  },
                  "name": "analyze-query-patterns"
                },
                {
                  "description": "Perform bulk inserts, updates, or deletes",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "operations": {
                        "type": "string"
                      },
                      "ordered": {
                        "type": "string"
                      },
                      "token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "operations",
                      "ordered"
                    ],
                    "type": "object"
                  },
                  "name": "bulk-operations"
                },
                {
                  "description": "Create a time series collection for temporal data",
                  "inputschema": {
                    "properties": {
                      "expireAfterSeconds": {
                        "type": "integer"
                      },
                      "granularity": {
                        "type": "string"
                      },
                      "metaField": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "timeField": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "timeField",
                      "granularity"
                    ],
                    "type": "object"
                  },
                  "name": "create-timeseries"
                },
                {
                  "description": "Find documents with language-specific collation rules",
                  "inputschema": {
                    "properties": {
                      "caseLevel": {
                        "type": "string"
                      },
                      "collection": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      },
                      "locale": {
                        "type": "string"
                      },
                      "sort": {
                        "type": "string"
                      },
                      "strength": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "collection",
                      "filter",
                      "locale",
                      "strength",
                      "caseLevel"
                    ],
                    "type": "object"
                  },
                  "name": "collation-query"
                },
                {
                  "description": "Perform full-text search across text-indexed fields",
                  "inputschema": {
                    "properties": {
                      "caseSensitive": {
                        "type": "string"
                      },
                      "collection": {
                        "type": "string"
                      },
                      "diacriticSensitive": {
                        "type": "string"
                      },
                      "language": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "searchText": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "searchText",
                      "limit"
                    ],
                    "type": "object"
                  },
                  "name": "text-search"
                },
                {
                  "description": "Run geospatial queries with various operators",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "field": {
                        "type": "string"
                      },
                      "geometry": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "maxDistance": {
                        "type": "integer"
                      },
                      "operator": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "operator",
                      "field",
                      "geometry",
                      "limit"
                    ],
                    "type": "object"
                  },
                  "name": "geo-query"
                },
                {
                  "description": "Execute multiple operations in a single transaction",
                  "inputschema": {
                    "properties": {
                      "operations": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "operations"
                    ],
                    "type": "object"
                  },
                  "name": "transaction"
                },
                {
                  "description": "Watch for changes in a collection using change streams",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "duration": {
                        "type": "integer"
                      },
                      "fullDocument": {
                        "type": "string"
                      },
                      "operations": {
                        "type": "array"
                      }
                    },
                    "required": [
                      "collection",
                      "operations",
                      "duration",
                      "fullDocument"
                    ],
                    "type": "object"
                  },
                  "name": "watch-changes"
                },
                {
                  "description": "Manage large files with GridFS",
                  "inputschema": {
                    "properties": {
                      "bucket": {
                        "type": "string"
                      },
                      "filename": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "operation": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "operation",
                      "bucket",
                      "limit"
                    ],
                    "type": "object"
                  },
                  "name": "gridfs-operation"
                },
                {
                  "description": "Clear memory caches to ensure fresh data",
                  "inputschema": {
                    "properties": {
                      "target": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "target"
                    ],
                    "type": "object"
                  },
                  "name": "clear-cache"
                },
                {
                  "description": "Get sharding status for database or collections",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "target": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "target"
                    ],
                    "type": "object"
                  },
                  "name": "shard-status"
                },
                {
                  "description": "Export query results to formatted JSON or CSV",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "fields": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      },
                      "format": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "sort": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "filter",
                      "format",
                      "limit"
                    ],
                    "type": "object"
                  },
                  "name": "export-data"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:40Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "gannonh": {
      "mcpproviderid": "gannonh",
      "self": "#/mcpproviders/gannonh",
      "xid": "/mcpproviders/gannonh",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:41.620375724Z",
      "modifiedat": "2025-05-26T16:41:41.620375724Z",

      "serversurl": "#/mcpproviders/gannonh/servers",
      "servers": {
        "firebase-mcp": {
          "serverid": "firebase-mcp",
          "self": "#/mcpproviders/gannonh/servers/firebase-mcp",
          "xid": "/mcpproviders/gannonh/servers/firebase-mcp",

          "metaurl": "#/mcpproviders/gannonh/servers/firebase-mcp/meta",
          "meta": {
            "serverid": "firebase-mcp",
            "self": "#/mcpproviders/gannonh/servers/firebase-mcp/meta",
            "xid": "/mcpproviders/gannonh/servers/firebase-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:41.620375724Z",
            "modifiedat": "2025-05-26T16:41:41.620375724Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/gannonh/servers/firebase-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/gannonh/servers/firebase-mcp/versions",
          "versions": {
            "1": {
              "serverid": "firebase-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/gannonh/servers/firebase-mcp/versions/1",
              "xid": "/mcpproviders/gannonh/servers/firebase-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.gannonh/firebase-mcp",
              "isdefault": true,
              "description": "🔥 Model Context Protocol (MCP) server for Firebase.",
              "createdat": "2025-05-26T16:41:41.620375724Z",
              "modifiedat": "2025-05-26T16:41:41.620375724Z",
              "ancestor": "1",
              "id": "d7a1d303-082e-477d-8ab5-9d65dc0117d9",
              "packages": [
                {
                  "name": "@gannonh/firebase-mcp",
                  "registry_name": "unknown",
                  "version": "1.4.9"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "945181573",
                "source": "github",
                "url": "https://github.com/gannonh/firebase-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Add a document to a Firestore collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Collection name",
                        "type": "string"
                      },
                      "data": {
                        "description": "Document data",
                        "type": "object"
                      }
                    },
                    "required": [
                      "collection",
                      "data"
                    ],
                    "type": "object"
                  },
                  "name": "firestore_add_document"
                },
                {
                  "description": "List documents from a Firestore collection with filtering and ordering",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Collection name",
                        "type": "string"
                      },
                      "filters": {
                        "description": "Array of filter conditions",
                        "items": {
                          "properties": {
                            "field": {
                              "description": "Field name to filter",
                              "type": "string"
                            },
                            "operator": {
                              "description": "Comparison operator (==, \u003e, \u003c, \u003e=, \u003c=, array-contains, in, array-contains-any)",
                              "type": "string"
                            },
                            "value": {
                              "description": "Value to compare against (use ISO format for dates)",
                              "type": "string"
                            }
                          },
                          "required": [
                            "field",
                            "operator",
                            "value"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "limit": {
                        "default": 20,
                        "description": "Number of documents to return",
                        "type": "number"
                      },
                      "orderBy": {
                        "description": "Array of fields to order by",
                        "items": {
                          "properties": {
                            "direction": {
                              "default": "asc",
                              "description": "Sort direction (asc or desc)",
                              "enum": [
                                "asc",
                                "desc"
                              ],
                              "type": "string"
                            },
                            "field": {
                              "description": "Field name to order by",
                              "type": "string"
                            }
                          },
                          "required": [
                            "field"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "pageToken": {
                        "description": "Token for pagination to get the next page of results",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection"
                    ],
                    "type": "object"
                  },
                  "name": "firestore_list_documents"
                },
                {
                  "description": "Get a document from a Firestore collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Collection name",
                        "type": "string"
                      },
                      "id": {
                        "description": "Document ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "firestore_get_document"
                },
                {
                  "description": "Update a document in a Firestore collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Collection name",
                        "type": "string"
                      },
                      "data": {
                        "description": "Updated document data",
                        "type": "object"
                      },
                      "id": {
                        "description": "Document ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "id",
                      "data"
                    ],
                    "type": "object"
                  },
                  "name": "firestore_update_document"
                },
                {
                  "description": "Delete a document from a Firestore collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Collection name",
                        "type": "string"
                      },
                      "id": {
                        "description": "Document ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "firestore_delete_document"
                },
                {
                  "description": "Get a user by ID or email from Firebase Authentication",
                  "inputschema": {
                    "properties": {
                      "identifier": {
                        "description": "User ID or email address",
                        "type": "string"
                      }
                    },
                    "required": [
                      "identifier"
                    ],
                    "type": "object"
                  },
                  "name": "auth_get_user"
                },
                {
                  "description": "List files in a given path in Firebase Storage",
                  "inputschema": {
                    "properties": {
                      "directoryPath": {
                        "description": "The optional path to list files from. If not provided, the root is used.",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "storage_list_files"
                },
                {
                  "description": "Get file information including metadata and download URL",
                  "inputschema": {
                    "properties": {
                      "filePath": {
                        "description": "The path of the file to get information for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "filePath"
                    ],
                    "type": "object"
                  },
                  "name": "storage_get_file_info"
                },
                {
                  "description": "Upload a file to Firebase Storage. Supports local file paths (preferred for binary files), base64 data, or plain text.",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "Can be: 1) A local file path (e.g., \"/path/to/file.pdf\") - RECOMMENDED for all file types, especially binary files like PDFs and images, 2) A data URL (e.g., \"data:image/png;base64,...\") - may have issues with large files, or 3) Plain text content. Note: Document references are not directly accessible - always use the actual file path instead.",
                        "type": "string"
                      },
                      "contentType": {
                        "description": "Optional MIME type. If not provided, it will be automatically detected",
                        "type": "string"
                      },
                      "filePath": {
                        "description": "The destination path in Firebase Storage (e.g., \"images/logo.png\"). If necessary, rename files for optimal URL compatibility (e.g., \"my-document.pdf\" rather than \"My Document.pdf\").",
                        "type": "string"
                      },
                      "metadata": {
                        "description": "Optional additional metadata",
                        "type": "object"
                      }
                    },
                    "required": [
                      "filePath",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "storage_upload"
                },
                {
                  "description": "Upload a file to Firebase Storage from an external URL. Perfect for images, documents, or any file accessible via URL.",
                  "inputschema": {
                    "properties": {
                      "contentType": {
                        "description": "Optional MIME type. If not provided, it will be automatically detected from the URL or response headers",
                        "type": "string"
                      },
                      "filePath": {
                        "description": "The destination path in Firebase Storage (e.g., \"images/photo.jpg\"). If necessary, rename files for optimal URL compatibility (e.g., \"my-document.pdf\" rather than \"My Document.pdf\").",
                        "type": "string"
                      },
                      "metadata": {
                        "description": "Optional additional metadata",
                        "type": "object"
                      },
                      "url": {
                        "description": "The source URL to download from (e.g., \"https://example.com/image.jpg\"). For GitHub files, use the raw URL (add ?raw=true)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "filePath",
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "storage_upload_from_url"
                },
                {
                  "description": "List root collections in Firestore",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "firestore_list_collections"
                },
                {
                  "description": "Query documents across all subcollections with the same name (collection group query)",
                  "inputschema": {
                    "properties": {
                      "collectionId": {
                        "description": "The collection ID to query across all documents (without parent path)",
                        "type": "string"
                      },
                      "filters": {
                        "description": "Optional filters to apply to the query",
                        "items": {
                          "properties": {
                            "field": {
                              "description": "Field name to filter",
                              "type": "string"
                            },
                            "operator": {
                              "description": "Comparison operator (==, !=, \u003c, \u003c=, \u003e, \u003e=, array-contains, array-contains-any, in, not-in)",
                              "type": "string"
                            },
                            "value": {
                              "description": "Value to compare against",
                              "type": "string"
                            }
                          },
                          "required": [
                            "field",
                            "operator",
                            "value"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "limit": {
                        "description": "Maximum number of documents to return (default: 20, max: 100)",
                        "type": "number"
                      },
                      "orderBy": {
                        "description": "Optional fields to order results by",
                        "items": {
                          "properties": {
                            "direction": {
                              "default": "asc",
                              "description": "Sort direction (asc or desc)",
                              "enum": [
                                "asc",
                                "desc"
                              ],
                              "type": "string"
                            },
                            "field": {
                              "description": "Field name to order by",
                              "type": "string"
                            }
                          },
                          "required": [
                            "field"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "pageToken": {
                        "description": "Token for pagination (document path to start after)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collectionId"
                    ],
                    "type": "object"
                  },
                  "name": "firestore_query_collection_group"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:49Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "geropl": {
      "mcpproviderid": "geropl",
      "self": "#/mcpproviders/geropl",
      "xid": "/mcpproviders/geropl",
      "epoch": 2,
      "createdat": "2025-05-26T16:42:32.949566629Z",
      "modifiedat": "2025-05-26T16:42:33.079453561Z",

      "serversurl": "#/mcpproviders/geropl/servers",
      "servers": {
        "git-mcp-go": {
          "serverid": "git-mcp-go",
          "self": "#/mcpproviders/geropl/servers/git-mcp-go",
          "xid": "/mcpproviders/geropl/servers/git-mcp-go",

          "metaurl": "#/mcpproviders/geropl/servers/git-mcp-go/meta",
          "meta": {
            "serverid": "git-mcp-go",
            "self": "#/mcpproviders/geropl/servers/git-mcp-go/meta",
            "xid": "/mcpproviders/geropl/servers/git-mcp-go/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:32.949566629Z",
            "modifiedat": "2025-05-26T16:42:32.949566629Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/geropl/servers/git-mcp-go/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/geropl/servers/git-mcp-go/versions",
          "versions": {
            "1": {
              "serverid": "git-mcp-go",
              "versionid": "1",
              "self": "#/mcpproviders/geropl/servers/git-mcp-go/versions/1",
              "xid": "/mcpproviders/geropl/servers/git-mcp-go/versions/1",
              "epoch": 1,
              "name": "io.github.geropl/git-mcp-go",
              "isdefault": true,
              "description": "Git MCP based on mcp-go",
              "createdat": "2025-05-26T16:42:32.949566629Z",
              "modifiedat": "2025-05-26T16:42:32.949566629Z",
              "ancestor": "1",
              "id": "6026be39-cc97-4ace-b557-a97aeddbbd60",
              "packages": [
                {
                  "name": "geropl/git-mcp-go",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "940039420",
                "source": "github",
                "url": "https://github.com/geropl/git-mcp-go"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:01Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "linear-mcp-go": {
          "serverid": "linear-mcp-go",
          "self": "#/mcpproviders/geropl/servers/linear-mcp-go",
          "xid": "/mcpproviders/geropl/servers/linear-mcp-go",

          "metaurl": "#/mcpproviders/geropl/servers/linear-mcp-go/meta",
          "meta": {
            "serverid": "linear-mcp-go",
            "self": "#/mcpproviders/geropl/servers/linear-mcp-go/meta",
            "xid": "/mcpproviders/geropl/servers/linear-mcp-go/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:33.079453561Z",
            "modifiedat": "2025-05-26T16:42:33.079453561Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/geropl/servers/linear-mcp-go/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/geropl/servers/linear-mcp-go/versions",
          "versions": {
            "1": {
              "serverid": "linear-mcp-go",
              "versionid": "1",
              "self": "#/mcpproviders/geropl/servers/linear-mcp-go/versions/1",
              "xid": "/mcpproviders/geropl/servers/linear-mcp-go/versions/1",
              "epoch": 1,
              "name": "io.github.geropl/linear-mcp-go",
              "isdefault": true,
              "description": "linear MCP server based on mcp-go",
              "createdat": "2025-05-26T16:42:33.079453561Z",
              "modifiedat": "2025-05-26T16:42:33.079453561Z",
              "ancestor": "1",
              "id": "0c8e4aae-53ed-4acf-87d9-19d44ac4afd1",
              "packages": [
                {
                  "name": "geropl/linear-mcp-go",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "940084523",
                "source": "github",
                "url": "https://github.com/geropl/linear-mcp-go"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Creates a new Linear issue with specified details. Supports creating sub-issues and assigning labels.",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "labels": {
                        "type": "string"
                      },
                      "parentIssue": {
                        "type": "string"
                      },
                      "priority": {
                        "type": "integer"
                      },
                      "status": {
                        "type": "string"
                      },
                      "team": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "title",
                      "team"
                    ],
                    "type": "object"
                  },
                  "name": "linear_create_issue"
                },
                {
                  "description": "Updates an existing Linear issue's properties.",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "priority": {
                        "type": "integer"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "linear_update_issue"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:19Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "gibsonai": {
      "mcpproviderid": "gibsonai",
      "self": "#/mcpproviders/gibsonai",
      "xid": "/mcpproviders/gibsonai",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:14.077505196Z",
      "modifiedat": "2025-05-26T16:42:14.077505196Z",

      "serversurl": "#/mcpproviders/gibsonai/servers",
      "servers": {
        "mcp": {
          "serverid": "mcp",
          "self": "#/mcpproviders/gibsonai/servers/mcp",
          "xid": "/mcpproviders/gibsonai/servers/mcp",

          "metaurl": "#/mcpproviders/gibsonai/servers/mcp/meta",
          "meta": {
            "serverid": "mcp",
            "self": "#/mcpproviders/gibsonai/servers/mcp/meta",
            "xid": "/mcpproviders/gibsonai/servers/mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:14.077505196Z",
            "modifiedat": "2025-05-26T16:42:14.077505196Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/gibsonai/servers/mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/gibsonai/servers/mcp/versions",
          "versions": {
            "1": {
              "serverid": "mcp",
              "versionid": "1",
              "self": "#/mcpproviders/gibsonai/servers/mcp/versions/1",
              "xid": "/mcpproviders/gibsonai/servers/mcp/versions/1",
              "epoch": 1,
              "name": "io.github.gibsonai/mcp",
              "isdefault": true,
              "description": "GibsonAI's MCP server",
              "createdat": "2025-05-26T16:42:14.077505196Z",
              "modifiedat": "2025-05-26T16:42:14.077505196Z",
              "ancestor": "1",
              "id": "f4b01928-545f-4f65-a9b4-2bcc4f4a7204",
              "packages": [
                {
                  "name": "GibsonAI/mcp",
                  "package_arguments": [
                    {
                      "default": "gibson",
                      "description": "gibson",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "gibson",
                      "value_hint": "gibson"
                    },
                    {
                      "default": "mcp",
                      "description": "mcp",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp",
                      "value_hint": "mcp"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "967696769",
                "source": "github",
                "url": "https://github.com/GibsonAI/mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:01Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "githejie": {
      "mcpproviderid": "githejie",
      "self": "#/mcpproviders/githejie",
      "xid": "/mcpproviders/githejie",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:28.654584518Z",
      "modifiedat": "2025-05-26T16:41:28.654584518Z",

      "serversurl": "#/mcpproviders/githejie/servers",
      "servers": {
        "mcp-server-calculator": {
          "serverid": "mcp-server-calculator",
          "self": "#/mcpproviders/githejie/servers/mcp-server-calculator",
          "xid": "/mcpproviders/githejie/servers/mcp-server-calculator",

          "metaurl": "#/mcpproviders/githejie/servers/mcp-server-calculator/meta",
          "meta": {
            "serverid": "mcp-server-calculator",
            "self": "#/mcpproviders/githejie/servers/mcp-server-calculator/meta",
            "xid": "/mcpproviders/githejie/servers/mcp-server-calculator/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:28.654584518Z",
            "modifiedat": "2025-05-26T16:41:28.654584518Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/githejie/servers/mcp-server-calculator/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/githejie/servers/mcp-server-calculator/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-calculator",
              "versionid": "1",
              "self": "#/mcpproviders/githejie/servers/mcp-server-calculator/versions/1",
              "xid": "/mcpproviders/githejie/servers/mcp-server-calculator/versions/1",
              "epoch": 1,
              "name": "io.github.githejie/mcp-server-calculator",
              "isdefault": true,
              "description": "A Model Context Protocol server for calculating.",
              "createdat": "2025-05-26T16:41:28.654584518Z",
              "modifiedat": "2025-05-26T16:41:28.654584518Z",
              "ancestor": "1",
              "id": "87cf029b-441f-439a-aae9-9ef27ddd4322",
              "packages": [
                {
                  "name": "mcp-server-calculator",
                  "registry_name": "unknown",
                  "version": "0.2.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "951246115",
                "source": "github",
                "url": "https://github.com/githejie/mcp-server-calculator"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Calculates/evaluates the given expression.",
                  "inputschema": {
                    "properties": {
                      "expression": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "expression"
                    ],
                    "type": "object"
                  },
                  "name": "calculate"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:11Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "gitmotion": {
      "mcpproviderid": "gitmotion",
      "self": "#/mcpproviders/gitmotion",
      "xid": "/mcpproviders/gitmotion",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:30.989419807Z",
      "modifiedat": "2025-05-26T16:41:30.989419807Z",

      "serversurl": "#/mcpproviders/gitmotion/servers",
      "servers": {
        "ntfy-me-mcp": {
          "serverid": "ntfy-me-mcp",
          "self": "#/mcpproviders/gitmotion/servers/ntfy-me-mcp",
          "xid": "/mcpproviders/gitmotion/servers/ntfy-me-mcp",

          "metaurl": "#/mcpproviders/gitmotion/servers/ntfy-me-mcp/meta",
          "meta": {
            "serverid": "ntfy-me-mcp",
            "self": "#/mcpproviders/gitmotion/servers/ntfy-me-mcp/meta",
            "xid": "/mcpproviders/gitmotion/servers/ntfy-me-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:30.989419807Z",
            "modifiedat": "2025-05-26T16:41:30.989419807Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/gitmotion/servers/ntfy-me-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/gitmotion/servers/ntfy-me-mcp/versions",
          "versions": {
            "1": {
              "serverid": "ntfy-me-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/gitmotion/servers/ntfy-me-mcp/versions/1",
              "xid": "/mcpproviders/gitmotion/servers/ntfy-me-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.gitmotion/ntfy-me-mcp",
              "isdefault": true,
              "description": "An ntfy MCP server for sending/fetching ntfy notifications to any/self-hosted ntfy.sh server from AI Agents 📤 (supports secure token auth \u0026 more - use with npx or docker!)",
              "createdat": "2025-05-26T16:41:30.989419807Z",
              "modifiedat": "2025-05-26T16:41:30.989419807Z",
              "ancestor": "1",
              "id": "ba368d1c-d64d-4ecd-9bde-72304d69c4d1",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-topic-name",
                      "name": "NTFY_TOPIC"
                    }
                  ],
                  "name": "ntfy-me-mcp",
                  "registry_name": "unknown",
                  "version": "1.3.3"
                }
              ],
              "repository": {
                "id": "964136538",
                "source": "github",
                "url": "https://github.com/gitmotion/ntfy-me-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:29Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "gleanwork": {
      "mcpproviderid": "gleanwork",
      "self": "#/mcpproviders/gleanwork",
      "xid": "/mcpproviders/gleanwork",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:26.692346759Z",
      "modifiedat": "2025-05-26T16:41:26.692346759Z",

      "serversurl": "#/mcpproviders/gleanwork/servers",
      "servers": {
        "mcp-server": {
          "serverid": "mcp-server",
          "self": "#/mcpproviders/gleanwork/servers/mcp-server",
          "xid": "/mcpproviders/gleanwork/servers/mcp-server",

          "metaurl": "#/mcpproviders/gleanwork/servers/mcp-server/meta",
          "meta": {
            "serverid": "mcp-server",
            "self": "#/mcpproviders/gleanwork/servers/mcp-server/meta",
            "xid": "/mcpproviders/gleanwork/servers/mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:26.692346759Z",
            "modifiedat": "2025-05-26T16:41:26.692346759Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/gleanwork/servers/mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/gleanwork/servers/mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/gleanwork/servers/mcp-server/versions/1",
              "xid": "/mcpproviders/gleanwork/servers/mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.gleanwork/mcp-server",
              "isdefault": true,
              "description": "MCP server for Glean API integration",
              "createdat": "2025-05-26T16:41:26.692346759Z",
              "modifiedat": "2025-05-26T16:41:26.692346759Z",
              "ancestor": "1",
              "id": "3e50df21-8223-440d-bad9-dfc9ce117af4",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cglean instance name\u003e",
                      "name": "GLEAN_INSTANCE"
                    },
                    {
                      "description": "\u003cglean api token\u003e",
                      "name": "GLEAN_API_TOKEN"
                    }
                  ],
                  "name": "@gleanwork/mcp-server",
                  "registry_name": "npm",
                  "version": "0.6.1"
                }
              ],
              "repository": {
                "id": "946754858",
                "source": "github",
                "url": "https://github.com/gleanwork/mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:06Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "goat-sdk": {
      "mcpproviderid": "goat-sdk",
      "self": "#/mcpproviders/goat-sdk",
      "xid": "/mcpproviders/goat-sdk",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:24.522258487Z",
      "modifiedat": "2025-05-26T16:41:24.522258487Z",

      "serversurl": "#/mcpproviders/goat-sdk/servers",
      "servers": {
        "goat": {
          "serverid": "goat",
          "self": "#/mcpproviders/goat-sdk/servers/goat",
          "xid": "/mcpproviders/goat-sdk/servers/goat",

          "metaurl": "#/mcpproviders/goat-sdk/servers/goat/meta",
          "meta": {
            "serverid": "goat",
            "self": "#/mcpproviders/goat-sdk/servers/goat/meta",
            "xid": "/mcpproviders/goat-sdk/servers/goat/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:24.522258487Z",
            "modifiedat": "2025-05-26T16:41:24.522258487Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/goat-sdk/servers/goat/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/goat-sdk/servers/goat/versions",
          "versions": {
            "1": {
              "serverid": "goat",
              "versionid": "1",
              "self": "#/mcpproviders/goat-sdk/servers/goat/versions/1",
              "xid": "/mcpproviders/goat-sdk/servers/goat/versions/1",
              "epoch": 1,
              "name": "io.github.goat-sdk/goat",
              "isdefault": true,
              "description": "The leading agentic finance toolkit for AI agents",
              "createdat": "2025-05-26T16:41:24.522258487Z",
              "modifiedat": "2025-05-26T16:41:24.522258487Z",
              "ancestor": "1",
              "id": "6e61849a-2312-4c76-a9d0-0a4b84a7795e",
              "packages": [
                {
                  "name": "goat-repo",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "894659403",
                "source": "github",
                "url": "https://github.com/goat-sdk/goat"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Tool to send ETH tokens",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "sendETH"
                },
                {
                  "description": "Tool to interact with ERC20 tokens such as USDC",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "erc20"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:20Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "google": {
      "mcpproviderid": "google",
      "self": "#/mcpproviders/google",
      "xid": "/mcpproviders/google",
      "epoch": 1,
      "name": "Google",
      "description": "Google ❤️ Open Source",
      "documentation": "https://github.com/google",
      "createdat": "2025-05-26T16:42:31.910658639Z",
      "modifiedat": "2025-05-26T16:42:31.910658639Z",

      "serversurl": "#/mcpproviders/google/servers",
      "servers": {},
      "serverscount": 0
    },
    "googleapis": {
      "mcpproviderid": "googleapis",
      "self": "#/mcpproviders/googleapis",
      "xid": "/mcpproviders/googleapis",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:32.730633956Z",
      "modifiedat": "2025-05-26T16:42:32.730633956Z",

      "serversurl": "#/mcpproviders/googleapis/servers",
      "servers": {
        "genai-toolbox": {
          "serverid": "genai-toolbox",
          "self": "#/mcpproviders/googleapis/servers/genai-toolbox",
          "xid": "/mcpproviders/googleapis/servers/genai-toolbox",

          "metaurl": "#/mcpproviders/googleapis/servers/genai-toolbox/meta",
          "meta": {
            "serverid": "genai-toolbox",
            "self": "#/mcpproviders/googleapis/servers/genai-toolbox/meta",
            "xid": "/mcpproviders/googleapis/servers/genai-toolbox/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:32.730633956Z",
            "modifiedat": "2025-05-26T16:42:32.730633956Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/googleapis/servers/genai-toolbox/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/googleapis/servers/genai-toolbox/versions",
          "versions": {
            "1": {
              "serverid": "genai-toolbox",
              "versionid": "1",
              "self": "#/mcpproviders/googleapis/servers/genai-toolbox/versions/1",
              "xid": "/mcpproviders/googleapis/servers/genai-toolbox/versions/1",
              "epoch": 1,
              "name": "io.github.googleapis/genai-toolbox",
              "isdefault": true,
              "description": "MCP Toolbox for Databases is an open source MCP server for databases.",
              "createdat": "2025-05-26T16:42:32.730633956Z",
              "modifiedat": "2025-05-26T16:42:32.730633956Z",
              "ancestor": "1",
              "id": "09f19715-3a0c-4900-932b-1ff0035aff11",
              "packages": [
                {
                  "name": "googleapis/genai-toolbox",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "812044182",
                "source": "github",
                "url": "https://github.com/googleapis/genai-toolbox"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:18Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "goplausible": {
      "mcpproviderid": "goplausible",
      "self": "#/mcpproviders/goplausible",
      "xid": "/mcpproviders/goplausible",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:43.866744578Z",
      "modifiedat": "2025-05-26T16:41:43.866744578Z",

      "serversurl": "#/mcpproviders/goplausible/servers",
      "servers": {
        "algorand-mcp": {
          "serverid": "algorand-mcp",
          "self": "#/mcpproviders/goplausible/servers/algorand-mcp",
          "xid": "/mcpproviders/goplausible/servers/algorand-mcp",

          "metaurl": "#/mcpproviders/goplausible/servers/algorand-mcp/meta",
          "meta": {
            "serverid": "algorand-mcp",
            "self": "#/mcpproviders/goplausible/servers/algorand-mcp/meta",
            "xid": "/mcpproviders/goplausible/servers/algorand-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:43.866744578Z",
            "modifiedat": "2025-05-26T16:41:43.866744578Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/goplausible/servers/algorand-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/goplausible/servers/algorand-mcp/versions",
          "versions": {
            "1": {
              "serverid": "algorand-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/goplausible/servers/algorand-mcp/versions/1",
              "xid": "/mcpproviders/goplausible/servers/algorand-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.goplausible/algorand-mcp",
              "isdefault": true,
              "description": "Algorand Model Context Protocol (Server \u0026 Client)",
              "createdat": "2025-05-26T16:41:43.866744578Z",
              "modifiedat": "2025-05-26T16:41:43.866744578Z",
              "ancestor": "1",
              "id": "4813a35a-7d43-42fa-999d-86e68b2aca1a",
              "packages": [
                {
                  "name": "algorand-mcp",
                  "registry_name": "unknown",
                  "version": "2.7.7"
                }
              ],
              "repository": {
                "id": "946072706",
                "source": "github",
                "url": "https://github.com/GoPlausible/algorand-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:39Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "gotohuman": {
      "mcpproviderid": "gotohuman",
      "self": "#/mcpproviders/gotohuman",
      "xid": "/mcpproviders/gotohuman",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:20.14079188Z",
      "modifiedat": "2025-05-26T16:42:20.14079188Z",

      "serversurl": "#/mcpproviders/gotohuman/servers",
      "servers": {
        "gotohuman-mcp-server": {
          "serverid": "gotohuman-mcp-server",
          "self": "#/mcpproviders/gotohuman/servers/gotohuman-mcp-server",
          "xid": "/mcpproviders/gotohuman/servers/gotohuman-mcp-server",

          "metaurl": "#/mcpproviders/gotohuman/servers/gotohuman-mcp-server/meta",
          "meta": {
            "serverid": "gotohuman-mcp-server",
            "self": "#/mcpproviders/gotohuman/servers/gotohuman-mcp-server/meta",
            "xid": "/mcpproviders/gotohuman/servers/gotohuman-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:20.14079188Z",
            "modifiedat": "2025-05-26T16:42:20.14079188Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/gotohuman/servers/gotohuman-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/gotohuman/servers/gotohuman-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "gotohuman-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/gotohuman/servers/gotohuman-mcp-server/versions/1",
              "xid": "/mcpproviders/gotohuman/servers/gotohuman-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.gotohuman/gotohuman-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:20.14079188Z",
              "modifiedat": "2025-05-26T16:42:20.14079188Z",
              "ancestor": "1",
              "id": "0f970fc6-418a-45c7-a665-00e725e8338d",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-api-key",
                      "name": "GOTOHUMAN_API_KEY"
                    }
                  ],
                  "name": "@gotohuman/mcp-server",
                  "registry_name": "unknown",
                  "version": "0.1.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "952612861",
                "source": "github",
                "url": "https://github.com/gotohuman/gotohuman-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List all available review forms. NOTE: You need to fetch the schema for the form fields first using the get-form-schema tool.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list-forms"
                },
                {
                  "description": "Get the schema to use for the 'fields' property when requesting a human review with a form.",
                  "inputschema": {
                    "properties": {
                      "formId": {
                        "description": "The form ID to fetch the schema for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "formId"
                    ],
                    "type": "object"
                  },
                  "name": "get-form-schema"
                },
                {
                  "description": "Request a human review with a form. NOTE: If you don't have a form ID yet, list all available forms using the list-forms tool first. To know what to pass for fieldData, you need to fetch the schema for the form fields using the get-form-schema tool.",
                  "inputschema": {
                    "properties": {
                      "assignToUsers": {
                        "description": "Optional list of user emails to assign the review to",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "fieldData": {
                        "additionalProperties": true,
                        "description": "The field data to include in the review request. Note that this is a dynamic schema that you need to fetch first using the get-form-schema tool.",
                        "type": "object"
                      },
                      "formId": {
                        "description": "The form ID to request a human review for",
                        "type": "string"
                      },
                      "metadata": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Optional additional data that will be incl. in the webhook response after form submission. Incl. everything required to proceed with your workflow.",
                        "type": "object"
                      }
                    },
                    "required": [
                      "formId",
                      "fieldData"
                    ],
                    "type": "object"
                  },
                  "name": "request-human-review-with-form"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:13Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "grafana": {
      "mcpproviderid": "grafana",
      "self": "#/mcpproviders/grafana",
      "xid": "/mcpproviders/grafana",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:02.025983024Z",
      "modifiedat": "2025-05-26T16:42:02.025983024Z",

      "serversurl": "#/mcpproviders/grafana/servers",
      "servers": {
        "mcp-grafana": {
          "serverid": "mcp-grafana",
          "self": "#/mcpproviders/grafana/servers/mcp-grafana",
          "xid": "/mcpproviders/grafana/servers/mcp-grafana",

          "metaurl": "#/mcpproviders/grafana/servers/mcp-grafana/meta",
          "meta": {
            "serverid": "mcp-grafana",
            "self": "#/mcpproviders/grafana/servers/mcp-grafana/meta",
            "xid": "/mcpproviders/grafana/servers/mcp-grafana/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:02.025983024Z",
            "modifiedat": "2025-05-26T16:42:02.025983024Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/grafana/servers/mcp-grafana/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/grafana/servers/mcp-grafana/versions",
          "versions": {
            "1": {
              "serverid": "mcp-grafana",
              "versionid": "1",
              "self": "#/mcpproviders/grafana/servers/mcp-grafana/versions/1",
              "xid": "/mcpproviders/grafana/servers/mcp-grafana/versions/1",
              "epoch": 1,
              "name": "io.github.grafana/mcp-grafana",
              "isdefault": true,
              "description": "MCP server for Grafana",
              "createdat": "2025-05-26T16:42:02.025983024Z",
              "modifiedat": "2025-05-26T16:42:02.025983024Z",
              "ancestor": "1",
              "id": "1329d108-67d0-488a-85a1-cc65b58cf5cd",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "http://localhost:3000",
                      "name": "GRAFANA_URL"
                    },
                    {
                      "description": "\u003cyour service account token\u003e",
                      "name": "GRAFANA_API_KEY"
                    }
                  ],
                  "name": "grafana/mcp-grafana",
                  "package_arguments": [
                    {
                      "default": "--rm",
                      "description": "Remove container after exit",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm"
                    },
                    {
                      "default": "-p 8000:8000",
                      "description": "Publish a container's port(s) to the host",
                      "format": "string",
                      "is_required": true,
                      "name": "-p 8000:8000",
                      "type": "named",
                      "value": "-p 8000:8000",
                      "value_hint": "8000:8000"
                    },
                    {
                      "default": "-e GRAFANA_URL",
                      "description": "Set environment variable GRAFANA_URL",
                      "format": "string",
                      "is_required": true,
                      "name": "-e GRAFANA_URL",
                      "type": "named",
                      "value": "-e GRAFANA_URL",
                      "value_hint": "GRAFANA_URL"
                    },
                    {
                      "default": "-e GRAFANA_API_KEY",
                      "description": "Set environment variable GRAFANA_API_KEY",
                      "format": "string",
                      "is_required": true,
                      "name": "-e GRAFANA_API_KEY",
                      "type": "named",
                      "value": "-e GRAFANA_API_KEY",
                      "value_hint": "GRAFANA_API_KEY"
                    },
                    {
                      "default": "mcp/grafana",
                      "description": "Container image to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp/grafana",
                      "value_hint": "mcp/grafana"
                    },
                    {
                      "default": "-debug",
                      "description": "Enable debug mode",
                      "format": "string",
                      "name": "-debug",
                      "type": "named",
                      "value": "-debug"
                    }
                  ],
                  "registry_name": "docker",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "907869862",
                "source": "github",
                "url": "https://github.com/grafana/mcp-grafana"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Search for dashboards",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "search_dashboards"
                },
                {
                  "description": "Get a dashboard by uid",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_dashboard_by_uid"
                },
                {
                  "description": "List datasources",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_datasources"
                },
                {
                  "description": "Get a datasource by uid",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_datasource_by_uid"
                },
                {
                  "description": "Get a datasource by name",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_datasource_by_name"
                },
                {
                  "description": "Execute a query against a Prometheus datasource",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "query_prometheus"
                },
                {
                  "description": "List metric metadata",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_prometheus_metric_metadata"
                },
                {
                  "description": "List available metric names",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_prometheus_metric_names"
                },
                {
                  "description": "List label names matching a selector",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_prometheus_label_names"
                },
                {
                  "description": "List values for a specific label",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_prometheus_label_values"
                },
                {
                  "description": "List incidents in Grafana Incident",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_incidents"
                },
                {
                  "description": "Create an incident in Grafana Incident",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "create_incident"
                },
                {
                  "description": "Add an activity item to an incident in Grafana Incident",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "add_activity_to_incident"
                },
                {
                  "description": "Resolve an incident in Grafana Incident",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "resolve_incident"
                },
                {
                  "description": "Query and retrieve logs using LogQL (either log or metric queries)",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "query_loki_logs"
                },
                {
                  "description": "List all available label names in logs",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_loki_label_names"
                },
                {
                  "description": "List values for a specific label in Loki logs",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_loki_label_values"
                },
                {
                  "description": "List and fetch alert rule information",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_prometheus_alert_rules"
                },
                {
                  "description": "Get alert rule statuses (firing/normal/error/etc.)",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_alert_rule_statuses"
                },
                {
                  "description": "List contact points",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_contact_points"
                },
                {
                  "description": "List and manage schedules",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_oncall_schedules"
                },
                {
                  "description": "Get shift details",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_shift_details"
                },
                {
                  "description": "Get current on-call users",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_current_oncall_users"
                },
                {
                  "description": "List teams and users",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_teams_and_users"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:19Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "graphlit": {
      "mcpproviderid": "graphlit",
      "self": "#/mcpproviders/graphlit",
      "xid": "/mcpproviders/graphlit",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:59.386004662Z",
      "modifiedat": "2025-05-26T16:41:59.386004662Z",

      "serversurl": "#/mcpproviders/graphlit/servers",
      "servers": {
        "graphlit-mcp-server": {
          "serverid": "graphlit-mcp-server",
          "self": "#/mcpproviders/graphlit/servers/graphlit-mcp-server",
          "xid": "/mcpproviders/graphlit/servers/graphlit-mcp-server",

          "metaurl": "#/mcpproviders/graphlit/servers/graphlit-mcp-server/meta",
          "meta": {
            "serverid": "graphlit-mcp-server",
            "self": "#/mcpproviders/graphlit/servers/graphlit-mcp-server/meta",
            "xid": "/mcpproviders/graphlit/servers/graphlit-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:59.386004662Z",
            "modifiedat": "2025-05-26T16:41:59.386004662Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/graphlit/servers/graphlit-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/graphlit/servers/graphlit-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "graphlit-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/graphlit/servers/graphlit-mcp-server/versions/1",
              "xid": "/mcpproviders/graphlit/servers/graphlit-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.graphlit/graphlit-mcp-server",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) Server for Graphlit Platform",
              "createdat": "2025-05-26T16:41:59.386004662Z",
              "modifiedat": "2025-05-26T16:41:59.386004662Z",
              "ancestor": "1",
              "id": "e44b5cad-3801-4403-b8ee-67f3ea1cd909",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "${input:organization_id}",
                      "name": "GRAPHLIT_ORGANIZATION_ID"
                    },
                    {
                      "description": "${input:environment_id}",
                      "name": "GRAPHLIT_ENVIRONMENT_ID"
                    },
                    {
                      "description": "${input:jwt_secret}",
                      "name": "GRAPHLIT_JWT_SECRET"
                    }
                  ],
                  "name": "graphlit-mcp-server",
                  "registry_name": "npm",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "940989522",
                "source": "github",
                "url": "https://github.com/graphlit/graphlit-mcp-server"
              },
              "resources": [
                {
                  "description": "Returns list of conversation resources.",
                  "name": "Conversations list",
                  "uritemplate": "conversations://"
                },
                {
                  "description": "Returns LLM conversation messages. Accepts conversation resource URI, i.e. conversations://{id}, where 'id' is a conversation identifier.",
                  "name": "Conversation",
                  "uritemplate": "conversations://{id}"
                },
                {
                  "description": "Returns list of feed resources.",
                  "name": "Feeds",
                  "uritemplate": "feeds://"
                },
                {
                  "description": "Returns feed metadata. Accepts content resource URI, i.e. feeds://{id}, where 'id' is a feed identifier.",
                  "name": "Feed",
                  "uritemplate": "feeds://{id}"
                },
                {
                  "description": "Returns list of collection resources.",
                  "name": "Collections",
                  "uritemplate": "collections://"
                },
                {
                  "description": "Returns collection metadata and list of content resources. Accepts collection resource URI, i.e. collections://{id}, where 'id' is a collection identifier.",
                  "name": "Collection",
                  "uritemplate": "collections://{id}"
                },
                {
                  "description": "Returns list of content resources.",
                  "name": "Contents list",
                  "uritemplate": "contents://"
                },
                {
                  "description": "Returns content metadata and complete Markdown text. Accepts content resource URI, i.e. contents://{id}, where 'id' is a content identifier.",
                  "name": "Content",
                  "uritemplate": "contents://{id}"
                },
                {
                  "description": "Returns list of workflow resources.",
                  "name": "Workflows",
                  "uritemplate": "workflows://"
                },
                {
                  "description": "Returns workflow metadata. Accepts workflow resource URI, i.e. workflows://{id}, where 'id' is a workflow identifier.",
                  "name": "Workflow",
                  "uritemplate": "workflows://{id}"
                },
                {
                  "description": "Returns list of specification resources.",
                  "name": "Specifications",
                  "uritemplate": "specifications://"
                },
                {
                  "description": "Returns specification metadata. Accepts specification resource URI, i.e. specifications://{id}, where 'id' is a specification identifier.",
                  "name": "Specification",
                  "uritemplate": "specifications://{id}"
                },
                {
                  "description": "Returns list of project resources.",
                  "name": "Projects",
                  "uritemplate": "projects://"
                },
                {
                  "description": "Returns project metadata including credits used, available quota, and default content workflow. Accepts project resource URI, i.e. projects://{id}, where 'id' is a project identifier.",
                  "name": "Project",
                  "uritemplate": "projects://{id}"
                }
              ],
              "tools": [
                {
                  "description": "Configures the default content workflow and conversation specification for the Graphlit project. Only needed if user asks to configure the project defaults. To reset the project configuration to 'factory state', assign False or null to all parameters. Optionally accepts whether to configure the default specification for LLM conversations. Defaults to using OpenAI GPT-4o, if not assigned. Optionally accepts whether to enable high-quality document and web page preparation using a vision LLM. Defaults to using Azure AI Document Intelligence for document preparation, if not assigned. Optionally accepts whether to enable entity extraction using LLM into the knowledge graph. Defaults to no entity extraction, if not assigned. Optionally accepts the preferred model provider service type, i.e. Anthropic, OpenAI, Google. Defaults to Anthropic if not provided. Returns the project identifier.",
                  "inputschema": {
                    "properties": {
                      "configureConversationSpecification": {
                        "type": "boolean"
                      },
                      "configureExtractionSpecification": {
                        "type": "boolean"
                      },
                      "configurePreparationSpecification": {
                        "type": "boolean"
                      },
                      "modelServiceType": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "modelServiceType"
                    ],
                    "type": "object"
                  },
                  "name": "configureProject"
                },
                {
                  "description": "Ask questions about using the Graphlit Platform, or specifically about the Graphlit API or SDKs. When the user asks about how to use the Graphlit API or SDKs, use this tool to provide a code sample in Python, TypeScript or C#. Accepts an LLM user prompt. Returns the LLM prompt completion in Markdown format.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "askGraphlit"
                },
                {
                  "description": "Prompts an LLM conversation about your entire Graphlit knowledge base. Uses hybrid vector search based on user prompt for locating relevant content sources. Uses LLM to complete the user prompt with the configured LLM. Maintains conversation history between 'user' and LLM 'assistant'. Prefer 'promptConversation' when the user intends to start or continue an ongoing conversation about the entire Graphlit knowledge base. Similar to 'retrieveSources' but does not perform content metadata filtering. Accepts an LLM user prompt and optional conversation identifier. Will either create a new conversation or continue an existing one. Will use the default specification for LLM conversations, which is optionally configured with the 'configureProject' tool. Returns the conversation identifier, completed LLM message, and any citations from the LLM response.",
                  "inputschema": {
                    "properties": {
                      "conversationId": {
                        "type": "string"
                      },
                      "prompt": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "promptConversation"
                },
                {
                  "description": "Retrieve relevant content sources from Graphlit knowledge base. Do *not* use for retrieving content by content identifier - retrieve content resource instead, with URI 'contents://{id}'. Accepts an LLM user prompt for content retrieval. For best retrieval quality, provide only key words or phrases from the user prompt, which will be used to create text embeddings for a vector search query. Only use when there is a valid LLM user prompt for content retrieval, otherwise use 'queryContents'. For example 'recent content' is not a useful user prompt, since it doesn't reference the text in the content. Only use for 'one shot' retrieval of content sources, i.e. when the user is not interested in having a conversation about the content. Accepts an optional ingestion recency filter (defaults to null, meaning all time), and optional content type and file type filters. Also accepts optional feed and collection identifiers to filter content by. Returns the ranked content sources, including their content resource URI to retrieve the complete Markdown text.",
                  "inputschema": {
                    "properties": {
                      "collections": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "feeds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "fileType": {
                        "type": "string"
                      },
                      "inLast": {
                        "type": "string"
                      },
                      "prompt": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "retrieveSources"
                },
                {
                  "description": "Retrieve images from Graphlit knowledge base. Provides image-specific retrieval when image similarity search is desired. Do *not* use for retrieving content by content identifier - retrieve content resource instead, with URI 'contents://{id}'. Accepts image URL. Image will be used for similarity search using image embeddings. Accepts optional geo-location filter for search by latitude, longitude and optional distance radius. Images taken with GPS enabled are searchable by geo-location. Also accepts optional recency filter (defaults to null, meaning all time), and optional feed and collection identifiers to filter images by. Returns the matching images, including their content resource URI to retrieve the complete Markdown text.",
                  "inputschema": {
                    "properties": {
                      "collections": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "feeds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "inLast": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "location": {
                        "properties": {
                          "distance": {
                            "type": "number"
                          },
                          "latitude": {
                            "type": "number"
                          },
                          "longitude": {
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "retrieveImages"
                },
                {
                  "description": "Extracts JSON data from text using LLM. Accepts text to be extracted, and JSON schema which describes the data which will be extracted. JSON schema needs be of type 'object' and include 'properties' and 'required' fields. Optionally accepts text prompt which is provided to LLM to guide data extraction. Defaults to 'Extract data using the tools provided'. Returns extracted JSON from text.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "type": "string"
                      },
                      "schema": {
                        "type": "string"
                      },
                      "text": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "text",
                      "schema"
                    ],
                    "type": "object"
                  },
                  "name": "extractText"
                },
                {
                  "description": "Create a collection. Accepts a collection name, and optional list of content identifiers to add to collection. Returns the collection identifier",
                  "inputschema": {
                    "properties": {
                      "contents": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "createCollection"
                },
                {
                  "description": "Add contents to a collection. Accepts a collection identifier and a list of content identifiers to add to collection. Returns the collection identifier.",
                  "inputschema": {
                    "properties": {
                      "contents": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "contents"
                    ],
                    "type": "object"
                  },
                  "name": "addContentsToCollection"
                },
                {
                  "description": "Remove contents from collection. Accepts a collection identifier and a list of content identifiers to remove from collection. Returns the collection identifier.",
                  "inputschema": {
                    "properties": {
                      "contents": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "contents"
                    ],
                    "type": "object"
                  },
                  "name": "removeContentsFromCollection"
                },
                {
                  "description": "Deletes content from Graphlit knowledge base. Accepts content identifier. Returns the content identifier and content state, i.e. Deleted.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "deleteContent"
                },
                {
                  "description": "Deletes conversation from Graphlit knowledge base. Accepts conversation identifier. Returns the conversation identifier and content state, i.e. Deleted.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "deleteConversation"
                },
                {
                  "description": "Deletes collection from Graphlit knowledge base. Does *not* delete the contents in the collection, only the collection itself. Accepts collection identifier. Returns the collection identifier and collection state, i.e. Deleted.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "deleteCollection"
                },
                {
                  "description": "Deletes feed from Graphlit knowledge base. *Does* delete the contents in the feed, in addition to the feed itself. Accepts feed identifier. Returns the feed identifier and feed state, i.e. Deleted.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "deleteFeed"
                },
                {
                  "description": "Deletes feeds from Graphlit knowledge base. *Does* delete the contents in the feed, in addition to the feed itself. Accepts optional feed type filter to limit the feeds which will be deleted. Also accepts optional limit of how many feeds to delete, defaults to 100. Returns the feed identifiers and feed state, i.e. Deleted.",
                  "inputschema": {
                    "properties": {
                      "feedType": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "deleteFeeds"
                },
                {
                  "description": "Deletes collections from Graphlit knowledge base. Does *not* delete the contents in the collections, only the collections themselves. Accepts optional limit of how many collections to delete, defaults to 100. Returns the collection identifiers and collection state, i.e. Deleted.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "deleteCollections"
                },
                {
                  "description": "Deletes conversations from Graphlit knowledge base. Accepts optional limit of how many conversations to delete, defaults to 100. Returns the conversation identifiers and conversation state, i.e. Deleted.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "deleteConversations"
                },
                {
                  "description": "Deletes contents from Graphlit knowledge base. Accepts optional content type and file type filters to limit the contents which will be deleted. Also accepts optional limit of how many contents to delete, defaults to 1000. Returns the content identifiers and content state, i.e. Deleted.",
                  "inputschema": {
                    "properties": {
                      "contentType": {
                        "type": "string"
                      },
                      "fileType": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "deleteContents"
                },
                {
                  "description": "Query contents from Graphlit knowledge base. Do *not* use for retrieving content by content identifier - retrieve content resource instead, with URI 'contents://{id}'. Accepts optional content name, content type and file type for metadata filtering. Accepts optional hybrid vector search query. Accepts optional recency filter (defaults to null, meaning all time), and optional feed and collection identifiers to filter images by. Accepts optional geo-location filter for search by latitude, longitude and optional distance radius. Images and videos taken with GPS enabled are searchable by geo-location. Returns the matching contents, including their content resource URI to retrieve the complete Markdown text.",
                  "inputschema": {
                    "properties": {
                      "collections": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "feeds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "fileType": {
                        "type": "string"
                      },
                      "inLast": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "location": {
                        "properties": {
                          "distance": {
                            "type": "number"
                          },
                          "latitude": {
                            "type": "number"
                          },
                          "longitude": {
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "name": {
                        "type": "string"
                      },
                      "query": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "queryContents"
                },
                {
                  "description": "Query collections from Graphlit knowledge base. Do *not* use for retrieving collection by collection identifier - retrieve collection resource instead, with URI 'collections://{id}'. Accepts optional collection name for metadata filtering. Returns the matching collections, including their collection resource URI to retrieve the collection contents.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "queryCollections"
                },
                {
                  "description": "Query feeds from Graphlit knowledge base. Do *not* use for retrieving feed by feed identifier - retrieve feed resource instead, with URI 'feeds://{id}'. Accepts optional feed name and feed type for metadata filtering. Returns the matching feeds, including their feed resource URI to retrieve the feed contents.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "queryFeeds"
                },
                {
                  "description": "Query conversations from Graphlit knowledge base. Do *not* use for retrieving conversation by conversation identifier - retrieve conversation resource instead, with URI 'conversations://{id}'. Accepts optional hybrid vector search query. Accepts optional recency filter (defaults to null, meaning all time). Returns the matching conversations, including their conversation resource URI to retrieve the complete conversation message history.",
                  "inputschema": {
                    "properties": {
                      "inLast": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "query": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "queryConversations"
                },
                {
                  "description": "Check if content has completed asynchronous ingestion. Accepts a content identifier which was returned from one of the non-feed ingestion tools, like ingestUrl. Returns whether the content is done or not.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "isContentDone"
                },
                {
                  "description": "Check if an asynchronous feed has completed ingesting all the available content. Accepts a feed identifier which was returned from one of the ingestion tools, like ingestGoogleDriveFiles. Returns whether the feed is done or not.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "isFeedDone"
                },
                {
                  "description": "Lists available Notion databases. Requires environment variable to be configured: NOTION_API_KEY. Returns a list of Notion databases, where the database identifier can be used with ingestNotionPages to ingest pages into Graphlit knowledge base.",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "listNotionDatabases"
                },
                {
                  "description": "Lists available Linear projects. Requires environment variable to be configured: LINEAR_API_KEY. Returns a list of Linear projects, where the project name can be used with ingestLinearIssues to ingest issues into Graphlit knowledge base.",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "listLinearProjects"
                },
                {
                  "description": "Lists available Slack channels. Requires environment variable to be configured: SLACK_BOT_TOKEN. Returns a list of Slack channels, where the channel name can be used with ingestSlackMessages to ingest messages into Graphlit knowledge base.",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "listSlackChannels"
                },
                {
                  "description": "Lists available SharePoint libraries. Requires environment variables to be configured: SHAREPOINT_CLIENT_ID, SHAREPOINT_CLIENT_SECRET, SHAREPOINT_REFRESH_TOKEN. Returns a list of SharePoint libraries, where the selected libraryId can be used with listSharePointFolders to enumerate SharePoint folders in a library.",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "listSharePointLibraries"
                },
                {
                  "description": "Lists available SharePoint folders. Requires environment variables to be configured: SHAREPOINT_CLIENT_ID, SHAREPOINT_CLIENT_SECRET, SHAREPOINT_REFRESH_TOKEN. Returns a list of SharePoint folders, which can be used with ingestSharePointFiles to ingest files into Graphlit knowledge base.",
                  "inputschema": {
                    "properties": {
                      "libraryId": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "listSharePointFolders"
                },
                {
                  "description": "Ingests files from SharePoint library into Graphlit knowledge base. Accepts a SharePoint libraryId and an optional folderId to ingest files from a specific SharePoint folder. Libraries can be enumerated with listSharePointLibraries and library folders with listSharePointFolders. Requires environment variables to be configured: SHAREPOINT_ACCOUNT_NAME, SHAREPOINT_CLIENT_ID, SHAREPOINT_CLIENT_SECRET, SHAREPOINT_REFRESH_TOKEN. Accepts an optional read limit for the number of files to ingest. Executes asynchronously, creates SharePoint feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "folderId": {
                        "type": "string"
                      },
                      "libraryId": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "libraryId"
                    ],
                    "type": "object"
                  },
                  "name": "ingestSharePointFiles"
                },
                {
                  "description": "Ingests files from OneDrive into Graphlit knowledge base. Accepts optional OneDrive folder identifier, and an optional read limit for the number of files to ingest. If no folder identifier provided, ingests files from root OneDrive folder. Requires environment variables to be configured: ONEDRIVE_CLIENT_ID, ONEDRIVE_CLIENT_SECRET, ONEDRIVE_REFRESH_TOKEN. Executes asynchronously, creates OneDrive feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "folderId": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "ingestOneDriveFiles"
                },
                {
                  "description": "Ingests files from Google Drive into Graphlit knowledge base. Accepts optional Google Drive folder identifier, and an optional read limit for the number of files to ingest. For example, with Google Drive URI (https://drive.google.com/drive/u/0/folders/32tzhRD12KDh2hXABY8OZRFv7Smy8WBkQ), the folder identifier is 32tzhRD12KDh2hXABY8OZRFv7Smy8WBkQ. If no folder identifier provided, ingests files from root Google Drive folder. Requires environment variables to be configured: GOOGLE_DRIVE_SERVICE_ACCOUNT_JSON -or- GOOGLE_DRIVE_CLIENT_ID, GOOGLE_DRIVE_CLIENT_SECRET, GOOGLE_DRIVE_REFRESH_TOKEN. If service account JSON is provided, uses service account authentication. Else, uses user authentication. Executes asynchronously, creates Google Drive feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "folderId": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "ingestGoogleDriveFiles"
                },
                {
                  "description": "Ingests files from Dropbox into Graphlit knowledge base. Accepts optional relative path to Dropbox folder (i.e. /Pictures), and an optional read limit for the number of files to ingest. If no path provided, ingests files from root Dropbox folder. Requires environment variables to be configured: DROPBOX_APP_KEY, DROPBOX_APP_SECRET, DROPBOX_REDIRECT_URI, DROPBOX_REFRESH_TOKEN. Executes asynchronously, creates Dropbox feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "ingestDropboxFiles"
                },
                {
                  "description": "Ingests files from Box into Graphlit knowledge base. Accepts optional Box folder identifier, and an optional read limit for the number of files to ingest. If no folder identifier provided, ingests files from root Box folder (i.e. \"0\"). Folder identifier can be inferred from Box URL. https://app.box.com/folder/123456 -\u003e folder identifier is \"123456\". Requires environment variables to be configured: BOX_CLIENT_ID, BOX_CLIENT_SECRET, BOX_REDIRECT_URI, BOX_REFRESH_TOKEN. Executes asynchronously, creates Box feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "folderId": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "ingestBoxFiles"
                },
                {
                  "description": "Ingests files from GitHub repository into Graphlit knowledge base. Accepts GitHub repository owner and repository name and an optional read limit for the number of files to ingest. For example, for GitHub repository (https://github.com/openai/tiktoken), 'openai' is the repository owner, and 'tiktoken' is the repository name. Requires environment variable to be configured: GITHUB_PERSONAL_ACCESS_TOKEN. Executes asynchronously, creates GitHub feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "readLimit": {
                        "type": "number"
                      },
                      "repositoryName": {
                        "type": "string"
                      },
                      "repositoryOwner": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "repositoryName",
                      "repositoryOwner"
                    ],
                    "type": "object"
                  },
                  "name": "ingestGitHubFiles"
                },
                {
                  "description": "Ingests pages from Notion database into Graphlit knowledge base. Accepts Notion database identifier and an optional read limit for the number of pages to ingest. You can list the available Notion database identifiers with listNotionDatabases. Or, for a Notion URL, https://www.notion.so/Example/Engineering-Wiki-114abc10cb38487e91ec906fc6c6f350, 'Engineering-Wiki-114abc10cb38487e91ec906fc6c6f350' is an example of a Notion database identifier. Requires environment variable to be configured: NOTION_API_KEY. Executes asynchronously, creates Notion feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "databaseId": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "databaseId"
                    ],
                    "type": "object"
                  },
                  "name": "ingestNotionPages"
                },
                {
                  "description": "Ingests messages from Microsoft Teams channel into Graphlit knowledge base. Accepts Microsoft Teams team identifier and channel identifier, and an optional read limit for the number of messages to ingest. Requires environment variables to be configured: MICROSOFT_TEAMS_CLIENT_ID, MICROSOFT_TEAMS_CLIENT_SECRET, MICROSOFT_TEAMS_REFRESH_TOKEN. Executes asynchronously, creates Microsoft Teams feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "channelId": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      },
                      "teamId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "teamId",
                      "channelId"
                    ],
                    "type": "object"
                  },
                  "name": "ingestMicrosoftTeamsMessages"
                },
                {
                  "description": "Ingests messages from Slack channel into Graphlit knowledge base. Accepts Slack channel name and an optional read limit for the number of messages to ingest. Requires environment variable to be configured: SLACK_BOT_TOKEN. Executes asynchronously, creates Slack feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "channelName": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "channelName"
                    ],
                    "type": "object"
                  },
                  "name": "ingestSlackMessages"
                },
                {
                  "description": "Ingests messages from Discord channel into Graphlit knowledge base. Accepts Discord channel name and an optional read limit for the number of messages to ingest. Requires environment variable to be configured: DISCORD_BOT_TOKEN. Executes asynchronously, creates Discord feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "channelName": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "channelName"
                    ],
                    "type": "object"
                  },
                  "name": "ingestDiscordMessages"
                },
                {
                  "description": "Ingests posts by user from Twitter/X into Graphlit knowledge base. Accepts Twitter/X user name, without the leading @ symbol, and an optional read limit for the number of posts to ingest. Requires environment variable to be configured: TWITTER_TOKEN. Executes asynchronously, creates Twitter feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "readLimit": {
                        "type": "number"
                      },
                      "userName": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "userName"
                    ],
                    "type": "object"
                  },
                  "name": "ingestTwitterPosts"
                },
                {
                  "description": "Searches for recent posts from Twitter/X, and ingests them into Graphlit knowledge base. Accepts search query, and an optional read limit for the number of posts to ingest. Requires environment variable to be configured: TWITTER_TOKEN. Executes asynchronously, creates Twitter feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "ingestTwitterSearch"
                },
                {
                  "description": "Ingests posts from Reddit subreddit into Graphlit knowledge base. Accepts a subreddit name and an optional read limit for the number of posts to ingest. Executes asynchronously, creates Reddit feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "readLimit": {
                        "type": "number"
                      },
                      "subredditName": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "subredditName"
                    ],
                    "type": "object"
                  },
                  "name": "ingestRedditPosts"
                },
                {
                  "description": "Ingests emails from Google Email account into Graphlit knowledge base. Accepts an optional read limit for the number of emails to ingest. Requires environment variables to be configured: GOOGLE_EMAIL_CLIENT_ID, GOOGLE_EMAIL_CLIENT_SECRET, GOOGLE_EMAIL_REFRESH_TOKEN. Executes asynchronously, creates Google Email feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "ingestGoogleEmail"
                },
                {
                  "description": "Ingests emails from Microsoft Email account into Graphlit knowledge base. Accepts an optional read limit for the number of emails to ingest. Requires environment variables to be configured: MICROSOFT_EMAIL_CLIENT_ID, MICROSOFT_EMAIL_CLIENT_SECRET, MICROSOFT_EMAIL_REFRESH_TOKEN. Executes asynchronously, creates Microsoft Email feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "ingestMicrosoftEmail"
                },
                {
                  "description": "Ingests issues from Linear project into Graphlit knowledge base. Accepts Linear project name and an optional read limit for the number of issues to ingest. Requires environment variable to be configured: LINEAR_API_KEY. Executes asynchronously, creates Linear issue feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "projectName": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "projectName"
                    ],
                    "type": "object"
                  },
                  "name": "ingestLinearIssues"
                },
                {
                  "description": "Ingests issues from GitHub repository into Graphlit knowledge base. Accepts GitHub repository owner and repository name and an optional read limit for the number of issues to ingest. For example, for GitHub repository (https://github.com/openai/tiktoken), 'openai' is the repository owner, and 'tiktoken' is the repository name. Requires environment variable to be configured: GITHUB_PERSONAL_ACCESS_TOKEN. Executes asynchronously, creates GitHub issue feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "readLimit": {
                        "type": "number"
                      },
                      "repositoryName": {
                        "type": "string"
                      },
                      "repositoryOwner": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "repositoryName",
                      "repositoryOwner"
                    ],
                    "type": "object"
                  },
                  "name": "ingestGitHubIssues"
                },
                {
                  "description": "Ingests issues from Atlassian Jira repository into Graphlit knowledge base. Accepts Atlassian Jira server URL and project name, and an optional read limit for the number of issues to ingest. Requires environment variables to be configured: JIRA_EMAIL, JIRA_TOKEN. Executes asynchronously, creates Atlassian Jira issue feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "projectName": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url",
                      "projectName"
                    ],
                    "type": "object"
                  },
                  "name": "ingestJiraIssues"
                },
                {
                  "description": "Crawls web pages from web site into Graphlit knowledge base. Accepts a URL and an optional read limit for the number of pages to crawl. Uses sitemap.xml to discover pages to be crawled from website. Executes asynchronously and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "readLimit": {
                        "type": "number"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "webCrawl"
                },
                {
                  "description": "Enumerates the web pages at or beneath the provided URL using web sitemap. Does *not* ingest web pages into Graphlit knowledge base. Accepts web site URL as string. Returns list of mapped URIs from web site.",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "webMap"
                },
                {
                  "description": "Performs web or podcast search based on search query. Can search for web pages or anything about podcasts (i.e. episodes, topics, guest appearances). Format the search query as what would be entered into a Google search. You can use site filtering in the search query, like 'site:twitter.com'. Prefer calling this tool over using 'curl' directly for any web search. Use 'PODSCAN' search service type to search podcasts. Does *not* ingest pages or podcast episodes into Graphlit knowledge base. When searching podcasts, *don't* include the term 'podcast' or 'episode' in the search query - that would be redundant. Search service types: Tavily (web pages), Exa (web pages) and Podscan (podcasts). Defaults to Exa. Returns URL, title and relevant Markdown text from resulting web pages or podcast episode descriptions.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "number"
                      },
                      "query": {
                        "type": "string"
                      },
                      "searchService": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "webSearch"
                },
                {
                  "description": "Ingests posts from RSS feed into Graphlit knowledge base. For podcast RSS feeds, audio will be downloaded, transcribed and ingested into Graphlit knowledge base. Accepts RSS URL and an optional read limit for the number of posts to read. Executes asynchronously and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "readLimit": {
                        "type": "number"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "ingestRSS"
                },
                {
                  "description": "Ingests content from URL into Graphlit knowledge base. Can scrape web pages, and can ingest individual Word documents, PDFs, audio recordings, videos, images, or any other unstructured data. Executes asynchronously and returns the content identifier.",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "ingestUrl"
                },
                {
                  "description": "Ingests text as content into Graphlit knowledge base. Accepts the text itself, and an optional text type (Plain, Markdown, Html). Defaults to Markdown text type. Optionally accepts the content name and an identifier for an existing content object. Will overwrite existing content, if provided. Can use for storing the output from LLM or other tools as content resources, which can be later searched or retrieved. Executes *synchronously* and returns the content identifier.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "text": {
                        "type": "string"
                      },
                      "textType": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "ingestText"
                },
                {
                  "description": "Ingests short-term textual memory as content into Graphlit knowledge base. Accepts an optional text type (Plain, Markdown, Html). Defaults to Markdown text type. Optionally accepts the content name. Will automatically be entity extracted into a knowledge graph. Use for storing short-term memories about the user or agent, which can be later searched or retrieved. Memories are transient and will be deleted after a period of time. Can use 'queryContents' or 'retrieveSources' tools to search for memories, by specifying the 'MEMORY' content type. Executes asynchronously and returns the content identifier.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "text": {
                        "type": "string"
                      },
                      "textType": {
                        "type": "string"
                      },
                      "timeToLive": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "ingestMemory"
                },
                {
                  "description": "Ingests local file into Graphlit knowledge base. Accepts the path to the file in the local filesystem. Can use for storing *large* long-term textual memories or the output from LLM or other tools as content resources, which can be later searched or retrieved. Executes asynchronously and returns the content identifier.",
                  "inputschema": {
                    "properties": {
                      "filePath": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "filePath"
                    ],
                    "type": "object"
                  },
                  "name": "ingestFile"
                },
                {
                  "description": "Screenshots web page from URL. Executes *synchronously* and returns the content identifier.",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "screenshotPage"
                },
                {
                  "description": "Prompts vision LLM and returns completion. Does *not* ingest image into Graphlit knowledge base. Accepts image URL as string. Returns Markdown text from LLM completion.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "describeImageUrl"
                },
                {
                  "description": "Prompts vision LLM and returns description of image content. Accepts content identifier as string, and optional prompt for image description. Returns Markdown text from LLM completion.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "prompt": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "describeImageContent"
                },
                {
                  "description": "Publishes text as audio format, and ingests into Graphlit knowledge base. Accepts a name for the content object, the text itself, and an optional text type (Plain, Markdown, Html). Defaults to Markdown text type. Optionally accepts an ElevenLabs voice identifier. You *must* retrieve the content resource to get the downloadable audio URL for this published audio. Executes *synchronously* and returns the content identifier.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "text": {
                        "type": "string"
                      },
                      "textType": {
                        "type": "string"
                      },
                      "voice": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "publishAudio"
                },
                {
                  "description": "Publishes text as image format, and ingests into Graphlit knowledge base. Accepts a name for the content object. Also, accepts a prompt for image generation. For example, 'Create a cartoon image of a raccoon, saying \"I Love Graphlit\"'. You *must* retrieve the content resource to get the downloadable image URL for this published image. Executes *synchronously* and returns the content identifier.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "prompt": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "publishImage"
                },
                {
                  "description": "Sends a webhook notification to the provided URL. Accepts the webhook URL. Also accepts the text to be sent with the webhook, and an optional text type (Plain, Markdown, Html). Defaults to Markdown text type. Returns true if the notification was successfully sent, or false otherwise.",
                  "inputschema": {
                    "properties": {
                      "text": {
                        "type": "string"
                      },
                      "textType": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url",
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "sendWebHookNotification"
                },
                {
                  "description": "Sends a Slack notification to the provided Slack channel. Accepts the Slack channel name. Also accepts the text for the Slack message, and an optional text type (Plain, Markdown, Html). Defaults to Markdown text type. Hint: In Slack Markdown, images are displayed by simply putting the URL in angle brackets like \u003chttps://example.com/image.jpg\u003e instead of using the traditional Markdown image syntax ![alt text](url). Requires environment variable to be configured: SLACK_BOT_TOKEN. Returns true if the notification was successfully sent, or false otherwise.",
                  "inputschema": {
                    "properties": {
                      "channelName": {
                        "type": "string"
                      },
                      "text": {
                        "type": "string"
                      },
                      "textType": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "channelName",
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "sendSlackNotification"
                },
                {
                  "description": "Posts a tweet from the configured user account. Accepts the plain text for the tweet. Tweet text rules: allowed - plain text, @mentions, #hashtags, URLs (auto-shortened), line breaks (\\n). Not allowed - markdown, HTML tags, rich text, or custom styles. Requires environment variables to be configured: TWITTER_CONSUMER_API_KEY, TWITTER_CONSUMER_API_SECRET, TWITTER_ACCESS_TOKEN_KEY, TWITTER_ACCESS_TOKEN_SECRET. Returns true if the notification was successfully sent, or false otherwise.",
                  "inputschema": {
                    "properties": {
                      "text": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "sendTwitterNotification"
                },
                {
                  "description": "Sends an email notification to the provided email address(es). Accepts the email subject and a list of email 'to' addresses. Email addresses should be in RFC 5322 format. i.e. Alice Wonderland \u003calice@wonderland.net\u003e, or alice@wonderland.net Also accepts the text for the email, and an optional text type (Plain, Markdown, Html). Defaults to Markdown text type. Requires environment variable to be configured: FROM_EMAIL_ADDRESS. Returns true if the notification was successfully sent, or false otherwise.",
                  "inputschema": {
                    "properties": {
                      "subject": {
                        "type": "string"
                      },
                      "text": {
                        "type": "string"
                      },
                      "textType": {
                        "type": "string"
                      },
                      "to": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "subject",
                      "to",
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "sendEmailNotification"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:21Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "hannesj": {
      "mcpproviderid": "hannesj",
      "self": "#/mcpproviders/hannesj",
      "xid": "/mcpproviders/hannesj",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:45.844638383Z",
      "modifiedat": "2025-05-26T16:41:45.963293802Z",

      "serversurl": "#/mcpproviders/hannesj/servers",
      "servers": {
        "mcp-graphql-schema": {
          "serverid": "mcp-graphql-schema",
          "self": "#/mcpproviders/hannesj/servers/mcp-graphql-schema",
          "xid": "/mcpproviders/hannesj/servers/mcp-graphql-schema",

          "metaurl": "#/mcpproviders/hannesj/servers/mcp-graphql-schema/meta",
          "meta": {
            "serverid": "mcp-graphql-schema",
            "self": "#/mcpproviders/hannesj/servers/mcp-graphql-schema/meta",
            "xid": "/mcpproviders/hannesj/servers/mcp-graphql-schema/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:45.963293802Z",
            "modifiedat": "2025-05-26T16:41:45.963293802Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/hannesj/servers/mcp-graphql-schema/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/hannesj/servers/mcp-graphql-schema/versions",
          "versions": {
            "1": {
              "serverid": "mcp-graphql-schema",
              "versionid": "1",
              "self": "#/mcpproviders/hannesj/servers/mcp-graphql-schema/versions/1",
              "xid": "/mcpproviders/hannesj/servers/mcp-graphql-schema/versions/1",
              "epoch": 1,
              "name": "io.github.hannesj/mcp-graphql-schema",
              "isdefault": true,
              "description": "GraphQL Schema Model Context Protocol Server",
              "createdat": "2025-05-26T16:41:45.963293802Z",
              "modifiedat": "2025-05-26T16:41:45.963293802Z",
              "ancestor": "1",
              "id": "7461c9c2-108f-46c1-8f35-6206ec509267",
              "packages": [
                {
                  "name": "mcp-graphql-schema",
                  "package_arguments": [
                    {
                      "default": "/ABSOLUTE/PATH/TO/schema.graphqls",
                      "description": "/ABSOLUTE/PATH/TO/schema.graphqls",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "/ABSOLUTE/PATH/TO/schema.graphqls",
                      "value_hint": "/ABSOLUTE/PATH/TO/schema.graphqls"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "0.0.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "947826694",
                "source": "github",
                "url": "https://github.com/hannesj/mcp-graphql-schema"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Lists all available root-level fields for GraphQL queries",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list-query-fields"
                },
                {
                  "description": "Gets detailed definition for a specific query field in SDL format",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-query-field"
                },
                {
                  "description": "Lists all available root-level fields for GraphQL mutations",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list-mutation-fields"
                },
                {
                  "description": "Gets detailed definition for a specific mutation field in SDL format",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-mutation-field"
                },
                {
                  "description": "Lists all available root-level fields for GraphQL subscriptions (if present in schema)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list-subscription-fields"
                },
                {
                  "description": "Gets detailed definition for a specific subscription field (if present in schema)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-subscription-field"
                },
                {
                  "description": "Lists all types defined in the GraphQL schema (excluding internal types)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list-types"
                },
                {
                  "description": "Gets detailed definition for a specific GraphQL type in SDL format",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-type"
                },
                {
                  "description": "Gets a simplified list of fields with their types for a specific GraphQL object type",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-type-fields"
                },
                {
                  "description": "Searches for types or fields in the schema by name pattern (case-insensitive regex)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search-schema"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:46Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-openapi-schema": {
          "serverid": "mcp-openapi-schema",
          "self": "#/mcpproviders/hannesj/servers/mcp-openapi-schema",
          "xid": "/mcpproviders/hannesj/servers/mcp-openapi-schema",

          "metaurl": "#/mcpproviders/hannesj/servers/mcp-openapi-schema/meta",
          "meta": {
            "serverid": "mcp-openapi-schema",
            "self": "#/mcpproviders/hannesj/servers/mcp-openapi-schema/meta",
            "xid": "/mcpproviders/hannesj/servers/mcp-openapi-schema/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:45.844638383Z",
            "modifiedat": "2025-05-26T16:41:45.844638383Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/hannesj/servers/mcp-openapi-schema/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/hannesj/servers/mcp-openapi-schema/versions",
          "versions": {
            "1": {
              "serverid": "mcp-openapi-schema",
              "versionid": "1",
              "self": "#/mcpproviders/hannesj/servers/mcp-openapi-schema/versions/1",
              "xid": "/mcpproviders/hannesj/servers/mcp-openapi-schema/versions/1",
              "epoch": 1,
              "name": "io.github.hannesj/mcp-openapi-schema",
              "isdefault": true,
              "description": "OpenAPI Schema Model Context Protocol Server",
              "createdat": "2025-05-26T16:41:45.844638383Z",
              "modifiedat": "2025-05-26T16:41:45.844638383Z",
              "ancestor": "1",
              "id": "7d68a487-bc40-4783-a2eb-1c9107fc26a4",
              "packages": [
                {
                  "name": "mcp-openapi-schema",
                  "package_arguments": [
                    {
                      "default": "/ABSOLUTE/PATH/TO/openapi.yaml",
                      "description": "The OpenAPI specification file to be used",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "/ABSOLUTE/PATH/TO/openapi.yaml",
                      "value_hint": "/ABSOLUTE/PATH/TO/openapi.yaml"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "0.0.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "947937745",
                "source": "github",
                "url": "https://github.com/hannesj/mcp-openapi-schema"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Lists all API paths and their HTTP methods with summaries in a nested object structure",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list-endpoints"
                },
                {
                  "description": "Gets detailed information about a specific endpoint including parameters and responses",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-endpoint"
                },
                {
                  "description": "Gets the request body schema for a specific endpoint and method",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-request-body"
                },
                {
                  "description": "Gets the response schema for a specific endpoint, method, and status code",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-response-schema"
                },
                {
                  "description": "Gets the parameters for a specific path",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-path-parameters"
                },
                {
                  "description": "Lists all schema components (schemas, responses, parameters, etc.)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list-components"
                },
                {
                  "description": "Gets detailed definition for a specific component",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-component"
                },
                {
                  "description": "Lists all available security schemes",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list-security-schemes"
                },
                {
                  "description": "Gets examples for a specific component or endpoint",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-examples"
                },
                {
                  "description": "Searches across paths, operations, and schemas",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search-schema"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:00Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "hao-cyber": {
      "mcpproviderid": "hao-cyber",
      "self": "#/mcpproviders/hao-cyber",
      "xid": "/mcpproviders/hao-cyber",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:55.276575051Z",
      "modifiedat": "2025-05-26T16:41:55.276575051Z",

      "serversurl": "#/mcpproviders/hao-cyber/servers",
      "servers": {
        "phone-mcp": {
          "serverid": "phone-mcp",
          "self": "#/mcpproviders/hao-cyber/servers/phone-mcp",
          "xid": "/mcpproviders/hao-cyber/servers/phone-mcp",

          "metaurl": "#/mcpproviders/hao-cyber/servers/phone-mcp/meta",
          "meta": {
            "serverid": "phone-mcp",
            "self": "#/mcpproviders/hao-cyber/servers/phone-mcp/meta",
            "xid": "/mcpproviders/hao-cyber/servers/phone-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:55.276575051Z",
            "modifiedat": "2025-05-26T16:41:55.276575051Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/hao-cyber/servers/phone-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/hao-cyber/servers/phone-mcp/versions",
          "versions": {
            "1": {
              "serverid": "phone-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/hao-cyber/servers/phone-mcp/versions/1",
              "xid": "/mcpproviders/hao-cyber/servers/phone-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.hao-cyber/phone-mcp",
              "isdefault": true,
              "description": "A phone control plugin for MCP that allows you to control your Android phone through ADB commands to connect any human",
              "createdat": "2025-05-26T16:41:55.276575051Z",
              "modifiedat": "2025-05-26T16:41:55.276575051Z",
              "ancestor": "1",
              "id": "b2c02765-621b-403e-8859-53afb9866451",
              "packages": [
                {
                  "name": "hao-cyber/phone-mcp",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "963381978",
                "source": "github",
                "url": "https://github.com/hao-cyber/phone-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:27Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "haris-musa": {
      "mcpproviderid": "haris-musa",
      "self": "#/mcpproviders/haris-musa",
      "xid": "/mcpproviders/haris-musa",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:39.888763101Z",
      "modifiedat": "2025-05-26T16:41:39.888763101Z",

      "serversurl": "#/mcpproviders/haris-musa/servers",
      "servers": {
        "excel-mcp-server": {
          "serverid": "excel-mcp-server",
          "self": "#/mcpproviders/haris-musa/servers/excel-mcp-server",
          "xid": "/mcpproviders/haris-musa/servers/excel-mcp-server",

          "metaurl": "#/mcpproviders/haris-musa/servers/excel-mcp-server/meta",
          "meta": {
            "serverid": "excel-mcp-server",
            "self": "#/mcpproviders/haris-musa/servers/excel-mcp-server/meta",
            "xid": "/mcpproviders/haris-musa/servers/excel-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:39.888763101Z",
            "modifiedat": "2025-05-26T16:41:39.888763101Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/haris-musa/servers/excel-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/haris-musa/servers/excel-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "excel-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/haris-musa/servers/excel-mcp-server/versions/1",
              "xid": "/mcpproviders/haris-musa/servers/excel-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.haris-musa/excel-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol server for Excel file manipulation",
              "createdat": "2025-05-26T16:41:39.888763101Z",
              "modifiedat": "2025-05-26T16:41:39.888763101Z",
              "ancestor": "1",
              "id": "2a5c04e4-0526-492b-aa98-49896e033b74",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "/path/to/excel/files",
                      "name": "EXCEL_FILES_PATH"
                    }
                  ],
                  "name": "excel-mcp-server",
                  "registry_name": "unknown",
                  "version": "0.1.1"
                }
              ],
              "prompts": [],
              "remotes": [
                {
                  "transport_type": "sse",
                  "url": "http://localhost:8000/sse"
                }
              ],
              "repository": {
                "id": "931365873",
                "source": "github",
                "url": "https://github.com/haris-musa/excel-mcp-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:33Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "heroku": {
      "mcpproviderid": "heroku",
      "self": "#/mcpproviders/heroku",
      "xid": "/mcpproviders/heroku",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:33.850605532Z",
      "modifiedat": "2025-05-26T16:42:33.850605532Z",

      "serversurl": "#/mcpproviders/heroku/servers",
      "servers": {
        "heroku-mcp-server": {
          "serverid": "heroku-mcp-server",
          "self": "#/mcpproviders/heroku/servers/heroku-mcp-server",
          "xid": "/mcpproviders/heroku/servers/heroku-mcp-server",

          "metaurl": "#/mcpproviders/heroku/servers/heroku-mcp-server/meta",
          "meta": {
            "serverid": "heroku-mcp-server",
            "self": "#/mcpproviders/heroku/servers/heroku-mcp-server/meta",
            "xid": "/mcpproviders/heroku/servers/heroku-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:33.850605532Z",
            "modifiedat": "2025-05-26T16:42:33.850605532Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/heroku/servers/heroku-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/heroku/servers/heroku-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "heroku-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/heroku/servers/heroku-mcp-server/versions/1",
              "xid": "/mcpproviders/heroku/servers/heroku-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.heroku/heroku-mcp-server",
              "isdefault": true,
              "description": "Heroku Platform MCP Server using the Heroku CLI",
              "createdat": "2025-05-26T16:42:33.850605532Z",
              "modifiedat": "2025-05-26T16:42:33.850605532Z",
              "ancestor": "1",
              "id": "cb1a844b-0145-433b-9a6f-f8ef19b2b3f4",
              "packages": [
                {
                  "name": "@heroku/mcp-server",
                  "registry_name": "unknown",
                  "version": "1.0.4"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "955359601",
                "source": "github",
                "url": "https://github.com/heroku/heroku-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List Heroku apps: owned, collaborator access, team/space filtering",
                  "inputschema": {
                    "properties": {
                      "all": {
                        "description": "Show owned apps and collaborator access. Default: owned only",
                        "type": "boolean"
                      },
                      "personal": {
                        "description": "List personal account apps only, ignoring default team",
                        "type": "boolean"
                      },
                      "space": {
                        "description": "Filter by private space name. Excludes team param",
                        "type": "string"
                      },
                      "team": {
                        "description": "Filter by team name. Excludes space param",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_apps"
                },
                {
                  "description": "Get app details: config, dynos, addons, access, domains",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "Target app name. Requires access permissions",
                        "type": "string"
                      },
                      "json": {
                        "description": "JSON output with full metadata. Default: text format",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "app"
                    ],
                    "type": "object"
                  },
                  "name": "get_app_info"
                },
                {
                  "description": "Create app: custom name, region (US/EU), team, private space",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "App name. Auto-generated if omitted",
                        "type": "string"
                      },
                      "region": {
                        "description": "Region: us/eu. Default: us. Excludes space param",
                        "enum": [
                          "us",
                          "eu"
                        ],
                        "type": "string"
                      },
                      "space": {
                        "description": "Private space name. Inherits region. Excludes region param",
                        "type": "string"
                      },
                      "team": {
                        "description": "Team name for ownership",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "create_app"
                },
                {
                  "description": "Rename app: validate and update app name",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "Current app name. Requires access",
                        "type": "string"
                      },
                      "newName": {
                        "description": "New unique app name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app",
                      "newName"
                    ],
                    "type": "object"
                  },
                  "name": "rename_app"
                },
                {
                  "description": "Transfer app ownership to user/team",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "App to transfer. Requires owner/admin access",
                        "type": "string"
                      },
                      "recipient": {
                        "description": "Target user email or team name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app",
                      "recipient"
                    ],
                    "type": "object"
                  },
                  "name": "transfer_app"
                },
                {
                  "description": "List add-ons: all apps or specific app, detailed metadata",
                  "inputschema": {
                    "properties": {
                      "all": {
                        "description": "List all add-ons across accessible apps. Overrides app param, shows full status",
                        "type": "boolean"
                      },
                      "app": {
                        "description": "Filter by app name. Shows add-ons and attachments. Uses Git remote default if omitted",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_addons"
                },
                {
                  "description": "Get add-on details: plan, state, billing",
                  "inputschema": {
                    "properties": {
                      "addon": {
                        "description": "Add-on identifier: UUID, name (postgresql-curved-12345), or attachment name (DATABASE)",
                        "type": "string"
                      },
                      "app": {
                        "description": "App context for add-on lookup. Required for attachment names. Uses Git remote default",
                        "type": "string"
                      }
                    },
                    "required": [
                      "addon"
                    ],
                    "type": "object"
                  },
                  "name": "get_addon_info"
                },
                {
                  "description": "Create add-on: specify service, plan, custom names",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "Target app for add-on. Must have write access. Region/space affects availability",
                        "type": "string"
                      },
                      "as": {
                        "description": "Custom attachment name. Used for config vars prefix. Must be unique in app",
                        "type": "string"
                      },
                      "name": {
                        "description": "Global add-on identifier. Must be unique across all Heroku add-ons",
                        "type": "string"
                      },
                      "serviceAndPlan": {
                        "description": "Format: service_slug:plan_slug (e.g., heroku-postgresql:essential-0)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "serviceAndPlan",
                      "app"
                    ],
                    "type": "object"
                  },
                  "name": "create_addon"
                },
                {
                  "description": "List available add-on services and features",
                  "inputschema": {
                    "properties": {
                      "json": {
                        "description": "JSON output with sharing options and app generation support. Default: basic text",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_addon_services"
                },
                {
                  "description": "List service plans: features, pricing, availability",
                  "inputschema": {
                    "properties": {
                      "json": {
                        "description": "JSON output with pricing, features, space compatibility. Default: text format",
                        "type": "boolean"
                      },
                      "service": {
                        "description": "Service slug (e.g., heroku-postgresql). Get from list_addon_services",
                        "type": "string"
                      }
                    },
                    "required": [
                      "service"
                    ],
                    "type": "object"
                  },
                  "name": "list_addon_plans"
                },
                {
                  "description": "App logs: monitor/debug/filter by dyno/process/source",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "Heroku app name. Requires: permissions, Cedar-gen",
                        "type": "string"
                      },
                      "dynoName": {
                        "description": "Format: web.1/worker.2. Excludes processType",
                        "type": "string"
                      },
                      "processType": {
                        "description": "web|worker. All instances. Excludes dynoName",
                        "type": "string"
                      },
                      "source": {
                        "description": "app=application, heroku=platform. Default: all",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app"
                    ],
                    "type": "object"
                  },
                  "name": "get_app_logs"
                },
                {
                  "description": "Enable maintenance mode and redirect traffic for a Heroku app",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "Target Heroku app name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app"
                    ],
                    "type": "object"
                  },
                  "name": "maintenance_on"
                },
                {
                  "description": "Disable maintenance mode and restore normal app operations",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "Target Heroku app name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app"
                    ],
                    "type": "object"
                  },
                  "name": "maintenance_off"
                },
                {
                  "description": "List and monitor Heroku app dynos. View running dynos, check status/health, monitor process states, verify configurations.",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "App name to list processes for",
                        "type": "string"
                      },
                      "json": {
                        "description": "Output process info in JSON format",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "app"
                    ],
                    "type": "object"
                  },
                  "name": "ps_list"
                },
                {
                  "description": "Scale Heroku app dynos. Adjust quantities, change sizes, view formation details, manage resources.",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "App name to scale",
                        "type": "string"
                      },
                      "dyno": {
                        "description": "Dyno type and quantity (e.g., web=3:Standard-2X, worker+1). Omit to show current formation",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app"
                    ],
                    "type": "object"
                  },
                  "name": "ps_scale"
                },
                {
                  "description": "Restart Heroku app processes. Restart specific dynos, process types, or all dynos. Reset dyno states selectively.",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "App name to restart processes for",
                        "type": "string"
                      },
                      "dyno-name": {
                        "description": "Specific dyno to restart (e.g., web.1). Omit both options to restart all",
                        "type": "string"
                      },
                      "process-type": {
                        "description": "Dyno type to restart (e.g., web). Omit both options to restart all",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app"
                    ],
                    "type": "object"
                  },
                  "name": "ps_restart"
                },
                {
                  "description": "Lists Heroku Private Spaces with CIDR blocks, regions, compliance and capacity details. JSON output supported.",
                  "inputschema": {
                    "properties": {
                      "json": {
                        "description": "JSON output for detailed space metadata, text output if false/omitted",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_private_spaces"
                },
                {
                  "description": "Lists accessible Heroku Teams. Use for: viewing teams, checking membership, getting team metadata, and verifying access. JSON output available.",
                  "inputschema": {
                    "properties": {
                      "json": {
                        "description": "Output format control - true for detailed JSON with team metadata, false/omitted for simplified text",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_teams"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:29Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "heurist-network": {
      "mcpproviderid": "heurist-network",
      "self": "#/mcpproviders/heurist-network",
      "xid": "/mcpproviders/heurist-network",
      "epoch": 2,
      "createdat": "2025-05-26T16:42:18.8588402Z",
      "modifiedat": "2025-05-26T16:42:18.979763929Z",

      "serversurl": "#/mcpproviders/heurist-network/servers",
      "servers": {
        "heurist-agent-framework": {
          "serverid": "heurist-agent-framework",
          "self": "#/mcpproviders/heurist-network/servers/heurist-agent-framework",
          "xid": "/mcpproviders/heurist-network/servers/heurist-agent-framework",

          "metaurl": "#/mcpproviders/heurist-network/servers/heurist-agent-framework/meta",
          "meta": {
            "serverid": "heurist-agent-framework",
            "self": "#/mcpproviders/heurist-network/servers/heurist-agent-framework/meta",
            "xid": "/mcpproviders/heurist-network/servers/heurist-agent-framework/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:18.979763929Z",
            "modifiedat": "2025-05-26T16:42:18.979763929Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/heurist-network/servers/heurist-agent-framework/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/heurist-network/servers/heurist-agent-framework/versions",
          "versions": {
            "1": {
              "serverid": "heurist-agent-framework",
              "versionid": "1",
              "self": "#/mcpproviders/heurist-network/servers/heurist-agent-framework/versions/1",
              "xid": "/mcpproviders/heurist-network/servers/heurist-agent-framework/versions/1",
              "epoch": 1,
              "name": "io.github.heurist-network/heurist-agent-framework",
              "isdefault": true,
              "description": "A flexible multi-interface AI agent framework for building agents with reasoning, tool use, memory, deep research, blockchain interaction, MCP, and agents-as-a-service.",
              "createdat": "2025-05-26T16:42:18.979763929Z",
              "modifiedat": "2025-05-26T16:42:18.979763929Z",
              "ancestor": "1",
              "id": "27c761f6-dc25-4c35-9912-2dc2bbdeaadd",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "${input:apiKey}",
                      "name": "API_KEY"
                    }
                  ],
                  "name": "heurist-agent-framework",
                  "registry_name": "npm",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "897068154",
                "source": "github",
                "url": "https://github.com/heurist-network/heurist-agent-framework"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:53Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "heurist-mesh-mcp-server": {
          "serverid": "heurist-mesh-mcp-server",
          "self": "#/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server",
          "xid": "/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server",

          "metaurl": "#/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server/meta",
          "meta": {
            "serverid": "heurist-mesh-mcp-server",
            "self": "#/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server/meta",
            "xid": "/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:18.8588402Z",
            "modifiedat": "2025-05-26T16:42:18.8588402Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "heurist-mesh-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server/versions/1",
              "xid": "/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.heurist-network/heurist-mesh-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:18.8588402Z",
              "modifiedat": "2025-05-26T16:42:18.8588402Z",
              "ancestor": "1",
              "id": "97174daf-db12-40ac-bab2-1c4255ce1741",
              "packages": [
                {
                  "name": "mesh-mcp-server",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "948277357",
                "source": "github",
                "url": "https://github.com/heurist-network/heurist-mesh-mcp-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:51Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "hichana": {
      "mcpproviderid": "hichana",
      "self": "#/mcpproviders/hichana",
      "xid": "/mcpproviders/hichana",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:25.751809457Z",
      "modifiedat": "2025-05-26T16:41:25.751809457Z",

      "serversurl": "#/mcpproviders/hichana/servers",
      "servers": {
        "goalstory-mcp": {
          "serverid": "goalstory-mcp",
          "self": "#/mcpproviders/hichana/servers/goalstory-mcp",
          "xid": "/mcpproviders/hichana/servers/goalstory-mcp",

          "metaurl": "#/mcpproviders/hichana/servers/goalstory-mcp/meta",
          "meta": {
            "serverid": "goalstory-mcp",
            "self": "#/mcpproviders/hichana/servers/goalstory-mcp/meta",
            "xid": "/mcpproviders/hichana/servers/goalstory-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:25.751809457Z",
            "modifiedat": "2025-05-26T16:41:25.751809457Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/hichana/servers/goalstory-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/hichana/servers/goalstory-mcp/versions",
          "versions": {
            "1": {
              "serverid": "goalstory-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/hichana/servers/goalstory-mcp/versions/1",
              "xid": "/mcpproviders/hichana/servers/goalstory-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.hichana/goalstory-mcp",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:25.751809457Z",
              "modifiedat": "2025-05-26T16:41:25.751809457Z",
              "ancestor": "1",
              "id": "21242e10-3373-40a3-9119-e4d075b7c27e",
              "packages": [
                {
                  "name": "goalstory-mcp",
                  "registry_name": "unknown",
                  "version": "0.4.3"
                }
              ],
              "repository": {
                "id": "911416763",
                "source": "github",
                "url": "https://github.com/hichana/goalstory-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:18Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "hiromitsusasaki": {
      "mcpproviderid": "hiromitsusasaki",
      "self": "#/mcpproviders/hiromitsusasaki",
      "xid": "/mcpproviders/hiromitsusasaki",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:37.094009305Z",
      "modifiedat": "2025-05-26T16:41:37.094009305Z",

      "serversurl": "#/mcpproviders/hiromitsusasaki/servers",
      "servers": {
        "raindrop-io-mcp-server": {
          "serverid": "raindrop-io-mcp-server",
          "self": "#/mcpproviders/hiromitsusasaki/servers/raindrop-io-mcp-server",
          "xid": "/mcpproviders/hiromitsusasaki/servers/raindrop-io-mcp-server",

          "metaurl": "#/mcpproviders/hiromitsusasaki/servers/raindrop-io-mcp-server/meta",
          "meta": {
            "serverid": "raindrop-io-mcp-server",
            "self": "#/mcpproviders/hiromitsusasaki/servers/raindrop-io-mcp-server/meta",
            "xid": "/mcpproviders/hiromitsusasaki/servers/raindrop-io-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:37.094009305Z",
            "modifiedat": "2025-05-26T16:41:37.094009305Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/hiromitsusasaki/servers/raindrop-io-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/hiromitsusasaki/servers/raindrop-io-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "raindrop-io-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/hiromitsusasaki/servers/raindrop-io-mcp-server/versions/1",
              "xid": "/mcpproviders/hiromitsusasaki/servers/raindrop-io-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.hiromitsusasaki/raindrop-io-mcp-server",
              "isdefault": true,
              "description": "An integration that allows LLMs to interact with Raindrop.io bookmarks using the Model Context Protocol (MCP).",
              "createdat": "2025-05-26T16:41:37.094009305Z",
              "modifiedat": "2025-05-26T16:41:37.094009305Z",
              "ancestor": "1",
              "id": "ddfb0c36-c116-4333-a62e-c9447d699b6e",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_access_token_here",
                      "name": "RAINDROP_TOKEN"
                    }
                  ],
                  "name": "raindrop-io-mcp-server",
                  "package_arguments": [
                    {
                      "default": "PATH_TO_BUILD/index.js",
                      "description": "PATH_TO_BUILD/index.js",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "PATH_TO_BUILD/index.js",
                      "value_hint": "PATH_TO_BUILD/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "repository": {
                "id": "914932138",
                "source": "github",
                "url": "https://github.com/hiromitsusasaki/raindrop-io-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:17Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "honeycombio": {
      "mcpproviderid": "honeycombio",
      "self": "#/mcpproviders/honeycombio",
      "xid": "/mcpproviders/honeycombio",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:06.542627115Z",
      "modifiedat": "2025-05-26T16:42:06.542627115Z",

      "serversurl": "#/mcpproviders/honeycombio/servers",
      "servers": {
        "honeycomb-mcp": {
          "serverid": "honeycomb-mcp",
          "self": "#/mcpproviders/honeycombio/servers/honeycomb-mcp",
          "xid": "/mcpproviders/honeycombio/servers/honeycomb-mcp",

          "metaurl": "#/mcpproviders/honeycombio/servers/honeycomb-mcp/meta",
          "meta": {
            "serverid": "honeycomb-mcp",
            "self": "#/mcpproviders/honeycombio/servers/honeycomb-mcp/meta",
            "xid": "/mcpproviders/honeycombio/servers/honeycomb-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:06.542627115Z",
            "modifiedat": "2025-05-26T16:42:06.542627115Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/honeycombio/servers/honeycomb-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/honeycombio/servers/honeycomb-mcp/versions",
          "versions": {
            "1": {
              "serverid": "honeycomb-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/honeycombio/servers/honeycomb-mcp/versions/1",
              "xid": "/mcpproviders/honeycombio/servers/honeycomb-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.honeycombio/honeycomb-mcp",
              "isdefault": true,
              "description": "Allows Honeycomb Enterprise customers to use AI to query and analyze their data, alerts, dashboards, and more; and cross-reference production behavior with the codebase.",
              "createdat": "2025-05-26T16:42:06.542627115Z",
              "modifiedat": "2025-05-26T16:42:06.542627115Z",
              "ancestor": "1",
              "id": "19aa503d-7b8e-42d8-a1e5-3bc918d36382",
              "packages": [
                {
                  "name": "@honeycombio/honeycomb-mcp",
                  "registry_name": "unknown",
                  "version": "0.0.1"
                }
              ],
              "repository": {
                "id": "906807010",
                "source": "github",
                "url": "https://github.com/honeycombio/honeycomb-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:34Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "horizondatawave": {
      "mcpproviderid": "horizondatawave",
      "self": "#/mcpproviders/horizondatawave",
      "xid": "/mcpproviders/horizondatawave",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:13.598890521Z",
      "modifiedat": "2025-05-26T16:42:13.598890521Z",

      "serversurl": "#/mcpproviders/horizondatawave/servers",
      "servers": {
        "hdw-mcp-server": {
          "serverid": "hdw-mcp-server",
          "self": "#/mcpproviders/horizondatawave/servers/hdw-mcp-server",
          "xid": "/mcpproviders/horizondatawave/servers/hdw-mcp-server",

          "metaurl": "#/mcpproviders/horizondatawave/servers/hdw-mcp-server/meta",
          "meta": {
            "serverid": "hdw-mcp-server",
            "self": "#/mcpproviders/horizondatawave/servers/hdw-mcp-server/meta",
            "xid": "/mcpproviders/horizondatawave/servers/hdw-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:13.598890521Z",
            "modifiedat": "2025-05-26T16:42:13.598890521Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/horizondatawave/servers/hdw-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/horizondatawave/servers/hdw-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "hdw-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/horizondatawave/servers/hdw-mcp-server/versions/1",
              "xid": "/mcpproviders/horizondatawave/servers/hdw-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.horizondatawave/hdw-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that provides comprehensive access to LinkedIn data and functionalities using the HorizonDataWave API, enabling not only data retrieval but also robust management of user accounts.",
              "createdat": "2025-05-26T16:42:13.598890521Z",
              "modifiedat": "2025-05-26T16:42:13.598890521Z",
              "ancestor": "1",
              "id": "0f4331b9-9229-49c4-b41c-5c254b610daa",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_HD_W_ACCESS_TOKEN",
                      "name": "HDW_ACCESS_TOKEN"
                    },
                    {
                      "description": "YOUR_HD_W_ACCOUNT_ID",
                      "name": "HDW_ACCOUNT_ID"
                    }
                  ],
                  "name": "@horizondatawave/mcp",
                  "registry_name": "npm",
                  "version": "0.1.3"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "947522686",
                "source": "github",
                "url": "https://github.com/horizondatawave/hdw-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Search for LinkedIn users with various filters.",
                  "inputschema": {
                    "properties": {
                      "company_keywords": {
                        "type": "string"
                      },
                      "count": {
                        "type": "integer"
                      },
                      "current_company": {
                        "type": "string"
                      },
                      "education": {
                        "type": "string"
                      },
                      "first_name": {
                        "type": "string"
                      },
                      "industry": {
                        "type": "string"
                      },
                      "keywords": {
                        "type": "string"
                      },
                      "last_name": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      },
                      "past_company": {
                        "type": "string"
                      },
                      "school_keywords": {
                        "type": "string"
                      },
                      "timeout": {
                        "type": "integer"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "search_linkedin_users"
                },
                {
                  "description": "Retrieve detailed profile information about a LinkedIn user.",
                  "inputschema": {
                    "properties": {
                      "user": {
                        "type": "string"
                      },
                      "with_education": {
                        "type": "boolean"
                      },
                      "with_experience": {
                        "type": "boolean"
                      },
                      "with_skills": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "user"
                    ],
                    "type": "object"
                  },
                  "name": "get_linkedin_profile"
                },
                {
                  "description": "Look up LinkedIn user details by email.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "email": {
                        "type": "string"
                      },
                      "timeout": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "email"
                    ],
                    "type": "object"
                  },
                  "name": "get_linkedin_email_user"
                },
                {
                  "description": "Retrieve posts for a LinkedIn user by URN.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "timeout": {
                        "type": "integer"
                      },
                      "urn": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "urn"
                    ],
                    "type": "object"
                  },
                  "name": "get_linkedin_user_posts"
                },
                {
                  "description": "Retrieve reactions for a LinkedIn user by URN.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "timeout": {
                        "type": "integer"
                      },
                      "urn": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "urn"
                    ],
                    "type": "object"
                  },
                  "name": "get_linkedin_user_reactions"
                },
                {
                  "description": "Retrieve top chat messages from the LinkedIn management API.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "timeout": {
                        "type": "integer"
                      },
                      "user": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "user"
                    ],
                    "type": "object"
                  },
                  "name": "get_linkedin_chat_messages"
                },
                {
                  "description": "Send a chat message using the LinkedIn management API.",
                  "inputschema": {
                    "properties": {
                      "text": {
                        "type": "string"
                      },
                      "user": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "user",
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "send_linkedin_chat_message"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:48Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "hungryrobot1": {
      "mcpproviderid": "hungryrobot1",
      "self": "#/mcpproviders/hungryrobot1",
      "xid": "/mcpproviders/hungryrobot1",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:33.266296983Z",
      "modifiedat": "2025-05-26T16:41:33.266296983Z",

      "serversurl": "#/mcpproviders/hungryrobot1/servers",
      "servers": {
        "MCP-PIF": {
          "serverid": "MCP-PIF",
          "self": "#/mcpproviders/hungryrobot1/servers/MCP-PIF",
          "xid": "/mcpproviders/hungryrobot1/servers/MCP-PIF",

          "metaurl": "#/mcpproviders/hungryrobot1/servers/MCP-PIF/meta",
          "meta": {
            "serverid": "MCP-PIF",
            "self": "#/mcpproviders/hungryrobot1/servers/MCP-PIF/meta",
            "xid": "/mcpproviders/hungryrobot1/servers/MCP-PIF/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:33.266296983Z",
            "modifiedat": "2025-05-26T16:41:33.266296983Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/hungryrobot1/servers/MCP-PIF/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/hungryrobot1/servers/MCP-PIF/versions",
          "versions": {
            "1": {
              "serverid": "MCP-PIF",
              "versionid": "1",
              "self": "#/mcpproviders/hungryrobot1/servers/MCP-PIF/versions/1",
              "xid": "/mcpproviders/hungryrobot1/servers/MCP-PIF/versions/1",
              "epoch": 1,
              "name": "io.github.hungryrobot1/mcp-pif",
              "isdefault": true,
              "description": "A MCP implementation of the personal intelligence framework (PIF)",
              "createdat": "2025-05-26T16:41:33.266296983Z",
              "modifiedat": "2025-05-26T16:41:33.266296983Z",
              "ancestor": "1",
              "id": "dd586d17-4a7e-4658-92df-8cf6b58bff4d",
              "packages": [
                {
                  "name": "mcp-pif",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "923899029",
                "source": "github",
                "url": "https://github.com/hungryrobot1/MCP-PIF"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Read file contents",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "description": "Path to the file to read",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "read"
                },
                {
                  "description": "Write or modify file content",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "Content to write",
                        "type": "string"
                      },
                      "edits": {
                        "description": "Array of edits for edit operation",
                        "items": {
                          "properties": {
                            "newText": {
                              "description": "New text to insert",
                              "type": "string"
                            },
                            "oldText": {
                              "description": "Text to replace",
                              "type": "string"
                            }
                          },
                          "required": [
                            "oldText",
                            "newText"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "lineNumber": {
                        "description": "Line number for replace operation",
                        "type": "number"
                      },
                      "operation": {
                        "description": "Type of write operation to perform",
                        "enum": [
                          "write",
                          "append",
                          "replace",
                          "edit"
                        ],
                        "type": "string"
                      },
                      "path": {
                        "description": "Path for the file to write/modify",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path",
                      "operation"
                    ],
                    "type": "object"
                  },
                  "name": "write"
                },
                {
                  "description": "Change current directory",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "description": "Directory to change to",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "cd"
                },
                {
                  "description": "Create a new directory",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "description": "Path of directory to create",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "mkdir"
                },
                {
                  "description": "List directory contents",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "description": "Optional path to list (defaults to current directory)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "ls"
                },
                {
                  "description": "Print working directory",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "pwd"
                },
                {
                  "description": "Rename a file or directory",
                  "inputschema": {
                    "properties": {
                      "newPath": {
                        "description": "New path/name for the file or directory",
                        "type": "string"
                      },
                      "oldPath": {
                        "description": "Current path of the file or directory",
                        "type": "string"
                      }
                    },
                    "required": [
                      "oldPath",
                      "newPath"
                    ],
                    "type": "object"
                  },
                  "name": "rename"
                },
                {
                  "description": "Move a file or directory to a new location",
                  "inputschema": {
                    "properties": {
                      "sourcePath": {
                        "description": "Source path of the file or directory to move",
                        "type": "string"
                      },
                      "targetPath": {
                        "description": "Target path where the file or directory will be moved to",
                        "type": "string"
                      }
                    },
                    "required": [
                      "sourcePath",
                      "targetPath"
                    ],
                    "type": "object"
                  },
                  "name": "move"
                },
                {
                  "description": "Delete a file or directory",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "description": "Path of the file or directory to delete",
                        "type": "string"
                      },
                      "recursive": {
                        "description": "If true, recursively delete directories and their contents",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "delete"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:29Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "hyperbrowserai": {
      "mcpproviderid": "hyperbrowserai",
      "self": "#/mcpproviders/hyperbrowserai",
      "xid": "/mcpproviders/hyperbrowserai",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:33.7723647Z",
      "modifiedat": "2025-05-26T16:41:33.7723647Z",

      "serversurl": "#/mcpproviders/hyperbrowserai/servers",
      "servers": {
        "mcp": {
          "serverid": "mcp",
          "self": "#/mcpproviders/hyperbrowserai/servers/mcp",
          "xid": "/mcpproviders/hyperbrowserai/servers/mcp",

          "metaurl": "#/mcpproviders/hyperbrowserai/servers/mcp/meta",
          "meta": {
            "serverid": "mcp",
            "self": "#/mcpproviders/hyperbrowserai/servers/mcp/meta",
            "xid": "/mcpproviders/hyperbrowserai/servers/mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:33.7723647Z",
            "modifiedat": "2025-05-26T16:41:33.7723647Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/hyperbrowserai/servers/mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/hyperbrowserai/servers/mcp/versions",
          "versions": {
            "1": {
              "serverid": "mcp",
              "versionid": "1",
              "self": "#/mcpproviders/hyperbrowserai/servers/mcp/versions/1",
              "xid": "/mcpproviders/hyperbrowserai/servers/mcp/versions/1",
              "epoch": 1,
              "name": "io.github.hyperbrowserai/mcp",
              "isdefault": true,
              "description": "A MCP server implementation for hyperbrowser",
              "createdat": "2025-05-26T16:41:33.7723647Z",
              "modifiedat": "2025-05-26T16:41:33.7723647Z",
              "ancestor": "1",
              "id": "feb2b365-5fab-461e-a8d3-89e9349ee743",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-api-key",
                      "name": "HYPERBROWSER_API_KEY"
                    }
                  ],
                  "name": "hyperbrowser-mcp",
                  "registry_name": "npm",
                  "version": "1.0.25"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "938957096",
                "source": "github",
                "url": "https://github.com/hyperbrowserai/mcp"
              },
              "resources": [
                {
                  "description": "Documentation resources accessible via hyperbrowser:// URI scheme",
                  "mimetype": "text/markdown",
                  "name": "Hyperbrowser Documentation Resource",
                  "uritemplate": "hyperbrowser://{pathname}"
                }
              ],
              "tools": [
                {
                  "description": "Extract formatted (markdown, screenshot etc) content from any webpage",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "scrape_webpage"
                },
                {
                  "description": "Navigate through multiple linked pages and extract LLM-friendly formatted content",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "crawl_webpages"
                },
                {
                  "description": "Convert messy HTML into structured JSON",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "extract_structured_data"
                },
                {
                  "description": "Query the web and get results with Bing search",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search_with_bing"
                },
                {
                  "description": "Fast, lightweight browser automation with the Browser Use agent",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "browser_use_agent"
                },
                {
                  "description": "General-purpose automation using OpenAI’s CUA model",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "openai_computer_use_agent"
                },
                {
                  "description": "Complex browser tasks using Claude computer use",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "claude_computer_use_agent"
                },
                {
                  "description": "Creates a new persistent Hyperbrowser profile.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_profile"
                },
                {
                  "description": "Deletes an existing persistent Hyperbrowser profile.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_profile"
                },
                {
                  "description": "Lists existing persistent Hyperbrowser profiles.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_profiles"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:35Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ibm": {
      "mcpproviderid": "ibm",
      "self": "#/mcpproviders/ibm",
      "xid": "/mcpproviders/ibm",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:28.781147242Z",
      "modifiedat": "2025-05-26T16:42:28.781147242Z",

      "serversurl": "#/mcpproviders/ibm/servers",
      "servers": {
        "wxflows": {
          "serverid": "wxflows",
          "self": "#/mcpproviders/ibm/servers/wxflows",
          "xid": "/mcpproviders/ibm/servers/wxflows",

          "metaurl": "#/mcpproviders/ibm/servers/wxflows/meta",
          "meta": {
            "serverid": "wxflows",
            "self": "#/mcpproviders/ibm/servers/wxflows/meta",
            "xid": "/mcpproviders/ibm/servers/wxflows/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:28.781147242Z",
            "modifiedat": "2025-05-26T16:42:28.781147242Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ibm/servers/wxflows/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ibm/servers/wxflows/versions",
          "versions": {
            "1": {
              "serverid": "wxflows",
              "versionid": "1",
              "self": "#/mcpproviders/ibm/servers/wxflows/versions/1",
              "xid": "/mcpproviders/ibm/servers/wxflows/versions/1",
              "epoch": 1,
              "name": "io.github.ibm/wxflows",
              "isdefault": true,
              "description": "Examples and tutorials for building AI applications with watsonx.ai Flows Engine",
              "createdat": "2025-05-26T16:42:28.781147242Z",
              "modifiedat": "2025-05-26T16:42:28.781147242Z",
              "ancestor": "1",
              "id": "16dc9c56-47bb-4604-9f37-221dd07510ed",
              "packages": [
                {
                  "name": "IBM/wxflows",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "822793282",
                "source": "github",
                "url": "https://github.com/IBM/wxflows"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:38Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "idoru": {
      "mcpproviderid": "idoru",
      "self": "#/mcpproviders/idoru",
      "xid": "/mcpproviders/idoru",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:39.407737802Z",
      "modifiedat": "2025-05-26T16:42:39.407737802Z",

      "serversurl": "#/mcpproviders/idoru/servers",
      "servers": {
        "influxdb-mcp-server": {
          "serverid": "influxdb-mcp-server",
          "self": "#/mcpproviders/idoru/servers/influxdb-mcp-server",
          "xid": "/mcpproviders/idoru/servers/influxdb-mcp-server",

          "metaurl": "#/mcpproviders/idoru/servers/influxdb-mcp-server/meta",
          "meta": {
            "serverid": "influxdb-mcp-server",
            "self": "#/mcpproviders/idoru/servers/influxdb-mcp-server/meta",
            "xid": "/mcpproviders/idoru/servers/influxdb-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:39.407737802Z",
            "modifiedat": "2025-05-26T16:42:39.407737802Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/idoru/servers/influxdb-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/idoru/servers/influxdb-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "influxdb-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/idoru/servers/influxdb-mcp-server/versions/1",
              "xid": "/mcpproviders/idoru/servers/influxdb-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.idoru/influxdb-mcp-server",
              "isdefault": true,
              "description": "An MCP Server for querying InfluxDB",
              "createdat": "2025-05-26T16:42:39.407737802Z",
              "modifiedat": "2025-05-26T16:42:39.407737802Z",
              "ancestor": "1",
              "id": "d78df157-559d-4e87-af1f-0dcbfe703a23",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_token",
                      "name": "INFLUXDB_TOKEN"
                    },
                    {
                      "description": "http://localhost:8086",
                      "name": "INFLUXDB_URL"
                    },
                    {
                      "description": "your_org",
                      "name": "INFLUXDB_ORG"
                    }
                  ],
                  "name": "influxdb-mcp-server",
                  "registry_name": "unknown",
                  "version": "0.1.1"
                }
              ],
              "prompts": [
                {
                  "arguments": [],
                  "description": "Common Flux query examples",
                  "name": "flux-query-examples"
                },
                {
                  "arguments": [],
                  "description": "Guide to InfluxDB line protocol format",
                  "name": "line-protocol-guide"
                }
              ],
              "repository": {
                "id": "946415795",
                "source": "github",
                "url": "https://github.com/idoru/influxdb-mcp-server"
              },
              "resources": [
                {
                  "description": "Displays all organizations in the InfluxDB instance",
                  "name": "orgs",
                  "uritemplate": "influxdb://orgs"
                },
                {
                  "description": "Shows all buckets with their metadata",
                  "name": "buckets",
                  "uritemplate": "influxdb://buckets"
                },
                {
                  "description": "Lists all measurements within a specified bucket",
                  "name": "bucket-measurements",
                  "uritemplate": "influxdb://bucket/{bucketName}/measurements"
                },
                {
                  "description": "Executes a Flux query and returns results as a resource",
                  "name": "query",
                  "uritemplate": "influxdb://query/{orgName}/{fluxQuery}"
                }
              ],
              "tools": [
                {
                  "description": "Write time-series data in line protocol format",
                  "inputschema": {
                    "properties": {
                      "bucket": {
                        "description": "The bucket name",
                        "type": "string"
                      },
                      "data": {
                        "description": "Data in InfluxDB line protocol format",
                        "type": "string"
                      },
                      "org": {
                        "description": "The organization name",
                        "type": "string"
                      },
                      "precision": {
                        "description": "Timestamp precision (ns, us, ms, s)",
                        "enum": [
                          "ns",
                          "us",
                          "ms",
                          "s"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "org",
                      "bucket",
                      "data"
                    ],
                    "type": "object"
                  },
                  "name": "write-data"
                },
                {
                  "description": "Execute Flux queries",
                  "inputschema": {
                    "properties": {
                      "org": {
                        "description": "The organization name",
                        "type": "string"
                      },
                      "query": {
                        "description": "Flux query string",
                        "type": "string"
                      }
                    },
                    "required": [
                      "org",
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "query-data"
                },
                {
                  "description": "Create a new bucket",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "description": "The bucket name",
                        "type": "string"
                      },
                      "orgID": {
                        "description": "The organization ID",
                        "type": "string"
                      },
                      "retentionPeriodSeconds": {
                        "description": "Retention period in seconds (optional)",
                        "type": "number"
                      }
                    },
                    "required": [
                      "name",
                      "orgID"
                    ],
                    "type": "object"
                  },
                  "name": "create-bucket"
                },
                {
                  "description": "Create a new organization",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "description": "Organization description (optional)",
                        "type": "string"
                      },
                      "name": {
                        "description": "The organization name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "create-org"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:24Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "iflytek": {
      "mcpproviderid": "iflytek",
      "self": "#/mcpproviders/iflytek",
      "xid": "/mcpproviders/iflytek",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:35.35563931Z",
      "modifiedat": "2025-05-26T16:42:35.35563931Z",

      "serversurl": "#/mcpproviders/iflytek/servers",
      "servers": {
        "ifly-workflow-mcp-server": {
          "serverid": "ifly-workflow-mcp-server",
          "self": "#/mcpproviders/iflytek/servers/ifly-workflow-mcp-server",
          "xid": "/mcpproviders/iflytek/servers/ifly-workflow-mcp-server",

          "metaurl": "#/mcpproviders/iflytek/servers/ifly-workflow-mcp-server/meta",
          "meta": {
            "serverid": "ifly-workflow-mcp-server",
            "self": "#/mcpproviders/iflytek/servers/ifly-workflow-mcp-server/meta",
            "xid": "/mcpproviders/iflytek/servers/ifly-workflow-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:35.35563931Z",
            "modifiedat": "2025-05-26T16:42:35.35563931Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/iflytek/servers/ifly-workflow-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/iflytek/servers/ifly-workflow-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "ifly-workflow-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/iflytek/servers/ifly-workflow-mcp-server/versions/1",
              "xid": "/mcpproviders/iflytek/servers/ifly-workflow-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.iflytek/ifly-workflow-mcp-server",
              "isdefault": true,
              "description": "This a simple implementation of an MCP server using iFlytek. It enables calling iFlytek workflows through MCP tools.",
              "createdat": "2025-05-26T16:42:35.35563931Z",
              "modifiedat": "2025-05-26T16:42:35.35563931Z",
              "ancestor": "1",
              "id": "6a9b532e-61df-4d4d-a898-25d66aa60315",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "/Users/hygao1024/Projects/config.yaml",
                      "name": "CONFIG_PATH"
                    }
                  ],
                  "name": "ifly-workflow-mcp-server",
                  "package_arguments": [
                    {
                      "default": "--from git+https://github.com/iflytek/ifly-workflow-mcp-server",
                      "description": "--from git+https://github.com/iflytek/ifly-workflow-mcp-server",
                      "format": "string",
                      "is_required": true,
                      "name": "--from git+https://github.com/iflytek/ifly-workflow-mcp-server",
                      "type": "named",
                      "value": "--from git+https://github.com/iflytek/ifly-workflow-mcp-server",
                      "value_hint": "git+https://github.com/iflytek/ifly-workflow-mcp-server"
                    },
                    {
                      "default": "ifly_workflow_mcp_server",
                      "description": "ifly_workflow_mcp_server",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "ifly_workflow_mcp_server",
                      "value_hint": "ifly_workflow_mcp_server"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "953998052",
                "source": "github",
                "url": "https://github.com/iflytek/ifly-workflow-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "System tool for uploading files.",
                  "inputschema": {
                    "properties": {
                      "file": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "file"
                    ],
                    "type": "object"
                  },
                  "name": "SYS_UPLOAD_FILE"
                },
                {
                  "description": "Tool to generate images based on user input.",
                  "inputschema": {
                    "properties": {
                      "AGENT_USER_INPUT": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "AGENT_USER_INPUT"
                    ],
                    "type": "object"
                  },
                  "name": "image_generator"
                },
                {
                  "description": "Tool for testing LLM interactions.",
                  "inputschema": {
                    "properties": {
                      "AGENT_USER_INPUT": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "AGENT_USER_INPUT"
                    ],
                    "type": "object"
                  },
                  "name": "llm_test"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:20Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ihor-sokoliuk": {
      "mcpproviderid": "ihor-sokoliuk",
      "self": "#/mcpproviders/ihor-sokoliuk",
      "xid": "/mcpproviders/ihor-sokoliuk",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:22.607402195Z",
      "modifiedat": "2025-05-26T16:42:22.607402195Z",

      "serversurl": "#/mcpproviders/ihor-sokoliuk/servers",
      "servers": {
        "mcp-searxng": {
          "serverid": "mcp-searxng",
          "self": "#/mcpproviders/ihor-sokoliuk/servers/mcp-searxng",
          "xid": "/mcpproviders/ihor-sokoliuk/servers/mcp-searxng",

          "metaurl": "#/mcpproviders/ihor-sokoliuk/servers/mcp-searxng/meta",
          "meta": {
            "serverid": "mcp-searxng",
            "self": "#/mcpproviders/ihor-sokoliuk/servers/mcp-searxng/meta",
            "xid": "/mcpproviders/ihor-sokoliuk/servers/mcp-searxng/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:22.607402195Z",
            "modifiedat": "2025-05-26T16:42:22.607402195Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ihor-sokoliuk/servers/mcp-searxng/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ihor-sokoliuk/servers/mcp-searxng/versions",
          "versions": {
            "1": {
              "serverid": "mcp-searxng",
              "versionid": "1",
              "self": "#/mcpproviders/ihor-sokoliuk/servers/mcp-searxng/versions/1",
              "xid": "/mcpproviders/ihor-sokoliuk/servers/mcp-searxng/versions/1",
              "epoch": 1,
              "name": "io.github.ihor-sokoliuk/mcp-searxng",
              "isdefault": true,
              "description": "MCP Server for SearXNG",
              "createdat": "2025-05-26T16:42:22.607402195Z",
              "modifiedat": "2025-05-26T16:42:22.607402195Z",
              "ancestor": "1",
              "id": "02cdb980-1dcd-4345-a8d1-d3f3f522d04b",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_SEARXNG_INSTANCE_URL",
                      "name": "SEARXNG_URL"
                    }
                  ],
                  "name": "mcp-searxng",
                  "package_arguments": [
                    {
                      "default": "-i",
                      "description": "Run an image",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i",
                      "value_hint": "-i"
                    },
                    {
                      "default": "--rm",
                      "description": "Remove container after run",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm",
                      "value_hint": "--rm"
                    },
                    {
                      "default": "-e SEARXNG_URL",
                      "description": "Set environment variable in container",
                      "format": "string",
                      "is_required": true,
                      "name": "-e SEARXNG_URL",
                      "type": "named",
                      "value": "-e SEARXNG_URL",
                      "value_hint": "SEARXNG_URL"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "0.4.6"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "907172461",
                "source": "github",
                "url": "https://github.com/ihor-sokoliuk/mcp-searxng"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Performs a web search using the SearXNG API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources.",
                  "inputschema": {
                    "properties": {
                      "language": {
                        "default": "all",
                        "description": "Language code for search results (e.g., 'en', 'fr', 'de'). Default is instance-dependent.",
                        "type": "string"
                      },
                      "pageno": {
                        "default": 1,
                        "description": "Search page number (starts at 1)",
                        "type": "number"
                      },
                      "query": {
                        "description": "The search query. This is the main input for the web search",
                        "type": "string"
                      },
                      "safesearch": {
                        "default": "0",
                        "description": "Safe search filter level (0: None, 1: Moderate, 2: Strict)",
                        "enum": [
                          "0",
                          "1",
                          "2"
                        ],
                        "type": "string"
                      },
                      "time_range": {
                        "default": "",
                        "description": "Time range of search (day, month, year)",
                        "enum": [
                          "day",
                          "month",
                          "year"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "searxng_web_search"
                },
                {
                  "description": "Read the content from an URL. Use this for further information retrieving to understand the content of each URL.",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "description": "URL",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "web_url_read"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:48Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "inkeep": {
      "mcpproviderid": "inkeep",
      "self": "#/mcpproviders/inkeep",
      "xid": "/mcpproviders/inkeep",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:49.467390228Z",
      "modifiedat": "2025-05-26T16:41:49.467390228Z",

      "serversurl": "#/mcpproviders/inkeep/servers",
      "servers": {
        "mcp-server-python": {
          "serverid": "mcp-server-python",
          "self": "#/mcpproviders/inkeep/servers/mcp-server-python",
          "xid": "/mcpproviders/inkeep/servers/mcp-server-python",

          "metaurl": "#/mcpproviders/inkeep/servers/mcp-server-python/meta",
          "meta": {
            "serverid": "mcp-server-python",
            "self": "#/mcpproviders/inkeep/servers/mcp-server-python/meta",
            "xid": "/mcpproviders/inkeep/servers/mcp-server-python/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:49.467390228Z",
            "modifiedat": "2025-05-26T16:41:49.467390228Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/inkeep/servers/mcp-server-python/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/inkeep/servers/mcp-server-python/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-python",
              "versionid": "1",
              "self": "#/mcpproviders/inkeep/servers/mcp-server-python/versions/1",
              "xid": "/mcpproviders/inkeep/servers/mcp-server-python/versions/1",
              "epoch": 1,
              "name": "io.github.inkeep/mcp-server-python",
              "isdefault": true,
              "description": "Inkeep MCP Server",
              "createdat": "2025-05-26T16:41:49.467390228Z",
              "modifiedat": "2025-05-26T16:41:49.467390228Z",
              "ancestor": "1",
              "id": "bfcde7fb-0ea1-499f-bca0-17ffcba95a0c",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "https://api.inkeep.com/v1",
                      "name": "INKEEP_API_BASE_URL"
                    },
                    {
                      "description": "\u003cYOUR_INKEEP_API_KEY\u003e",
                      "name": "INKEEP_API_KEY"
                    },
                    {
                      "description": "inkeep-rag",
                      "name": "INKEEP_API_MODEL"
                    },
                    {
                      "description": "search-product-content",
                      "name": "INKEEP_MCP_TOOL_NAME"
                    },
                    {
                      "description": "Retrieves product documentation about Inkeep. The query should be framed as a conversational question about Inkeep.",
                      "name": "INKEEP_MCP_TOOL_DESCRIPTION"
                    }
                  ],
                  "name": "inkeep-mcp-server",
                  "package_arguments": [
                    {
                      "default": "--directory \u003cYOUR_INKEEP_MCP_SERVER_ABSOLUTE_PATH\u003e",
                      "description": "Directory for the inkeep-mcp-server",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory \u003cYOUR_INKEEP_MCP_SERVER_ABSOLUTE_PATH\u003e",
                      "type": "named",
                      "value": "--directory \u003cYOUR_INKEEP_MCP_SERVER_ABSOLUTE_PATH\u003e",
                      "value_hint": "\u003cYOUR_INKEEP_MCP_SERVER_ABSOLUTE_PATH\u003e"
                    },
                    {
                      "default": "-m inkeep_mcp_server",
                      "description": "Run python module",
                      "format": "string",
                      "is_required": true,
                      "name": "-m inkeep_mcp_server",
                      "type": "named",
                      "value": "-m inkeep_mcp_server",
                      "value_hint": "inkeep_mcp_server"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "947631175",
                "source": "github",
                "url": "https://github.com/inkeep/mcp-server-python"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieves product documentation about Inkeep. The query should be framed as a conversational question about Inkeep.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search-product-content"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:46Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "integration-app": {
      "mcpproviderid": "integration-app",
      "self": "#/mcpproviders/integration-app",
      "xid": "/mcpproviders/integration-app",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:52.598871839Z",
      "modifiedat": "2025-05-26T16:41:52.598871839Z",

      "serversurl": "#/mcpproviders/integration-app/servers",
      "servers": {
        "mcp-server": {
          "serverid": "mcp-server",
          "self": "#/mcpproviders/integration-app/servers/mcp-server",
          "xid": "/mcpproviders/integration-app/servers/mcp-server",

          "metaurl": "#/mcpproviders/integration-app/servers/mcp-server/meta",
          "meta": {
            "serverid": "mcp-server",
            "self": "#/mcpproviders/integration-app/servers/mcp-server/meta",
            "xid": "/mcpproviders/integration-app/servers/mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:52.598871839Z",
            "modifiedat": "2025-05-26T16:41:52.598871839Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/integration-app/servers/mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/integration-app/servers/mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/integration-app/servers/mcp-server/versions/1",
              "xid": "/mcpproviders/integration-app/servers/mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.integration-app/mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:52.598871839Z",
              "modifiedat": "2025-05-26T16:41:52.598871839Z",
              "ancestor": "1",
              "id": "584b368d-b659-4bac-9036-dc319cf8d88d",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cyour-integration-app-token\u003e",
                      "name": "INTEGRATION_APP_TOKEN"
                    },
                    {
                      "description": "hubspot",
                      "name": "INTEGRATION_KEY"
                    }
                  ],
                  "name": "@integration-app/mcp-server",
                  "registry_name": "npm",
                  "version": "1.0.3"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "916850434",
                "source": "github",
                "url": "https://github.com/integration-app/mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "action name placeholder",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "action key placeholder"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:48Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "integromat": {
      "mcpproviderid": "integromat",
      "self": "#/mcpproviders/integromat",
      "xid": "/mcpproviders/integromat",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:53.192106595Z",
      "modifiedat": "2025-05-26T16:41:53.192106595Z",

      "serversurl": "#/mcpproviders/integromat/servers",
      "servers": {
        "make-mcp-server": {
          "serverid": "make-mcp-server",
          "self": "#/mcpproviders/integromat/servers/make-mcp-server",
          "xid": "/mcpproviders/integromat/servers/make-mcp-server",

          "metaurl": "#/mcpproviders/integromat/servers/make-mcp-server/meta",
          "meta": {
            "serverid": "make-mcp-server",
            "self": "#/mcpproviders/integromat/servers/make-mcp-server/meta",
            "xid": "/mcpproviders/integromat/servers/make-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:53.192106595Z",
            "modifiedat": "2025-05-26T16:41:53.192106595Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/integromat/servers/make-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/integromat/servers/make-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "make-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/integromat/servers/make-mcp-server/versions/1",
              "xid": "/mcpproviders/integromat/servers/make-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.integromat/make-mcp-server",
              "isdefault": true,
              "description": "Make MCP Server",
              "createdat": "2025-05-26T16:41:53.192106595Z",
              "modifiedat": "2025-05-26T16:41:53.192106595Z",
              "ancestor": "1",
              "id": "f4fca7d7-fbab-4174-ba76-1396c3451cf1",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cyour-api-key\u003e",
                      "name": "MAKE_API_KEY"
                    },
                    {
                      "description": "\u003cyour-zone\u003e",
                      "name": "MAKE_ZONE"
                    },
                    {
                      "description": "\u003cyour-team-id\u003e",
                      "name": "MAKE_TEAM"
                    }
                  ],
                  "name": "@makehq/mcp-server",
                  "registry_name": "npm",
                  "version": "0.5.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "946079810",
                "source": "github",
                "url": "https://github.com/integromat/make-mcp-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:16Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "isaacwasserman": {
      "mcpproviderid": "isaacwasserman",
      "self": "#/mcpproviders/isaacwasserman",
      "xid": "/mcpproviders/isaacwasserman",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:21.200910648Z",
      "modifiedat": "2025-05-26T16:41:21.303587935Z",

      "serversurl": "#/mcpproviders/isaacwasserman/servers",
      "servers": {
        "mcp-snowflake-server": {
          "serverid": "mcp-snowflake-server",
          "self": "#/mcpproviders/isaacwasserman/servers/mcp-snowflake-server",
          "xid": "/mcpproviders/isaacwasserman/servers/mcp-snowflake-server",

          "metaurl": "#/mcpproviders/isaacwasserman/servers/mcp-snowflake-server/meta",
          "meta": {
            "serverid": "mcp-snowflake-server",
            "self": "#/mcpproviders/isaacwasserman/servers/mcp-snowflake-server/meta",
            "xid": "/mcpproviders/isaacwasserman/servers/mcp-snowflake-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:21.200910648Z",
            "modifiedat": "2025-05-26T16:41:21.200910648Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/isaacwasserman/servers/mcp-snowflake-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/isaacwasserman/servers/mcp-snowflake-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-snowflake-server",
              "versionid": "1",
              "self": "#/mcpproviders/isaacwasserman/servers/mcp-snowflake-server/versions/1",
              "xid": "/mcpproviders/isaacwasserman/servers/mcp-snowflake-server/versions/1",
              "epoch": 1,
              "name": "io.github.isaacwasserman/mcp-snowflake-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:21.200910648Z",
              "modifiedat": "2025-05-26T16:41:21.200910648Z",
              "ancestor": "1",
              "id": "61942e80-99c9-4856-90c8-5a11ac76ade5",
              "packages": [
                {
                  "name": "mcp_snowflake_server",
                  "package_arguments": [
                    {
                      "default": "--python=3.12",
                      "description": "--python=3.12",
                      "format": "string",
                      "is_required": true,
                      "name": "--python=3.12",
                      "type": "named",
                      "value": "--python=3.12",
                      "value_hint": "3.12"
                    },
                    {
                      "default": "--directory /absolute/path/to/mcp_snowflake_server",
                      "description": "--directory /absolute/path/to/mcp_snowflake_server",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory /absolute/path/to/mcp_snowflake_server",
                      "type": "named",
                      "value": "--directory /absolute/path/to/mcp_snowflake_server",
                      "value_hint": "/absolute/path/to/mcp_snowflake_server"
                    },
                    {
                      "default": "mcp_snowflake_server",
                      "description": "mcp_snowflake_server",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp_snowflake_server",
                      "value_hint": "mcp_snowflake_server"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.4.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "903050511",
                "source": "github",
                "url": "https://github.com/isaacwasserman/mcp-snowflake-server"
              },
              "resources": [
                {
                  "description": "A living document of discovered data insights",
                  "mimetype": "text/plain",
                  "name": "Data Insights Memo",
                  "uritemplate": "memo://insights"
                },
                {
                  "description": "Description of the {table_name} table",
                  "mimetype": "text/plain",
                  "name": "{table_name} table",
                  "uritemplate": "context://table/{table_name}"
                }
              ],
              "tools": [
                {
                  "description": "List all available databases in Snowflake",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_databases"
                },
                {
                  "description": "List all schemas in a database",
                  "inputschema": {
                    "properties": {
                      "database": {
                        "description": "Database name to list schemas from",
                        "type": "string"
                      }
                    },
                    "required": [
                      "database"
                    ],
                    "type": "object"
                  },
                  "name": "list_schemas"
                },
                {
                  "description": "List all tables in a specific database and schema",
                  "inputschema": {
                    "properties": {
                      "database": {
                        "description": "Database name",
                        "type": "string"
                      },
                      "schema": {
                        "description": "Schema name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "database",
                      "schema"
                    ],
                    "type": "object"
                  },
                  "name": "list_tables"
                },
                {
                  "description": "Get the schema information for a specific table",
                  "inputschema": {
                    "properties": {
                      "table_name": {
                        "description": "Fully qualified table name in the format 'database.schema.table'",
                        "type": "string"
                      }
                    },
                    "required": [
                      "table_name"
                    ],
                    "type": "object"
                  },
                  "name": "describe_table"
                },
                {
                  "description": "Execute a SELECT query.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "SELECT SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "read_query"
                },
                {
                  "description": "Add a data insight to the memo",
                  "inputschema": {
                    "properties": {
                      "insight": {
                        "description": "Data insight discovered from analysis",
                        "type": "string"
                      }
                    },
                    "required": [
                      "insight"
                    ],
                    "type": "object"
                  },
                  "name": "append_insight"
                },
                {
                  "description": "Execute an INSERT, UPDATE, or DELETE query on the Snowflake database",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "write_query"
                },
                {
                  "description": "Create a new table in the Snowflake database",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "CREATE TABLE SQL statement",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "create_table"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:04Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-vegalite-server": {
          "serverid": "mcp-vegalite-server",
          "self": "#/mcpproviders/isaacwasserman/servers/mcp-vegalite-server",
          "xid": "/mcpproviders/isaacwasserman/servers/mcp-vegalite-server",

          "metaurl": "#/mcpproviders/isaacwasserman/servers/mcp-vegalite-server/meta",
          "meta": {
            "serverid": "mcp-vegalite-server",
            "self": "#/mcpproviders/isaacwasserman/servers/mcp-vegalite-server/meta",
            "xid": "/mcpproviders/isaacwasserman/servers/mcp-vegalite-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:21.303587935Z",
            "modifiedat": "2025-05-26T16:41:21.303587935Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/isaacwasserman/servers/mcp-vegalite-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/isaacwasserman/servers/mcp-vegalite-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-vegalite-server",
              "versionid": "1",
              "self": "#/mcpproviders/isaacwasserman/servers/mcp-vegalite-server/versions/1",
              "xid": "/mcpproviders/isaacwasserman/servers/mcp-vegalite-server/versions/1",
              "epoch": 1,
              "name": "io.github.isaacwasserman/mcp-vegalite-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:21.303587935Z",
              "modifiedat": "2025-05-26T16:41:21.303587935Z",
              "ancestor": "1",
              "id": "aa301cee-889b-4606-b66b-fd9dc1e77817",
              "packages": [
                {
                  "name": "mcp-server-vegalite",
                  "registry_name": "unknown",
                  "version": "0.0.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "902526658",
                "source": "github",
                "url": "https://github.com/isaacwasserman/mcp-vegalite-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Save a table of data agregations to the server for later visualization",
                  "inputschema": {
                    "properties": {
                      "data": {
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "data"
                    ],
                    "type": "object"
                  },
                  "name": "save_data"
                },
                {
                  "description": "Visualize a table of data using Vega-Lite syntax",
                  "inputschema": {
                    "properties": {
                      "data_name": {
                        "type": "string"
                      },
                      "vegalite_specification": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "data_name",
                      "vegalite_specification"
                    ],
                    "type": "object"
                  },
                  "name": "visualize_data"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:22Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "isdaniel": {
      "mcpproviderid": "isdaniel",
      "self": "#/mcpproviders/isdaniel",
      "xid": "/mcpproviders/isdaniel",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:53.450775825Z",
      "modifiedat": "2025-05-26T16:41:53.450775825Z",

      "serversurl": "#/mcpproviders/isdaniel/servers",
      "servers": {
        "mcp_weather_server": {
          "serverid": "mcp_weather_server",
          "self": "#/mcpproviders/isdaniel/servers/mcp_weather_server",
          "xid": "/mcpproviders/isdaniel/servers/mcp_weather_server",

          "metaurl": "#/mcpproviders/isdaniel/servers/mcp_weather_server/meta",
          "meta": {
            "serverid": "mcp_weather_server",
            "self": "#/mcpproviders/isdaniel/servers/mcp_weather_server/meta",
            "xid": "/mcpproviders/isdaniel/servers/mcp_weather_server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:53.450775825Z",
            "modifiedat": "2025-05-26T16:41:53.450775825Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/isdaniel/servers/mcp_weather_server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/isdaniel/servers/mcp_weather_server/versions",
          "versions": {
            "1": {
              "serverid": "mcp_weather_server",
              "versionid": "1",
              "self": "#/mcpproviders/isdaniel/servers/mcp_weather_server/versions/1",
              "xid": "/mcpproviders/isdaniel/servers/mcp_weather_server/versions/1",
              "epoch": 1,
              "name": "io.github.isdaniel/mcp_weather_server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:53.450775825Z",
              "modifiedat": "2025-05-26T16:41:53.450775825Z",
              "ancestor": "1",
              "id": "17829ab3-ae45-4fdd-95dc-4bb82a75752d",
              "packages": [
                {
                  "name": "mcp_weather_server",
                  "registry_name": "unknown",
                  "version": "0.2.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "949740349",
                "source": "github",
                "url": "https://github.com/isdaniel/mcp_weather_server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieves the current weather information for a given city.",
                  "inputschema": {
                    "properties": {
                      "city": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "city"
                    ],
                    "type": "object"
                  },
                  "name": "get_weather"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:18Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "its-dart": {
      "mcpproviderid": "its-dart",
      "self": "#/mcpproviders/its-dart",
      "xid": "/mcpproviders/its-dart",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:04.892901347Z",
      "modifiedat": "2025-05-26T16:42:04.892901347Z",

      "serversurl": "#/mcpproviders/its-dart/servers",
      "servers": {
        "dart-mcp-server": {
          "serverid": "dart-mcp-server",
          "self": "#/mcpproviders/its-dart/servers/dart-mcp-server",
          "xid": "/mcpproviders/its-dart/servers/dart-mcp-server",

          "metaurl": "#/mcpproviders/its-dart/servers/dart-mcp-server/meta",
          "meta": {
            "serverid": "dart-mcp-server",
            "self": "#/mcpproviders/its-dart/servers/dart-mcp-server/meta",
            "xid": "/mcpproviders/its-dart/servers/dart-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:04.892901347Z",
            "modifiedat": "2025-05-26T16:42:04.892901347Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/its-dart/servers/dart-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/its-dart/servers/dart-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "dart-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/its-dart/servers/dart-mcp-server/versions/1",
              "xid": "/mcpproviders/its-dart/servers/dart-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.its-dart/dart-mcp-server",
              "isdefault": true,
              "description": "Dart AI Model Context Protocol (MCP) server",
              "createdat": "2025-05-26T16:42:04.892901347Z",
              "modifiedat": "2025-05-26T16:42:04.892901347Z",
              "ancestor": "1",
              "id": "9c2d91f0-76c4-4292-a19f-e81e962954b5",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "dsa_...",
                      "name": "DART_TOKEN"
                    }
                  ],
                  "name": "dart-mcp-server",
                  "package_arguments": [
                    {
                      "default": "-i",
                      "description": "-i",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "-i",
                      "value_hint": "-i"
                    },
                    {
                      "default": "--rm",
                      "description": "--rm",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "--rm",
                      "value_hint": "--rm"
                    },
                    {
                      "default": "-e DART_TOKEN",
                      "description": "-e",
                      "format": "string",
                      "is_required": true,
                      "name": "-e DART_TOKEN",
                      "type": "named",
                      "value": "-e DART_TOKEN",
                      "value_hint": "DART_TOKEN"
                    },
                    {
                      "default": "mcp/dart",
                      "description": "mcp/dart",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp/dart",
                      "value_hint": "mcp/dart"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "0.1.13"
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Title of the task",
                      "name": "title",
                      "required": true
                    },
                    {
                      "description": "Description of the task",
                      "name": "description",
                      "required": false
                    },
                    {
                      "description": "Status of the task",
                      "name": "status",
                      "required": false
                    },
                    {
                      "description": "Priority of the task",
                      "name": "priority",
                      "required": false
                    },
                    {
                      "description": "Email of the assignee",
                      "name": "assignee",
                      "required": false
                    }
                  ],
                  "description": "Create a new task in Dart",
                  "name": "Create task"
                },
                {
                  "arguments": [
                    {
                      "description": "Title of the document",
                      "name": "title",
                      "required": true
                    },
                    {
                      "description": "Content of the document",
                      "name": "text",
                      "required": false
                    },
                    {
                      "description": "Folder to place the document in",
                      "name": "folder",
                      "required": false
                    }
                  ],
                  "description": "Create a new document in Dart",
                  "name": "Create doc"
                },
                {
                  "arguments": [
                    {
                      "description": "Filter by status (e.g., 'In Progress', 'Done')",
                      "name": "status",
                      "required": false
                    },
                    {
                      "description": "Filter by assignee email",
                      "name": "assignee",
                      "required": false
                    }
                  ],
                  "description": "Get a summary of tasks with optional filtering",
                  "name": "Summarize tasks"
                }
              ],
              "repository": {
                "id": "936960342",
                "source": "github",
                "url": "https://github.com/its-dart/dart-mcp-server"
              },
              "resources": [
                {
                  "description": "Information about the authenticated user associated with the API key, including their role, teams, and settings.",
                  "name": "Dart config",
                  "uritemplate": "dart-config:"
                },
                {
                  "description": "A Dart task with its title, description, status, priority, dates, and more. Use this to fetch detailed information about a specific task.",
                  "name": "Dart task",
                  "uritemplate": "dart-task:///{taskId}"
                },
                {
                  "description": "A Dart doc with its title, text content, and folder. Use this to fetch detailed information about a specific doc.",
                  "name": "Dart doc",
                  "uritemplate": "dart-doc:///{docId}"
                }
              ],
              "tools": [
                {
                  "description": "Get information about the user's space, including all of the possible values that can be provided to other endpoints. This includes available assignees, dartboards, folders, statuses, tags, priorities, and sizes.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_config"
                },
                {
                  "description": "List tasks from Dart with optional filtering parameters. You can filter by assignee, status, dartboard, priority, due date, and more.",
                  "inputschema": {
                    "properties": {
                      "assignee": {
                        "description": "Filter by assignee name or email",
                        "type": "string"
                      },
                      "assignee_duid": {
                        "description": "Filter by assignee ID",
                        "type": "string"
                      },
                      "dartboard": {
                        "description": "Filter by dartboard title",
                        "type": "string"
                      },
                      "dartboard_duid": {
                        "description": "Filter by dartboard ID",
                        "type": "string"
                      },
                      "description": {
                        "description": "Filter by description content",
                        "type": "string"
                      },
                      "due_at_after": {
                        "description": "Filter by due date after (ISO format)",
                        "type": "string"
                      },
                      "due_at_before": {
                        "description": "Filter by due date before (ISO format)",
                        "type": "string"
                      },
                      "duids": {
                        "description": "Filter by IDs",
                        "type": "string"
                      },
                      "in_trash": {
                        "description": "Filter by trash status",
                        "type": "boolean"
                      },
                      "is_draft": {
                        "description": "Filter by draft status",
                        "type": "boolean"
                      },
                      "kind": {
                        "description": "Filter by task kind",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Number of results per page",
                        "type": "number"
                      },
                      "offset": {
                        "description": "Initial index for pagination",
                        "type": "number"
                      },
                      "priority": {
                        "description": "Filter by priority",
                        "type": "string"
                      },
                      "size": {
                        "description": "Filter by task size",
                        "type": "number"
                      },
                      "start_at_after": {
                        "description": "Filter by start date after (ISO format)",
                        "type": "string"
                      },
                      "start_at_before": {
                        "description": "Filter by start date before (ISO format)",
                        "type": "string"
                      },
                      "status": {
                        "description": "Filter by status",
                        "type": "string"
                      },
                      "status_duid": {
                        "description": "Filter by status ID",
                        "type": "string"
                      },
                      "subscriber_duid": {
                        "description": "Filter by subscriber ID",
                        "type": "string"
                      },
                      "tag": {
                        "description": "Filter by tag",
                        "type": "string"
                      },
                      "title": {
                        "description": "Filter by title",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_tasks"
                },
                {
                  "description": "Create a new task in Dart. You can specify title, description, status, priority, size, dates, dartboard, assignees, tags, and parent task.",
                  "inputschema": {
                    "properties": {
                      "assignee": {
                        "description": "Single assignee name or email (if workspace doesn't allow multiple assignees)",
                        "type": "string"
                      },
                      "assignees": {
                        "description": "Array of assignee names or emails (if workspace allows multiple assignees)",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "dartboard": {
                        "description": "The title of the dartboard (project or list of tasks)",
                        "type": "string"
                      },
                      "description": {
                        "description": "A longer description of the task, which can include markdown formatting",
                        "type": "string"
                      },
                      "dueAt": {
                        "description": "The due date in ISO format (should be at 9:00am in user's timezone)",
                        "type": "string"
                      },
                      "parentId": {
                        "description": "The ID of the parent task",
                        "type": "string"
                      },
                      "priority": {
                        "description": "The priority (Critical, High, Medium, or Low)",
                        "type": "string"
                      },
                      "size": {
                        "description": "A number that represents the amount of work needed",
                        "type": "number"
                      },
                      "startAt": {
                        "description": "The start date in ISO format (should be at 9:00am in user's timezone)",
                        "type": "string"
                      },
                      "status": {
                        "description": "The status from the list of available statuses",
                        "type": "string"
                      },
                      "tags": {
                        "description": "Array of tags to apply to the task",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "title": {
                        "description": "The title of the task (required)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "title"
                    ],
                    "type": "object"
                  },
                  "name": "create_task"
                },
                {
                  "description": "Retrieve an existing task by its ID. Returns the task's information including title, description, status, priority, dates, and more.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "The 12-character alphanumeric ID of the task",
                        "pattern": "^[a-zA-Z0-9]{12}$",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "get_task"
                },
                {
                  "description": "Update an existing task. You can modify any of its properties including title, description, status, priority, dates, assignees, and more.",
                  "inputschema": {
                    "properties": {
                      "assignee": {
                        "description": "Single assignee name or email (if workspace doesn't allow multiple assignees)",
                        "type": "string"
                      },
                      "assignees": {
                        "description": "Array of assignee names or emails (if workspace allows multiple assignees)",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "dartboard": {
                        "description": "The title of the dartboard (project or list of tasks)",
                        "type": "string"
                      },
                      "description": {
                        "description": "A longer description of the task, which can include markdown formatting",
                        "type": "string"
                      },
                      "dueAt": {
                        "description": "The due date in ISO format (should be at 9:00am in user's timezone)",
                        "type": "string"
                      },
                      "id": {
                        "description": "The 12-character alphanumeric ID of the task",
                        "pattern": "^[a-zA-Z0-9]{12}$",
                        "type": "string"
                      },
                      "parentId": {
                        "description": "The ID of the parent task",
                        "type": "string"
                      },
                      "priority": {
                        "description": "The priority (Critical, High, Medium, or Low)",
                        "type": "string"
                      },
                      "size": {
                        "description": "A number that represents the amount of work needed",
                        "type": "number"
                      },
                      "startAt": {
                        "description": "The start date in ISO format (should be at 9:00am in user's timezone)",
                        "type": "string"
                      },
                      "status": {
                        "description": "The status from the list of available statuses",
                        "type": "string"
                      },
                      "tags": {
                        "description": "Array of tags to apply to the task",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "title": {
                        "description": "The title of the task",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "update_task"
                },
                {
                  "description": "Move an existing task to the trash, where it can be recovered if needed. Nothing else about the task will be changed.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "The 12-character alphanumeric ID of the task",
                        "pattern": "^[a-zA-Z0-9]{12}$",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "delete_task"
                },
                {
                  "description": "List docs from Dart with optional filtering parameters. You can filter by folder, title, text content, and more.",
                  "inputschema": {
                    "properties": {
                      "duids": {
                        "description": "Filter by IDs",
                        "type": "string"
                      },
                      "folder": {
                        "description": "Filter by folder title",
                        "type": "string"
                      },
                      "folder_duid": {
                        "description": "Filter by folder ID",
                        "type": "string"
                      },
                      "in_trash": {
                        "description": "Filter by trash status",
                        "type": "boolean"
                      },
                      "is_draft": {
                        "description": "Filter by draft status",
                        "type": "boolean"
                      },
                      "limit": {
                        "description": "Number of results per page",
                        "type": "number"
                      },
                      "offset": {
                        "description": "Initial index for pagination",
                        "type": "number"
                      },
                      "s": {
                        "description": "Search by title, text, or folder title",
                        "type": "string"
                      },
                      "text": {
                        "description": "Filter by text content",
                        "type": "string"
                      },
                      "title": {
                        "description": "Filter by title",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_docs"
                },
                {
                  "description": "Create a new doc in Dart. You can specify title, text content, and folder.",
                  "inputschema": {
                    "properties": {
                      "folder": {
                        "description": "The title of the folder to place the doc in",
                        "type": "string"
                      },
                      "text": {
                        "description": "The text content of the doc, which can include markdown formatting",
                        "type": "string"
                      },
                      "title": {
                        "description": "The title of the doc (required)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "title"
                    ],
                    "type": "object"
                  },
                  "name": "create_doc"
                },
                {
                  "description": "Retrieve an existing doc by its ID. Returns the doc's information including title, text content, folder, and more.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "The 12-character alphanumeric ID of the doc",
                        "pattern": "^[a-zA-Z0-9]{12}$",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "get_doc"
                },
                {
                  "description": "Update an existing doc. You can modify its title, text content, and folder.",
                  "inputschema": {
                    "properties": {
                      "folder": {
                        "description": "The title of the folder to place the doc in",
                        "type": "string"
                      },
                      "id": {
                        "description": "The 12-character alphanumeric ID of the doc",
                        "pattern": "^[a-zA-Z0-9]{12}$",
                        "type": "string"
                      },
                      "text": {
                        "description": "The text content of the doc, which can include markdown formatting",
                        "type": "string"
                      },
                      "title": {
                        "description": "The title of the doc",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "update_doc"
                },
                {
                  "description": "Move an existing doc to the trash, where it can be recovered if needed. Nothing else about the doc will be changed.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "The 12-character alphanumeric ID of the doc",
                        "pattern": "^[a-zA-Z0-9]{12}$",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "delete_doc"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:23Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ivo-toby": {
      "mcpproviderid": "ivo-toby",
      "self": "#/mcpproviders/ivo-toby",
      "xid": "/mcpproviders/ivo-toby",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:35.067798511Z",
      "modifiedat": "2025-05-26T16:42:35.067798511Z",

      "serversurl": "#/mcpproviders/ivo-toby/servers",
      "servers": {
        "contentful-mcp": {
          "serverid": "contentful-mcp",
          "self": "#/mcpproviders/ivo-toby/servers/contentful-mcp",
          "xid": "/mcpproviders/ivo-toby/servers/contentful-mcp",

          "metaurl": "#/mcpproviders/ivo-toby/servers/contentful-mcp/meta",
          "meta": {
            "serverid": "contentful-mcp",
            "self": "#/mcpproviders/ivo-toby/servers/contentful-mcp/meta",
            "xid": "/mcpproviders/ivo-toby/servers/contentful-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:35.067798511Z",
            "modifiedat": "2025-05-26T16:42:35.067798511Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ivo-toby/servers/contentful-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ivo-toby/servers/contentful-mcp/versions",
          "versions": {
            "1": {
              "serverid": "contentful-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ivo-toby/servers/contentful-mcp/versions/1",
              "xid": "/mcpproviders/ivo-toby/servers/contentful-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ivo-toby/contentful-mcp",
              "isdefault": true,
              "description": "MCP (Model Context Protocol) server for the Contentful Management API",
              "createdat": "2025-05-26T16:42:35.067798511Z",
              "modifiedat": "2025-05-26T16:42:35.067798511Z",
              "ancestor": "1",
              "id": "347d6881-c509-4dca-9ece-95e25098436b",
              "packages": [
                {
                  "name": "@ivotoby/contentful-management-mcp-server",
                  "package_arguments": [
                    {
                      "default": "--management-token \u003cyour token\u003e",
                      "description": "Management token for Contentful",
                      "format": "string",
                      "is_required": true,
                      "name": "--management-token \u003cyour token\u003e",
                      "type": "named",
                      "value": "--management-token \u003cyour token\u003e",
                      "value_hint": "\u003cyour token\u003e"
                    },
                    {
                      "default": "--host http://api.contentful.com",
                      "description": "Contentful API host address",
                      "format": "string",
                      "is_required": true,
                      "name": "--host http://api.contentful.com",
                      "type": "named",
                      "value": "--host http://api.contentful.com",
                      "value_hint": "http://api.contentful.com"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "1.14.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "898628964",
                "source": "github",
                "url": "https://github.com/ivo-toby/contentful-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_entry"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_entry"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_entry"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_entry"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "publish_entry"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "unpublish_entry"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search_entries"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "bulk_publish"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "bulk_unpublish"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "bulk_validate"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "upload_asset"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_asset"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_asset"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_asset"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "publish_asset"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "unpublish_asset"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_assets"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_spaces"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_space"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_environments"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_environment"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_environment"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_content_types"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_content_type"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_content_type"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_content_type"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_content_type"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "publish_content_type"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_ai_actions"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_ai_action"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_ai_action"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_ai_action"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_ai_action"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "publish_ai_action"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "unpublish_ai_action"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "invoke_ai_action"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_ai_action_invocation"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:55Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "jamsocket": {
      "mcpproviderid": "jamsocket",
      "self": "#/mcpproviders/jamsocket",
      "xid": "/mcpproviders/jamsocket",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:37.406328548Z",
      "modifiedat": "2025-05-26T16:41:37.406328548Z",

      "serversurl": "#/mcpproviders/jamsocket/servers",
      "servers": {
        "forevervm": {
          "serverid": "forevervm",
          "self": "#/mcpproviders/jamsocket/servers/forevervm",
          "xid": "/mcpproviders/jamsocket/servers/forevervm",

          "metaurl": "#/mcpproviders/jamsocket/servers/forevervm/meta",
          "meta": {
            "serverid": "forevervm",
            "self": "#/mcpproviders/jamsocket/servers/forevervm/meta",
            "xid": "/mcpproviders/jamsocket/servers/forevervm/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:37.406328548Z",
            "modifiedat": "2025-05-26T16:41:37.406328548Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/jamsocket/servers/forevervm/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/jamsocket/servers/forevervm/versions",
          "versions": {
            "1": {
              "serverid": "forevervm",
              "versionid": "1",
              "self": "#/mcpproviders/jamsocket/servers/forevervm/versions/1",
              "xid": "/mcpproviders/jamsocket/servers/forevervm/versions/1",
              "epoch": 1,
              "name": "io.github.jamsocket/forevervm",
              "isdefault": true,
              "description": "Securely run AI-generated code in stateful sandboxes that run forever.",
              "createdat": "2025-05-26T16:41:37.406328548Z",
              "modifiedat": "2025-05-26T16:41:37.406328548Z",
              "ancestor": "1",
              "id": "8df45968-12aa-4c35-ae54-62973243334a",
              "packages": [
                {
                  "name": "jamsocket/forevervm",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "918657398",
                "source": "github",
                "url": "https://github.com/jamsocket/forevervm"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:39Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "janwilmake": {
      "mcpproviderid": "janwilmake",
      "self": "#/mcpproviders/janwilmake",
      "xid": "/mcpproviders/janwilmake",
      "epoch": 1,
      "name": "janwilmake",
      "description": "Independent Researcher \u0026 Typescript Nerd Building AGI\r\n",
      "documentation": "https://github.com/janwilmake",
      "createdat": "2025-05-26T16:41:26.20485313Z",
      "modifiedat": "2025-05-26T16:41:26.20485313Z",

      "serversurl": "#/mcpproviders/janwilmake/servers",
      "servers": {},
      "serverscount": 0
    },
    "jaw9c": {
      "mcpproviderid": "jaw9c",
      "self": "#/mcpproviders/jaw9c",
      "xid": "/mcpproviders/jaw9c",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:21.766488048Z",
      "modifiedat": "2025-05-26T16:41:21.766488048Z",

      "serversurl": "#/mcpproviders/jaw9c/servers",
      "servers": {
        "awesome-remote-mcp-servers": {
          "serverid": "awesome-remote-mcp-servers",
          "self": "#/mcpproviders/jaw9c/servers/awesome-remote-mcp-servers",
          "xid": "/mcpproviders/jaw9c/servers/awesome-remote-mcp-servers",

          "metaurl": "#/mcpproviders/jaw9c/servers/awesome-remote-mcp-servers/meta",
          "meta": {
            "serverid": "awesome-remote-mcp-servers",
            "self": "#/mcpproviders/jaw9c/servers/awesome-remote-mcp-servers/meta",
            "xid": "/mcpproviders/jaw9c/servers/awesome-remote-mcp-servers/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:21.766488048Z",
            "modifiedat": "2025-05-26T16:41:21.766488048Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/jaw9c/servers/awesome-remote-mcp-servers/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/jaw9c/servers/awesome-remote-mcp-servers/versions",
          "versions": {
            "1": {
              "serverid": "awesome-remote-mcp-servers",
              "versionid": "1",
              "self": "#/mcpproviders/jaw9c/servers/awesome-remote-mcp-servers/versions/1",
              "xid": "/mcpproviders/jaw9c/servers/awesome-remote-mcp-servers/versions/1",
              "epoch": 1,
              "name": "io.github.jaw9c/awesome-remote-mcp-servers",
              "isdefault": true,
              "description": "A curated, opinionated list of high-quality remote Model Context Protocol (MCP) servers. ",
              "createdat": "2025-05-26T16:41:21.766488048Z",
              "modifiedat": "2025-05-26T16:41:21.766488048Z",
              "ancestor": "1",
              "id": "2a679bdd-d106-4510-99ea-b4802070d30f",
              "packages": [
                {
                  "name": "jaw9c/awesome-remote-mcp-servers",
                  "package_arguments": [
                    {
                      "default": "\u003cREMOTE_MCP_SERVER_URL\u003e",
                      "description": "\u003cREMOTE_MCP_SERVER_URL\u003e",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "\u003cREMOTE_MCP_SERVER_URL\u003e",
                      "value_hint": "\u003cREMOTE_MCP_SERVER_URL\u003e"
                    }
                  ],
                  "registry_name": "npm",
                  "version": ""
                }
              ],
              "repository": {
                "id": "961291556",
                "source": "github",
                "url": "https://github.com/jaw9c/awesome-remote-mcp-servers"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:46Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "jeamee": {
      "mcpproviderid": "jeamee",
      "self": "#/mcpproviders/jeamee",
      "xid": "/mcpproviders/jeamee",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:30.048628689Z",
      "modifiedat": "2025-05-26T16:41:30.048628689Z",

      "serversurl": "#/mcpproviders/jeamee/servers",
      "servers": {
        "mcphub-desktop": {
          "serverid": "mcphub-desktop",
          "self": "#/mcpproviders/jeamee/servers/mcphub-desktop",
          "xid": "/mcpproviders/jeamee/servers/mcphub-desktop",

          "metaurl": "#/mcpproviders/jeamee/servers/mcphub-desktop/meta",
          "meta": {
            "serverid": "mcphub-desktop",
            "self": "#/mcpproviders/jeamee/servers/mcphub-desktop/meta",
            "xid": "/mcpproviders/jeamee/servers/mcphub-desktop/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:30.048628689Z",
            "modifiedat": "2025-05-26T16:41:30.048628689Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/jeamee/servers/mcphub-desktop/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/jeamee/servers/mcphub-desktop/versions",
          "versions": {
            "1": {
              "serverid": "mcphub-desktop",
              "versionid": "1",
              "self": "#/mcpproviders/jeamee/servers/mcphub-desktop/versions/1",
              "xid": "/mcpproviders/jeamee/servers/mcphub-desktop/versions/1",
              "epoch": 1,
              "name": "io.github.jeamee/mcphub-desktop",
              "isdefault": true,
              "description": "Desktop APP for Discover and Install MCP Servers",
              "createdat": "2025-05-26T16:41:30.048628689Z",
              "modifiedat": "2025-05-26T16:41:30.048628689Z",
              "ancestor": "1",
              "id": "9f38c975-9a2a-484f-8173-562153f515e4",
              "packages": [
                {
                  "name": "mcphub-desktop",
                  "registry_name": "unknown",
                  "version": "0.2.1"
                }
              ],
              "repository": {
                "id": "898806615",
                "source": "github",
                "url": "https://github.com/Jeamee/MCPHub-Desktop"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:17:04Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "jeff-nasseri": {
      "mcpproviderid": "jeff-nasseri",
      "self": "#/mcpproviders/jeff-nasseri",
      "xid": "/mcpproviders/jeff-nasseri",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:26.583456958Z",
      "modifiedat": "2025-05-26T16:41:26.583456958Z",

      "serversurl": "#/mcpproviders/jeff-nasseri/servers",
      "servers": {
        "mikrotik-mcp": {
          "serverid": "mikrotik-mcp",
          "self": "#/mcpproviders/jeff-nasseri/servers/mikrotik-mcp",
          "xid": "/mcpproviders/jeff-nasseri/servers/mikrotik-mcp",

          "metaurl": "#/mcpproviders/jeff-nasseri/servers/mikrotik-mcp/meta",
          "meta": {
            "serverid": "mikrotik-mcp",
            "self": "#/mcpproviders/jeff-nasseri/servers/mikrotik-mcp/meta",
            "xid": "/mcpproviders/jeff-nasseri/servers/mikrotik-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:26.583456958Z",
            "modifiedat": "2025-05-26T16:41:26.583456958Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/jeff-nasseri/servers/mikrotik-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/jeff-nasseri/servers/mikrotik-mcp/versions",
          "versions": {
            "1": {
              "serverid": "mikrotik-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/jeff-nasseri/servers/mikrotik-mcp/versions/1",
              "xid": "/mcpproviders/jeff-nasseri/servers/mikrotik-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.jeff-nasseri/mikrotik-mcp",
              "isdefault": true,
              "description": "MCP server for Mikrotik",
              "createdat": "2025-05-26T16:41:26.583456958Z",
              "modifiedat": "2025-05-26T16:41:26.583456958Z",
              "ancestor": "1",
              "id": "5ebda83c-f2b3-4b14-ba72-13d940fa940a",
              "packages": [
                {
                  "name": "mcp-server-mikrotik",
                  "package_arguments": [
                    {
                      "default": "--host \u003cHOST\u003e",
                      "description": "Host to connect to",
                      "format": "string",
                      "is_required": true,
                      "name": "--host \u003cHOST\u003e",
                      "type": "named",
                      "value": "--host \u003cHOST\u003e",
                      "value_hint": "\u003cHOST\u003e"
                    },
                    {
                      "default": "--username \u003cUSERNAME\u003e",
                      "description": "Username for authentication",
                      "format": "string",
                      "is_required": true,
                      "name": "--username \u003cUSERNAME\u003e",
                      "type": "named",
                      "value": "--username \u003cUSERNAME\u003e",
                      "value_hint": "\u003cUSERNAME\u003e"
                    },
                    {
                      "default": "--password \u003cPASSWORD\u003e",
                      "description": "Password for authentication",
                      "format": "string",
                      "is_required": true,
                      "name": "--password \u003cPASSWORD\u003e",
                      "type": "named",
                      "value": "--password \u003cPASSWORD\u003e",
                      "value_hint": "\u003cPASSWORD\u003e"
                    },
                    {
                      "default": "--port 22",
                      "description": "Port to connect to",
                      "format": "string",
                      "is_required": true,
                      "name": "--port 22",
                      "type": "named",
                      "value": "--port 22",
                      "value_hint": "22"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.6"
                }
              ],
              "repository": {
                "id": "982172059",
                "source": "github",
                "url": "https://github.com/jeff-nasseri/mikrotik-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:28Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "jerhadf": {
      "mcpproviderid": "jerhadf",
      "self": "#/mcpproviders/jerhadf",
      "xid": "/mcpproviders/jerhadf",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:23.486038054Z",
      "modifiedat": "2025-05-26T16:41:23.486038054Z",

      "serversurl": "#/mcpproviders/jerhadf/servers",
      "servers": {
        "linear-mcp-server": {
          "serverid": "linear-mcp-server",
          "self": "#/mcpproviders/jerhadf/servers/linear-mcp-server",
          "xid": "/mcpproviders/jerhadf/servers/linear-mcp-server",

          "metaurl": "#/mcpproviders/jerhadf/servers/linear-mcp-server/meta",
          "meta": {
            "serverid": "linear-mcp-server",
            "self": "#/mcpproviders/jerhadf/servers/linear-mcp-server/meta",
            "xid": "/mcpproviders/jerhadf/servers/linear-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:23.486038054Z",
            "modifiedat": "2025-05-26T16:41:23.486038054Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/jerhadf/servers/linear-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/jerhadf/servers/linear-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "linear-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/jerhadf/servers/linear-mcp-server/versions/1",
              "xid": "/mcpproviders/jerhadf/servers/linear-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.jerhadf/linear-mcp-server",
              "isdefault": true,
              "description": "A server that integrates Linear's project management system with the Model Context Protocol (MCP) to allow LLMs to interact with Linear.",
              "createdat": "2025-05-26T16:41:23.486038054Z",
              "modifiedat": "2025-05-26T16:41:23.486038054Z",
              "ancestor": "1",
              "id": "a0e6ce8a-15eb-4776-b9de-a4bb3c7e4730",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_linear_api_key_here",
                      "name": "LINEAR_API_KEY"
                    }
                  ],
                  "name": "linear-mcp-server",
                  "registry_name": "npm",
                  "version": "0.1.0"
                }
              ],
              "prompts": [
                {
                  "arguments": [],
                  "description": "Instructions for using the Linear MCP server effectively",
                  "name": "linear-server-prompt"
                }
              ],
              "repository": {
                "id": "898106797",
                "source": "github",
                "url": "https://github.com/jerhadf/linear-mcp-server"
              },
              "resources": [
                {
                  "description": "A Linear issue with its details, comments, and metadata. Use this to fetch detailed information about a specific issue.",
                  "mimetype": "application/json",
                  "name": "Linear Issue",
                  "uritemplate": "linear-issue:///{issueId}"
                },
                {
                  "description": "Information about the authenticated user associated with the API key, including their role, teams, and settings.",
                  "name": "Current User",
                  "uritemplate": "linear-viewer:"
                },
                {
                  "description": "Details about the Linear organization associated with the API key, including settings, teams, and members.",
                  "name": "Current Organization",
                  "uritemplate": "linear-organization:"
                },
                {
                  "description": "All active issues belonging to a specific Linear team, including their status, priority, and assignees.",
                  "name": "Team Issues",
                  "uritemplate": "linear-team:///{teamId}/issues"
                },
                {
                  "description": "Active issues assigned to a specific Linear user. Returns issues sorted by update date.",
                  "name": "User Assigned Issues",
                  "uritemplate": "linear-user:///{userId}/assigned"
                }
              ],
              "tools": [
                {
                  "description": "Creates a new Linear issue with specified details. Use this to create tickets for tasks, bugs, or feature requests. Returns the created issue's identifier and URL. Required fields are title and teamId, with optional description, priority (0-4, where 0 is no priority and 1 is urgent), and status.",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "description": "Issue description",
                        "type": "string"
                      },
                      "priority": {
                        "description": "Priority (0-4)",
                        "type": "number"
                      },
                      "status": {
                        "description": "Issue status",
                        "type": "string"
                      },
                      "teamId": {
                        "description": "Team ID",
                        "type": "string"
                      },
                      "title": {
                        "description": "Issue title",
                        "type": "string"
                      }
                    },
                    "required": [
                      "title",
                      "teamId"
                    ],
                    "type": "object"
                  },
                  "name": "linear_create_issue"
                },
                {
                  "description": "Updates an existing Linear issue's properties. Use this to modify issue details like title, description, priority, or status. Requires the issue ID and accepts any combination of updatable fields. Returns the updated issue's identifier and URL.",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "description": "New description",
                        "type": "string"
                      },
                      "id": {
                        "description": "Issue ID",
                        "type": "string"
                      },
                      "priority": {
                        "description": "New priority (0-4)",
                        "type": "number"
                      },
                      "status": {
                        "description": "New status",
                        "type": "string"
                      },
                      "title": {
                        "description": "New title",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "linear_update_issue"
                },
                {
                  "description": "Searches Linear issues using flexible criteria. Supports filtering by any combination of: title/description text, team, status, assignee, labels, priority (1=urgent, 2=high, 3=normal, 4=low), and estimate. Returns up to 10 issues by default (configurable via limit).",
                  "inputschema": {
                    "properties": {
                      "assigneeId": {
                        "description": "Filter by assignee's user ID",
                        "type": "string"
                      },
                      "estimate": {
                        "description": "Filter by estimate points",
                        "type": "number"
                      },
                      "includeArchived": {
                        "description": "Include archived issues in results (default: false)",
                        "type": "boolean"
                      },
                      "labels": {
                        "description": "Filter by label names",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "limit": {
                        "description": "Max results to return (default: 10)",
                        "type": "number"
                      },
                      "priority": {
                        "description": "Filter by priority (1=urgent, 2=high, 3=normal, 4=low)",
                        "type": "number"
                      },
                      "query": {
                        "description": "Optional text to search in title and description",
                        "type": "string"
                      },
                      "status": {
                        "description": "Filter by status name (e.g., 'In Progress', 'Done')",
                        "type": "string"
                      },
                      "teamId": {
                        "description": "Filter by team ID",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "linear_search_issues"
                },
                {
                  "description": "Retrieves issues assigned to a specific user or the authenticated user if no userId is provided. Returns issues sorted by last updated, including priority, status, and other metadata. Useful for finding a user's workload or tracking assigned tasks.",
                  "inputschema": {
                    "properties": {
                      "includeArchived": {
                        "description": "Include archived issues in results",
                        "type": "boolean"
                      },
                      "limit": {
                        "description": "Maximum number of issues to return (default: 50)",
                        "type": "number"
                      },
                      "userId": {
                        "description": "Optional user ID. If not provided, returns authenticated user's issues",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "linear_get_user_issues"
                },
                {
                  "description": "Adds a comment to an existing Linear issue. Supports markdown formatting in the comment body. Can optionally specify a custom user name and avatar for the comment. Returns the created comment's details including its URL.",
                  "inputschema": {
                    "properties": {
                      "body": {
                        "description": "Comment text in markdown format",
                        "type": "string"
                      },
                      "createAsUser": {
                        "description": "Optional custom username to show for the comment",
                        "type": "string"
                      },
                      "displayIconUrl": {
                        "description": "Optional avatar URL for the comment",
                        "type": "string"
                      },
                      "issueId": {
                        "description": "ID of the issue to comment on",
                        "type": "string"
                      }
                    },
                    "required": [
                      "issueId",
                      "body"
                    ],
                    "type": "object"
                  },
                  "name": "linear_add_comment"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:17Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "jifrozen0110": {
      "mcpproviderid": "jifrozen0110",
      "self": "#/mcpproviders/jifrozen0110",
      "xid": "/mcpproviders/jifrozen0110",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:30.68838449Z",
      "modifiedat": "2025-05-26T16:42:30.68838449Z",

      "serversurl": "#/mcpproviders/jifrozen0110/servers",
      "servers": {
        "mcp-riot": {
          "serverid": "mcp-riot",
          "self": "#/mcpproviders/jifrozen0110/servers/mcp-riot",
          "xid": "/mcpproviders/jifrozen0110/servers/mcp-riot",

          "metaurl": "#/mcpproviders/jifrozen0110/servers/mcp-riot/meta",
          "meta": {
            "serverid": "mcp-riot",
            "self": "#/mcpproviders/jifrozen0110/servers/mcp-riot/meta",
            "xid": "/mcpproviders/jifrozen0110/servers/mcp-riot/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:30.68838449Z",
            "modifiedat": "2025-05-26T16:42:30.68838449Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/jifrozen0110/servers/mcp-riot/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/jifrozen0110/servers/mcp-riot/versions",
          "versions": {
            "1": {
              "serverid": "mcp-riot",
              "versionid": "1",
              "self": "#/mcpproviders/jifrozen0110/servers/mcp-riot/versions/1",
              "xid": "/mcpproviders/jifrozen0110/servers/mcp-riot/versions/1",
              "epoch": 1,
              "name": "io.github.jifrozen0110/mcp-riot",
              "isdefault": true,
              "description": "League of Legends MCP Server",
              "createdat": "2025-05-26T16:42:30.68838449Z",
              "modifiedat": "2025-05-26T16:42:30.68838449Z",
              "ancestor": "1",
              "id": "87e2c1e7-4fdb-436f-b52c-af683f63fb1b",
              "packages": [
                {
                  "name": "riot",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "967790464",
                "source": "github",
                "url": "https://github.com/jifrozen0110/mcp-riot"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Summarizes level, rank, top champions, and recent matches.",
                  "name": "get_player_summary"
                },
                {
                  "description": "Returns top champions by mastery points.",
                  "name": "get_top_champions_tool"
                },
                {
                  "description": "Returns mastery details for a specific champion.",
                  "name": "get_champion_mastery_tool"
                },
                {
                  "description": "Returns recent matches for the given summoner.",
                  "name": "get_recent_matches_tool"
                },
                {
                  "description": "Returns match performance stats for a given match ID and puuid.",
                  "name": "get_match_summary"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:34Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "jjsantos01": {
      "mcpproviderid": "jjsantos01",
      "self": "#/mcpproviders/jjsantos01",
      "xid": "/mcpproviders/jjsantos01",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:21.499261969Z",
      "modifiedat": "2025-05-26T16:42:21.499261969Z",

      "serversurl": "#/mcpproviders/jjsantos01/servers",
      "servers": {
        "qgis_mcp": {
          "serverid": "qgis_mcp",
          "self": "#/mcpproviders/jjsantos01/servers/qgis_mcp",
          "xid": "/mcpproviders/jjsantos01/servers/qgis_mcp",

          "metaurl": "#/mcpproviders/jjsantos01/servers/qgis_mcp/meta",
          "meta": {
            "serverid": "qgis_mcp",
            "self": "#/mcpproviders/jjsantos01/servers/qgis_mcp/meta",
            "xid": "/mcpproviders/jjsantos01/servers/qgis_mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:21.499261969Z",
            "modifiedat": "2025-05-26T16:42:21.499261969Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/jjsantos01/servers/qgis_mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/jjsantos01/servers/qgis_mcp/versions",
          "versions": {
            "1": {
              "serverid": "qgis_mcp",
              "versionid": "1",
              "self": "#/mcpproviders/jjsantos01/servers/qgis_mcp/versions/1",
              "xid": "/mcpproviders/jjsantos01/servers/qgis_mcp/versions/1",
              "epoch": 1,
              "name": "io.github.jjsantos01/qgis_mcp",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) that allows LLMs to use QGIS Desktop",
              "createdat": "2025-05-26T16:42:21.499261969Z",
              "modifiedat": "2025-05-26T16:42:21.499261969Z",
              "ancestor": "1",
              "id": "2e9aa092-56fc-4adb-93ba-e9c9d9919440",
              "packages": [
                {
                  "name": "qgis-mcp",
                  "package_arguments": [
                    {
                      "default": "--directory /ABSOLUTE/PATH/TO/PARENT/REPO/FOLDER/qgis_mcp/src/qgis_mcp",
                      "description": "Specifies the directory to run the command from",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory /ABSOLUTE/PATH/TO/PARENT/REPO/FOLDER/qgis_mcp/src/qgis_mcp",
                      "type": "named",
                      "value": "--directory /ABSOLUTE/PATH/TO/PARENT/REPO/FOLDER/qgis_mcp/src/qgis_mcp",
                      "value_hint": "/ABSOLUTE/PATH/TO/PARENT/REPO/FOLDER/qgis_mcp/src/qgis_mcp"
                    },
                    {
                      "default": "qgis_mcp_server.py",
                      "description": "The Python script to execute",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "qgis_mcp_server.py",
                      "value_hint": "qgis_mcp_server.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "947538862",
                "source": "github",
                "url": "https://github.com/jjsantos01/qgis_mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Simple ping command to check server connectivity",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "ping"
                },
                {
                  "description": "Get QGIS information about the current installation",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_qgis_info"
                },
                {
                  "description": "Load a QGIS project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "load_project"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:03Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "john-zhang-dev": {
      "mcpproviderid": "john-zhang-dev",
      "self": "#/mcpproviders/john-zhang-dev",
      "xid": "/mcpproviders/john-zhang-dev",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:41.119452324Z",
      "modifiedat": "2025-05-26T16:41:41.119452324Z",

      "serversurl": "#/mcpproviders/john-zhang-dev/servers",
      "servers": {
        "xero-mcp": {
          "serverid": "xero-mcp",
          "self": "#/mcpproviders/john-zhang-dev/servers/xero-mcp",
          "xid": "/mcpproviders/john-zhang-dev/servers/xero-mcp",

          "metaurl": "#/mcpproviders/john-zhang-dev/servers/xero-mcp/meta",
          "meta": {
            "serverid": "xero-mcp",
            "self": "#/mcpproviders/john-zhang-dev/servers/xero-mcp/meta",
            "xid": "/mcpproviders/john-zhang-dev/servers/xero-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:41.119452324Z",
            "modifiedat": "2025-05-26T16:41:41.119452324Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/john-zhang-dev/servers/xero-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/john-zhang-dev/servers/xero-mcp/versions",
          "versions": {
            "1": {
              "serverid": "xero-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/john-zhang-dev/servers/xero-mcp/versions/1",
              "xid": "/mcpproviders/john-zhang-dev/servers/xero-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.john-zhang-dev/xero-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol server allows Clients to interact with Xero",
              "createdat": "2025-05-26T16:41:41.119452324Z",
              "modifiedat": "2025-05-26T16:41:41.119452324Z",
              "ancestor": "1",
              "id": "aeca0d6b-ed78-4634-a29a-6d08f71de2b6",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_CLIENT_ID",
                      "name": "XERO_CLIENT_ID"
                    },
                    {
                      "description": "YOUR_CLIENT_SECRET",
                      "name": "XERO_CLIENT_SECRET"
                    },
                    {
                      "description": "http://localhost:5000/callback",
                      "name": "XERO_REDIRECT_URI"
                    }
                  ],
                  "name": "xero-mcp",
                  "registry_name": "npm",
                  "version": "1.3.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "950380608",
                "source": "github",
                "url": "https://github.com/john-zhang-dev/xero-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Authenticate with Xero using OAuth2",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "authenticate"
                },
                {
                  "description": "Creates one or more spent or received money transaction",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_bank_transactions"
                },
                {
                  "description": "Creates one or multiple contacts in a Xero organisation",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_contacts"
                },
                {
                  "description": "Retrieves report for balancesheet",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_balance_sheet"
                },
                {
                  "description": "Retrieves the full chart of accounts",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_accounts"
                },
                {
                  "description": "Retrieves any spent or received money transactions",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_bank_transactions"
                },
                {
                  "description": "Retrieves all contacts in a Xero organisation",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_contacts"
                },
                {
                  "description": "Retrieves sales invoices or purchase bills",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_invoices"
                },
                {
                  "description": "Retrieves journals",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_journals"
                },
                {
                  "description": "Retrieves Xero organisation details",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_organisations"
                },
                {
                  "description": "Retrieves payments for invoices and credit notes",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_payments"
                },
                {
                  "description": "Retrieves sales quotes",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_quotes"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:06Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kagisearch": {
      "mcpproviderid": "kagisearch",
      "self": "#/mcpproviders/kagisearch",
      "xid": "/mcpproviders/kagisearch",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:24.237725577Z",
      "modifiedat": "2025-05-26T16:41:24.237725577Z",

      "serversurl": "#/mcpproviders/kagisearch/servers",
      "servers": {
        "kagimcp": {
          "serverid": "kagimcp",
          "self": "#/mcpproviders/kagisearch/servers/kagimcp",
          "xid": "/mcpproviders/kagisearch/servers/kagimcp",

          "metaurl": "#/mcpproviders/kagisearch/servers/kagimcp/meta",
          "meta": {
            "serverid": "kagimcp",
            "self": "#/mcpproviders/kagisearch/servers/kagimcp/meta",
            "xid": "/mcpproviders/kagisearch/servers/kagimcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:24.237725577Z",
            "modifiedat": "2025-05-26T16:41:24.237725577Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kagisearch/servers/kagimcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kagisearch/servers/kagimcp/versions",
          "versions": {
            "1": {
              "serverid": "kagimcp",
              "versionid": "1",
              "self": "#/mcpproviders/kagisearch/servers/kagimcp/versions/1",
              "xid": "/mcpproviders/kagisearch/servers/kagimcp/versions/1",
              "epoch": 1,
              "name": "io.github.kagisearch/kagimcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for Kagi search \u0026 other tools.",
              "createdat": "2025-05-26T16:41:24.237725577Z",
              "modifiedat": "2025-05-26T16:41:24.237725577Z",
              "ancestor": "1",
              "id": "77963df5-3dc8-4961-ae0c-03e448b8713c",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_API_KEY_HERE",
                      "name": "KAGI_API_KEY"
                    },
                    {
                      "description": "YOUR_ENGINE_CHOICE_HERE",
                      "name": "KAGI_SUMMARIZER_ENGINE"
                    }
                  ],
                  "name": "kagimcp",
                  "package_arguments": [
                    {
                      "default": "--directory /ABSOLUTE/PATH/TO/PARENT/FOLDER/kagimcp",
                      "description": "Specifies the working directory",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory /ABSOLUTE/PATH/TO/PARENT/FOLDER/kagimcp",
                      "type": "named",
                      "value": "--directory /ABSOLUTE/PATH/TO/PARENT/FOLDER/kagimcp",
                      "value_hint": "/ABSOLUTE/PATH/TO/PARENT/FOLDER/kagimcp"
                    },
                    {
                      "default": "kagimcp",
                      "description": "Name of the package or executable to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "kagimcp",
                      "value_hint": "kagimcp"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.3"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "902662933",
                "source": "github",
                "url": "https://github.com/kagisearch/kagimcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Fetch web results based on one or more queries using the Kagi Search API. Use for general search and when the user explicitly tells you to 'fetch' results/information. Results are from all queries given. They are numbered continuously, so that a user may be able to refer to a result by a specific number.",
                  "inputschema": {
                    "properties": {
                      "queries": {
                        "description": "One or more concise, keyword-focused search queries. Include essential context within each query for standalone use.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "queries"
                    ],
                    "type": "object"
                  },
                  "name": "kagi_search_fetch"
                },
                {
                  "description": "Summarize content from a URL using the Kagi Summarizer API. The Summarizer can summarize any document type (text webpage, video, audio, etc.)",
                  "inputschema": {
                    "properties": {
                      "summary_type": {
                        "description": "Type of summary to produce. Options are 'summary' for paragraph prose and 'takeaway' for a bulleted list of key points.",
                        "enum": [
                          "summary",
                          "takeaway"
                        ],
                        "type": "string"
                      },
                      "target_language": {
                        "description": "Desired output language using language codes (e.g., 'EN' for English). If not specified, the document's original language influences the output.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "url": {
                        "description": "A URL to a document to summarize.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "kagi_summarizer"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:54Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kapilduraphe": {
      "mcpproviderid": "kapilduraphe",
      "self": "#/mcpproviders/kapilduraphe",
      "xid": "/mcpproviders/kapilduraphe",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:29.712103703Z",
      "modifiedat": "2025-05-26T16:41:29.793396399Z",

      "serversurl": "#/mcpproviders/kapilduraphe/servers",
      "servers": {
        "okta-mcp-server": {
          "serverid": "okta-mcp-server",
          "self": "#/mcpproviders/kapilduraphe/servers/okta-mcp-server",
          "xid": "/mcpproviders/kapilduraphe/servers/okta-mcp-server",

          "metaurl": "#/mcpproviders/kapilduraphe/servers/okta-mcp-server/meta",
          "meta": {
            "serverid": "okta-mcp-server",
            "self": "#/mcpproviders/kapilduraphe/servers/okta-mcp-server/meta",
            "xid": "/mcpproviders/kapilduraphe/servers/okta-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:29.793396399Z",
            "modifiedat": "2025-05-26T16:41:29.793396399Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kapilduraphe/servers/okta-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kapilduraphe/servers/okta-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "okta-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/kapilduraphe/servers/okta-mcp-server/versions/1",
              "xid": "/mcpproviders/kapilduraphe/servers/okta-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.kapilduraphe/okta-mcp-server",
              "isdefault": true,
              "description": "Okta MCP Server",
              "createdat": "2025-05-26T16:41:29.793396399Z",
              "modifiedat": "2025-05-26T16:41:29.793396399Z",
              "ancestor": "1",
              "id": "618671cb-8783-47c7-a81c-164f5f9e2cc1",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "https://your-domain.okta.com",
                      "name": "OKTA_ORG_URL"
                    },
                    {
                      "description": "your-api-token",
                      "name": "OKTA_API_TOKEN"
                    }
                  ],
                  "name": "okta-mcp-server",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "932923739",
                "source": "github",
                "url": "https://github.com/kapilduraphe/okta-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieves detailed user information from Okta, including user details, account dates, personal information, employment details, contact information, address, and preferences.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_user"
                },
                {
                  "description": "Lists users from Okta with optional filtering and pagination, supporting SCIM filter expressions, free-form text search, sorting options, and pagination support.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_users"
                },
                {
                  "description": "Lists user groups from Okta with optional filtering and pagination, supporting filter expressions, free-form text search, sorting options, and pagination support.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_groups"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:46Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "webflow-mcp-server": {
          "serverid": "webflow-mcp-server",
          "self": "#/mcpproviders/kapilduraphe/servers/webflow-mcp-server",
          "xid": "/mcpproviders/kapilduraphe/servers/webflow-mcp-server",

          "metaurl": "#/mcpproviders/kapilduraphe/servers/webflow-mcp-server/meta",
          "meta": {
            "serverid": "webflow-mcp-server",
            "self": "#/mcpproviders/kapilduraphe/servers/webflow-mcp-server/meta",
            "xid": "/mcpproviders/kapilduraphe/servers/webflow-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:29.712103703Z",
            "modifiedat": "2025-05-26T16:41:29.712103703Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kapilduraphe/servers/webflow-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kapilduraphe/servers/webflow-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "webflow-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/kapilduraphe/servers/webflow-mcp-server/versions/1",
              "xid": "/mcpproviders/kapilduraphe/servers/webflow-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.kapilduraphe/webflow-mcp-server",
              "isdefault": true,
              "description": "Webflow MCP server",
              "createdat": "2025-05-26T16:41:29.712103703Z",
              "modifiedat": "2025-05-26T16:41:29.712103703Z",
              "ancestor": "1",
              "id": "c7876b07-1fe3-4006-a104-93ef9f9e1669",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-api-token",
                      "name": "WEBFLOW_API_TOKEN"
                    }
                  ],
                  "name": "webflow-mcp-server",
                  "package_arguments": [
                    {
                      "default": "/ABSOLUTE/PATH/TO/YOUR/build/index.js",
                      "description": "Path to the entry point script",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "/ABSOLUTE/PATH/TO/YOUR/build/index.js",
                      "value_hint": "/ABSOLUTE/PATH/TO/YOUR/build/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "935070409",
                "source": "github",
                "url": "https://github.com/kapilduraphe/webflow-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve detailed information about a specific Webflow site by ID, including workspace, creation date, display name, and publishing details",
                  "inputschema": {
                    "properties": {
                      "siteId": {
                        "description": "The unique identifier of the Webflow site",
                        "type": "string"
                      }
                    },
                    "required": [
                      "siteId"
                    ],
                    "type": "object"
                  },
                  "name": "get_site"
                },
                {
                  "description": "Retrieve a list of all Webflow sites accessible to the authenticated user",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_sites"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:40Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "keboola": {
      "mcpproviderid": "keboola",
      "self": "#/mcpproviders/keboola",
      "xid": "/mcpproviders/keboola",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:52.175612581Z",
      "modifiedat": "2025-05-26T16:41:52.175612581Z",

      "serversurl": "#/mcpproviders/keboola/servers",
      "servers": {
        "keboola-mcp-server": {
          "serverid": "keboola-mcp-server",
          "self": "#/mcpproviders/keboola/servers/keboola-mcp-server",
          "xid": "/mcpproviders/keboola/servers/keboola-mcp-server",

          "metaurl": "#/mcpproviders/keboola/servers/keboola-mcp-server/meta",
          "meta": {
            "serverid": "keboola-mcp-server",
            "self": "#/mcpproviders/keboola/servers/keboola-mcp-server/meta",
            "xid": "/mcpproviders/keboola/servers/keboola-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:52.175612581Z",
            "modifiedat": "2025-05-26T16:41:52.175612581Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/keboola/servers/keboola-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/keboola/servers/keboola-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "keboola-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/keboola/servers/keboola-mcp-server/versions/1",
              "xid": "/mcpproviders/keboola/servers/keboola-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.keboola/keboola-mcp-server",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) Server for the Keboola Platform",
              "createdat": "2025-05-26T16:41:52.175612581Z",
              "modifiedat": "2025-05-26T16:41:52.175612581Z",
              "ancestor": "1",
              "id": "eba4813b-2591-4264-b7bc-c485b7652e92",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_keboola_storage_token",
                      "name": "KBC_STORAGE_TOKEN"
                    },
                    {
                      "description": "your_workspace_schema",
                      "name": "KBC_WORKSPACE_SCHEMA"
                    }
                  ],
                  "name": "keboola-mcp-server",
                  "package_arguments": [
                    {
                      "default": "-m keboola_mcp_server.cli",
                      "description": "Module to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "-m keboola_mcp_server.cli",
                      "value_hint": "keboola_mcp_server.cli"
                    },
                    {
                      "default": "--transport stdio",
                      "description": "Specify the transport type",
                      "format": "string",
                      "is_required": true,
                      "name": "--transport stdio",
                      "type": "named",
                      "value": "--transport stdio",
                      "value_hint": "stdio"
                    },
                    {
                      "default": "--api-url https://connection.YOUR_REGION.keboola.com",
                      "description": "API URL for Keboola Connection",
                      "format": "string",
                      "is_required": true,
                      "name": "--api-url https://connection.YOUR_REGION.keboola.com",
                      "type": "named",
                      "value": "--api-url https://connection.YOUR_REGION.keboola.com",
                      "value_hint": "https://connection.YOUR_REGION.keboola.com"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.17.4"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "915789942",
                "source": "github",
                "url": "https://github.com/keboola/mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Answers a question using the Keboola documentation as a source.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "Natural language query to search for in the documentation.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "docs_query"
                },
                {
                  "description": "Retrieves components configurations in the project, optionally filtered by component types or specific component IDs",
                  "inputschema": {
                    "properties": {
                      "component_ids": {
                        "description": "List of component IDs to retrieve configurations for. If none, return all components.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "component_types": {
                        "description": "List of component types to filter by. If none, return all components.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "retrieve_components"
                },
                {
                  "description": "Retrieves transformations configurations in the project, optionally filtered by specific transformation IDs.",
                  "inputschema": {
                    "properties": {
                      "transformation_ids": {
                        "description": "List of transformation component IDs to retrieve configurations for.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "retrieve_transformations"
                },
                {
                  "description": "Gets detailed information about a specific Keboola component configuration given component/transformation ID and configuration ID.",
                  "inputschema": {
                    "properties": {
                      "component_id": {
                        "description": "Unique identifier of the Keboola component/transformation",
                        "type": "string"
                      },
                      "configuration_id": {
                        "description": "Unique identifier of the Keboola component/transformation configuration you want details about",
                        "type": "string"
                      }
                    },
                    "required": [
                      "component_id",
                      "configuration_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_component_details"
                },
                {
                  "description": "Creates an SQL transformation using the specified name, SQL query following the current SQL dialect, a detailed description, and optionally a list of created table names if and only if they are generated within the SQL statements.",
                  "inputschema": {
                    "properties": {
                      "created_table_names": {
                        "description": "An empty list or a list of created table names if and only if they are generated within SQL statements (e.g., using `CREATE TABLE ...`).",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "description": {
                        "description": "The detailed description of the SQL transformation capturing the user intent, explaining the SQL query, and the expected output.",
                        "type": "string"
                      },
                      "name": {
                        "description": "A short, descriptive name summarizing the purpose of the SQL transformation.",
                        "type": "string"
                      },
                      "sql_statements": {
                        "description": "The executable SQL query statements written in the current SQL dialect. Each statement should be a separate item in the list.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "name",
                      "description",
                      "sql_statements"
                    ],
                    "type": "object"
                  },
                  "name": "create_sql_transformation"
                },
                {
                  "description": "Tool to get details about a bucket.",
                  "name": "get_bucket_detail"
                },
                {
                  "description": "Tool to get details about a job.",
                  "name": "get_job_detail"
                },
                {
                  "description": "Tool to get the current SQL dialect.",
                  "name": "get_sql_dialect"
                },
                {
                  "description": "Tool to get details about a table.",
                  "name": "get_table_detail"
                },
                {
                  "description": "Tool to query a table.",
                  "name": "query_table"
                },
                {
                  "description": "Tool to retrieve tables in a bucket.",
                  "name": "retrieve_bucket_tables"
                },
                {
                  "description": "Tool to retrieve buckets.",
                  "name": "retrieve_buckets"
                },
                {
                  "description": "Tool to retrieve jobs.",
                  "name": "retrieve_jobs"
                },
                {
                  "description": "Tool to start a job.",
                  "name": "start_job"
                },
                {
                  "description": "Tool to update a bucket's description.",
                  "name": "update_bucket_description"
                },
                {
                  "description": "Tool to update a table's description.",
                  "name": "update_table_description"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:57Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kelvin6365": {
      "mcpproviderid": "kelvin6365",
      "self": "#/mcpproviders/kelvin6365",
      "xid": "/mcpproviders/kelvin6365",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:26.240738456Z",
      "modifiedat": "2025-05-26T16:41:26.240738456Z",

      "serversurl": "#/mcpproviders/kelvin6365/servers",
      "servers": {
        "plane-mcp-server": {
          "serverid": "plane-mcp-server",
          "self": "#/mcpproviders/kelvin6365/servers/plane-mcp-server",
          "xid": "/mcpproviders/kelvin6365/servers/plane-mcp-server",

          "metaurl": "#/mcpproviders/kelvin6365/servers/plane-mcp-server/meta",
          "meta": {
            "serverid": "plane-mcp-server",
            "self": "#/mcpproviders/kelvin6365/servers/plane-mcp-server/meta",
            "xid": "/mcpproviders/kelvin6365/servers/plane-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:26.240738456Z",
            "modifiedat": "2025-05-26T16:41:26.240738456Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kelvin6365/servers/plane-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kelvin6365/servers/plane-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "plane-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/kelvin6365/servers/plane-mcp-server/versions/1",
              "xid": "/mcpproviders/kelvin6365/servers/plane-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.kelvin6365/plane-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:26.240738456Z",
              "modifiedat": "2025-05-26T16:41:26.240738456Z",
              "ancestor": "1",
              "id": "dd8073c5-c7c4-42c1-a0d7-cad8089de750",
              "packages": [
                {
                  "name": "plane-mcp-server",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "953147035",
                "source": "github",
                "url": "https://github.com/kelvin6365/plane-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:36Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kenjihikmatullah": {
      "mcpproviderid": "kenjihikmatullah",
      "self": "#/mcpproviders/kenjihikmatullah",
      "xid": "/mcpproviders/kenjihikmatullah",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:04.676712386Z",
      "modifiedat": "2025-05-26T16:42:04.676712386Z",

      "serversurl": "#/mcpproviders/kenjihikmatullah/servers",
      "servers": {
        "productboard-mcp": {
          "serverid": "productboard-mcp",
          "self": "#/mcpproviders/kenjihikmatullah/servers/productboard-mcp",
          "xid": "/mcpproviders/kenjihikmatullah/servers/productboard-mcp",

          "metaurl": "#/mcpproviders/kenjihikmatullah/servers/productboard-mcp/meta",
          "meta": {
            "serverid": "productboard-mcp",
            "self": "#/mcpproviders/kenjihikmatullah/servers/productboard-mcp/meta",
            "xid": "/mcpproviders/kenjihikmatullah/servers/productboard-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:04.676712386Z",
            "modifiedat": "2025-05-26T16:42:04.676712386Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kenjihikmatullah/servers/productboard-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kenjihikmatullah/servers/productboard-mcp/versions",
          "versions": {
            "1": {
              "serverid": "productboard-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kenjihikmatullah/servers/productboard-mcp/versions/1",
              "xid": "/mcpproviders/kenjihikmatullah/servers/productboard-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kenjihikmatullah/productboard-mcp",
              "isdefault": true,
              "description": "Integrate the Productboard API into agentic workflows via MCP",
              "createdat": "2025-05-26T16:42:04.676712386Z",
              "modifiedat": "2025-05-26T16:42:04.676712386Z",
              "ancestor": "1",
              "id": "00613acb-73e2-4f93-8b96-296df17316c8",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cYOUR_TOKEN\u003e",
                      "name": "PRODUCTBOARD_ACCESS_TOKEN"
                    }
                  ],
                  "name": "productboard-mcp",
                  "registry_name": "npm",
                  "version": "1.0.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "939104710",
                "source": "github",
                "url": "https://github.com/kenjihikmatullah/productboard-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Tool to get products",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getProductsTool"
                },
                {
                  "description": "Tool to get product detail",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getProductDetailTool"
                },
                {
                  "description": "Tool to get features",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getFeaturesTool"
                },
                {
                  "description": "Tool to get feature detail",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getFeatureDetailTool"
                },
                {
                  "description": "Tool to get components",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getComponentsTool"
                },
                {
                  "description": "Tool to get component detail",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getComponentDetailTool"
                },
                {
                  "description": "Tool to get feature statuses",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getFeatureStatusesTool"
                },
                {
                  "description": "Tool to get notes",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getNotesTool"
                },
                {
                  "description": "Tool to get note detail",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getNoteDetailTool"
                },
                {
                  "description": "Tool to get companies",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getCompaniesTool"
                },
                {
                  "description": "Tool to get company detail",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getCompanyDetailTool"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:44Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kenliao94": {
      "mcpproviderid": "kenliao94",
      "self": "#/mcpproviders/kenliao94",
      "xid": "/mcpproviders/kenliao94",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:53.9867571Z",
      "modifiedat": "2025-05-26T16:41:53.9867571Z",

      "serversurl": "#/mcpproviders/kenliao94/servers",
      "servers": {
        "mcp-server-rabbitmq": {
          "serverid": "mcp-server-rabbitmq",
          "self": "#/mcpproviders/kenliao94/servers/mcp-server-rabbitmq",
          "xid": "/mcpproviders/kenliao94/servers/mcp-server-rabbitmq",

          "metaurl": "#/mcpproviders/kenliao94/servers/mcp-server-rabbitmq/meta",
          "meta": {
            "serverid": "mcp-server-rabbitmq",
            "self": "#/mcpproviders/kenliao94/servers/mcp-server-rabbitmq/meta",
            "xid": "/mcpproviders/kenliao94/servers/mcp-server-rabbitmq/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:53.9867571Z",
            "modifiedat": "2025-05-26T16:41:53.9867571Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kenliao94/servers/mcp-server-rabbitmq/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kenliao94/servers/mcp-server-rabbitmq/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-rabbitmq",
              "versionid": "1",
              "self": "#/mcpproviders/kenliao94/servers/mcp-server-rabbitmq/versions/1",
              "xid": "/mcpproviders/kenliao94/servers/mcp-server-rabbitmq/versions/1",
              "epoch": 1,
              "name": "io.github.kenliao94/mcp-server-rabbitmq",
              "isdefault": true,
              "description": "MCP server for interacting with RabbitMQ",
              "createdat": "2025-05-26T16:41:53.9867571Z",
              "modifiedat": "2025-05-26T16:41:53.9867571Z",
              "ancestor": "1",
              "id": "edf43b88-36a4-4f07-9d46-cab08bd418aa",
              "packages": [
                {
                  "name": "mcp-server-rabbitmq",
                  "package_arguments": [
                    {
                      "default": "--directory /path/to/repo/mcp-server-rabbitmq",
                      "description": "Specify directory to run the package from",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory /path/to/repo/mcp-server-rabbitmq",
                      "type": "named",
                      "value": "--directory /path/to/repo/mcp-server-rabbitmq",
                      "value_hint": "/path/to/repo/mcp-server-rabbitmq"
                    },
                    {
                      "default": "mcp-server-rabbitmq",
                      "description": "Package or script name to execute",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp-server-rabbitmq",
                      "value_hint": "mcp-server-rabbitmq"
                    },
                    {
                      "default": "--rabbitmq-host \u003chostname ex. test.rabbit.com, localhost\u003e",
                      "description": "RabbitMQ host name",
                      "format": "string",
                      "is_required": true,
                      "name": "--rabbitmq-host \u003chostname ex. test.rabbit.com, localhost\u003e",
                      "type": "named",
                      "value": "--rabbitmq-host \u003chostname ex. test.rabbit.com, localhost\u003e",
                      "value_hint": "\u003chostname ex. test.rabbit.com, localhost\u003e"
                    },
                    {
                      "default": "--port \u003cport number ex. 5672\u003e",
                      "description": "RabbitMQ port number",
                      "format": "string",
                      "is_required": true,
                      "name": "--port \u003cport number ex. 5672\u003e",
                      "type": "named",
                      "value": "--port \u003cport number ex. 5672\u003e",
                      "value_hint": "\u003cport number ex. 5672\u003e"
                    },
                    {
                      "default": "--username \u003crabbitmq username\u003e",
                      "description": "RabbitMQ username",
                      "format": "string",
                      "is_required": true,
                      "name": "--username \u003crabbitmq username\u003e",
                      "type": "named",
                      "value": "--username \u003crabbitmq username\u003e",
                      "value_hint": "\u003crabbitmq username\u003e"
                    },
                    {
                      "default": "--password \u003crabbitmq password\u003e",
                      "description": "RabbitMQ password",
                      "format": "string",
                      "is_required": true,
                      "name": "--password \u003crabbitmq password\u003e",
                      "type": "named",
                      "value": "--password \u003crabbitmq password\u003e",
                      "value_hint": "\u003crabbitmq password\u003e"
                    },
                    {
                      "default": "--use-tls \u003ctrue if uses amqps, false otherwise\u003e",
                      "description": "Whether to use TLS (amqps protocol)",
                      "format": "string",
                      "is_required": true,
                      "name": "--use-tls \u003ctrue if uses amqps, false otherwise\u003e",
                      "type": "named",
                      "value": "--use-tls \u003ctrue if uses amqps, false otherwise\u003e",
                      "value_hint": "\u003ctrue if uses amqps, false otherwise\u003e"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "2.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "910977229",
                "source": "github",
                "url": "https://github.com/kenliao94/mcp-server-rabbitmq"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Enqueue a message to a RabbitMQ queue.",
                  "inputschema": {
                    "properties": {
                      "message": {
                        "type": "string"
                      },
                      "queue": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "message",
                      "queue"
                    ],
                    "type": "object"
                  },
                  "name": "enqueue"
                },
                {
                  "description": "Publish a message to a RabbitMQ exchange with fanout.",
                  "inputschema": {
                    "properties": {
                      "exchange": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "message",
                      "exchange"
                    ],
                    "type": "object"
                  },
                  "name": "fanout"
                },
                {
                  "description": "List all RabbitMQ queues.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_queues"
                },
                {
                  "description": "List all RabbitMQ exchanges.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_exchanges"
                },
                {
                  "description": "Get information about a specific RabbitMQ queue.",
                  "inputschema": {
                    "properties": {
                      "queue": {
                        "type": "string"
                      },
                      "vhost": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "queue"
                    ],
                    "type": "object"
                  },
                  "name": "get_queue_info"
                },
                {
                  "description": "Delete a specific RabbitMQ queue.",
                  "inputschema": {
                    "properties": {
                      "queue": {
                        "type": "string"
                      },
                      "vhost": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "queue"
                    ],
                    "type": "object"
                  },
                  "name": "delete_queue"
                },
                {
                  "description": "Purge messages from a specific RabbitMQ queue.",
                  "inputschema": {
                    "properties": {
                      "queue": {
                        "type": "string"
                      },
                      "vhost": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "queue"
                    ],
                    "type": "object"
                  },
                  "name": "purge_queue"
                },
                {
                  "description": "Delete a specific RabbitMQ exchange.",
                  "inputschema": {
                    "properties": {
                      "exchange": {
                        "type": "string"
                      },
                      "vhost": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "exchange"
                    ],
                    "type": "object"
                  },
                  "name": "delete_exchange"
                },
                {
                  "description": "Get information about a specific RabbitMQ exchange.",
                  "inputschema": {
                    "properties": {
                      "exchange": {
                        "type": "string"
                      },
                      "vhost": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "exchange"
                    ],
                    "type": "object"
                  },
                  "name": "get_exchange_info"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:12Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kiliczsh": {
      "mcpproviderid": "kiliczsh",
      "self": "#/mcpproviders/kiliczsh",
      "xid": "/mcpproviders/kiliczsh",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:59.866282757Z",
      "modifiedat": "2025-05-26T16:41:59.866282757Z",

      "serversurl": "#/mcpproviders/kiliczsh/servers",
      "servers": {
        "mcp-mongo-server": {
          "serverid": "mcp-mongo-server",
          "self": "#/mcpproviders/kiliczsh/servers/mcp-mongo-server",
          "xid": "/mcpproviders/kiliczsh/servers/mcp-mongo-server",

          "metaurl": "#/mcpproviders/kiliczsh/servers/mcp-mongo-server/meta",
          "meta": {
            "serverid": "mcp-mongo-server",
            "self": "#/mcpproviders/kiliczsh/servers/mcp-mongo-server/meta",
            "xid": "/mcpproviders/kiliczsh/servers/mcp-mongo-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:59.866282757Z",
            "modifiedat": "2025-05-26T16:41:59.866282757Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kiliczsh/servers/mcp-mongo-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kiliczsh/servers/mcp-mongo-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-mongo-server",
              "versionid": "1",
              "self": "#/mcpproviders/kiliczsh/servers/mcp-mongo-server/versions/1",
              "xid": "/mcpproviders/kiliczsh/servers/mcp-mongo-server/versions/1",
              "epoch": 1,
              "name": "io.github.kiliczsh/mcp-mongo-server",
              "isdefault": true,
              "description": "A Model Context Protocol Server for MongoDB",
              "createdat": "2025-05-26T16:41:59.866282757Z",
              "modifiedat": "2025-05-26T16:41:59.866282757Z",
              "ancestor": "1",
              "id": "b61a2d2e-db6c-47b4-9437-7edc8525d063",
              "packages": [
                {
                  "name": "mcp-mongo-server",
                  "package_arguments": [
                    {
                      "default": "mongodb://muhammed:kilic@localhost:27017/database",
                      "description": "MongoDB connection string",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mongodb://muhammed:kilic@localhost:27017/database",
                      "value_hint": "mongodb://muhammed:kilic@localhost:27017/database"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "1.3.0"
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Name of the collection to analyze",
                      "name": "collection",
                      "required": true
                    }
                  ],
                  "description": "Analyze a MongoDB collection structure and contents",
                  "name": "analyze_collection"
                }
              ],
              "repository": {
                "id": "898654014",
                "source": "github",
                "url": "https://github.com/kiliczsh/mcp-mongo-server"
              },
              "resources": [
                {
                  "description": "MongoDB collections exposed as resources",
                  "mimetype": "application/json",
                  "name": "collections",
                  "uritemplate": "/collections/{collectionName}"
                }
              ],
              "tools": [
                {
                  "description": "Execute a MongoDB query with optional execution plan analysis",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Name of the collection to query",
                        "type": "string"
                      },
                      "explain": {
                        "description": "Optional: Get query execution information",
                        "enum": [
                          "queryPlanner",
                          "executionStats",
                          "allPlansExecution"
                        ],
                        "type": "string"
                      },
                      "filter": {
                        "description": "MongoDB query filter",
                        "type": "object"
                      },
                      "limit": {
                        "default": 10,
                        "description": "Maximum number of documents to return",
                        "type": "number"
                      },
                      "objectIdMode": {
                        "default": "auto",
                        "description": "Control how 24-character hex strings are handled",
                        "enum": [
                          "auto",
                          "none",
                          "force"
                        ],
                        "type": "string"
                      },
                      "projection": {
                        "description": "Fields to include/exclude",
                        "type": "object"
                      }
                    },
                    "required": [
                      "collection"
                    ],
                    "type": "object"
                  },
                  "name": "query"
                },
                {
                  "description": "Execute a MongoDB aggregation pipeline with optional execution plan analysis",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Name of the collection to aggregate",
                        "type": "string"
                      },
                      "explain": {
                        "description": "Optional: Get aggregation execution information (queryPlanner, executionStats, or allPlansExecution)",
                        "enum": [
                          "queryPlanner",
                          "executionStats",
                          "allPlansExecution"
                        ],
                        "type": "string"
                      },
                      "objectIdMode": {
                        "default": "auto",
                        "description": "Control how 24-character hex strings are handled",
                        "enum": [
                          "auto",
                          "none",
                          "force"
                        ],
                        "type": "string"
                      },
                      "pipeline": {
                        "description": "Aggregation pipeline stages",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "collection",
                      "pipeline"
                    ],
                    "type": "object"
                  },
                  "name": "aggregate"
                },
                {
                  "description": "Update documents in a MongoDB collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Name of the collection to update",
                        "type": "string"
                      },
                      "filter": {
                        "description": "Filter to select documents to update",
                        "type": "object"
                      },
                      "multi": {
                        "description": "Update multiple documents that match the filter",
                        "type": "boolean"
                      },
                      "objectIdMode": {
                        "default": "auto",
                        "description": "Control how 24-character hex strings are handled",
                        "enum": [
                          "auto",
                          "none",
                          "force"
                        ],
                        "type": "string"
                      },
                      "update": {
                        "description": "Update operations to apply ($set, $unset, $inc, etc.)",
                        "type": "object"
                      },
                      "upsert": {
                        "description": "Create a new document if no documents match the filter",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "collection",
                      "filter",
                      "update"
                    ],
                    "type": "object"
                  },
                  "name": "update"
                },
                {
                  "description": "Get MongoDB server information including version, storage engine, and other details",
                  "inputschema": {
                    "properties": {
                      "includeDebugInfo": {
                        "description": "Include additional debug information about the server",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "name": "serverInfo"
                },
                {
                  "description": "Insert one or more documents into a MongoDB collection",
                  "inputschema": {
                    "properties": {
                      "bypassDocumentValidation": {
                        "description": "Allow insert to bypass schema validation",
                        "type": "boolean"
                      },
                      "collection": {
                        "description": "Name of the collection to insert into",
                        "type": "string"
                      },
                      "documents": {
                        "description": "Array of documents to insert",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "objectIdMode": {
                        "default": "auto",
                        "description": "Control how 24-character hex strings are handled",
                        "enum": [
                          "auto",
                          "none",
                          "force"
                        ],
                        "type": "string"
                      },
                      "ordered": {
                        "description": "If true, perform ordered insert. If false, insert unordered",
                        "type": "boolean"
                      },
                      "writeConcern": {
                        "description": "Write concern for the insert operation",
                        "type": "object"
                      }
                    },
                    "required": [
                      "collection",
                      "documents"
                    ],
                    "type": "object"
                  },
                  "name": "insert"
                },
                {
                  "description": "Create one or more indexes on a MongoDB collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Name of the collection to create indexes on",
                        "type": "string"
                      },
                      "commitQuorum": {
                        "description": "Number of members required to create the index",
                        "type": "string"
                      },
                      "indexes": {
                        "description": "Array of index specifications",
                        "items": {
                          "properties": {
                            "background": {
                              "description": "Optional: Builds index in background",
                              "type": "boolean"
                            },
                            "expireAfterSeconds": {
                              "description": "TTL in seconds for documents",
                              "type": "number"
                            },
                            "key": {
                              "description": "Index key pattern, e.g. { field: 1 }",
                              "type": "object"
                            },
                            "name": {
                              "description": "Optional: Name of the index",
                              "type": "string"
                            },
                            "partialFilterExpression": {
                              "description": "Filter expression for partial indexes",
                              "type": "object"
                            },
                            "sparse": {
                              "description": "Optional: Creates a sparse index",
                              "type": "boolean"
                            },
                            "unique": {
                              "description": "Optional: Creates a unique index",
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "key"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "objectIdMode": {
                        "default": "auto",
                        "description": "Control how 24-character hex strings are handled",
                        "enum": [
                          "auto",
                          "none",
                          "force"
                        ],
                        "type": "string"
                      },
                      "writeConcern": {
                        "description": "Write concern for index creation",
                        "type": "object"
                      }
                    },
                    "required": [
                      "collection",
                      "indexes"
                    ],
                    "type": "object"
                  },
                  "name": "createIndex"
                },
                {
                  "description": "Count documents in a collection matching a query",
                  "inputschema": {
                    "properties": {
                      "collation": {
                        "description": "Collation rules for comparison",
                        "type": "object"
                      },
                      "collection": {
                        "description": "Collection name",
                        "type": "string"
                      },
                      "hint": {
                        "description": "Index hint",
                        "type": "object"
                      },
                      "limit": {
                        "description": "Max documents to count",
                        "type": "integer"
                      },
                      "maxTimeMS": {
                        "description": "Max execution time",
                        "type": "integer"
                      },
                      "objectIdMode": {
                        "default": "auto",
                        "description": "Control how 24-character hex strings are handled",
                        "enum": [
                          "auto",
                          "none",
                          "force"
                        ],
                        "type": "string"
                      },
                      "query": {
                        "description": "Query filter to count",
                        "type": "object"
                      },
                      "readConcern": {
                        "description": "Read concern option",
                        "type": "object"
                      },
                      "skip": {
                        "description": "Docs to skip before counting",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "collection"
                    ],
                    "type": "object"
                  },
                  "name": "count"
                },
                {
                  "description": "List all collections in the MongoDB database",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "description": "Filter for collections",
                        "type": "object"
                      },
                      "nameOnly": {
                        "description": "If true, return only collection names",
                        "type": "boolean"
                      },
                      "objectIdMode": {
                        "default": "auto",
                        "description": "Control how 24-character hex strings are handled",
                        "enum": [
                          "auto",
                          "none",
                          "force"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "listCollections"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:38Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kiwamizamurai": {
      "mcpproviderid": "kiwamizamurai",
      "self": "#/mcpproviders/kiwamizamurai",
      "xid": "/mcpproviders/kiwamizamurai",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:30.257194846Z",
      "modifiedat": "2025-05-26T16:41:30.257194846Z",

      "serversurl": "#/mcpproviders/kiwamizamurai/servers",
      "servers": {
        "mcp-kibela-server": {
          "serverid": "mcp-kibela-server",
          "self": "#/mcpproviders/kiwamizamurai/servers/mcp-kibela-server",
          "xid": "/mcpproviders/kiwamizamurai/servers/mcp-kibela-server",

          "metaurl": "#/mcpproviders/kiwamizamurai/servers/mcp-kibela-server/meta",
          "meta": {
            "serverid": "mcp-kibela-server",
            "self": "#/mcpproviders/kiwamizamurai/servers/mcp-kibela-server/meta",
            "xid": "/mcpproviders/kiwamizamurai/servers/mcp-kibela-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:30.257194846Z",
            "modifiedat": "2025-05-26T16:41:30.257194846Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kiwamizamurai/servers/mcp-kibela-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kiwamizamurai/servers/mcp-kibela-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-kibela-server",
              "versionid": "1",
              "self": "#/mcpproviders/kiwamizamurai/servers/mcp-kibela-server/versions/1",
              "xid": "/mcpproviders/kiwamizamurai/servers/mcp-kibela-server/versions/1",
              "epoch": 1,
              "name": "io.github.kiwamizamurai/mcp-kibela-server",
              "isdefault": true,
              "description": "MCP server implementation for Kibela API integration",
              "createdat": "2025-05-26T16:41:30.257194846Z",
              "modifiedat": "2025-05-26T16:41:30.257194846Z",
              "ancestor": "1",
              "id": "984ee65a-dec0-4a75-b21b-2efbcd9600bd",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_TEAM_NAME",
                      "name": "KIBELA_TEAM"
                    },
                    {
                      "description": "YOUR_TOKEN",
                      "name": "KIBELA_TOKEN"
                    }
                  ],
                  "name": "@kiwamizamurai/mcp-kibela-server",
                  "package_arguments": [
                    {
                      "default": "-i",
                      "description": "-i",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i"
                    },
                    {
                      "default": "--rm",
                      "description": "--rm",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm"
                    },
                    {
                      "default": "-e KIBELA_TEAM",
                      "description": "-e KIBELA_TEAM",
                      "format": "string",
                      "is_required": true,
                      "name": "-e KIBELA_TEAM",
                      "type": "named",
                      "value": "-e KIBELA_TEAM",
                      "value_hint": "KIBELA_TEAM"
                    },
                    {
                      "default": "-e KIBELA_TOKEN",
                      "description": "-e KIBELA_TOKEN",
                      "format": "string",
                      "is_required": true,
                      "name": "-e KIBELA_TOKEN",
                      "type": "named",
                      "value": "-e KIBELA_TOKEN",
                      "value_hint": "KIBELA_TOKEN"
                    },
                    {
                      "default": "mcp-kibela-server",
                      "description": "mcp-kibela-server",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp-kibela-server"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "1.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "925867194",
                "source": "github",
                "url": "https://github.com/kiwamizamurai/mcp-kibela-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Search Kibela notes with given query",
                  "inputschema": {
                    "properties": {
                      "coediting": {
                        "description": "Filter by co-editing status",
                        "type": "boolean"
                      },
                      "folderIds": {
                        "description": "Filter by folder IDs",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "isArchived": {
                        "description": "Filter by archive status",
                        "type": "boolean"
                      },
                      "query": {
                        "description": "Search query",
                        "type": "string"
                      },
                      "sortBy": {
                        "description": "Sort by (RELEVANT, CONTENT_UPDATED_AT)",
                        "type": "string"
                      },
                      "userIds": {
                        "description": "Filter by user IDs",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "kibela_search_notes"
                },
                {
                  "description": "Get your latest notes from Kibela",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "default": 15,
                        "description": "Number of notes to fetch (max 50)",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "kibela_get_my_notes"
                },
                {
                  "description": "Get content and comments of a specific note",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "Note ID",
                        "type": "string"
                      },
                      "include_image_data": {
                        "default": false,
                        "description": "Whether to include image data URLs in the response",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "kibela_get_note_content"
                },
                {
                  "description": "Get list of accessible groups",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "kibela_get_groups"
                },
                {
                  "description": "Get folders in a group",
                  "inputschema": {
                    "properties": {
                      "groupId": {
                        "description": "Group ID",
                        "type": "string"
                      },
                      "parentFolderId": {
                        "description": "Parent folder ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "groupId"
                    ],
                    "type": "object"
                  },
                  "name": "kibela_get_group_folders"
                },
                {
                  "description": "Get notes in a group that are not attached to any folder",
                  "inputschema": {
                    "properties": {
                      "groupId": {
                        "description": "Group ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "groupId"
                    ],
                    "type": "object"
                  },
                  "name": "kibela_get_group_notes"
                },
                {
                  "description": "Get notes in a folder",
                  "inputschema": {
                    "properties": {
                      "folderId": {
                        "description": "Folder ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "folderId"
                    ],
                    "type": "object"
                  },
                  "name": "kibela_get_folder_notes"
                },
                {
                  "description": "Get list of users",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "kibela_get_users"
                },
                {
                  "description": "Like a note",
                  "inputschema": {
                    "properties": {
                      "noteId": {
                        "description": "Note ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "noteId"
                    ],
                    "type": "object"
                  },
                  "name": "kibela_like_note"
                },
                {
                  "description": "Unlike a note",
                  "inputschema": {
                    "properties": {
                      "noteId": {
                        "description": "Note ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "noteId"
                    ],
                    "type": "object"
                  },
                  "name": "kibela_unlike_note"
                },
                {
                  "description": "Get your recently viewed notes",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "default": 15,
                        "description": "Number of notes to fetch (max 15)",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "kibela_get_recently_viewed_notes"
                },
                {
                  "description": "Get note content by its URL",
                  "inputschema": {
                    "properties": {
                      "include_image_data": {
                        "default": false,
                        "description": "Whether to include image data URLs in the response",
                        "type": "boolean"
                      },
                      "path": {
                        "description": "Note path (e.g. 'https://${process.env.KIBELA_TEAM}.kibe.la/notes/5154')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "kibela_get_note_from_path"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:54Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ko1ynnky": {
      "mcpproviderid": "ko1ynnky",
      "self": "#/mcpproviders/ko1ynnky",
      "xid": "/mcpproviders/ko1ynnky",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:40.024372218Z",
      "modifiedat": "2025-05-26T16:41:40.024372218Z",

      "serversurl": "#/mcpproviders/ko1ynnky/servers",
      "servers": {
        "github-actions-mcp-server": {
          "serverid": "github-actions-mcp-server",
          "self": "#/mcpproviders/ko1ynnky/servers/github-actions-mcp-server",
          "xid": "/mcpproviders/ko1ynnky/servers/github-actions-mcp-server",

          "metaurl": "#/mcpproviders/ko1ynnky/servers/github-actions-mcp-server/meta",
          "meta": {
            "serverid": "github-actions-mcp-server",
            "self": "#/mcpproviders/ko1ynnky/servers/github-actions-mcp-server/meta",
            "xid": "/mcpproviders/ko1ynnky/servers/github-actions-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:40.024372218Z",
            "modifiedat": "2025-05-26T16:41:40.024372218Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ko1ynnky/servers/github-actions-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ko1ynnky/servers/github-actions-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "github-actions-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/ko1ynnky/servers/github-actions-mcp-server/versions/1",
              "xid": "/mcpproviders/ko1ynnky/servers/github-actions-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.ko1ynnky/github-actions-mcp-server",
              "isdefault": true,
              "description": "GitHub Actions Model Context Protocol Server",
              "createdat": "2025-05-26T16:41:40.024372218Z",
              "modifiedat": "2025-05-26T16:41:40.024372218Z",
              "ancestor": "1",
              "id": "fa6d267b-a797-42b7-9510-5abc3c518f3e",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cYOUR_TOKEN\u003e",
                      "name": "GITHUB_PERSONAL_ACCESS_TOKEN"
                    }
                  ],
                  "name": "github-actions-mcp",
                  "package_arguments": [
                    {
                      "default": "\u003cpath-to-mcp-server\u003e/dist/index.js",
                      "description": "\u003cpath-to-mcp-server\u003e/dist/index.js",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "\u003cpath-to-mcp-server\u003e/dist/index.js",
                      "value_hint": "\u003cpath-to-mcp-server\u003e/dist/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "951937740",
                "source": "github",
                "url": "https://github.com/ko1ynnky/github-actions-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List workflows in a GitHub repository",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_workflows"
                },
                {
                  "description": "Get details of a specific workflow",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_workflow"
                },
                {
                  "description": "Get usage statistics of a workflow",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_workflow_usage"
                },
                {
                  "description": "List all workflow runs for a repository or a specific workflow",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_workflow_runs"
                },
                {
                  "description": "Get details of a specific workflow run",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_workflow_run"
                },
                {
                  "description": "Get jobs for a specific workflow run",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_workflow_run_jobs"
                },
                {
                  "description": "Trigger a workflow run",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "trigger_workflow"
                },
                {
                  "description": "Cancel a workflow run",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "cancel_workflow_run"
                },
                {
                  "description": "Re-run a workflow run",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "rerun_workflow"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:04Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kocierik": {
      "mcpproviderid": "kocierik",
      "self": "#/mcpproviders/kocierik",
      "xid": "/mcpproviders/kocierik",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:27.465255039Z",
      "modifiedat": "2025-05-26T16:41:27.569691857Z",

      "serversurl": "#/mcpproviders/kocierik/servers",
      "servers": {
        "consul-mcp-server": {
          "serverid": "consul-mcp-server",
          "self": "#/mcpproviders/kocierik/servers/consul-mcp-server",
          "xid": "/mcpproviders/kocierik/servers/consul-mcp-server",

          "metaurl": "#/mcpproviders/kocierik/servers/consul-mcp-server/meta",
          "meta": {
            "serverid": "consul-mcp-server",
            "self": "#/mcpproviders/kocierik/servers/consul-mcp-server/meta",
            "xid": "/mcpproviders/kocierik/servers/consul-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:27.569691857Z",
            "modifiedat": "2025-05-26T16:41:27.569691857Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kocierik/servers/consul-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kocierik/servers/consul-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "consul-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/kocierik/servers/consul-mcp-server/versions/1",
              "xid": "/mcpproviders/kocierik/servers/consul-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.kocierik/consul-mcp-server",
              "isdefault": true,
              "description": "A consul MCP Server (modelcontextprotocol) ",
              "createdat": "2025-05-26T16:41:27.569691857Z",
              "modifiedat": "2025-05-26T16:41:27.569691857Z",
              "ancestor": "1",
              "id": "a9fe34f1-7c82-4f7d-8fbe-20bb8ca29e7b",
              "packages": [
                {
                  "name": "consul-mcp",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "repository": {
                "id": "969129017",
                "source": "github",
                "url": "https://github.com/kocierik/consul-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:42Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-nomad": {
          "serverid": "mcp-nomad",
          "self": "#/mcpproviders/kocierik/servers/mcp-nomad",
          "xid": "/mcpproviders/kocierik/servers/mcp-nomad",

          "metaurl": "#/mcpproviders/kocierik/servers/mcp-nomad/meta",
          "meta": {
            "serverid": "mcp-nomad",
            "self": "#/mcpproviders/kocierik/servers/mcp-nomad/meta",
            "xid": "/mcpproviders/kocierik/servers/mcp-nomad/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:27.465255039Z",
            "modifiedat": "2025-05-26T16:41:27.465255039Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kocierik/servers/mcp-nomad/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kocierik/servers/mcp-nomad/versions",
          "versions": {
            "1": {
              "serverid": "mcp-nomad",
              "versionid": "1",
              "self": "#/mcpproviders/kocierik/servers/mcp-nomad/versions/1",
              "xid": "/mcpproviders/kocierik/servers/mcp-nomad/versions/1",
              "epoch": 1,
              "name": "io.github.kocierik/mcp-nomad",
              "isdefault": true,
              "description": " A nomad MCP Server (modelcontextprotocol) ",
              "createdat": "2025-05-26T16:41:27.465255039Z",
              "modifiedat": "2025-05-26T16:41:27.465255039Z",
              "ancestor": "1",
              "id": "6ebc1c16-ea8d-44eb-958c-74f3f0531058",
              "packages": [
                {
                  "name": "kocierik/mcp-nomad",
                  "package_arguments": [
                    {
                      "default": "-i",
                      "description": "-i",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i"
                    },
                    {
                      "default": "--rm",
                      "description": "--rm",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm"
                    },
                    {
                      "default": "-e NOMAD_ADDR=http://172.17.0.1:4646",
                      "description": "-e NOMAD_ADDR=http://172.17.0.1:4646",
                      "format": "string",
                      "is_required": true,
                      "name": "-e NOMAD_ADDR=http://172.17.0.1:4646",
                      "type": "named",
                      "value": "-e NOMAD_ADDR=http://172.17.0.1:4646",
                      "value_hint": "NOMAD_ADDR=http://172.17.0.1:4646"
                    },
                    {
                      "default": "-e NOMAD_TOKEN=secret-token-acl-optional",
                      "description": "-e NOMAD_TOKEN=secret-token-acl-optional",
                      "format": "string",
                      "is_required": true,
                      "name": "-e NOMAD_TOKEN=secret-token-acl-optional",
                      "type": "named",
                      "value": "-e NOMAD_TOKEN=secret-token-acl-optional",
                      "value_hint": "NOMAD_TOKEN=secret-token-acl-optional"
                    },
                    {
                      "default": "kocierik/mcpnomad-server:latest",
                      "description": "kocierik/mcpnomad-server:latest",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "kocierik/mcpnomad-server:latest",
                      "value_hint": "kocierik/mcpnomad-server:latest"
                    }
                  ],
                  "registry_name": "docker",
                  "version": ""
                }
              ],
              "repository": {
                "id": "969499680",
                "source": "github",
                "url": "https://github.com/kocierik/mcp-nomad"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:20Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "kone-net": {
      "mcpproviderid": "kone-net",
      "self": "#/mcpproviders/kone-net",
      "xid": "/mcpproviders/kone-net",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:41.863149734Z",
      "modifiedat": "2025-05-26T16:41:41.863149734Z",

      "serversurl": "#/mcpproviders/kone-net/servers",
      "servers": {
        "mcp_server_lark": {
          "serverid": "mcp_server_lark",
          "self": "#/mcpproviders/kone-net/servers/mcp_server_lark",
          "xid": "/mcpproviders/kone-net/servers/mcp_server_lark",

          "metaurl": "#/mcpproviders/kone-net/servers/mcp_server_lark/meta",
          "meta": {
            "serverid": "mcp_server_lark",
            "self": "#/mcpproviders/kone-net/servers/mcp_server_lark/meta",
            "xid": "/mcpproviders/kone-net/servers/mcp_server_lark/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:41.863149734Z",
            "modifiedat": "2025-05-26T16:41:41.863149734Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kone-net/servers/mcp_server_lark/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kone-net/servers/mcp_server_lark/versions",
          "versions": {
            "1": {
              "serverid": "mcp_server_lark",
              "versionid": "1",
              "self": "#/mcpproviders/kone-net/servers/mcp_server_lark/versions/1",
              "xid": "/mcpproviders/kone-net/servers/mcp_server_lark/versions/1",
              "epoch": 1,
              "name": "io.github.kone-net/mcp_server_lark",
              "isdefault": true,
              "description": "A Model Context Protocol server for Lark(Feishu) sheet, message, doc and etc.",
              "createdat": "2025-05-26T16:41:41.863149734Z",
              "modifiedat": "2025-05-26T16:41:41.863149734Z",
              "ancestor": "1",
              "id": "39843dbb-856d-46d9-92c4-74b5041c4444",
              "packages": [
                {
                  "name": "mcp-server-lark",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "955286262",
                "source": "github",
                "url": "https://github.com/kone-net/mcp_server_lark"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:08Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "korotovsky": {
      "mcpproviderid": "korotovsky",
      "self": "#/mcpproviders/korotovsky",
      "xid": "/mcpproviders/korotovsky",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:48.710708144Z",
      "modifiedat": "2025-05-26T16:41:48.710708144Z",

      "serversurl": "#/mcpproviders/korotovsky/servers",
      "servers": {
        "slack-mcp-server": {
          "serverid": "slack-mcp-server",
          "self": "#/mcpproviders/korotovsky/servers/slack-mcp-server",
          "xid": "/mcpproviders/korotovsky/servers/slack-mcp-server",

          "metaurl": "#/mcpproviders/korotovsky/servers/slack-mcp-server/meta",
          "meta": {
            "serverid": "slack-mcp-server",
            "self": "#/mcpproviders/korotovsky/servers/slack-mcp-server/meta",
            "xid": "/mcpproviders/korotovsky/servers/slack-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:48.710708144Z",
            "modifiedat": "2025-05-26T16:41:48.710708144Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/korotovsky/servers/slack-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/korotovsky/servers/slack-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "slack-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/korotovsky/servers/slack-mcp-server/versions/1",
              "xid": "/mcpproviders/korotovsky/servers/slack-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.korotovsky/slack-mcp-server",
              "isdefault": true,
              "description": "The most powerful MCP Slack Server with Stdio and SSE transports, Proxy support and no permission requirements on Slack Workspace! ",
              "createdat": "2025-05-26T16:41:48.710708144Z",
              "modifiedat": "2025-05-26T16:41:48.710708144Z",
              "ancestor": "1",
              "id": "1e8b16b3-9182-43a9-b4c5-07fdf8032c89",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "my-$$e-$ecret",
                      "name": "SLACK_MCP_SSE_API_KEY"
                    }
                  ],
                  "name": "korotovsky/slack-mcp-server",
                  "package_arguments": [
                    {
                      "default": "https://x.y.z.q:3001/sse",
                      "description": "The url endpoint to connect to",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "https://x.y.z.q:3001/sse",
                      "value_hint": "https://x.y.z.q:3001/sse"
                    },
                    {
                      "default": "--header Authorization: Bearer ${SLACK_MCP_SSE_API_KEY}",
                      "description": "Add HTTP headers to the request",
                      "format": "string",
                      "is_required": true,
                      "name": "--header Authorization: Bearer ${SLACK_MCP_SSE_API_KEY}",
                      "type": "named",
                      "value": "--header Authorization: Bearer ${SLACK_MCP_SSE_API_KEY}",
                      "value_hint": "Authorization: Bearer ${SLACK_MCP_SSE_API_KEY}"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "965085580",
                "source": "github",
                "url": "https://github.com/korotovsky/slack-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:00Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kpsunil97": {
      "mcpproviderid": "kpsunil97",
      "self": "#/mcpproviders/kpsunil97",
      "xid": "/mcpproviders/kpsunil97",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:34.24452815Z",
      "modifiedat": "2025-05-26T16:41:34.24452815Z",

      "serversurl": "#/mcpproviders/kpsunil97/servers",
      "servers": {
        "devrev-mcp-server": {
          "serverid": "devrev-mcp-server",
          "self": "#/mcpproviders/kpsunil97/servers/devrev-mcp-server",
          "xid": "/mcpproviders/kpsunil97/servers/devrev-mcp-server",

          "metaurl": "#/mcpproviders/kpsunil97/servers/devrev-mcp-server/meta",
          "meta": {
            "serverid": "devrev-mcp-server",
            "self": "#/mcpproviders/kpsunil97/servers/devrev-mcp-server/meta",
            "xid": "/mcpproviders/kpsunil97/servers/devrev-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:34.24452815Z",
            "modifiedat": "2025-05-26T16:41:34.24452815Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kpsunil97/servers/devrev-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kpsunil97/servers/devrev-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "devrev-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/kpsunil97/servers/devrev-mcp-server/versions/1",
              "xid": "/mcpproviders/kpsunil97/servers/devrev-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.kpsunil97/devrev-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:34.24452815Z",
              "modifiedat": "2025-05-26T16:41:34.24452815Z",
              "ancestor": "1",
              "id": "8b17658e-2a1b-4ca7-a1ae-583e7b190bce",
              "packages": [
                {
                  "name": "devrev-mcp",
                  "registry_name": "unknown",
                  "version": "0.1.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "906414289",
                "source": "github",
                "url": "https://github.com/kpsunil97/devrev-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Search DevRev using the provided query",
                  "inputschema": {
                    "properties": {
                      "namespace": {
                        "enum": [
                          "article",
                          "issue",
                          "ticket"
                        ],
                        "type": "string"
                      },
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "search"
                },
                {
                  "description": "Get all information about a DevRev object using its ID",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "get_object"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:43Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kukapay": {
      "mcpproviderid": "kukapay",
      "self": "#/mcpproviders/kukapay",
      "xid": "/mcpproviders/kukapay",
      "epoch": 14,
      "createdat": "2025-05-26T16:42:16.368872618Z",
      "modifiedat": "2025-05-26T16:42:17.976753322Z",

      "serversurl": "#/mcpproviders/kukapay/servers",
      "servers": {
        "crypto-feargreed-mcp": {
          "serverid": "crypto-feargreed-mcp",
          "self": "#/mcpproviders/kukapay/servers/crypto-feargreed-mcp",
          "xid": "/mcpproviders/kukapay/servers/crypto-feargreed-mcp",

          "metaurl": "#/mcpproviders/kukapay/servers/crypto-feargreed-mcp/meta",
          "meta": {
            "serverid": "crypto-feargreed-mcp",
            "self": "#/mcpproviders/kukapay/servers/crypto-feargreed-mcp/meta",
            "xid": "/mcpproviders/kukapay/servers/crypto-feargreed-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:17.976753322Z",
            "modifiedat": "2025-05-26T16:42:17.976753322Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/crypto-feargreed-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/crypto-feargreed-mcp/versions",
          "versions": {
            "1": {
              "serverid": "crypto-feargreed-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/crypto-feargreed-mcp/versions/1",
              "xid": "/mcpproviders/kukapay/servers/crypto-feargreed-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/crypto-feargreed-mcp",
              "isdefault": true,
              "description": "Providing real-time and historical Crypto Fear \u0026 Greed Index data",
              "createdat": "2025-05-26T16:42:17.976753322Z",
              "modifiedat": "2025-05-26T16:42:17.976753322Z",
              "ancestor": "1",
              "id": "45ee52ba-1e4c-48a5-9eef-de7a234997db",
              "packages": [
                {
                  "name": "crypto-feargreed-mcp",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Crypto Fear \u0026 Greed Index value to interpret",
                      "name": "value",
                      "required": true
                    }
                  ],
                  "description": "Index Data Interpretation.",
                  "name": "interpret_fng"
                }
              ],
              "repository": {
                "id": "948974664",
                "source": "github",
                "url": "https://github.com/kukapay/crypto-feargreed-mcp"
              },
              "resources": [
                {
                  "description": "Current crypto Fear \u0026 Greed Index.",
                  "name": "current",
                  "uritemplate": "fng://current"
                },
                {
                  "description": "Historical Data of Crypto Fear \u0026 Greed Index for specified number of days.",
                  "name": "history",
                  "uritemplate": "fng://history/{days}"
                }
              ],
              "tools": [
                {
                  "description": "Current Index. Same as fng://current",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_current_fng_tool"
                },
                {
                  "description": "Historical Index Data. Same as fng://history/{days}",
                  "inputschema": {
                    "properties": {
                      "days": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "days"
                    ],
                    "type": "object"
                  },
                  "name": "get_historical_fng_tool"
                },
                {
                  "description": "Index trend Analysis.",
                  "inputschema": {
                    "properties": {
                      "days": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "days"
                    ],
                    "type": "object"
                  },
                  "name": "analyze_fng_trend"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:59Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "crypto-indicators-mcp": {
          "serverid": "crypto-indicators-mcp",
          "self": "#/mcpproviders/kukapay/servers/crypto-indicators-mcp",
          "xid": "/mcpproviders/kukapay/servers/crypto-indicators-mcp",

          "metaurl": "#/mcpproviders/kukapay/servers/crypto-indicators-mcp/meta",
          "meta": {
            "serverid": "crypto-indicators-mcp",
            "self": "#/mcpproviders/kukapay/servers/crypto-indicators-mcp/meta",
            "xid": "/mcpproviders/kukapay/servers/crypto-indicators-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:17.362735863Z",
            "modifiedat": "2025-05-26T16:42:17.362735863Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/crypto-indicators-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/crypto-indicators-mcp/versions",
          "versions": {
            "1": {
              "serverid": "crypto-indicators-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/crypto-indicators-mcp/versions/1",
              "xid": "/mcpproviders/kukapay/servers/crypto-indicators-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/crypto-indicators-mcp",
              "isdefault": true,
              "description": "An MCP server providing a range of cryptocurrency technical analysis indicators and strategies.",
              "createdat": "2025-05-26T16:42:17.362735863Z",
              "modifiedat": "2025-05-26T16:42:17.362735863Z",
              "ancestor": "1",
              "id": "0852caec-a861-4f9c-9e94-a7c8b67a1641",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "binance",
                      "name": "EXCHANGE_NAME"
                    }
                  ],
                  "name": "crypto-indicators-mcp",
                  "package_arguments": [
                    {
                      "default": "path/to/crypto-indicators-mcp/index.js",
                      "description": "Positional argument: path/to/crypto-indicators-mcp/index.js",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "path/to/crypto-indicators-mcp/index.js",
                      "value_hint": "path/to/crypto-indicators-mcp/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.0.1"
                }
              ],
              "repository": {
                "id": "953321792",
                "source": "github",
                "url": "https://github.com/kukapay/crypto-indicators-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:01Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "crypto-sentiment-mcp": {
          "serverid": "crypto-sentiment-mcp",
          "self": "#/mcpproviders/kukapay/servers/crypto-sentiment-mcp",
          "xid": "/mcpproviders/kukapay/servers/crypto-sentiment-mcp",

          "metaurl": "#/mcpproviders/kukapay/servers/crypto-sentiment-mcp/meta",
          "meta": {
            "serverid": "crypto-sentiment-mcp",
            "self": "#/mcpproviders/kukapay/servers/crypto-sentiment-mcp/meta",
            "xid": "/mcpproviders/kukapay/servers/crypto-sentiment-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:17.858516975Z",
            "modifiedat": "2025-05-26T16:42:17.858516975Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/crypto-sentiment-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/crypto-sentiment-mcp/versions",
          "versions": {
            "1": {
              "serverid": "crypto-sentiment-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/crypto-sentiment-mcp/versions/1",
              "xid": "/mcpproviders/kukapay/servers/crypto-sentiment-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/crypto-sentiment-mcp",
              "isdefault": true,
              "description": "An MCP server that delivers cryptocurrency sentiment analysis to AI agents.",
              "createdat": "2025-05-26T16:42:17.858516975Z",
              "modifiedat": "2025-05-26T16:42:17.858516975Z",
              "ancestor": "1",
              "id": "bb7a2190-2e72-4ccf-9603-226e0fde174c",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "${input:apiKey}",
                      "name": "API_KEY"
                    }
                  ],
                  "name": "crypto-sentiment-mcp",
                  "registry_name": "npm",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "953543740",
                "source": "github",
                "url": "https://github.com/kukapay/crypto-sentiment-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:04Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "cryptopanic-mcp-server": {
          "serverid": "cryptopanic-mcp-server",
          "self": "#/mcpproviders/kukapay/servers/cryptopanic-mcp-server",
          "xid": "/mcpproviders/kukapay/servers/cryptopanic-mcp-server",

          "metaurl": "#/mcpproviders/kukapay/servers/cryptopanic-mcp-server/meta",
          "meta": {
            "serverid": "cryptopanic-mcp-server",
            "self": "#/mcpproviders/kukapay/servers/cryptopanic-mcp-server/meta",
            "xid": "/mcpproviders/kukapay/servers/cryptopanic-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:16.731013408Z",
            "modifiedat": "2025-05-26T16:42:16.731013408Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/cryptopanic-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/cryptopanic-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "cryptopanic-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/cryptopanic-mcp-server/versions/1",
              "xid": "/mcpproviders/kukapay/servers/cryptopanic-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/cryptopanic-mcp-server",
              "isdefault": true,
              "description": "Provide latest cryptocurrency news to AI agents.",
              "createdat": "2025-05-26T16:42:16.731013408Z",
              "modifiedat": "2025-05-26T16:42:16.731013408Z",
              "ancestor": "1",
              "id": "91f75500-0051-4d05-a5b2-9a87aa52ec3a",
              "packages": [
                {
                  "name": "cryptopanic-mcp-server",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "946301386",
                "source": "github",
                "url": "https://github.com/kukapay/cryptopanic-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Fetch latest cryptocurrency news, analysis, or videos from CryptoPanic.",
                  "inputschema": {
                    "properties": {
                      "kind": {
                        "description": "Content type (news, analysis, videos)",
                        "type": "string"
                      },
                      "num_pages": {
                        "description": "Number of pages to fetch (default: 1, max: 10)",
                        "type": "integer"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_crypto_news"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:05Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "dune-analytics-mcp": {
          "serverid": "dune-analytics-mcp",
          "self": "#/mcpproviders/kukapay/servers/dune-analytics-mcp",
          "xid": "/mcpproviders/kukapay/servers/dune-analytics-mcp",

          "metaurl": "#/mcpproviders/kukapay/servers/dune-analytics-mcp/meta",
          "meta": {
            "serverid": "dune-analytics-mcp",
            "self": "#/mcpproviders/kukapay/servers/dune-analytics-mcp/meta",
            "xid": "/mcpproviders/kukapay/servers/dune-analytics-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:16.368872618Z",
            "modifiedat": "2025-05-26T16:42:16.368872618Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/dune-analytics-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/dune-analytics-mcp/versions",
          "versions": {
            "1": {
              "serverid": "dune-analytics-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/dune-analytics-mcp/versions/1",
              "xid": "/mcpproviders/kukapay/servers/dune-analytics-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/dune-analytics-mcp",
              "isdefault": true,
              "description": "A mcp server that bridges Dune Analytics data to AI agents.",
              "createdat": "2025-05-26T16:42:16.368872618Z",
              "modifiedat": "2025-05-26T16:42:16.368872618Z",
              "ancestor": "1",
              "id": "2d851046-40f2-4088-95df-d6c0f93c2f0a",
              "packages": [
                {
                  "name": "dune-analytics-mcp",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "949262442",
                "source": "github",
                "url": "https://github.com/kukapay/dune-analytics-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get the latest results for a specific query ID as a CSV string on dune analytics",
                  "inputschema": {
                    "properties": {
                      "query_id": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_latest_result"
                },
                {
                  "description": "Run a query by ID and return results as a CSV string on dune analytics",
                  "inputschema": {
                    "properties": {
                      "query_id": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query_id"
                    ],
                    "type": "object"
                  },
                  "name": "run_query"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:07Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "freqtrade-mcp": {
          "serverid": "freqtrade-mcp",
          "self": "#/mcpproviders/kukapay/servers/freqtrade-mcp",
          "xid": "/mcpproviders/kukapay/servers/freqtrade-mcp",

          "metaurl": "#/mcpproviders/kukapay/servers/freqtrade-mcp/meta",
          "meta": {
            "serverid": "freqtrade-mcp",
            "self": "#/mcpproviders/kukapay/servers/freqtrade-mcp/meta",
            "xid": "/mcpproviders/kukapay/servers/freqtrade-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:16.61494296Z",
            "modifiedat": "2025-05-26T16:42:16.61494296Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/freqtrade-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/freqtrade-mcp/versions",
          "versions": {
            "1": {
              "serverid": "freqtrade-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/freqtrade-mcp/versions/1",
              "xid": "/mcpproviders/kukapay/servers/freqtrade-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/freqtrade-mcp",
              "isdefault": true,
              "description": "An MCP server that integrates with the Freqtrade cryptocurrency trading bot.",
              "createdat": "2025-05-26T16:42:16.61494296Z",
              "modifiedat": "2025-05-26T16:42:16.61494296Z",
              "ancestor": "1",
              "id": "573c235f-93d7-45a3-9f23-b1166a660c97",
              "packages": [
                {
                  "name": "freqtrade-mcp",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "954056822",
                "source": "github",
                "url": "https://github.com/kukapay/freqtrade-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:57Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "jupiter-mcp": {
          "serverid": "jupiter-mcp",
          "self": "#/mcpproviders/kukapay/servers/jupiter-mcp",
          "xid": "/mcpproviders/kukapay/servers/jupiter-mcp",

          "metaurl": "#/mcpproviders/kukapay/servers/jupiter-mcp/meta",
          "meta": {
            "serverid": "jupiter-mcp",
            "self": "#/mcpproviders/kukapay/servers/jupiter-mcp/meta",
            "xid": "/mcpproviders/kukapay/servers/jupiter-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:17.238108012Z",
            "modifiedat": "2025-05-26T16:42:17.238108012Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/jupiter-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/jupiter-mcp/versions",
          "versions": {
            "1": {
              "serverid": "jupiter-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/jupiter-mcp/versions/1",
              "xid": "/mcpproviders/kukapay/servers/jupiter-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/jupiter-mcp",
              "isdefault": true,
              "description": "An MCP server for executing token swaps on the Solana blockchain using Jupiter's new Ultra API.",
              "createdat": "2025-05-26T16:42:17.238108012Z",
              "modifiedat": "2025-05-26T16:42:17.238108012Z",
              "ancestor": "1",
              "id": "243a8c0e-4bb7-4932-9d7c-8e8229306295",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "solana rpc url you can access",
                      "name": "SOLANA_RPC_URL"
                    },
                    {
                      "description": "your private key",
                      "name": "PRIVATE_KEY"
                    }
                  ],
                  "name": "jupiter-mcp",
                  "package_arguments": [
                    {
                      "default": "path/to/jupiter-mcp/server/index.js",
                      "description": "Jupiter MCP server entry file",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "path/to/jupiter-mcp/server/index.js",
                      "value_hint": "path/to/jupiter-mcp/server/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.0.1"
                }
              ],
              "repository": {
                "id": "952976727",
                "source": "github",
                "url": "https://github.com/kukapay/jupiter-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:44Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "pancakeswap-poolspy-mcp": {
          "serverid": "pancakeswap-poolspy-mcp",
          "self": "#/mcpproviders/kukapay/servers/pancakeswap-poolspy-mcp",
          "xid": "/mcpproviders/kukapay/servers/pancakeswap-poolspy-mcp",

          "metaurl": "#/mcpproviders/kukapay/servers/pancakeswap-poolspy-mcp/meta",
          "meta": {
            "serverid": "pancakeswap-poolspy-mcp",
            "self": "#/mcpproviders/kukapay/servers/pancakeswap-poolspy-mcp/meta",
            "xid": "/mcpproviders/kukapay/servers/pancakeswap-poolspy-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:16.853978176Z",
            "modifiedat": "2025-05-26T16:42:16.853978176Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/pancakeswap-poolspy-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/pancakeswap-poolspy-mcp/versions",
          "versions": {
            "1": {
              "serverid": "pancakeswap-poolspy-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/pancakeswap-poolspy-mcp/versions/1",
              "xid": "/mcpproviders/kukapay/servers/pancakeswap-poolspy-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/pancakeswap-poolspy-mcp",
              "isdefault": true,
              "description": "An MCP server that tracks newly created liquidity pools on Pancake Swap",
              "createdat": "2025-05-26T16:42:16.853978176Z",
              "modifiedat": "2025-05-26T16:42:16.853978176Z",
              "ancestor": "1",
              "id": "925a5d1d-ab12-44bd-9297-a20bdde6ec68",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your api key from The Graph",
                      "name": "THEGRAPH_API_KEY"
                    }
                  ],
                  "name": "pancakeswap-poolspy-mcp",
                  "package_arguments": [
                    {
                      "default": "--directory path/to/pancakeswap-poolspy-mcp",
                      "description": "Specify directory to run from",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory path/to/pancakeswap-poolspy-mcp",
                      "type": "named",
                      "value": "--directory path/to/pancakeswap-poolspy-mcp",
                      "value_hint": "path/to/pancakeswap-poolspy-mcp"
                    },
                    {
                      "default": "main.py",
                      "description": "Python script to execute",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "main.py",
                      "value_hint": "main.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "949792903",
                "source": "github",
                "url": "https://github.com/kukapay/pancakeswap-poolspy-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:19Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "thegraph-mcp": {
          "serverid": "thegraph-mcp",
          "self": "#/mcpproviders/kukapay/servers/thegraph-mcp",
          "xid": "/mcpproviders/kukapay/servers/thegraph-mcp",

          "metaurl": "#/mcpproviders/kukapay/servers/thegraph-mcp/meta",
          "meta": {
            "serverid": "thegraph-mcp",
            "self": "#/mcpproviders/kukapay/servers/thegraph-mcp/meta",
            "xid": "/mcpproviders/kukapay/servers/thegraph-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:17.10723282Z",
            "modifiedat": "2025-05-26T16:42:17.10723282Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/thegraph-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/thegraph-mcp/versions",
          "versions": {
            "1": {
              "serverid": "thegraph-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/thegraph-mcp/versions/1",
              "xid": "/mcpproviders/kukapay/servers/thegraph-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/thegraph-mcp",
              "isdefault": true,
              "description": "An MCP server that powers AI agents with indexed blockchain data from The Graph.",
              "createdat": "2025-05-26T16:42:17.10723282Z",
              "modifiedat": "2025-05-26T16:42:17.10723282Z",
              "ancestor": "1",
              "id": "ea41dc54-96fd-41db-90ec-92a1a45e7151",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_api_key_here",
                      "name": "THEGRAPH_API_KEY"
                    }
                  ],
                  "name": "thegraph-mcp",
                  "package_arguments": [
                    {
                      "default": "--directory path/to/thegraph-mcp",
                      "description": "Specifies the directory to run the application from",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory path/to/thegraph-mcp",
                      "type": "named",
                      "value": "--directory path/to/thegraph-mcp",
                      "value_hint": "path/to/thegraph-mcp"
                    },
                    {
                      "default": "main.py",
                      "description": "Main python file to execute",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "main.py",
                      "value_hint": "main.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "952738950",
                "source": "github",
                "url": "https://github.com/kukapay/thegraph-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:46Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "token-minter-mcp": {
          "serverid": "token-minter-mcp",
          "self": "#/mcpproviders/kukapay/servers/token-minter-mcp",
          "xid": "/mcpproviders/kukapay/servers/token-minter-mcp",

          "metaurl": "#/mcpproviders/kukapay/servers/token-minter-mcp/meta",
          "meta": {
            "serverid": "token-minter-mcp",
            "self": "#/mcpproviders/kukapay/servers/token-minter-mcp/meta",
            "xid": "/mcpproviders/kukapay/servers/token-minter-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:17.486106284Z",
            "modifiedat": "2025-05-26T16:42:17.486106284Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/token-minter-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/token-minter-mcp/versions",
          "versions": {
            "1": {
              "serverid": "token-minter-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/token-minter-mcp/versions/1",
              "xid": "/mcpproviders/kukapay/servers/token-minter-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/token-minter-mcp",
              "isdefault": true,
              "description": "An MCP server providing tools for AI agents to mint ERC-20 tokens across multiple blockchains.",
              "createdat": "2025-05-26T16:42:17.486106284Z",
              "modifiedat": "2025-05-26T16:42:17.486106284Z",
              "ancestor": "1",
              "id": "10bb9deb-9384-4e4d-935e-9d830015a43e",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your infura key",
                      "name": "INFURA_KEY"
                    },
                    {
                      "description": "your private key",
                      "name": "PRIVATE_KEY"
                    }
                  ],
                  "name": "token-minter-mcp",
                  "package_arguments": [
                    {
                      "default": "path/to/token-minter-mcp/server/index.js",
                      "description": "Path to the server entry point",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "path/to/token-minter-mcp/server/index.js",
                      "value_hint": "path/to/token-minter-mcp/server/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.0.1"
                }
              ],
              "repository": {
                "id": "951336068",
                "source": "github",
                "url": "https://github.com/kukapay/token-minter-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:59Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "token-revoke-mcp": {
          "serverid": "token-revoke-mcp",
          "self": "#/mcpproviders/kukapay/servers/token-revoke-mcp",
          "xid": "/mcpproviders/kukapay/servers/token-revoke-mcp",

          "metaurl": "#/mcpproviders/kukapay/servers/token-revoke-mcp/meta",
          "meta": {
            "serverid": "token-revoke-mcp",
            "self": "#/mcpproviders/kukapay/servers/token-revoke-mcp/meta",
            "xid": "/mcpproviders/kukapay/servers/token-revoke-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:16.494359215Z",
            "modifiedat": "2025-05-26T16:42:16.494359215Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/token-revoke-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/token-revoke-mcp/versions",
          "versions": {
            "1": {
              "serverid": "token-revoke-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/token-revoke-mcp/versions/1",
              "xid": "/mcpproviders/kukapay/servers/token-revoke-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/token-revoke-mcp",
              "isdefault": true,
              "description": "An MCP server for checking and revoking ERC-20 token allowances across multiple blockchains.",
              "createdat": "2025-05-26T16:42:16.494359215Z",
              "modifiedat": "2025-05-26T16:42:16.494359215Z",
              "ancestor": "1",
              "id": "4bd856fc-761e-43e3-9236-7b996b6b7ec7",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your moralis api key",
                      "name": "MORALIS_API_KEY"
                    },
                    {
                      "description": "your wallet private key",
                      "name": "PRIVATE_KEY"
                    }
                  ],
                  "name": "token-revoke-mcp",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "repository": {
                "id": "956577908",
                "source": "github",
                "url": "https://github.com/kukapay/token-revoke-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:01Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "uniswap-poolspy-mcp": {
          "serverid": "uniswap-poolspy-mcp",
          "self": "#/mcpproviders/kukapay/servers/uniswap-poolspy-mcp",
          "xid": "/mcpproviders/kukapay/servers/uniswap-poolspy-mcp",

          "metaurl": "#/mcpproviders/kukapay/servers/uniswap-poolspy-mcp/meta",
          "meta": {
            "serverid": "uniswap-poolspy-mcp",
            "self": "#/mcpproviders/kukapay/servers/uniswap-poolspy-mcp/meta",
            "xid": "/mcpproviders/kukapay/servers/uniswap-poolspy-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:17.608561423Z",
            "modifiedat": "2025-05-26T16:42:17.608561423Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/uniswap-poolspy-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/uniswap-poolspy-mcp/versions",
          "versions": {
            "1": {
              "serverid": "uniswap-poolspy-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/uniswap-poolspy-mcp/versions/1",
              "xid": "/mcpproviders/kukapay/servers/uniswap-poolspy-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/uniswap-poolspy-mcp",
              "isdefault": true,
              "description": "An MCP server that tracks newly created liquidity pools on Uniswap across nine blockchain networks.",
              "createdat": "2025-05-26T16:42:17.608561423Z",
              "modifiedat": "2025-05-26T16:42:17.608561423Z",
              "ancestor": "1",
              "id": "1ff3b09d-5c19-4254-849f-34244dc6ee88",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your api key from The Graph",
                      "name": "THEGRAPH_API_KEY"
                    }
                  ],
                  "name": "uniswap-poolspy-mcp",
                  "package_arguments": [
                    {
                      "default": "run main.py",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "run main.py",
                      "value_hint": "main.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "950939450",
                "source": "github",
                "url": "https://github.com/kukapay/uniswap-poolspy-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:09Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "uniswap-trader-mcp": {
          "serverid": "uniswap-trader-mcp",
          "self": "#/mcpproviders/kukapay/servers/uniswap-trader-mcp",
          "xid": "/mcpproviders/kukapay/servers/uniswap-trader-mcp",

          "metaurl": "#/mcpproviders/kukapay/servers/uniswap-trader-mcp/meta",
          "meta": {
            "serverid": "uniswap-trader-mcp",
            "self": "#/mcpproviders/kukapay/servers/uniswap-trader-mcp/meta",
            "xid": "/mcpproviders/kukapay/servers/uniswap-trader-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:16.981036749Z",
            "modifiedat": "2025-05-26T16:42:16.981036749Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/uniswap-trader-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/uniswap-trader-mcp/versions",
          "versions": {
            "1": {
              "serverid": "uniswap-trader-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/uniswap-trader-mcp/versions/1",
              "xid": "/mcpproviders/kukapay/servers/uniswap-trader-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/uniswap-trader-mcp",
              "isdefault": true,
              "description": "An MCP server for AI agents to automate token swaps on Uniswap DEX across multiple blockchains.",
              "createdat": "2025-05-26T16:42:16.981036749Z",
              "modifiedat": "2025-05-26T16:42:16.981036749Z",
              "ancestor": "1",
              "id": "1dd6d7a5-ba98-4fce-b4a4-d0541df84569",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your infura key",
                      "name": "INFURA_KEY"
                    },
                    {
                      "description": "your private key",
                      "name": "WALLET_PRIVATE_KEY"
                    }
                  ],
                  "name": "uniswap-trader-mcp",
                  "package_arguments": [
                    {
                      "default": "path/to/uniswap-trader-mcp/server/index.js",
                      "description": "Path to main entry file",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "path/to/uniswap-trader-mcp/server/index.js",
                      "value_hint": "path/to/uniswap-trader-mcp/server/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.0.1"
                }
              ],
              "repository": {
                "id": "952312114",
                "source": "github",
                "url": "https://github.com/kukapay/uniswap-trader-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:12Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "whale-tracker-mcp": {
          "serverid": "whale-tracker-mcp",
          "self": "#/mcpproviders/kukapay/servers/whale-tracker-mcp",
          "xid": "/mcpproviders/kukapay/servers/whale-tracker-mcp",

          "metaurl": "#/mcpproviders/kukapay/servers/whale-tracker-mcp/meta",
          "meta": {
            "serverid": "whale-tracker-mcp",
            "self": "#/mcpproviders/kukapay/servers/whale-tracker-mcp/meta",
            "xid": "/mcpproviders/kukapay/servers/whale-tracker-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:17.733228818Z",
            "modifiedat": "2025-05-26T16:42:17.733228818Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/whale-tracker-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/whale-tracker-mcp/versions",
          "versions": {
            "1": {
              "serverid": "whale-tracker-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/whale-tracker-mcp/versions/1",
              "xid": "/mcpproviders/kukapay/servers/whale-tracker-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/whale-tracker-mcp",
              "isdefault": true,
              "description": "A mcp server for tracking cryptocurrency whale transactions.",
              "createdat": "2025-05-26T16:42:17.733228818Z",
              "modifiedat": "2025-05-26T16:42:17.733228818Z",
              "ancestor": "1",
              "id": "e69c8abd-6964-48b1-a7cb-89c926932c47",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "${input:apiKey}",
                      "name": "API_KEY"
                    }
                  ],
                  "name": "whale-tracker-mcp",
                  "registry_name": "npm",
                  "version": "0.1.0"
                }
              ],
              "prompts": [
                {
                  "description": "A reusable template for analyzing whale transaction patterns, optionally filtered by blockchain.",
                  "name": "query_whale_activity"
                }
              ],
              "repository": {
                "id": "948027955",
                "source": "github",
                "url": "https://github.com/kukapay/whale-tracker-mcp"
              },
              "resources": [
                {
                  "description": "Expose recent transactions for a specified blockchain as contextual data.",
                  "name": "whale://transactions/{blockchain}",
                  "uritemplate": "whale://transactions/{blockchain}"
                }
              ],
              "tools": [
                {
                  "description": "Fetch recent whale transactions with optional filters for blockchain, minimum value, and limit.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_recent_transactions"
                },
                {
                  "description": "Retrieve detailed information about a specific transaction by its ID.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_transaction_details"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:42Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 14
    },
    "lamaalrajih": {
      "mcpproviderid": "lamaalrajih",
      "self": "#/mcpproviders/lamaalrajih",
      "xid": "/mcpproviders/lamaalrajih",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:37.220453664Z",
      "modifiedat": "2025-05-26T16:41:37.220453664Z",

      "serversurl": "#/mcpproviders/lamaalrajih/servers",
      "servers": {
        "kicad-mcp": {
          "serverid": "kicad-mcp",
          "self": "#/mcpproviders/lamaalrajih/servers/kicad-mcp",
          "xid": "/mcpproviders/lamaalrajih/servers/kicad-mcp",

          "metaurl": "#/mcpproviders/lamaalrajih/servers/kicad-mcp/meta",
          "meta": {
            "serverid": "kicad-mcp",
            "self": "#/mcpproviders/lamaalrajih/servers/kicad-mcp/meta",
            "xid": "/mcpproviders/lamaalrajih/servers/kicad-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:37.220453664Z",
            "modifiedat": "2025-05-26T16:41:37.220453664Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/lamaalrajih/servers/kicad-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/lamaalrajih/servers/kicad-mcp/versions",
          "versions": {
            "1": {
              "serverid": "kicad-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/lamaalrajih/servers/kicad-mcp/versions/1",
              "xid": "/mcpproviders/lamaalrajih/servers/kicad-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.lamaalrajih/kicad-mcp",
              "isdefault": true,
              "description": "Model Context Protocol server for KiCad on Mac, Windows, and Linux",
              "createdat": "2025-05-26T16:41:37.220453664Z",
              "modifiedat": "2025-05-26T16:41:37.220453664Z",
              "ancestor": "1",
              "id": "e80eb5ed-497b-4bcf-8cc3-f7f2c5eed889",
              "packages": [
                {
                  "name": "lamaalrajih/kicad-mcp",
                  "registry_name": "pypi",
                  "version": ""
                }
              ],
              "prompts": [
                {
                  "arguments": [],
                  "description": "Prompt for creating a new KiCad component. Provides step-by-step instructions on creating schematic symbols, footprints, and adding components to designs.",
                  "name": "create_new_component"
                },
                {
                  "arguments": [],
                  "description": "Prompt for debugging common PCB issues including DRC errors, ERC errors, footprint mismatches, and routing challenges.",
                  "name": "debug_pcb_issues"
                },
                {
                  "arguments": [],
                  "description": "Prompt for a comprehensive checklist to prepare a KiCad PCB design for manufacturing, covering design rules, layers, output files, and component placement.",
                  "name": "pcb_manufacturing_checklist"
                }
              ],
              "repository": {
                "id": "951687178",
                "source": "github",
                "url": "https://github.com/lamaalrajih/kicad-mcp"
              },
              "resources": [
                {
                  "description": "Get a formatted report of identified circuit patterns in a KiCad schematic file.",
                  "mimetype": "text/markdown",
                  "name": "circuit_patterns",
                  "uritemplate": "kicad://patterns/{schematic_path}"
                },
                {
                  "description": "Get a formatted report of identified circuit patterns in a KiCad project.",
                  "mimetype": "text/markdown",
                  "name": "project_circuit_patterns",
                  "uritemplate": "kicad://patterns/project/{project_path}"
                }
              ],
              "tools": [
                {
                  "description": "Analyze a KiCad project's Bill of Materials (BOM), providing component counts, categories, and cost estimates if available.",
                  "inputschema": {
                    "properties": {
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path"
                    ],
                    "type": "object"
                  },
                  "name": "analyze_bom"
                },
                {
                  "description": "Export a Bill of Materials CSV file for a KiCad project using KiCad command-line tools or Python modules.",
                  "inputschema": {
                    "properties": {
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path"
                    ],
                    "type": "object"
                  },
                  "name": "export_bom_csv"
                },
                {
                  "description": "Retrieve the Design Rule Check (DRC) history for a KiCad project.",
                  "inputschema": {
                    "properties": {
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path"
                    ],
                    "type": "object"
                  },
                  "name": "get_drc_history_tool"
                },
                {
                  "description": "Run a Design Rule Check on a KiCad PCB file and return results and statistics.",
                  "inputschema": {
                    "properties": {
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path"
                    ],
                    "type": "object"
                  },
                  "name": "run_drc_check"
                },
                {
                  "description": "Extract netlist information from a KiCad schematic file.",
                  "inputschema": {
                    "properties": {
                      "schematic_path": {
                        "description": "Path to the KiCad schematic file (.kicad_sch)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "schematic_path"
                    ],
                    "type": "object"
                  },
                  "name": "extract_schematic_netlist"
                },
                {
                  "description": "Extract netlist from a KiCad project's schematic file.",
                  "inputschema": {
                    "properties": {
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path"
                    ],
                    "type": "object"
                  },
                  "name": "extract_project_netlist"
                },
                {
                  "description": "Analyze connections in a KiCad schematic including power nets, signal paths, and potential issues.",
                  "inputschema": {
                    "properties": {
                      "schematic_path": {
                        "description": "Path to the KiCad schematic file (.kicad_sch)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "schematic_path"
                    ],
                    "type": "object"
                  },
                  "name": "analyze_schematic_connections"
                },
                {
                  "description": "Find all connections for a specific component in a KiCad project schematic.",
                  "inputschema": {
                    "properties": {
                      "component_ref": {
                        "description": "Component reference designator (e.g., R1, U3)",
                        "type": "string"
                      },
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path",
                      "component_ref"
                    ],
                    "type": "object"
                  },
                  "name": "find_component_connections"
                },
                {
                  "description": "Identify common circuit patterns in a KiCad schematic such as power supplies, amplifiers, filters, oscillators, digital interfaces, microcontrollers, and sensors.",
                  "inputschema": {
                    "properties": {
                      "schematic_path": {
                        "description": "Path to the KiCad schematic file (.kicad_sch)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "schematic_path"
                    ],
                    "type": "object"
                  },
                  "name": "identify_circuit_patterns"
                },
                {
                  "description": "Identify circuit patterns in a KiCad project's schematic file.",
                  "inputschema": {
                    "properties": {
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path"
                    ],
                    "type": "object"
                  },
                  "name": "analyze_project_circuit_patterns"
                },
                {
                  "description": "Find and list all KiCad projects on the system.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_projects"
                },
                {
                  "description": "Get the structure and files of a KiCad project.",
                  "inputschema": {
                    "properties": {
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path"
                    ],
                    "type": "object"
                  },
                  "name": "get_project_structure"
                },
                {
                  "description": "Open a KiCad project in the KiCad application.",
                  "inputschema": {
                    "properties": {
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path"
                    ],
                    "type": "object"
                  },
                  "name": "open_project"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:47Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "langfuse": {
      "mcpproviderid": "langfuse",
      "self": "#/mcpproviders/langfuse",
      "xid": "/mcpproviders/langfuse",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:42.158807293Z",
      "modifiedat": "2025-05-26T16:41:42.158807293Z",

      "serversurl": "#/mcpproviders/langfuse/servers",
      "servers": {
        "mcp-server-langfuse": {
          "serverid": "mcp-server-langfuse",
          "self": "#/mcpproviders/langfuse/servers/mcp-server-langfuse",
          "xid": "/mcpproviders/langfuse/servers/mcp-server-langfuse",

          "metaurl": "#/mcpproviders/langfuse/servers/mcp-server-langfuse/meta",
          "meta": {
            "serverid": "mcp-server-langfuse",
            "self": "#/mcpproviders/langfuse/servers/mcp-server-langfuse/meta",
            "xid": "/mcpproviders/langfuse/servers/mcp-server-langfuse/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:42.158807293Z",
            "modifiedat": "2025-05-26T16:41:42.158807293Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/langfuse/servers/mcp-server-langfuse/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/langfuse/servers/mcp-server-langfuse/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-langfuse",
              "versionid": "1",
              "self": "#/mcpproviders/langfuse/servers/mcp-server-langfuse/versions/1",
              "xid": "/mcpproviders/langfuse/servers/mcp-server-langfuse/versions/1",
              "epoch": 1,
              "name": "io.github.langfuse/mcp-server-langfuse",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) Server for Langfuse Prompt Management. This server allows you to access and manage your Langfuse prompts through the Model Context Protocol.",
              "createdat": "2025-05-26T16:41:42.158807293Z",
              "modifiedat": "2025-05-26T16:41:42.158807293Z",
              "ancestor": "1",
              "id": "f88b50da-f452-452b-9f22-1c7da7542b36",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-public-key",
                      "name": "LANGFUSE_PUBLIC_KEY"
                    },
                    {
                      "description": "your-secret-key",
                      "name": "LANGFUSE_SECRET_KEY"
                    },
                    {
                      "description": "https://cloud.langfuse.com",
                      "name": "LANGFUSE_BASEURL"
                    }
                  ],
                  "name": "mcp-server-langfuse",
                  "registry_name": "unknown",
                  "version": "0.0.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "933201974",
                "source": "github",
                "url": "https://github.com/langfuse/mcp-server-langfuse"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get prompts that are stored in Langfuse",
                  "inputschema": {
                    "properties": {
                      "cursor": {
                        "description": "Cursor to paginate through prompts",
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-prompts"
                },
                {
                  "description": "Get a prompt that is stored in Langfuse",
                  "inputschema": {
                    "properties": {
                      "arguments": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Arguments with prompt variables to pass to the prompt template, json object, e.g. {\"\u003cname\u003e\":\"\u003cvalue\u003e\"}",
                        "nullable": true,
                        "type": "object"
                      },
                      "name": {
                        "description": "Name of the prompt to retrieve, use get-prompts to get a list of prompts",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "get-prompt"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:09Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "lciesielski": {
      "mcpproviderid": "lciesielski",
      "self": "#/mcpproviders/lciesielski",
      "xid": "/mcpproviders/lciesielski",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:25.14881169Z",
      "modifiedat": "2025-05-26T16:41:25.14881169Z",

      "serversurl": "#/mcpproviders/lciesielski/servers",
      "servers": {
        "mcp-salesforce-example": {
          "serverid": "mcp-salesforce-example",
          "self": "#/mcpproviders/lciesielski/servers/mcp-salesforce-example",
          "xid": "/mcpproviders/lciesielski/servers/mcp-salesforce-example",

          "metaurl": "#/mcpproviders/lciesielski/servers/mcp-salesforce-example/meta",
          "meta": {
            "serverid": "mcp-salesforce-example",
            "self": "#/mcpproviders/lciesielski/servers/mcp-salesforce-example/meta",
            "xid": "/mcpproviders/lciesielski/servers/mcp-salesforce-example/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:25.14881169Z",
            "modifiedat": "2025-05-26T16:41:25.14881169Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/lciesielski/servers/mcp-salesforce-example/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/lciesielski/servers/mcp-salesforce-example/versions",
          "versions": {
            "1": {
              "serverid": "mcp-salesforce-example",
              "versionid": "1",
              "self": "#/mcpproviders/lciesielski/servers/mcp-salesforce-example/versions/1",
              "xid": "/mcpproviders/lciesielski/servers/mcp-salesforce-example/versions/1",
              "epoch": 1,
              "name": "io.github.lciesielski/mcp-salesforce-example",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:25.14881169Z",
              "modifiedat": "2025-05-26T16:41:25.14881169Z",
              "ancestor": "1",
              "id": "3ec2249d-2ed3-45d2-8b52-185abfa918ac",
              "packages": [
                {
                  "name": "mcp-salesforce",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "repository": {
                "id": "957204688",
                "source": "github",
                "url": "https://github.com/lciesielski/mcp-salesforce-example"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:00Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "leehanchung": {
      "mcpproviderid": "leehanchung",
      "self": "#/mcpproviders/leehanchung",
      "xid": "/mcpproviders/leehanchung",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:29.917257879Z",
      "modifiedat": "2025-05-26T16:42:29.917257879Z",

      "serversurl": "#/mcpproviders/leehanchung/servers",
      "servers": {
        "bing-search-mcp": {
          "serverid": "bing-search-mcp",
          "self": "#/mcpproviders/leehanchung/servers/bing-search-mcp",
          "xid": "/mcpproviders/leehanchung/servers/bing-search-mcp",

          "metaurl": "#/mcpproviders/leehanchung/servers/bing-search-mcp/meta",
          "meta": {
            "serverid": "bing-search-mcp",
            "self": "#/mcpproviders/leehanchung/servers/bing-search-mcp/meta",
            "xid": "/mcpproviders/leehanchung/servers/bing-search-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:29.917257879Z",
            "modifiedat": "2025-05-26T16:42:29.917257879Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/leehanchung/servers/bing-search-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/leehanchung/servers/bing-search-mcp/versions",
          "versions": {
            "1": {
              "serverid": "bing-search-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/leehanchung/servers/bing-search-mcp/versions/1",
              "xid": "/mcpproviders/leehanchung/servers/bing-search-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.leehanchung/bing-search-mcp",
              "isdefault": true,
              "description": "MCP Server for Bing Search API",
              "createdat": "2025-05-26T16:42:29.917257879Z",
              "modifiedat": "2025-05-26T16:42:29.917257879Z",
              "ancestor": "1",
              "id": "a0db598f-81d1-44d6-9008-e9a71e742cd3",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-bing-api-key",
                      "name": "BING_API_KEY"
                    }
                  ],
                  "name": "mcp_server_bing",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "949213032",
                "source": "github",
                "url": "https://github.com/leehanchung/bing-search-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "General web search for information, websites, and content.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "description": "Number of results (1-50)",
                        "type": "integer"
                      },
                      "market": {
                        "description": "Market code like en-US, en-GB",
                        "type": "string"
                      },
                      "offset": {
                        "description": "Pagination offset",
                        "type": "integer"
                      },
                      "query": {
                        "description": "Search query",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query",
                      "count",
                      "offset",
                      "market"
                    ],
                    "type": "object"
                  },
                  "name": "bing_web_search"
                },
                {
                  "description": "Search for news articles and current events.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "description": "Number of results (1-50)",
                        "type": "integer"
                      },
                      "freshness": {
                        "description": "Time period of news (Day, Week, Month)",
                        "type": "string"
                      },
                      "market": {
                        "description": "Market code like en-US, en-GB",
                        "type": "string"
                      },
                      "query": {
                        "description": "News search query",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query",
                      "count",
                      "market",
                      "freshness"
                    ],
                    "type": "object"
                  },
                  "name": "bing_news_search"
                },
                {
                  "description": "Search for images.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "description": "Number of results (1-50)",
                        "type": "integer"
                      },
                      "market": {
                        "description": "Market code like en-US, en-GB",
                        "type": "string"
                      },
                      "query": {
                        "description": "Image search query",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query",
                      "count",
                      "market"
                    ],
                    "type": "object"
                  },
                  "name": "bing_image_search"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:57Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "lenwood": {
      "mcpproviderid": "lenwood",
      "self": "#/mcpproviders/lenwood",
      "xid": "/mcpproviders/lenwood",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:36.572504864Z",
      "modifiedat": "2025-05-26T16:41:36.572504864Z",

      "serversurl": "#/mcpproviders/lenwood/servers",
      "servers": {
        "cfbd-mcp-server": {
          "serverid": "cfbd-mcp-server",
          "self": "#/mcpproviders/lenwood/servers/cfbd-mcp-server",
          "xid": "/mcpproviders/lenwood/servers/cfbd-mcp-server",

          "metaurl": "#/mcpproviders/lenwood/servers/cfbd-mcp-server/meta",
          "meta": {
            "serverid": "cfbd-mcp-server",
            "self": "#/mcpproviders/lenwood/servers/cfbd-mcp-server/meta",
            "xid": "/mcpproviders/lenwood/servers/cfbd-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:36.572504864Z",
            "modifiedat": "2025-05-26T16:41:36.572504864Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/lenwood/servers/cfbd-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/lenwood/servers/cfbd-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "cfbd-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/lenwood/servers/cfbd-mcp-server/versions/1",
              "xid": "/mcpproviders/lenwood/servers/cfbd-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.lenwood/cfbd-mcp-server",
              "isdefault": true,
              "description": "An MCP server enabling CFBD API queries within Claude Desktop.",
              "createdat": "2025-05-26T16:41:36.572504864Z",
              "modifiedat": "2025-05-26T16:41:36.572504864Z",
              "ancestor": "1",
              "id": "9fcb3e74-e8af-4b55-9bfc-808fa2560148",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "xxx",
                      "name": "CFB_API_KEY"
                    },
                    {
                      "description": "/full/path/to/python",
                      "name": "PATH"
                    }
                  ],
                  "name": "cfbd-mcp-server",
                  "package_arguments": [
                    {
                      "default": "cfbd-mcp-server",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "cfbd-mcp-server",
                      "value_hint": "cfbd-mcp-server"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.5.0"
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Game ID to analyze",
                      "name": "game_id",
                      "required": true
                    },
                    {
                      "description": "Whether to include advanced statistics (true/false)",
                      "name": "include_advanced_stats",
                      "required": false
                    }
                  ],
                  "description": "Get detailed analysis of a specific game",
                  "name": "analyze-game"
                },
                {
                  "arguments": [
                    {
                      "description": "Team name (e.g. Alabama)",
                      "name": "team",
                      "required": true
                    },
                    {
                      "description": "Season year",
                      "name": "year",
                      "required": true
                    }
                  ],
                  "description": "Analyze a team's performance for a given season",
                  "name": "analyze-team"
                },
                {
                  "arguments": [
                    {
                      "description": "Season year",
                      "name": "year",
                      "required": true
                    },
                    {
                      "description": "Metric to analyze (scoring, attendance, upsets)",
                      "name": "metric",
                      "required": true
                    }
                  ],
                  "description": "Analyze trends over a season",
                  "name": "analyze-trends"
                },
                {
                  "arguments": [
                    {
                      "description": "First team name",
                      "name": "team1",
                      "required": true
                    },
                    {
                      "description": "Second team name",
                      "name": "team2",
                      "required": true
                    },
                    {
                      "description": "Season year",
                      "name": "year",
                      "required": true
                    }
                  ],
                  "description": "Compare the performance of two teams",
                  "name": "compare-teams"
                },
                {
                  "arguments": [
                    {
                      "description": "First team name",
                      "name": "team1",
                      "required": true
                    },
                    {
                      "description": "Second team name",
                      "name": "team2",
                      "required": true
                    },
                    {
                      "description": "Starting year for analysis",
                      "name": "start_year",
                      "required": false
                    }
                  ],
                  "description": "Analyze historical rivalry matchups",
                  "name": "analyze-rivalry"
                }
              ],
              "repository": {
                "id": "906271992",
                "source": "github",
                "url": "https://github.com/lenwood/cfbd-mcp-server"
              },
              "resources": [
                {
                  "description": "Get game information with scores, teams and metadata",
                  "mimetype": "text/plain",
                  "name": "Games endpoint schema",
                  "uritemplate": "schema://games"
                },
                {
                  "description": "Get team season records",
                  "mimetype": "text/plain",
                  "name": "Team records endpoint schema",
                  "uritemplate": "schema://records"
                },
                {
                  "description": "Schema for the /plays endpoint",
                  "mimetype": "text/plain",
                  "name": "Plays endpoint",
                  "uritemplate": "schema://plays"
                },
                {
                  "description": "Schema for the /drives endpoint",
                  "mimetype": "text/plain",
                  "name": "Drives endpoint",
                  "uritemplate": "schema://drives"
                },
                {
                  "description": "Schema for the /play/stats endpoint",
                  "mimetype": "text/plain",
                  "name": "Play/stats endpoint",
                  "uritemplate": "schema://play/stats"
                },
                {
                  "description": "Schema for the /rankings endpoint",
                  "mimetype": "text/plain",
                  "name": "Rankings endpoint",
                  "uritemplate": "schema://rankings"
                },
                {
                  "description": "Schema for the pregame win probability endpoint",
                  "mimetype": "text/plain",
                  "name": "Metrics/wp/pregame endpoint",
                  "uritemplate": "schema://metrics/wp/pregame"
                },
                {
                  "description": "Schema for the advanced box score endpoint",
                  "mimetype": "text/plain",
                  "name": "Advanced box score endpoint",
                  "uritemplate": "schema://game/box/advanced"
                }
              ],
              "tools": [
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet college football game data.\nRequired: year\nOptional: week, season_type, team, conference, category, game_id\nExample valid queries:\n- year=2023\n- year=2023, team=\"Alabama\"\n- year=2023, week=1, conference=\"SEC\"",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-games"
                },
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet college football team record data.\nOptional: year, team, conference\nExample valid queries:\n- year=2023\n- team=\"Alabama\"\n- conference=\"SEC\"\n- year=2023, team=\"Alabama\"",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-records"
                },
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet college football team game data.\nRequired: year plus at least one of: week, team or conference.\nExample valid queries:\n- year=2023, team=\"Alabama\"\n- year=2023, week=1\n- year=2023, conference=\"SEC",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-games-teams"
                },
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet college football play-by-play data.\nRequired: year AND week\nOptional: season_type, team, offense, defense, conference, offense_conference, defense_conference, play_type, classification\nExample valid queries:\n- year=2023, week=1\n- year=2023, week=1, team=\"Alabama\"\n- year=2023, week=1, offense=\"Alabama\", defense=\"Auburn\"",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-plays"
                },
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet college football drive data.\nRequired: year\nOptional: season_type, week, team, offense, defense, conference, offense_conference, defense_conference, classification\nExample valid queries:\n- year=2023\n- year=2023, team=\"Alabama\"\n- year=2023, offense=\"Alabama\", defense=\"Auburn\"",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-drives"
                },
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet college football play statistic data.\nOptional: year, week, team, game_id, athlete_id, stat_type_id, season_type, conference\nAt least one parameter is required\nExample valid queries:\n- year=2023\n- game_id=401403910\n- team=\"Alabama\", year=2023",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-play-stats"
                },
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet college football rankings data.\nRequired: year\nOptional: week, season_type\nExample valid queries:\n- year=2023\n- year=2023, week=1\n- year=2023, season_type=\"regular\"",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-rankings"
                },
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet college football pregame win probability data.\nOptional: year, week, team, season_type\nAt least one parameter is required\nExample valid queries:\n- year=2023\n- team=\"Alabama\"\n- year=2023, week=1",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-pregame-win-probability"
                },
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet advanced box score data for college football games.\nRequired: gameId\nExample valid queries:\n- gameId=401403910",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-advanced-box-score"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:14Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "leonardsellem": {
      "mcpproviderid": "leonardsellem",
      "self": "#/mcpproviders/leonardsellem",
      "xid": "/mcpproviders/leonardsellem",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:32.951512583Z",
      "modifiedat": "2025-05-26T16:41:32.951512583Z",

      "serversurl": "#/mcpproviders/leonardsellem/servers",
      "servers": {
        "n8n-mcp-server": {
          "serverid": "n8n-mcp-server",
          "self": "#/mcpproviders/leonardsellem/servers/n8n-mcp-server",
          "xid": "/mcpproviders/leonardsellem/servers/n8n-mcp-server",

          "metaurl": "#/mcpproviders/leonardsellem/servers/n8n-mcp-server/meta",
          "meta": {
            "serverid": "n8n-mcp-server",
            "self": "#/mcpproviders/leonardsellem/servers/n8n-mcp-server/meta",
            "xid": "/mcpproviders/leonardsellem/servers/n8n-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:32.951512583Z",
            "modifiedat": "2025-05-26T16:41:32.951512583Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/leonardsellem/servers/n8n-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/leonardsellem/servers/n8n-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "n8n-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/leonardsellem/servers/n8n-mcp-server/versions/1",
              "xid": "/mcpproviders/leonardsellem/servers/n8n-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.leonardsellem/n8n-mcp-server",
              "isdefault": true,
              "description": "MCP server that provides tools and resources for interacting with n8n API",
              "createdat": "2025-05-26T16:41:32.951512583Z",
              "modifiedat": "2025-05-26T16:41:32.951512583Z",
              "ancestor": "1",
              "id": "309e2634-8163-47c9-951e-1cfec85e701b",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "http://your-n8n-instance:5678/api/v1",
                      "name": "N8N_API_URL"
                    },
                    {
                      "description": "YOUR_N8N_API_KEY",
                      "name": "N8N_API_KEY"
                    }
                  ],
                  "name": "n8n-mcp-server",
                  "package_arguments": [
                    {
                      "default": "/path/to/your/cloned/n8n-mcp-server/build/index.js",
                      "description": "Positional argument providing absolute path to the built index.js file",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "/path/to/your/cloned/n8n-mcp-server/build/index.js",
                      "value_hint": "/path/to/your/cloned/n8n-mcp-server/build/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "947387660",
                "source": "github",
                "url": "https://github.com/leonardsellem/n8n-mcp-server"
              },
              "resources": [
                {
                  "description": "Static resource representing all workflows.",
                  "mimetype": "application/json",
                  "name": "workflows",
                  "uritemplate": "/resources/workflows"
                },
                {
                  "description": "Static resource representing execution statistics.",
                  "mimetype": "application/json",
                  "name": "execution_stats",
                  "uritemplate": "/resources/execution-stats"
                },
                {
                  "description": "Dynamic resource for a specific workflow identified by ID.",
                  "mimetype": "application/json",
                  "name": "workflow",
                  "uritemplate": "/resources/workflows/{workflowId}"
                },
                {
                  "description": "Dynamic resource for a specific execution identified by ID.",
                  "mimetype": "application/json",
                  "name": "execution",
                  "uritemplate": "/resources/executions/{executionId}"
                }
              ],
              "tools": [
                {
                  "description": "List all workflows available in the n8n instance.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_workflows"
                },
                {
                  "description": "Retrieve details of a specific workflow.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_workflow"
                },
                {
                  "description": "Create a new workflow in n8n.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_workflow"
                },
                {
                  "description": "Update an existing workflow.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_workflow"
                },
                {
                  "description": "Delete a workflow from n8n.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_workflow"
                },
                {
                  "description": "Activate a workflow to enable execution.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "activate_workflow"
                },
                {
                  "description": "Deactivate a workflow to disable execution.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "deactivate_workflow"
                },
                {
                  "description": "List executions of workflows.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_executions"
                },
                {
                  "description": "Get details of a specific execution.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_execution"
                },
                {
                  "description": "Delete an execution record.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_execution"
                },
                {
                  "description": "Execute a workflow via webhook trigger.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "run_webhook"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:57Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "lharries": {
      "mcpproviderid": "lharries",
      "self": "#/mcpproviders/lharries",
      "xid": "/mcpproviders/lharries",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:40.518125673Z",
      "modifiedat": "2025-05-26T16:42:40.518125673Z",

      "serversurl": "#/mcpproviders/lharries/servers",
      "servers": {
        "whatsapp-mcp": {
          "serverid": "whatsapp-mcp",
          "self": "#/mcpproviders/lharries/servers/whatsapp-mcp",
          "xid": "/mcpproviders/lharries/servers/whatsapp-mcp",

          "metaurl": "#/mcpproviders/lharries/servers/whatsapp-mcp/meta",
          "meta": {
            "serverid": "whatsapp-mcp",
            "self": "#/mcpproviders/lharries/servers/whatsapp-mcp/meta",
            "xid": "/mcpproviders/lharries/servers/whatsapp-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:40.518125673Z",
            "modifiedat": "2025-05-26T16:42:40.518125673Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/lharries/servers/whatsapp-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/lharries/servers/whatsapp-mcp/versions",
          "versions": {
            "1": {
              "serverid": "whatsapp-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/lharries/servers/whatsapp-mcp/versions/1",
              "xid": "/mcpproviders/lharries/servers/whatsapp-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.lharries/whatsapp-mcp",
              "isdefault": true,
              "description": "WhatsApp MCP server",
              "createdat": "2025-05-26T16:42:40.518125673Z",
              "modifiedat": "2025-05-26T16:42:40.518125673Z",
              "ancestor": "1",
              "id": "0d2cbcc1-4b34-4b2b-af66-595d8fb5e78a",
              "packages": [
                {
                  "name": "lharries/whatsapp-mcp",
                  "package_arguments": [
                    {
                      "default": "--directory {{PATH_TO_SRC}}/whatsapp-mcp/whatsapp-mcp-server",
                      "description": "Directory to run in",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory {{PATH_TO_SRC}}/whatsapp-mcp/whatsapp-mcp-server",
                      "type": "named",
                      "value": "--directory {{PATH_TO_SRC}}/whatsapp-mcp/whatsapp-mcp-server",
                      "value_hint": "{{PATH_TO_SRC}}/whatsapp-mcp/whatsapp-mcp-server"
                    },
                    {
                      "default": "main.py",
                      "description": "Main Python file",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "main.py",
                      "value_hint": "main.py"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "957053334",
                "source": "github",
                "url": "https://github.com/lharries/whatsapp-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:45Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "lingodotdev": {
      "mcpproviderid": "lingodotdev",
      "self": "#/mcpproviders/lingodotdev",
      "xid": "/mcpproviders/lingodotdev",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:32.503234897Z",
      "modifiedat": "2025-05-26T16:42:32.503234897Z",

      "serversurl": "#/mcpproviders/lingodotdev/servers",
      "servers": {
        "lingo.dev": {
          "serverid": "lingo.dev",
          "self": "#/mcpproviders/lingodotdev/servers/lingo.dev",
          "xid": "/mcpproviders/lingodotdev/servers/lingo.dev",

          "metaurl": "#/mcpproviders/lingodotdev/servers/lingo.dev/meta",
          "meta": {
            "serverid": "lingo.dev",
            "self": "#/mcpproviders/lingodotdev/servers/lingo.dev/meta",
            "xid": "/mcpproviders/lingodotdev/servers/lingo.dev/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:32.503234897Z",
            "modifiedat": "2025-05-26T16:42:32.503234897Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/lingodotdev/servers/lingo.dev/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/lingodotdev/servers/lingo.dev/versions",
          "versions": {
            "1": {
              "serverid": "lingo.dev",
              "versionid": "1",
              "self": "#/mcpproviders/lingodotdev/servers/lingo.dev/versions/1",
              "xid": "/mcpproviders/lingodotdev/servers/lingo.dev/versions/1",
              "epoch": 1,
              "name": "io.github.lingodotdev/lingo.dev",
              "isdefault": true,
              "description": "⚡️ Open-source AI-powered CLI for web \u0026 mobile localization. Bring your own LLM or use Lingo.dev-managed localization engine.",
              "createdat": "2025-05-26T16:42:32.503234897Z",
              "modifiedat": "2025-05-26T16:42:32.503234897Z",
              "ancestor": "1",
              "id": "1e2d718a-95b0-460b-8e57-86feec5356ce",
              "packages": [
                {
                  "name": "@lingo.dev",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "771479895",
                "source": "github",
                "url": "https://github.com/lingodotdev/lingo.dev"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Detect language and translate text with Lingo.dev.",
                  "inputschema": {
                    "properties": {
                      "targetLocale": {
                        "pattern": "^[a-z]{2}(-[A-Z]{2})?$",
                        "type": "string"
                      },
                      "text": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "text",
                      "targetLocale"
                    ],
                    "type": "object"
                  },
                  "name": "translate"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:10Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "lishenxydlgzs": {
      "mcpproviderid": "lishenxydlgzs",
      "self": "#/mcpproviders/lishenxydlgzs",
      "xid": "/mcpproviders/lishenxydlgzs",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:42.89342772Z",
      "modifiedat": "2025-05-26T16:41:42.89342772Z",

      "serversurl": "#/mcpproviders/lishenxydlgzs/servers",
      "servers": {
        "aws-athena-mcp": {
          "serverid": "aws-athena-mcp",
          "self": "#/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp",
          "xid": "/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp",

          "metaurl": "#/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp/meta",
          "meta": {
            "serverid": "aws-athena-mcp",
            "self": "#/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp/meta",
            "xid": "/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:42.89342772Z",
            "modifiedat": "2025-05-26T16:41:42.89342772Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp/versions",
          "versions": {
            "1": {
              "serverid": "aws-athena-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp/versions/1",
              "xid": "/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.lishenxydlgzs/aws-athena-mcp",
              "isdefault": true,
              "description": "MCP server to run AWS Athena queries",
              "createdat": "2025-05-26T16:41:42.89342772Z",
              "modifiedat": "2025-05-26T16:41:42.89342772Z",
              "ancestor": "1",
              "id": "d3139564-f4c3-44f9-902a-8d172038af01",
              "packages": [
                {
                  "name": "@lishenxydlgzs/aws-athena-mcp",
                  "package_arguments": [
                    {
                      "default": "--namedQueryId abcd-1234-efgh-5678",
                      "description": "Named argument for query identifier",
                      "format": "string",
                      "is_required": true,
                      "name": "--namedQueryId abcd-1234-efgh-5678",
                      "type": "named",
                      "value": "--namedQueryId abcd-1234-efgh-5678",
                      "value_hint": "abcd-1234-efgh-5678"
                    },
                    {
                      "default": "--maxRows 100",
                      "description": "Named argument for maximum rows",
                      "format": "string",
                      "is_required": true,
                      "name": "--maxRows 100",
                      "type": "named",
                      "value": "--maxRows 100",
                      "value_hint": "100"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "938923691",
                "source": "github",
                "url": "https://github.com/lishenxydlgzs/aws-athena-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Execute a SQL query using AWS Athena. Returns full results if query completes before timeout, otherwise returns queryExecutionId.",
                  "inputschema": {
                    "properties": {
                      "database": {
                        "description": "The Athena database to query",
                        "type": "string"
                      },
                      "maxRows": {
                        "description": "Maximum number of rows to return (default: 1000)",
                        "maximum": 10000,
                        "minimum": 1,
                        "type": "number"
                      },
                      "query": {
                        "description": "SQL query to execute",
                        "type": "string"
                      },
                      "timeoutMs": {
                        "description": "Timeout in milliseconds (default: 60000)",
                        "minimum": 1000,
                        "type": "number"
                      }
                    },
                    "required": [
                      "database",
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "run_query"
                },
                {
                  "description": "Get results for a completed query. Returns error if query is still running.",
                  "inputschema": {
                    "properties": {
                      "maxRows": {
                        "description": "Maximum number of rows to return (default: 1000)",
                        "maximum": 10000,
                        "minimum": 1,
                        "type": "number"
                      },
                      "queryExecutionId": {
                        "description": "The query execution ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "queryExecutionId"
                    ],
                    "type": "object"
                  },
                  "name": "get_result"
                },
                {
                  "description": "Get the current status of a query execution",
                  "inputschema": {
                    "properties": {
                      "queryExecutionId": {
                        "description": "The query execution ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "queryExecutionId"
                    ],
                    "type": "object"
                  },
                  "name": "get_status"
                },
                {
                  "description": "Execute a saved (named) Athena query by its query ID.",
                  "inputschema": {
                    "properties": {
                      "databaseOverride": {
                        "description": "Optional database override",
                        "type": "string"
                      },
                      "maxRows": {
                        "description": "Maximum number of rows to return (default: 1000)",
                        "maximum": 10000,
                        "minimum": 1,
                        "type": "number"
                      },
                      "namedQueryId": {
                        "description": "Athena NamedQueryId",
                        "type": "string"
                      },
                      "timeoutMs": {
                        "description": "Timeout in milliseconds (default: 60000)",
                        "minimum": 1000,
                        "type": "number"
                      }
                    },
                    "required": [
                      "namedQueryId"
                    ],
                    "type": "object"
                  },
                  "name": "run_saved_query"
                },
                {
                  "description": "List all saved (named) Athena queries available in your AWS account.",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_saved_queries"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:23Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "liuyoshio": {
      "mcpproviderid": "liuyoshio",
      "self": "#/mcpproviders/liuyoshio",
      "xid": "/mcpproviders/liuyoshio",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:39.166569675Z",
      "modifiedat": "2025-05-26T16:42:39.166569675Z",

      "serversurl": "#/mcpproviders/liuyoshio/servers",
      "servers": {
        "mcp-compass": {
          "serverid": "mcp-compass",
          "self": "#/mcpproviders/liuyoshio/servers/mcp-compass",
          "xid": "/mcpproviders/liuyoshio/servers/mcp-compass",

          "metaurl": "#/mcpproviders/liuyoshio/servers/mcp-compass/meta",
          "meta": {
            "serverid": "mcp-compass",
            "self": "#/mcpproviders/liuyoshio/servers/mcp-compass/meta",
            "xid": "/mcpproviders/liuyoshio/servers/mcp-compass/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:39.166569675Z",
            "modifiedat": "2025-05-26T16:42:39.166569675Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/liuyoshio/servers/mcp-compass/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/liuyoshio/servers/mcp-compass/versions",
          "versions": {
            "1": {
              "serverid": "mcp-compass",
              "versionid": "1",
              "self": "#/mcpproviders/liuyoshio/servers/mcp-compass/versions/1",
              "xid": "/mcpproviders/liuyoshio/servers/mcp-compass/versions/1",
              "epoch": 1,
              "name": "io.github.liuyoshio/mcp-compass",
              "isdefault": true,
              "description": "MCP Discovery \u0026 Recommendation Service - Find the right MCP server for your needs",
              "createdat": "2025-05-26T16:42:39.166569675Z",
              "modifiedat": "2025-05-26T16:42:39.166569675Z",
              "ancestor": "1",
              "id": "e4578522-e426-44f4-818c-68784f2a3038",
              "packages": [
                {
                  "name": "@liuyoshio/mcp-compass",
                  "registry_name": "unknown",
                  "version": "1.0.7"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "908868990",
                "source": "github",
                "url": "https://github.com/liuyoshio/mcp-compass"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Use this tool when there is a need to findn external MCP tools. It explores and recommends existing MCP servers from the internet, based on the description of the MCP Server needed. It returns a list of MCP servers with their IDs, descriptions, GitHub URLs, and similarity scores.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "Description for the MCP Server needed. It should be specific and actionable, e.g.: GOOD: - 'MCP Server for AWS Lambda Python3.9 deployment' - 'MCP Server for United Airlines booking API' - 'MCP Server for Stripe refund webhook handling' BAD: - 'MCP Server for cloud' (too vague) - 'MCP Server for booking' (which booking system?) - 'MCP Server for payment' (which payment provider?) Query should explicitly specify: 1. Target platform/vendor (e.g. AWS, Stripe, MongoDB) 2. Exact operation/service (e.g. Lambda deployment, webhook handling) 3. Additional context if applicable (e.g. Python, refund events)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "recommend-mcp-servers"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:43Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "lloydzhou": {
      "mcpproviderid": "lloydzhou",
      "self": "#/mcpproviders/lloydzhou",
      "xid": "/mcpproviders/lloydzhou",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:26.371685187Z",
      "modifiedat": "2025-05-26T16:42:26.371685187Z",

      "serversurl": "#/mcpproviders/lloydzhou/servers",
      "servers": {
        "bitable-mcp": {
          "serverid": "bitable-mcp",
          "self": "#/mcpproviders/lloydzhou/servers/bitable-mcp",
          "xid": "/mcpproviders/lloydzhou/servers/bitable-mcp",

          "metaurl": "#/mcpproviders/lloydzhou/servers/bitable-mcp/meta",
          "meta": {
            "serverid": "bitable-mcp",
            "self": "#/mcpproviders/lloydzhou/servers/bitable-mcp/meta",
            "xid": "/mcpproviders/lloydzhou/servers/bitable-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:26.371685187Z",
            "modifiedat": "2025-05-26T16:42:26.371685187Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/lloydzhou/servers/bitable-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/lloydzhou/servers/bitable-mcp/versions",
          "versions": {
            "1": {
              "serverid": "bitable-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/lloydzhou/servers/bitable-mcp/versions/1",
              "xid": "/mcpproviders/lloydzhou/servers/bitable-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.lloydzhou/bitable-mcp",
              "isdefault": true,
              "description": "This MCP server provides access to Lark Bitable through the Model Context Protocol. It allows users to interact with Bitable tables using predefined tools.",
              "createdat": "2025-05-26T16:42:26.371685187Z",
              "modifiedat": "2025-05-26T16:42:26.371685187Z",
              "ancestor": "1",
              "id": "4a33ebab-f5cf-48b3-adb3-3f7094ea706c",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-personal-base-token",
                      "name": "PERSONAL_BASE_TOKEN"
                    },
                    {
                      "description": "your-app-token",
                      "name": "APP_TOKEN"
                    }
                  ],
                  "name": "bitable-mcp",
                  "package_arguments": [
                    {
                      "default": "-m bitable_mcp",
                      "description": "-m bitable_mcp",
                      "format": "string",
                      "is_required": true,
                      "name": "-m bitable_mcp",
                      "type": "named",
                      "value": "-m bitable_mcp",
                      "value_hint": "bitable_mcp"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.2.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "951621343",
                "source": "github",
                "url": "https://github.com/lloydzhou/bitable-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List tables for the current Bitable.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_table"
                },
                {
                  "description": "Describe a table by its name.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "describe_table"
                },
                {
                  "description": "Execute a SQL query to read data from the tables.",
                  "inputschema": {
                    "properties": {
                      "sql": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "sql"
                    ],
                    "type": "object"
                  },
                  "name": "read_query"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:59Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "longmans": {
      "mcpproviderid": "longmans",
      "self": "#/mcpproviders/longmans",
      "xid": "/mcpproviders/longmans",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:31.315415321Z",
      "modifiedat": "2025-05-26T16:41:31.315415321Z",

      "serversurl": "#/mcpproviders/longmans/servers",
      "servers": {
        "coin_api_mcp": {
          "serverid": "coin_api_mcp",
          "self": "#/mcpproviders/longmans/servers/coin_api_mcp",
          "xid": "/mcpproviders/longmans/servers/coin_api_mcp",

          "metaurl": "#/mcpproviders/longmans/servers/coin_api_mcp/meta",
          "meta": {
            "serverid": "coin_api_mcp",
            "self": "#/mcpproviders/longmans/servers/coin_api_mcp/meta",
            "xid": "/mcpproviders/longmans/servers/coin_api_mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:31.315415321Z",
            "modifiedat": "2025-05-26T16:41:31.315415321Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/longmans/servers/coin_api_mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/longmans/servers/coin_api_mcp/versions",
          "versions": {
            "1": {
              "serverid": "coin_api_mcp",
              "versionid": "1",
              "self": "#/mcpproviders/longmans/servers/coin_api_mcp/versions/1",
              "xid": "/mcpproviders/longmans/servers/coin_api_mcp/versions/1",
              "epoch": 1,
              "name": "io.github.longmans/coin_api_mcp",
              "isdefault": true,
              "description": "A Model Context Protocol server that provides access to CoinMarketCap's cryptocurrency data. This server enables AI-powered applications to retrieve cryptocurrency listings, quotes, and detailed information about various coins.",
              "createdat": "2025-05-26T16:41:31.315415321Z",
              "modifiedat": "2025-05-26T16:41:31.315415321Z",
              "ancestor": "1",
              "id": "28fc08e1-1afc-42cb-8eca-0b500e23c73e",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_api_key_here",
                      "name": "COINMARKETCAP_API_KEY"
                    }
                  ],
                  "name": "coin-api-mcp",
                  "package_arguments": [
                    {
                      "default": "-m coin_api_mcp",
                      "description": "-m coin_api_mcp",
                      "format": "string",
                      "is_required": true,
                      "name": "-m coin_api_mcp",
                      "type": "named",
                      "value": "-m coin_api_mcp",
                      "value_hint": "coin_api_mcp"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "903449956",
                "source": "github",
                "url": "https://github.com/longmans/coin_api_mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Returns a paginated list of all active cryptocurrencies with latest market data",
                  "inputschema": {
                    "properties": {
                      "aux": {
                        "description": "Optionally specify a comma-separated list of supplemental data fields to return.",
                        "type": "string"
                      },
                      "circulating_supply_max": {
                        "description": "Optionally specify a threshold of maximum circulating supply to filter results by.",
                        "minimum": 0,
                        "type": "number"
                      },
                      "circulating_supply_min": {
                        "description": "Optionally specify a threshold of minimum circulating supply to filter results by.",
                        "minimum": 0,
                        "type": "number"
                      },
                      "convert": {
                        "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols.",
                        "type": "string"
                      },
                      "convert_id": {
                        "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol.",
                        "type": "string"
                      },
                      "cryptocurrency_type": {
                        "description": "The type of cryptocurrency to include.",
                        "enum": [
                          "all",
                          "coins",
                          "tokens"
                        ],
                        "type": "string"
                      },
                      "limit": {
                        "description": "Optionally specify the number of results to return.",
                        "maximum": 5000,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "market_cap_max": {
                        "description": "Optionally specify a threshold of maximum market cap to filter results by.",
                        "minimum": 0,
                        "type": "number"
                      },
                      "market_cap_min": {
                        "description": "Optionally specify a threshold of minimum market cap to filter results by.",
                        "minimum": 0,
                        "type": "number"
                      },
                      "percent_change_24h_max": {
                        "description": "Optionally specify a threshold of maximum 24 hour percent change to filter results by.",
                        "minimum": -100,
                        "type": "number"
                      },
                      "percent_change_24h_min": {
                        "description": "Optionally specify a threshold of minimum 24 hour percent change to filter results by.",
                        "minimum": -100,
                        "type": "number"
                      },
                      "price_max": {
                        "description": "Optionally specify a threshold of maximum USD price to filter results by.",
                        "minimum": 0,
                        "type": "number"
                      },
                      "price_min": {
                        "description": "Optionally specify a threshold of minimum USD price to filter results by.",
                        "minimum": 0,
                        "type": "number"
                      },
                      "sort": {
                        "description": "What field to sort the list of cryptocurrencies by.",
                        "enum": [
                          "market_cap",
                          "name",
                          "symbol",
                          "date_added",
                          "market_cap_strict",
                          "price",
                          "circulating_supply",
                          "total_supply",
                          "max_supply",
                          "num_market_pairs",
                          "volume_24h",
                          "percent_change_1h",
                          "percent_change_24h",
                          "percent_change_7d",
                          "market_cap_by_total_supply_strict",
                          "volume_7d",
                          "volume_30d"
                        ],
                        "type": "string"
                      },
                      "sort_dir": {
                        "description": "The direction in which to order cryptocurrencies against the specified sort.",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "type": "string"
                      },
                      "start": {
                        "description": "Optionally offset the start (1-based index) of the paginated list of items to return.",
                        "minimum": 1,
                        "type": "integer"
                      },
                      "tag": {
                        "description": "The tag of cryptocurrency to include.",
                        "enum": [
                          "all",
                          "defi",
                          "filesharing"
                        ],
                        "type": "string"
                      },
                      "volume_24h_max": {
                        "description": "Optionally specify a threshold of maximum 24 hour USD volume to filter results by.",
                        "minimum": 0,
                        "type": "number"
                      },
                      "volume_24h_min": {
                        "description": "Optionally specify a threshold of minimum 24 hour USD volume to filter results by.",
                        "minimum": 0,
                        "type": "number"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "listing-coins"
                },
                {
                  "description": "Get coins' information includes details like logo, description, official website URL, social links, and links to a cryptocurrency's technical documentation.",
                  "inputschema": {
                    "properties": {
                      "address": {
                        "description": "Alternatively pass in a contract address. Example: \"0xc40af1e4fecfa05ce6bab79dcd8b373d2e436c4e\"",
                        "type": "string"
                      },
                      "aux": {
                        "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass urls,logo,description,tags,platform,date_added,notice,status to include all auxiliary fields.",
                        "type": "string"
                      },
                      "id": {
                        "description": "One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \"1,2\"",
                        "type": "string"
                      },
                      "skip_invalid": {
                        "default": false,
                        "description": "Pass true to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.",
                        "type": "boolean"
                      },
                      "slug": {
                        "description": "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"",
                        "type": "string"
                      },
                      "symbol": {
                        "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\"",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-coin-info"
                },
                {
                  "description": "the latest market quote for 1 or more cryptocurrencies. Use the \"convert\" option to return market values in multiple fiat and cryptocurrency conversions in the same call.",
                  "inputschema": {
                    "properties": {
                      "aux": {
                        "description": "\"num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,is_active,is_fiat\"Optionally specify a comma-separated list of supplemental data fields to return.",
                        "type": "string"
                      },
                      "convert": {
                        "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols.",
                        "type": "string"
                      },
                      "convert_id": {
                        "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to convert outside of ID format.",
                        "type": "string"
                      },
                      "id": {
                        "description": "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2",
                        "type": "string"
                      },
                      "skip_invalid": {
                        "default": false,
                        "description": "Pass true to relax request validation rules.",
                        "type": "boolean"
                      },
                      "slug": {
                        "description": "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"",
                        "type": "string"
                      },
                      "symbol": {
                        "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\"",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-coin-quotes"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:46Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "longyi1207": {
      "mcpproviderid": "longyi1207",
      "self": "#/mcpproviders/longyi1207",
      "xid": "/mcpproviders/longyi1207",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:27.360693501Z",
      "modifiedat": "2025-05-26T16:42:27.360693501Z",

      "serversurl": "#/mcpproviders/longyi1207/servers",
      "servers": {
        "glean-mcp-server": {
          "serverid": "glean-mcp-server",
          "self": "#/mcpproviders/longyi1207/servers/glean-mcp-server",
          "xid": "/mcpproviders/longyi1207/servers/glean-mcp-server",

          "metaurl": "#/mcpproviders/longyi1207/servers/glean-mcp-server/meta",
          "meta": {
            "serverid": "glean-mcp-server",
            "self": "#/mcpproviders/longyi1207/servers/glean-mcp-server/meta",
            "xid": "/mcpproviders/longyi1207/servers/glean-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:27.360693501Z",
            "modifiedat": "2025-05-26T16:42:27.360693501Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/longyi1207/servers/glean-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/longyi1207/servers/glean-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "glean-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/longyi1207/servers/glean-mcp-server/versions/1",
              "xid": "/mcpproviders/longyi1207/servers/glean-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.longyi1207/glean-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:27.360693501Z",
              "modifiedat": "2025-05-26T16:42:27.360693501Z",
              "ancestor": "1",
              "id": "39d0e161-edcd-4ad5-bdc6-9c3d29908ed4",
              "packages": [
                {
                  "name": "@modelcontextprotocol/glean",
                  "registry_name": "unknown",
                  "version": "0.6.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "913663339",
                "source": "github",
                "url": "https://github.com/longyi1207/glean-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Tool to perform search queries using Glean API",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The query to perform retrieval on",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search"
                },
                {
                  "description": "Tool to interact with ChatGPT using Glean API",
                  "inputschema": {
                    "properties": {
                      "message": {
                        "description": "The message to send to ChatGPT",
                        "type": "string"
                      }
                    },
                    "required": [
                      "message"
                    ],
                    "type": "object"
                  },
                  "name": "chat"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:09Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "lucashild": {
      "mcpproviderid": "lucashild",
      "self": "#/mcpproviders/lucashild",
      "xid": "/mcpproviders/lucashild",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:43.724325225Z",
      "modifiedat": "2025-05-26T16:41:43.724325225Z",

      "serversurl": "#/mcpproviders/lucashild/servers",
      "servers": {
        "mcp-server-bigquery": {
          "serverid": "mcp-server-bigquery",
          "self": "#/mcpproviders/lucashild/servers/mcp-server-bigquery",
          "xid": "/mcpproviders/lucashild/servers/mcp-server-bigquery",

          "metaurl": "#/mcpproviders/lucashild/servers/mcp-server-bigquery/meta",
          "meta": {
            "serverid": "mcp-server-bigquery",
            "self": "#/mcpproviders/lucashild/servers/mcp-server-bigquery/meta",
            "xid": "/mcpproviders/lucashild/servers/mcp-server-bigquery/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:43.724325225Z",
            "modifiedat": "2025-05-26T16:41:43.724325225Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/lucashild/servers/mcp-server-bigquery/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/lucashild/servers/mcp-server-bigquery/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-bigquery",
              "versionid": "1",
              "self": "#/mcpproviders/lucashild/servers/mcp-server-bigquery/versions/1",
              "xid": "/mcpproviders/lucashild/servers/mcp-server-bigquery/versions/1",
              "epoch": 1,
              "name": "io.github.lucashild/mcp-server-bigquery",
              "isdefault": true,
              "description": "A Model Context Protocol server that provides access to BigQuery",
              "createdat": "2025-05-26T16:41:43.724325225Z",
              "modifiedat": "2025-05-26T16:41:43.724325225Z",
              "ancestor": "1",
              "id": "0e517488-6e73-41c3-a297-7602f5937079",
              "packages": [
                {
                  "name": "mcp-server-bigquery",
                  "registry_name": "unknown",
                  "version": "0.2.0"
                }
              ],
              "repository": {
                "id": "898062517",
                "source": "github",
                "url": "https://github.com/LucasHild/mcp-server-bigquery"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:52Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "macrat": {
      "mcpproviderid": "macrat",
      "self": "#/mcpproviders/macrat",
      "xid": "/mcpproviders/macrat",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:54.306672001Z",
      "modifiedat": "2025-05-26T16:41:54.306672001Z",

      "serversurl": "#/mcpproviders/macrat/servers",
      "servers": {
        "mcp-server-kintone": {
          "serverid": "mcp-server-kintone",
          "self": "#/mcpproviders/macrat/servers/mcp-server-kintone",
          "xid": "/mcpproviders/macrat/servers/mcp-server-kintone",

          "metaurl": "#/mcpproviders/macrat/servers/mcp-server-kintone/meta",
          "meta": {
            "serverid": "mcp-server-kintone",
            "self": "#/mcpproviders/macrat/servers/mcp-server-kintone/meta",
            "xid": "/mcpproviders/macrat/servers/mcp-server-kintone/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:54.306672001Z",
            "modifiedat": "2025-05-26T16:41:54.306672001Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/macrat/servers/mcp-server-kintone/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/macrat/servers/mcp-server-kintone/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-kintone",
              "versionid": "1",
              "self": "#/mcpproviders/macrat/servers/mcp-server-kintone/versions/1",
              "xid": "/mcpproviders/macrat/servers/mcp-server-kintone/versions/1",
              "epoch": 1,
              "name": "io.github.macrat/mcp-server-kintone",
              "isdefault": true,
              "description": "MCP server for kintone",
              "createdat": "2025-05-26T16:41:54.306672001Z",
              "modifiedat": "2025-05-26T16:41:54.306672001Z",
              "ancestor": "1",
              "id": "554f9f4e-2cd3-4a48-90e4-3c0351603f26",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "https://\u003cdomain\u003e.cybozu.com",
                      "name": "KINTONE_BASE_URL"
                    },
                    {
                      "description": "\u003cyour username\u003e",
                      "name": "KINTONE_USERNAME"
                    },
                    {
                      "description": "\u003cyour password\u003e",
                      "name": "KINTONE_PASSWORD"
                    },
                    {
                      "description": "\u003cyour api token\u003e, \u003canother api token\u003e, ...",
                      "name": "KINTONE_API_TOKEN"
                    },
                    {
                      "description": "1, 2, 3, ...",
                      "name": "KINTONE_ALLOW_APPS"
                    },
                    {
                      "description": "4, 5, ...",
                      "name": "KINTONE_DENY_APPS"
                    }
                  ],
                  "name": "macrat/mcp-server-kintone",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "905159302",
                "source": "github",
                "url": "https://github.com/macrat/mcp-server-kintone"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:57Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "magnetai": {
      "mcpproviderid": "magnetai",
      "self": "#/mcpproviders/magnetai",
      "xid": "/mcpproviders/magnetai",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:25.394126759Z",
      "modifiedat": "2025-05-26T16:42:25.394126759Z",

      "serversurl": "#/mcpproviders/magnetai/servers",
      "servers": {
        "mcp-free-usdc-transfer": {
          "serverid": "mcp-free-usdc-transfer",
          "self": "#/mcpproviders/magnetai/servers/mcp-free-usdc-transfer",
          "xid": "/mcpproviders/magnetai/servers/mcp-free-usdc-transfer",

          "metaurl": "#/mcpproviders/magnetai/servers/mcp-free-usdc-transfer/meta",
          "meta": {
            "serverid": "mcp-free-usdc-transfer",
            "self": "#/mcpproviders/magnetai/servers/mcp-free-usdc-transfer/meta",
            "xid": "/mcpproviders/magnetai/servers/mcp-free-usdc-transfer/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:25.394126759Z",
            "modifiedat": "2025-05-26T16:42:25.394126759Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/magnetai/servers/mcp-free-usdc-transfer/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/magnetai/servers/mcp-free-usdc-transfer/versions",
          "versions": {
            "1": {
              "serverid": "mcp-free-usdc-transfer",
              "versionid": "1",
              "self": "#/mcpproviders/magnetai/servers/mcp-free-usdc-transfer/versions/1",
              "xid": "/mcpproviders/magnetai/servers/mcp-free-usdc-transfer/versions/1",
              "epoch": 1,
              "name": "io.github.magnetai/mcp-free-usdc-transfer",
              "isdefault": true,
              "description": "MCP (Model Context Protocol) server - free usdc transfer powered by Coinbase CDP",
              "createdat": "2025-05-26T16:42:25.394126759Z",
              "modifiedat": "2025-05-26T16:42:25.394126759Z",
              "ancestor": "1",
              "id": "c3123664-33b3-4f29-bc08-40b88300f57c",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_COINBASE_CDP_API_KEY_NAME",
                      "name": "COINBASE_CDP_API_KEY_NAME"
                    },
                    {
                      "description": "YOUR_COINBASE_CDP_PRIVATE_KEY",
                      "name": "COINBASE_CDP_PRIVATE_KEY"
                    }
                  ],
                  "name": "@magnetai/free-usdc-transfer",
                  "registry_name": "npm",
                  "version": "0.1.5"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "914708046",
                "source": "github",
                "url": "https://github.com/magnetai/mcp-free-usdc-transfer"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:46Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mailgun": {
      "mcpproviderid": "mailgun",
      "self": "#/mcpproviders/mailgun",
      "xid": "/mcpproviders/mailgun",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:37.692627961Z",
      "modifiedat": "2025-05-26T16:42:37.692627961Z",

      "serversurl": "#/mcpproviders/mailgun/servers",
      "servers": {
        "mailgun-mcp-server": {
          "serverid": "mailgun-mcp-server",
          "self": "#/mcpproviders/mailgun/servers/mailgun-mcp-server",
          "xid": "/mcpproviders/mailgun/servers/mailgun-mcp-server",

          "metaurl": "#/mcpproviders/mailgun/servers/mailgun-mcp-server/meta",
          "meta": {
            "serverid": "mailgun-mcp-server",
            "self": "#/mcpproviders/mailgun/servers/mailgun-mcp-server/meta",
            "xid": "/mcpproviders/mailgun/servers/mailgun-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:37.692627961Z",
            "modifiedat": "2025-05-26T16:42:37.692627961Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mailgun/servers/mailgun-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mailgun/servers/mailgun-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "mailgun-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/mailgun/servers/mailgun-mcp-server/versions/1",
              "xid": "/mcpproviders/mailgun/servers/mailgun-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.mailgun/mailgun-mcp-server",
              "isdefault": true,
              "description": "Implementation of Model Context Protocol server for Mailgun APIs",
              "createdat": "2025-05-26T16:42:37.692627961Z",
              "modifiedat": "2025-05-26T16:42:37.692627961Z",
              "ancestor": "1",
              "id": "c0151c41-3d77-43a9-b887-dd9fd035b9aa",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR-mailgun-api-key",
                      "name": "MAILGUN_API_KEY"
                    }
                  ],
                  "name": "mailgun/mailgun-mcp-server",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Recipient email address",
                      "name": "EMAIL_HERE",
                      "required": true
                    },
                    {
                      "description": "Sending domain",
                      "name": "DOMAIN_HERE",
                      "required": true
                    }
                  ],
                  "description": "Send an email with specified body, sender, and domain.",
                  "name": "send_email"
                },
                {
                  "arguments": [],
                  "description": "Fetch and visualize email delivery statistics for the past week.",
                  "name": "fetch_sending_statistics"
                }
              ],
              "repository": {
                "id": "950200227",
                "source": "github",
                "url": "https://github.com/mailgun/mailgun-mcp-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:14Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mamertofabian": {
      "mcpproviderid": "mamertofabian",
      "self": "#/mcpproviders/mamertofabian",
      "xid": "/mcpproviders/mamertofabian",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:24.687707804Z",
      "modifiedat": "2025-05-26T16:41:24.773919689Z",

      "serversurl": "#/mcpproviders/mamertofabian/servers",
      "servers": {
        "elevenlabs-mcp-server": {
          "serverid": "elevenlabs-mcp-server",
          "self": "#/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server",
          "xid": "/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server",

          "metaurl": "#/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server/meta",
          "meta": {
            "serverid": "elevenlabs-mcp-server",
            "self": "#/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server/meta",
            "xid": "/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:24.773919689Z",
            "modifiedat": "2025-05-26T16:41:24.773919689Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "elevenlabs-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server/versions/1",
              "xid": "/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.mamertofabian/elevenlabs-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:24.773919689Z",
              "modifiedat": "2025-05-26T16:41:24.773919689Z",
              "ancestor": "1",
              "id": "1d89482a-a7de-4d3b-a7cb-1b7be49939ec",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-api-key",
                      "name": "ELEVENLABS_API_KEY"
                    },
                    {
                      "description": "your-voice-id",
                      "name": "ELEVENLABS_VOICE_ID"
                    },
                    {
                      "description": "eleven_flash_v2",
                      "name": "ELEVENLABS_MODEL_ID"
                    },
                    {
                      "description": "0.5",
                      "name": "ELEVENLABS_STABILITY"
                    },
                    {
                      "description": "0.75",
                      "name": "ELEVENLABS_SIMILARITY_BOOST"
                    },
                    {
                      "description": "0.1",
                      "name": "ELEVENLABS_STYLE"
                    },
                    {
                      "description": "output",
                      "name": "ELEVENLABS_OUTPUT_DIR"
                    }
                  ],
                  "name": "elevenlabs-mcp-server",
                  "package_arguments": [
                    {
                      "default": "--directory path/to/elevenlabs-mcp-server",
                      "description": "Flag to specify a directory for the server",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory path/to/elevenlabs-mcp-server",
                      "type": "named",
                      "value": "--directory path/to/elevenlabs-mcp-server",
                      "value_hint": "path/to/elevenlabs-mcp-server"
                    },
                    {
                      "default": "elevenlabs-mcp-server",
                      "description": "Positional argument specifying the target server to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "elevenlabs-mcp-server",
                      "value_hint": "elevenlabs-mcp-server"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "906473152",
                "source": "github",
                "url": "https://github.com/mamertofabian/elevenlabs-mcp-server"
              },
              "resources": [
                {
                  "description": "Access voiceover job history. Provide job_id for specific job or omit for all jobs.",
                  "mimetype": "application/json",
                  "name": "Voiceover Job History",
                  "uritemplate": "voiceover://history/{job_id}"
                },
                {
                  "description": "Access list of available ElevenLabs voices with metadata",
                  "mimetype": "application/json",
                  "name": "Available Voices",
                  "uritemplate": "voiceover://voices"
                }
              ],
              "tools": [
                {
                  "description": "Generate audio from plain text using default voice settings",
                  "inputschema": {
                    "properties": {
                      "text": {
                        "description": "Plain text to convert to audio",
                        "type": "string"
                      },
                      "voice_id": {
                        "description": "Optional voice ID to use for generation",
                        "type": "string"
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "generate_audio_simple"
                },
                {
                  "description": "Generate audio from a structured script with multiple voices and actors. \n                    Accepts either:\n                    1. Plain text string\n                    2. JSON string with format: {\n                        \"script\": [\n                            {\n                                \"text\": \"Text to speak\",\n                                \"voice_id\": \"optional-voice-id\",\n                                \"actor\": \"optional-actor-name\"\n                            },\n                            ...\n                        ]\n                    }",
                  "inputschema": {
                    "properties": {
                      "script": {
                        "description": "JSON string containing script array or plain text. For JSON format, provide an object with a 'script' array containing objects with 'text' (required), 'voice_id' (optional), and 'actor' (optional) fields.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "script"
                    ],
                    "type": "object"
                  },
                  "name": "generate_audio_script"
                },
                {
                  "description": "Delete a voiceover job and its associated files",
                  "inputschema": {
                    "properties": {
                      "job_id": {
                        "description": "ID of the job to delete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "job_id"
                    ],
                    "type": "object"
                  },
                  "name": "delete_job"
                },
                {
                  "description": "Get the audio file content for a specific job",
                  "inputschema": {
                    "properties": {
                      "job_id": {
                        "description": "ID of the job to get audio file for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "job_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_audio_file"
                },
                {
                  "description": "Get a list of all available ElevenLabs voices with metadata",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_voices"
                },
                {
                  "description": "Get voiceover job history. Optionally specify a job ID for a specific job.",
                  "inputschema": {
                    "properties": {
                      "job_id": {
                        "description": "Optional job ID to get details for a specific job",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_voiceover_history"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:20Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-everything-search": {
          "serverid": "mcp-everything-search",
          "self": "#/mcpproviders/mamertofabian/servers/mcp-everything-search",
          "xid": "/mcpproviders/mamertofabian/servers/mcp-everything-search",

          "metaurl": "#/mcpproviders/mamertofabian/servers/mcp-everything-search/meta",
          "meta": {
            "serverid": "mcp-everything-search",
            "self": "#/mcpproviders/mamertofabian/servers/mcp-everything-search/meta",
            "xid": "/mcpproviders/mamertofabian/servers/mcp-everything-search/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:24.687707804Z",
            "modifiedat": "2025-05-26T16:41:24.687707804Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mamertofabian/servers/mcp-everything-search/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mamertofabian/servers/mcp-everything-search/versions",
          "versions": {
            "1": {
              "serverid": "mcp-everything-search",
              "versionid": "1",
              "self": "#/mcpproviders/mamertofabian/servers/mcp-everything-search/versions/1",
              "xid": "/mcpproviders/mamertofabian/servers/mcp-everything-search/versions/1",
              "epoch": 1,
              "name": "io.github.mamertofabian/mcp-everything-search",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:24.687707804Z",
              "modifiedat": "2025-05-26T16:41:24.687707804Z",
              "ancestor": "1",
              "id": "c6f8403f-30d0-45d2-b7c3-95a6cb61c4b4",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "path/to/Everything-SDK/dll/Everything64.dll",
                      "name": "EVERYTHING_SDK_PATH"
                    }
                  ],
                  "name": "mcp-server-everything-search",
                  "package_arguments": [
                    {
                      "default": "--directory /path/to/mcp-everything-search/src/mcp_server_everything_search",
                      "description": "Sets the directory to operate from.",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory /path/to/mcp-everything-search/src/mcp_server_everything_search",
                      "type": "named",
                      "value": "--directory /path/to/mcp-everything-search/src/mcp_server_everything_search",
                      "value_hint": "/path/to/mcp-everything-search/src/mcp_server_everything_search"
                    },
                    {
                      "default": "mcp-server-everything-search",
                      "description": "Server name to execute (positional argument)",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp-server-everything-search",
                      "value_hint": "mcp-server-everything-search"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.2.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "903415597",
                "source": "github",
                "url": "https://github.com/mamertofabian/mcp-everything-search"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Universal file search tool for Windows, macOS, and Linux. Supports platform-specific search capabilities using Everything SDK on Windows, mdfind on macOS, and locate on Linux.",
                  "inputschema": {
                    "properties": {
                      "match_case": {
                        "default": false,
                        "description": "Enable case-sensitive search",
                        "type": "boolean"
                      },
                      "match_path": {
                        "default": false,
                        "description": "Match against full path instead of filename only",
                        "type": "boolean"
                      },
                      "match_regex": {
                        "default": false,
                        "description": "Enable regex search",
                        "type": "boolean"
                      },
                      "match_whole_word": {
                        "default": false,
                        "description": "Match whole words only",
                        "type": "boolean"
                      },
                      "max_results": {
                        "default": 100,
                        "description": "Maximum number of results to return (1-1000)",
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "query": {
                        "description": "Search query string. See the search syntax guide for details.",
                        "type": "string"
                      },
                      "sort_by": {
                        "default": 1,
                        "description": "Sort order for results (Note: Not all sort options available on all platforms)",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:30Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "manusa": {
      "mcpproviderid": "manusa",
      "self": "#/mcpproviders/manusa",
      "xid": "/mcpproviders/manusa",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:35.603465631Z",
      "modifiedat": "2025-05-26T16:42:35.603465631Z",

      "serversurl": "#/mcpproviders/manusa/servers",
      "servers": {
        "kubernetes-mcp-server": {
          "serverid": "kubernetes-mcp-server",
          "self": "#/mcpproviders/manusa/servers/kubernetes-mcp-server",
          "xid": "/mcpproviders/manusa/servers/kubernetes-mcp-server",

          "metaurl": "#/mcpproviders/manusa/servers/kubernetes-mcp-server/meta",
          "meta": {
            "serverid": "kubernetes-mcp-server",
            "self": "#/mcpproviders/manusa/servers/kubernetes-mcp-server/meta",
            "xid": "/mcpproviders/manusa/servers/kubernetes-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:35.603465631Z",
            "modifiedat": "2025-05-26T16:42:35.603465631Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/manusa/servers/kubernetes-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/manusa/servers/kubernetes-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "kubernetes-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/manusa/servers/kubernetes-mcp-server/versions/1",
              "xid": "/mcpproviders/manusa/servers/kubernetes-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.manusa/kubernetes-mcp-server",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) server for Kubernetes and OpenShift",
              "createdat": "2025-05-26T16:42:35.603465631Z",
              "modifiedat": "2025-05-26T16:42:35.603465631Z",
              "ancestor": "1",
              "id": "4a097d31-ea39-43aa-9af5-6f19a7676901",
              "packages": [
                {
                  "name": "manusa/kubernetes-mcp-server",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "930678258",
                "source": "github",
                "url": "https://github.com/manusa/kubernetes-mcp-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:03Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "marimo-team": {
      "mcpproviderid": "marimo-team",
      "self": "#/mcpproviders/marimo-team",
      "xid": "/mcpproviders/marimo-team",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:38.015478152Z",
      "modifiedat": "2025-05-26T16:41:38.015478152Z",

      "serversurl": "#/mcpproviders/marimo-team/servers",
      "servers": {
        "codemirror-mcp": {
          "serverid": "codemirror-mcp",
          "self": "#/mcpproviders/marimo-team/servers/codemirror-mcp",
          "xid": "/mcpproviders/marimo-team/servers/codemirror-mcp",

          "metaurl": "#/mcpproviders/marimo-team/servers/codemirror-mcp/meta",
          "meta": {
            "serverid": "codemirror-mcp",
            "self": "#/mcpproviders/marimo-team/servers/codemirror-mcp/meta",
            "xid": "/mcpproviders/marimo-team/servers/codemirror-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:38.015478152Z",
            "modifiedat": "2025-05-26T16:41:38.015478152Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/marimo-team/servers/codemirror-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/marimo-team/servers/codemirror-mcp/versions",
          "versions": {
            "1": {
              "serverid": "codemirror-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/marimo-team/servers/codemirror-mcp/versions/1",
              "xid": "/mcpproviders/marimo-team/servers/codemirror-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.marimo-team/codemirror-mcp",
              "isdefault": true,
              "description": "CodeMirror extension to hook up a Model Context Provider (MCP)",
              "createdat": "2025-05-26T16:41:38.015478152Z",
              "modifiedat": "2025-05-26T16:41:38.015478152Z",
              "ancestor": "1",
              "id": "bdcb0c25-b41c-4e61-ad25-89e5ddb35dcc",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "${input:apiKey}",
                      "name": "API_KEY"
                    }
                  ],
                  "name": "@marimo-team/codemirror-mcp",
                  "registry_name": "npm",
                  "version": "0.1.2"
                }
              ],
              "repository": {
                "id": "914149601",
                "source": "github",
                "url": "https://github.com/marimo-team/codemirror-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:36Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mark3labs": {
      "mcpproviderid": "mark3labs",
      "self": "#/mcpproviders/mark3labs",
      "xid": "/mcpproviders/mark3labs",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:12.453209899Z",
      "modifiedat": "2025-05-26T16:42:12.453209899Z",

      "serversurl": "#/mcpproviders/mark3labs/servers",
      "servers": {
        "mcp-filesystem-server": {
          "serverid": "mcp-filesystem-server",
          "self": "#/mcpproviders/mark3labs/servers/mcp-filesystem-server",
          "xid": "/mcpproviders/mark3labs/servers/mcp-filesystem-server",

          "metaurl": "#/mcpproviders/mark3labs/servers/mcp-filesystem-server/meta",
          "meta": {
            "serverid": "mcp-filesystem-server",
            "self": "#/mcpproviders/mark3labs/servers/mcp-filesystem-server/meta",
            "xid": "/mcpproviders/mark3labs/servers/mcp-filesystem-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:12.453209899Z",
            "modifiedat": "2025-05-26T16:42:12.453209899Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mark3labs/servers/mcp-filesystem-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mark3labs/servers/mcp-filesystem-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-filesystem-server",
              "versionid": "1",
              "self": "#/mcpproviders/mark3labs/servers/mcp-filesystem-server/versions/1",
              "xid": "/mcpproviders/mark3labs/servers/mcp-filesystem-server/versions/1",
              "epoch": 1,
              "name": "io.github.mark3labs/mcp-filesystem-server",
              "isdefault": true,
              "description": "Go server implementing Model Context Protocol (MCP) for filesystem operations.",
              "createdat": "2025-05-26T16:42:12.453209899Z",
              "modifiedat": "2025-05-26T16:42:12.453209899Z",
              "ancestor": "1",
              "id": "93c84b33-4392-41b2-85be-764e5f39da74",
              "packages": [
                {
                  "name": "mark3labs/mcp-filesystem-server",
                  "package_arguments": [
                    {
                      "default": "ghcr.io/mark3labs/mcp-filesystem-server:latest",
                      "description": "Run container image",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "ghcr.io/mark3labs/mcp-filesystem-server:latest",
                      "value_hint": "ghcr.io/mark3labs/mcp-filesystem-server:latest"
                    },
                    {
                      "default": "/path/to/allowed/directory",
                      "description": "Allowed directory path",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "/path/to/allowed/directory",
                      "value_hint": "/path/to/allowed/directory"
                    }
                  ],
                  "registry_name": "docker",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "895547074",
                "source": "github",
                "url": "https://github.com/mark3labs/mcp-filesystem-server"
              },
              "resources": [
                {
                  "description": "File system operations interface",
                  "name": "file://system",
                  "uritemplate": "file://system"
                }
              ],
              "tools": [
                {
                  "description": "Read complete contents of a file",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "read_file"
                },
                {
                  "description": "Read multiple files simultaneously",
                  "inputschema": {
                    "properties": {
                      "paths": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "paths"
                    ],
                    "type": "object"
                  },
                  "name": "read_multiple_files"
                },
                {
                  "description": "Create new file or overwrite existing (exercise caution with this)",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "type": "string"
                      },
                      "path": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "path",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "write_file"
                },
                {
                  "description": "Create new directory or ensure it exists",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "create_directory"
                },
                {
                  "description": "List directory contents with [FILE] or [DIR] prefixes",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "list_directory"
                },
                {
                  "description": "Move or rename files and directories",
                  "inputschema": {
                    "properties": {
                      "destination": {
                        "type": "string"
                      },
                      "source": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "source",
                      "destination"
                    ],
                    "type": "object"
                  },
                  "name": "move_file"
                },
                {
                  "description": "Recursively search for files/directories",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "type": "string"
                      },
                      "pattern": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "path",
                      "pattern"
                    ],
                    "type": "object"
                  },
                  "name": "search_files"
                },
                {
                  "description": "Get detailed file/directory metadata",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "get_file_info"
                },
                {
                  "description": "List all directories the server is allowed to access",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_allowed_directories"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:25Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "maton-ai": {
      "mcpproviderid": "maton-ai",
      "self": "#/mcpproviders/maton-ai",
      "xid": "/mcpproviders/maton-ai",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:18.454857911Z",
      "modifiedat": "2025-05-26T16:42:18.454857911Z",

      "serversurl": "#/mcpproviders/maton-ai/servers",
      "servers": {
        "agent-toolkit": {
          "serverid": "agent-toolkit",
          "self": "#/mcpproviders/maton-ai/servers/agent-toolkit",
          "xid": "/mcpproviders/maton-ai/servers/agent-toolkit",

          "metaurl": "#/mcpproviders/maton-ai/servers/agent-toolkit/meta",
          "meta": {
            "serverid": "agent-toolkit",
            "self": "#/mcpproviders/maton-ai/servers/agent-toolkit/meta",
            "xid": "/mcpproviders/maton-ai/servers/agent-toolkit/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:18.454857911Z",
            "modifiedat": "2025-05-26T16:42:18.454857911Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/maton-ai/servers/agent-toolkit/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/maton-ai/servers/agent-toolkit/versions",
          "versions": {
            "1": {
              "serverid": "agent-toolkit",
              "versionid": "1",
              "self": "#/mcpproviders/maton-ai/servers/agent-toolkit/versions/1",
              "xid": "/mcpproviders/maton-ai/servers/agent-toolkit/versions/1",
              "epoch": 1,
              "name": "io.github.maton-ai/agent-toolkit",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:18.454857911Z",
              "modifiedat": "2025-05-26T16:42:18.454857911Z",
              "ancestor": "1",
              "id": "a7cfde04-fae7-4b2c-bcef-c752525a057e",
              "packages": [
                {
                  "name": "maton-ai/agent-toolkit",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "950334178",
                "source": "github",
                "url": "https://github.com/maton-ai/agent-toolkit"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:41Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mcp-router": {
      "mcpproviderid": "mcp-router",
      "self": "#/mcpproviders/mcp-router",
      "xid": "/mcpproviders/mcp-router",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:44.862848574Z",
      "modifiedat": "2025-05-26T16:41:44.862848574Z",

      "serversurl": "#/mcpproviders/mcp-router/servers",
      "servers": {
        "mcp-router": {
          "serverid": "mcp-router",
          "self": "#/mcpproviders/mcp-router/servers/mcp-router",
          "xid": "/mcpproviders/mcp-router/servers/mcp-router",

          "metaurl": "#/mcpproviders/mcp-router/servers/mcp-router/meta",
          "meta": {
            "serverid": "mcp-router",
            "self": "#/mcpproviders/mcp-router/servers/mcp-router/meta",
            "xid": "/mcpproviders/mcp-router/servers/mcp-router/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:44.862848574Z",
            "modifiedat": "2025-05-26T16:41:44.862848574Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mcp-router/servers/mcp-router/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mcp-router/servers/mcp-router/versions",
          "versions": {
            "1": {
              "serverid": "mcp-router",
              "versionid": "1",
              "self": "#/mcpproviders/mcp-router/servers/mcp-router/versions/1",
              "xid": "/mcpproviders/mcp-router/servers/mcp-router/versions/1",
              "epoch": 1,
              "name": "io.github.mcp-router/mcp-router",
              "isdefault": true,
              "description": "MCP Router enables easily manage your MCP (Model Context Protocol) servers with enhanced security",
              "createdat": "2025-05-26T16:41:44.862848574Z",
              "modifiedat": "2025-05-26T16:41:44.862848574Z",
              "ancestor": "1",
              "id": "d0568ded-6678-4940-b344-9644e04e6d7b",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "Issued Token",
                      "name": "MCPR_TOKEN"
                    }
                  ],
                  "name": "my-docs-site",
                  "package_arguments": [
                    {
                      "default": "connect",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "connect",
                      "value_hint": "connect"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "0.0.0"
                }
              ],
              "repository": {
                "id": "952939763",
                "source": "github",
                "url": "https://github.com/mcp-router/mcp-router"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:50Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mcpdotdirect": {
      "mcpproviderid": "mcpdotdirect",
      "self": "#/mcpproviders/mcpdotdirect",
      "xid": "/mcpproviders/mcpdotdirect",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:51.653121869Z",
      "modifiedat": "2025-05-26T16:41:51.769962041Z",

      "serversurl": "#/mcpproviders/mcpdotdirect/servers",
      "servers": {
        "evm-mcp-server": {
          "serverid": "evm-mcp-server",
          "self": "#/mcpproviders/mcpdotdirect/servers/evm-mcp-server",
          "xid": "/mcpproviders/mcpdotdirect/servers/evm-mcp-server",

          "metaurl": "#/mcpproviders/mcpdotdirect/servers/evm-mcp-server/meta",
          "meta": {
            "serverid": "evm-mcp-server",
            "self": "#/mcpproviders/mcpdotdirect/servers/evm-mcp-server/meta",
            "xid": "/mcpproviders/mcpdotdirect/servers/evm-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:51.769962041Z",
            "modifiedat": "2025-05-26T16:41:51.769962041Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mcpdotdirect/servers/evm-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mcpdotdirect/servers/evm-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "evm-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/mcpdotdirect/servers/evm-mcp-server/versions/1",
              "xid": "/mcpproviders/mcpdotdirect/servers/evm-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.mcpdotdirect/evm-mcp-server",
              "isdefault": true,
              "description": "MCP server that provides LLM with tools for interacting with EVM networks",
              "createdat": "2025-05-26T16:41:51.769962041Z",
              "modifiedat": "2025-05-26T16:41:51.769962041Z",
              "ancestor": "1",
              "id": "e944c7a9-9eb0-495a-8bee-d8da751240e7",
              "packages": [
                {
                  "name": "@mcpdotdirect/evm-mcp-server",
                  "registry_name": "unknown",
                  "version": "1.1.3"
                }
              ],
              "prompts": [],
              "remotes": [
                {
                  "transport_type": "sse",
                  "url": "http://localhost:3001/sse"
                }
              ],
              "repository": {
                "id": "945212492",
                "source": "github",
                "url": "https://github.com/mcpdotdirect/evm-mcp-server"
              },
              "resources": [
                {
                  "name": "chain_info_by_network",
                  "uritemplate": "evm://{network}/chain"
                },
                {
                  "name": "ethereum_chain_info",
                  "uritemplate": "evm://chain"
                },
                {
                  "name": "evm_block_by_number",
                  "uritemplate": "evm://{network}/block/{blockNumber}"
                },
                {
                  "name": "block_by_hash",
                  "uritemplate": "evm://{network}/block/hash/{blockHash}"
                },
                {
                  "name": "evm_latest_block",
                  "uritemplate": "evm://{network}/block/latest"
                },
                {
                  "name": "default_latest_block",
                  "uritemplate": "evm://block/latest"
                },
                {
                  "name": "evm_address_native_balance",
                  "uritemplate": "evm://{network}/address/{address}/balance"
                },
                {
                  "name": "default_eth_balance",
                  "uritemplate": "evm://address/{address}/eth-balance"
                },
                {
                  "name": "erc20_balance",
                  "uritemplate": "evm://{network}/address/{address}/token/{tokenAddress}/balance"
                },
                {
                  "name": "default_erc20_balance",
                  "uritemplate": "evm://address/{address}/token/{tokenAddress}/balance"
                },
                {
                  "name": "evm_transaction_details",
                  "uritemplate": "evm://{network}/tx/{txHash}"
                },
                {
                  "name": "default_transaction_by_hash",
                  "uritemplate": "evm://tx/{txHash}"
                },
                {
                  "name": "supported_networks",
                  "uritemplate": "evm://networks"
                },
                {
                  "name": "erc20_token_details",
                  "uritemplate": "evm://{network}/token/{tokenAddress}"
                },
                {
                  "name": "erc20_token_address_balance",
                  "uritemplate": "evm://{network}/token/{tokenAddress}/balanceOf/{address}"
                },
                {
                  "name": "erc721_nft_token_details",
                  "uritemplate": "evm://{network}/nft/{tokenAddress}/{tokenId}"
                },
                {
                  "name": "erc721_nft_ownership_check",
                  "uritemplate": "evm://{network}/nft/{tokenAddress}/{tokenId}/isOwnedBy/{address}"
                },
                {
                  "name": "erc1155_token_metadata_uri",
                  "uritemplate": "evm://{network}/erc1155/{tokenAddress}/{tokenId}/uri"
                },
                {
                  "name": "erc1155_token_address_balance",
                  "uritemplate": "evm://{network}/erc1155/{tokenAddress}/{tokenId}/balanceOf/{address}"
                }
              ],
              "tools": [
                {
                  "description": "Get information about an EVM network",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. Supports all EVM-compatible networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_chain_info"
                },
                {
                  "description": "Resolve an ENS name to an Ethereum address",
                  "inputschema": {
                    "properties": {
                      "ensName": {
                        "description": "ENS name to resolve (e.g., 'vitalik.eth')",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. ENS resolution works best on Ethereum mainnet. Defaults to Ethereum mainnet.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "ensName"
                    ],
                    "type": "object"
                  },
                  "name": "resolve_ens"
                },
                {
                  "description": "Get a list of supported EVM networks",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_supported_networks"
                },
                {
                  "description": "Get a block by its block number",
                  "inputschema": {
                    "properties": {
                      "blockNumber": {
                        "description": "The block number to fetch",
                        "type": "number"
                      },
                      "network": {
                        "description": "Network name or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "blockNumber"
                    ],
                    "type": "object"
                  },
                  "name": "get_block_by_number"
                },
                {
                  "description": "Get the latest block from the EVM",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_latest_block"
                },
                {
                  "description": "Get the native token balance (ETH, MATIC, etc.) for an address",
                  "inputschema": {
                    "properties": {
                      "address": {
                        "description": "The wallet address or ENS name (e.g., '0x1234...' or 'vitalik.eth') to check the balance for",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. Supports all EVM-compatible networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "address"
                    ],
                    "type": "object"
                  },
                  "name": "get_balance"
                },
                {
                  "description": "Get the ERC20 token balance of an Ethereum address",
                  "inputschema": {
                    "properties": {
                      "address": {
                        "description": "The Ethereum address to check",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The ERC20 token contract address",
                        "type": "string"
                      }
                    },
                    "required": [
                      "address",
                      "tokenAddress"
                    ],
                    "type": "object"
                  },
                  "name": "get_erc20_balance"
                },
                {
                  "description": "Get the balance of an ERC20 token for an address",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. Supports all EVM-compatible networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "ownerAddress": {
                        "description": "The wallet address or ENS name to check the balance for (e.g., '0x1234...' or 'vitalik.eth')",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address or ENS name of the ERC20 token (e.g., '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' for USDC or 'uniswap.eth')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tokenAddress",
                      "ownerAddress"
                    ],
                    "type": "object"
                  },
                  "name": "get_token_balance"
                },
                {
                  "description": "Get detailed information about a specific transaction by its hash. Includes sender, recipient, value, data, and more.",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "txHash": {
                        "description": "The transaction hash to look up (e.g., '0x1234...')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "txHash"
                    ],
                    "type": "object"
                  },
                  "name": "get_transaction"
                },
                {
                  "description": "Get a transaction receipt by its hash",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "txHash": {
                        "description": "The transaction hash to look up",
                        "type": "string"
                      }
                    },
                    "required": [
                      "txHash"
                    ],
                    "type": "object"
                  },
                  "name": "get_transaction_receipt"
                },
                {
                  "description": "Estimate the gas cost for a transaction",
                  "inputschema": {
                    "properties": {
                      "data": {
                        "description": "The transaction data as a hex string",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "to": {
                        "description": "The recipient address",
                        "type": "string"
                      },
                      "value": {
                        "description": "The amount of ETH to send in ether (e.g., '0.1')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "to"
                    ],
                    "type": "object"
                  },
                  "name": "estimate_gas"
                },
                {
                  "description": "Transfer native tokens (ETH, MATIC, etc.) to an address",
                  "inputschema": {
                    "properties": {
                      "amount": {
                        "description": "Amount to send in ETH (or the native token of the network), as a string (e.g., '0.1')",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. Supports all EVM-compatible networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "privateKey": {
                        "description": "Private key of the sender account in hex format (with or without 0x prefix). SECURITY: This is used only for transaction signing and is not stored.",
                        "type": "string"
                      },
                      "to": {
                        "description": "The recipient address or ENS name (e.g., '0x1234...' or 'vitalik.eth')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "privateKey",
                      "to",
                      "amount"
                    ],
                    "type": "object"
                  },
                  "name": "transfer_eth"
                },
                {
                  "description": "Transfer ERC20 tokens to another address",
                  "inputschema": {
                    "properties": {
                      "amount": {
                        "description": "The amount of tokens to send (in token units, e.g., '10' for 10 tokens)",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. Supports all EVM-compatible networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "privateKey": {
                        "description": "Private key of the sending account (this is used for signing and is never stored)",
                        "type": "string"
                      },
                      "toAddress": {
                        "description": "The recipient address",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The address of the ERC20 token contract",
                        "type": "string"
                      }
                    },
                    "required": [
                      "privateKey",
                      "tokenAddress",
                      "toAddress",
                      "amount"
                    ],
                    "type": "object"
                  },
                  "name": "transfer_erc20"
                },
                {
                  "description": "Approve another address (like a DeFi protocol or exchange) to spend your ERC20 tokens. This is often required before interacting with DeFi protocols.",
                  "inputschema": {
                    "properties": {
                      "amount": {
                        "description": "The amount of tokens to approve in token units, not wei (e.g., '1000' to approve spending 1000 tokens). Use a very large number for unlimited approval.",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "privateKey": {
                        "description": "Private key of the token owner account in hex format (with or without 0x prefix). SECURITY: This is used only for transaction signing and is not stored.",
                        "type": "string"
                      },
                      "spenderAddress": {
                        "description": "The contract address being approved to spend your tokens (e.g., a DEX or lending protocol)",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address of the ERC20 token to approve for spending (e.g., '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' for USDC on Ethereum)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "privateKey",
                      "tokenAddress",
                      "spenderAddress",
                      "amount"
                    ],
                    "type": "object"
                  },
                  "name": "approve_token_spending"
                },
                {
                  "description": "Transfer an NFT (ERC721 token) from one address to another. Requires the private key of the current owner for signing the transaction.",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. Most NFTs are on Ethereum mainnet, which is the default.",
                        "type": "string"
                      },
                      "privateKey": {
                        "description": "Private key of the NFT owner account in hex format (with or without 0x prefix). SECURITY: This is used only for transaction signing and is not stored.",
                        "type": "string"
                      },
                      "toAddress": {
                        "description": "The recipient wallet address that will receive the NFT",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address of the NFT collection (e.g., '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' for Bored Ape Yacht Club)",
                        "type": "string"
                      },
                      "tokenId": {
                        "description": "The ID of the specific NFT to transfer (e.g., '1234')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "privateKey",
                      "tokenAddress",
                      "tokenId",
                      "toAddress"
                    ],
                    "type": "object"
                  },
                  "name": "transfer_nft"
                },
                {
                  "description": "Transfer ERC1155 tokens to another address. ERC1155 is a multi-token standard that can represent both fungible and non-fungible tokens in a single contract.",
                  "inputschema": {
                    "properties": {
                      "amount": {
                        "description": "The quantity of tokens to send (e.g., '1' for a single NFT or '10' for 10 fungible tokens)",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. ERC1155 tokens exist across many networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "privateKey": {
                        "description": "Private key of the token owner account in hex format (with or without 0x prefix). SECURITY: This is used only for transaction signing and is not stored.",
                        "type": "string"
                      },
                      "toAddress": {
                        "description": "The recipient wallet address that will receive the tokens",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address of the ERC1155 token collection (e.g., '0x76BE3b62873462d2142405439777e971754E8E77')",
                        "type": "string"
                      },
                      "tokenId": {
                        "description": "The ID of the specific token to transfer (e.g., '1234')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "privateKey",
                      "tokenAddress",
                      "tokenId",
                      "amount",
                      "toAddress"
                    ],
                    "type": "object"
                  },
                  "name": "transfer_erc1155"
                },
                {
                  "description": "Transfer ERC20 tokens to an address",
                  "inputschema": {
                    "properties": {
                      "amount": {
                        "description": "Amount of tokens to send as a string (e.g., '100' for 100 tokens). This will be adjusted for the token's decimals.",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. Supports all EVM-compatible networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "privateKey": {
                        "description": "Private key of the sender account in hex format (with or without 0x prefix). SECURITY: This is used only for transaction signing and is not stored.",
                        "type": "string"
                      },
                      "toAddress": {
                        "description": "The recipient address or ENS name that will receive the tokens (e.g., '0x1234...' or 'vitalik.eth')",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address or ENS name of the ERC20 token to transfer (e.g., '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' for USDC or 'uniswap.eth')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "privateKey",
                      "tokenAddress",
                      "toAddress",
                      "amount"
                    ],
                    "type": "object"
                  },
                  "name": "transfer_token"
                },
                {
                  "description": "Read data from a smart contract by calling a view/pure function. This doesn't modify blockchain state and doesn't require gas or signing.",
                  "inputschema": {
                    "properties": {
                      "abi": {
                        "description": "The ABI (Application Binary Interface) of the smart contract function, as a JSON array",
                        "items": {},
                        "type": "array"
                      },
                      "args": {
                        "description": "The arguments to pass to the function, as an array (e.g., ['0x1234...'])",
                        "items": {},
                        "type": "array"
                      },
                      "contractAddress": {
                        "description": "The address of the smart contract to interact with",
                        "type": "string"
                      },
                      "functionName": {
                        "description": "The name of the function to call on the contract (e.g., 'balanceOf')",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "contractAddress",
                      "abi",
                      "functionName"
                    ],
                    "type": "object"
                  },
                  "name": "read_contract"
                },
                {
                  "description": "Write data to a smart contract by calling a state-changing function. This modifies blockchain state and requires gas payment and transaction signing.",
                  "inputschema": {
                    "properties": {
                      "abi": {
                        "description": "The ABI (Application Binary Interface) of the smart contract function, as a JSON array",
                        "items": {},
                        "type": "array"
                      },
                      "args": {
                        "description": "The arguments to pass to the function, as an array (e.g., ['0x1234...', '1000000000000000000'])",
                        "items": {},
                        "type": "array"
                      },
                      "contractAddress": {
                        "description": "The address of the smart contract to interact with",
                        "type": "string"
                      },
                      "functionName": {
                        "description": "The name of the function to call on the contract (e.g., 'transfer')",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "privateKey": {
                        "description": "Private key of the sending account in hex format (with or without 0x prefix). SECURITY: This is used only for transaction signing and is not stored.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "contractAddress",
                      "abi",
                      "functionName",
                      "args",
                      "privateKey"
                    ],
                    "type": "object"
                  },
                  "name": "write_contract"
                },
                {
                  "description": "Check if an address is a smart contract or an externally owned account (EOA)",
                  "inputschema": {
                    "properties": {
                      "address": {
                        "description": "The wallet or contract address or ENS name to check (e.g., '0x1234...' or 'uniswap.eth')",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. Supports all EVM-compatible networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "address"
                    ],
                    "type": "object"
                  },
                  "name": "is_contract"
                },
                {
                  "description": "Get comprehensive information about an ERC20 token including name, symbol, decimals, total supply, and other metadata. Use this to analyze any token on EVM chains.",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address of the ERC20 token (e.g., '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' for USDC on Ethereum)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tokenAddress"
                    ],
                    "type": "object"
                  },
                  "name": "get_token_info"
                },
                {
                  "description": "Get ERC20 token balance for an address",
                  "inputschema": {
                    "properties": {
                      "address": {
                        "description": "The address to check balance for",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The ERC20 token contract address",
                        "type": "string"
                      }
                    },
                    "required": [
                      "address",
                      "tokenAddress"
                    ],
                    "type": "object"
                  },
                  "name": "get_token_balance_erc20"
                },
                {
                  "description": "Get detailed information about a specific NFT (ERC721 token), including collection name, symbol, token URI, and current owner if available.",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. Most NFTs are on Ethereum mainnet, which is the default.",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address of the NFT collection (e.g., '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' for Bored Ape Yacht Club)",
                        "type": "string"
                      },
                      "tokenId": {
                        "description": "The ID of the specific NFT token to query (e.g., '1234')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tokenAddress",
                      "tokenId"
                    ],
                    "type": "object"
                  },
                  "name": "get_nft_info"
                },
                {
                  "description": "Check if an address owns a specific NFT",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. Supports all EVM-compatible networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "ownerAddress": {
                        "description": "The wallet address or ENS name to check ownership against (e.g., '0x1234...' or 'vitalik.eth')",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address or ENS name of the NFT collection (e.g., '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' for BAYC or 'boredapeyachtclub.eth')",
                        "type": "string"
                      },
                      "tokenId": {
                        "description": "The ID of the NFT to check (e.g., '1234')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tokenAddress",
                      "tokenId",
                      "ownerAddress"
                    ],
                    "type": "object"
                  },
                  "name": "check_nft_ownership"
                },
                {
                  "description": "Get the metadata URI for an ERC1155 token (multi-token standard used for both fungible and non-fungible tokens). The URI typically points to JSON metadata about the token.",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. ERC1155 tokens exist across many networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address of the ERC1155 token collection (e.g., '0x76BE3b62873462d2142405439777e971754E8E77')",
                        "type": "string"
                      },
                      "tokenId": {
                        "description": "The ID of the specific token to query metadata for (e.g., '1234')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tokenAddress",
                      "tokenId"
                    ],
                    "type": "object"
                  },
                  "name": "get_erc1155_token_uri"
                },
                {
                  "description": "Get the total number of NFTs owned by an address from a specific collection. This returns the count of NFTs, not individual token IDs.",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. Most NFTs are on Ethereum mainnet, which is the default.",
                        "type": "string"
                      },
                      "ownerAddress": {
                        "description": "The wallet address to check the NFT balance for (e.g., '0x1234...')",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address of the NFT collection (e.g., '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' for Bored Ape Yacht Club)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tokenAddress",
                      "ownerAddress"
                    ],
                    "type": "object"
                  },
                  "name": "get_nft_balance"
                },
                {
                  "description": "Get the balance of a specific ERC1155 token ID owned by an address. ERC1155 allows multiple tokens of the same ID, so the balance can be greater than 1.",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. ERC1155 tokens exist across many networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "ownerAddress": {
                        "description": "The wallet address to check the token balance for (e.g., '0x1234...')",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address of the ERC1155 token collection (e.g., '0x76BE3b62873462d2142405439777e971754E8E77')",
                        "type": "string"
                      },
                      "tokenId": {
                        "description": "The ID of the specific token to check the balance for (e.g., '1234')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tokenAddress",
                      "tokenId",
                      "ownerAddress"
                    ],
                    "type": "object"
                  },
                  "name": "get_erc1155_balance"
                },
                {
                  "description": "Get the EVM address derived from a private key",
                  "inputschema": {
                    "properties": {
                      "privateKey": {
                        "description": "Private key in hex format (with or without 0x prefix). SECURITY: This is used only for address derivation and is not stored.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "privateKey"
                    ],
                    "type": "object"
                  },
                  "name": "get_address_from_private_key"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:27Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "template-mcp-server": {
          "serverid": "template-mcp-server",
          "self": "#/mcpproviders/mcpdotdirect/servers/template-mcp-server",
          "xid": "/mcpproviders/mcpdotdirect/servers/template-mcp-server",

          "metaurl": "#/mcpproviders/mcpdotdirect/servers/template-mcp-server/meta",
          "meta": {
            "serverid": "template-mcp-server",
            "self": "#/mcpproviders/mcpdotdirect/servers/template-mcp-server/meta",
            "xid": "/mcpproviders/mcpdotdirect/servers/template-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:51.653121869Z",
            "modifiedat": "2025-05-26T16:41:51.653121869Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mcpdotdirect/servers/template-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mcpdotdirect/servers/template-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "template-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/mcpdotdirect/servers/template-mcp-server/versions/1",
              "xid": "/mcpproviders/mcpdotdirect/servers/template-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.mcpdotdirect/template-mcp-server",
              "isdefault": true,
              "description": "Template to quickly set up your own MCP server ",
              "createdat": "2025-05-26T16:41:51.653121869Z",
              "modifiedat": "2025-05-26T16:41:51.653121869Z",
              "ancestor": "1",
              "id": "816a9400-2e2b-4697-8fbb-2a22fd81de74",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "development",
                      "name": "NODE_ENV"
                    }
                  ],
                  "name": "@mcpdotdirect/create-mcp-server",
                  "package_arguments": [
                    {
                      "default": "start",
                      "description": "start",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "start",
                      "value_hint": "start"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "2.0.1"
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Name to greet",
                      "name": "name",
                      "required": true
                    }
                  ],
                  "description": "A simple greeting prompt",
                  "name": "greeting"
                }
              ],
              "remotes": [
                {
                  "transport_type": "sse",
                  "url": "http://localhost:3001/sse"
                }
              ],
              "repository": {
                "id": "946258129",
                "source": "github",
                "url": "https://github.com/mcpdotdirect/template-mcp-server"
              },
              "resources": [
                {
                  "description": "Resource ID",
                  "mimetype": "text/plain",
                  "name": "Example Resource",
                  "uritemplate": "example://{id}"
                }
              ],
              "tools": [
                {
                  "description": "A simple hello world tool",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "description": "Name to greet",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "hello_world"
                },
                {
                  "description": "A simple goodbye tool",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "description": "Name to bid farewell to",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "goodbye"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:33Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "mcpso": {
      "mcpproviderid": "mcpso",
      "self": "#/mcpproviders/mcpso",
      "xid": "/mcpproviders/mcpso",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:14.282096303Z",
      "modifiedat": "2025-05-26T16:42:14.282096303Z",

      "serversurl": "#/mcpproviders/mcpso/servers",
      "servers": {
        "mcp-server-chatsum": {
          "serverid": "mcp-server-chatsum",
          "self": "#/mcpproviders/mcpso/servers/mcp-server-chatsum",
          "xid": "/mcpproviders/mcpso/servers/mcp-server-chatsum",

          "metaurl": "#/mcpproviders/mcpso/servers/mcp-server-chatsum/meta",
          "meta": {
            "serverid": "mcp-server-chatsum",
            "self": "#/mcpproviders/mcpso/servers/mcp-server-chatsum/meta",
            "xid": "/mcpproviders/mcpso/servers/mcp-server-chatsum/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:14.282096303Z",
            "modifiedat": "2025-05-26T16:42:14.282096303Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mcpso/servers/mcp-server-chatsum/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mcpso/servers/mcp-server-chatsum/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-chatsum",
              "versionid": "1",
              "self": "#/mcpproviders/mcpso/servers/mcp-server-chatsum/versions/1",
              "xid": "/mcpproviders/mcpso/servers/mcp-server-chatsum/versions/1",
              "epoch": 1,
              "name": "io.github.mcpso/mcp-server-chatsum",
              "isdefault": true,
              "description": "Query and Summarize your chat messages.",
              "createdat": "2025-05-26T16:42:14.282096303Z",
              "modifiedat": "2025-05-26T16:42:14.282096303Z",
              "ancestor": "1",
              "id": "196a8cbd-8234-4336-a4d7-f6dda870bcfb",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "path-to/mcp-server-chatsum/chatbot/data/chat.db",
                      "name": "CHAT_DB_PATH"
                    }
                  ],
                  "name": "mcp-server-chatsum",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "898004429",
                "source": "github",
                "url": "https://github.com/chatmcp/mcp-server-chatsum"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:19Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mcpx-dev": {
      "mcpproviderid": "mcpx-dev",
      "self": "#/mcpproviders/mcpx-dev",
      "xid": "/mcpproviders/mcpx-dev",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:10.929891873Z",
      "modifiedat": "2025-05-26T16:42:10.929891873Z",

      "serversurl": "#/mcpproviders/mcpx-dev/servers",
      "servers": {
        "mcp-badges": {
          "serverid": "mcp-badges",
          "self": "#/mcpproviders/mcpx-dev/servers/mcp-badges",
          "xid": "/mcpproviders/mcpx-dev/servers/mcp-badges",

          "metaurl": "#/mcpproviders/mcpx-dev/servers/mcp-badges/meta",
          "meta": {
            "serverid": "mcp-badges",
            "self": "#/mcpproviders/mcpx-dev/servers/mcp-badges/meta",
            "xid": "/mcpproviders/mcpx-dev/servers/mcp-badges/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:10.929891873Z",
            "modifiedat": "2025-05-26T16:42:10.929891873Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mcpx-dev/servers/mcp-badges/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mcpx-dev/servers/mcp-badges/versions",
          "versions": {
            "1": {
              "serverid": "mcp-badges",
              "versionid": "1",
              "self": "#/mcpproviders/mcpx-dev/servers/mcp-badges/versions/1",
              "xid": "/mcpproviders/mcpx-dev/servers/mcp-badges/versions/1",
              "epoch": 1,
              "name": "io.github.mcpx-dev/mcp-badges",
              "isdefault": true,
              "description": "Get your projects MCP (Model Context Protocol)  badges",
              "createdat": "2025-05-26T16:42:10.929891873Z",
              "modifiedat": "2025-05-26T16:42:10.929891873Z",
              "ancestor": "1",
              "id": "72d60875-916c-4555-8651-a10f013c7c30",
              "packages": [
                {
                  "name": "mcpx-dev/mcp-badges",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "911113162",
                "source": "github",
                "url": "https://github.com/mcpx-dev/mcp-badges"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:52Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "meilisearch": {
      "mcpproviderid": "meilisearch",
      "self": "#/mcpproviders/meilisearch",
      "xid": "/mcpproviders/meilisearch",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:01.72951264Z",
      "modifiedat": "2025-05-26T16:42:01.72951264Z",

      "serversurl": "#/mcpproviders/meilisearch/servers",
      "servers": {
        "meilisearch-mcp": {
          "serverid": "meilisearch-mcp",
          "self": "#/mcpproviders/meilisearch/servers/meilisearch-mcp",
          "xid": "/mcpproviders/meilisearch/servers/meilisearch-mcp",

          "metaurl": "#/mcpproviders/meilisearch/servers/meilisearch-mcp/meta",
          "meta": {
            "serverid": "meilisearch-mcp",
            "self": "#/mcpproviders/meilisearch/servers/meilisearch-mcp/meta",
            "xid": "/mcpproviders/meilisearch/servers/meilisearch-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:01.72951264Z",
            "modifiedat": "2025-05-26T16:42:01.72951264Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/meilisearch/servers/meilisearch-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/meilisearch/servers/meilisearch-mcp/versions",
          "versions": {
            "1": {
              "serverid": "meilisearch-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/meilisearch/servers/meilisearch-mcp/versions/1",
              "xid": "/mcpproviders/meilisearch/servers/meilisearch-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.meilisearch/meilisearch-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for interacting with Meilisearch through LLM interfaces.",
              "createdat": "2025-05-26T16:42:01.72951264Z",
              "modifiedat": "2025-05-26T16:42:01.72951264Z",
              "ancestor": "1",
              "id": "11d467e3-6001-4e60-ba90-494ad9eb7ad2",
              "packages": [
                {
                  "name": "meilisearch-mcp",
                  "registry_name": "unknown",
                  "version": "0.4.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "907425333",
                "source": "github",
                "url": "https://github.com/meilisearch/meilisearch-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get current Meilisearch connection settings",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get-connection-settings"
                },
                {
                  "description": "Update Meilisearch connection settings",
                  "inputschema": {
                    "properties": {
                      "api_key": {
                        "optional": true,
                        "type": "string"
                      },
                      "url": {
                        "optional": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "update-connection-settings"
                },
                {
                  "description": "Check Meilisearch server health",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "health-check"
                },
                {
                  "description": "Get Meilisearch version information",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get-version"
                },
                {
                  "description": "Get database statistics",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get-stats"
                },
                {
                  "description": "Create a new Meilisearch index",
                  "inputschema": {
                    "properties": {
                      "primaryKey": {
                        "optional": true,
                        "type": "string"
                      },
                      "uid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "uid"
                    ],
                    "type": "object"
                  },
                  "name": "create-index"
                },
                {
                  "description": "List all Meilisearch indexes",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list-indexes"
                },
                {
                  "description": "Get documents from an index",
                  "inputschema": {
                    "properties": {
                      "indexUid": {
                        "type": "string"
                      },
                      "limit": {
                        "optional": true,
                        "type": "integer"
                      },
                      "offset": {
                        "optional": true,
                        "type": "integer"
                      }
                    },
                    "required": [
                      "indexUid"
                    ],
                    "type": "object"
                  },
                  "name": "get-documents"
                },
                {
                  "description": "Add documents to an index",
                  "inputschema": {
                    "properties": {
                      "documents": {
                        "type": "array"
                      },
                      "indexUid": {
                        "type": "string"
                      },
                      "primaryKey": {
                        "optional": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "indexUid",
                      "documents"
                    ],
                    "type": "object"
                  },
                  "name": "add-documents"
                },
                {
                  "description": "Get current settings for an index",
                  "inputschema": {
                    "properties": {
                      "indexUid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "indexUid"
                    ],
                    "type": "object"
                  },
                  "name": "get-settings"
                },
                {
                  "description": "Update settings for an index",
                  "inputschema": {
                    "properties": {
                      "indexUid": {
                        "type": "string"
                      },
                      "settings": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "indexUid",
                      "settings"
                    ],
                    "type": "object"
                  },
                  "name": "update-settings"
                },
                {
                  "description": "Search through Meilisearch indices. If indexUid is not provided, it will search across all indices.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "optional": true,
                        "type": "string"
                      },
                      "indexUid": {
                        "optional": true,
                        "type": "string"
                      },
                      "limit": {
                        "optional": true,
                        "type": "integer"
                      },
                      "offset": {
                        "optional": true,
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "sort": {
                        "items": {
                          "type": "string"
                        },
                        "optional": true,
                        "type": "array"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search"
                },
                {
                  "description": "Get information about a specific task",
                  "inputschema": {
                    "properties": {
                      "taskUid": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "taskUid"
                    ],
                    "type": "object"
                  },
                  "name": "get-task"
                },
                {
                  "description": "Get list of tasks with optional filters",
                  "inputschema": {
                    "properties": {
                      "afterEnqueuedAt": {
                        "optional": true,
                        "type": "string"
                      },
                      "afterFinishedAt": {
                        "optional": true,
                        "type": "string"
                      },
                      "afterStartedAt": {
                        "optional": true,
                        "type": "string"
                      },
                      "batchUids": {
                        "items": {
                          "type": "string"
                        },
                        "optional": true,
                        "type": "array"
                      },
                      "beforeEnqueuedAt": {
                        "optional": true,
                        "type": "string"
                      },
                      "beforeFinishedAt": {
                        "optional": true,
                        "type": "string"
                      },
                      "beforeStartedAt": {
                        "optional": true,
                        "type": "string"
                      },
                      "canceledBy": {
                        "items": {
                          "type": "string"
                        },
                        "optional": true,
                        "type": "array"
                      },
                      "from": {
                        "optional": true,
                        "type": "integer"
                      },
                      "indexUids": {
                        "items": {
                          "type": "string"
                        },
                        "optional": true,
                        "type": "array"
                      },
                      "limit": {
                        "optional": true,
                        "type": "integer"
                      },
                      "reverse": {
                        "optional": true,
                        "type": "boolean"
                      },
                      "statuses": {
                        "items": {
                          "type": "string"
                        },
                        "optional": true,
                        "type": "array"
                      },
                      "types": {
                        "items": {
                          "type": "string"
                        },
                        "optional": true,
                        "type": "array"
                      },
                      "uids": {
                        "items": {
                          "type": "integer"
                        },
                        "optional": true,
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get-tasks"
                },
                {
                  "description": "Cancel tasks based on filters",
                  "inputschema": {
                    "properties": {
                      "indexUids": {
                        "optional": true,
                        "type": "string"
                      },
                      "statuses": {
                        "optional": true,
                        "type": "string"
                      },
                      "types": {
                        "optional": true,
                        "type": "string"
                      },
                      "uids": {
                        "optional": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "cancel-tasks"
                },
                {
                  "description": "Get list of API keys",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "optional": true,
                        "type": "integer"
                      },
                      "offset": {
                        "optional": true,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get-keys"
                },
                {
                  "description": "Create a new API key",
                  "inputschema": {
                    "properties": {
                      "actions": {
                        "type": "array"
                      },
                      "description": {
                        "optional": true,
                        "type": "string"
                      },
                      "expiresAt": {
                        "optional": true,
                        "type": "string"
                      },
                      "indexes": {
                        "type": "array"
                      }
                    },
                    "required": [
                      "actions",
                      "indexes"
                    ],
                    "type": "object"
                  },
                  "name": "create-key"
                },
                {
                  "description": "Delete an API key",
                  "inputschema": {
                    "properties": {
                      "key": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "delete-key"
                },
                {
                  "description": "Get comprehensive health status of Meilisearch",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get-health-status"
                },
                {
                  "description": "Get detailed metrics for an index",
                  "inputschema": {
                    "properties": {
                      "indexUid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "indexUid"
                    ],
                    "type": "object"
                  },
                  "name": "get-index-metrics"
                },
                {
                  "description": "Get system-level information",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get-system-info"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:20Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mektigboy": {
      "mcpproviderid": "mektigboy",
      "self": "#/mcpproviders/mektigboy",
      "xid": "/mcpproviders/mektigboy",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:27.584515951Z",
      "modifiedat": "2025-05-26T16:42:27.584515951Z",

      "serversurl": "#/mcpproviders/mektigboy/servers",
      "servers": {
        "server-hyperliquid": {
          "serverid": "server-hyperliquid",
          "self": "#/mcpproviders/mektigboy/servers/server-hyperliquid",
          "xid": "/mcpproviders/mektigboy/servers/server-hyperliquid",

          "metaurl": "#/mcpproviders/mektigboy/servers/server-hyperliquid/meta",
          "meta": {
            "serverid": "server-hyperliquid",
            "self": "#/mcpproviders/mektigboy/servers/server-hyperliquid/meta",
            "xid": "/mcpproviders/mektigboy/servers/server-hyperliquid/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:27.584515951Z",
            "modifiedat": "2025-05-26T16:42:27.584515951Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mektigboy/servers/server-hyperliquid/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mektigboy/servers/server-hyperliquid/versions",
          "versions": {
            "1": {
              "serverid": "server-hyperliquid",
              "versionid": "1",
              "self": "#/mcpproviders/mektigboy/servers/server-hyperliquid/versions/1",
              "xid": "/mcpproviders/mektigboy/servers/server-hyperliquid/versions/1",
              "epoch": 1,
              "name": "io.github.mektigboy/server-hyperliquid",
              "isdefault": true,
              "description": "MCP Hyperliquid (https://app.hyperliquid.xyz) server",
              "createdat": "2025-05-26T16:42:27.584515951Z",
              "modifiedat": "2025-05-26T16:42:27.584515951Z",
              "ancestor": "1",
              "id": "0d57edf7-3fbb-42b4-aa9e-b255e7d6f8fa",
              "packages": [
                {
                  "name": "@mektigboy/server-hyperliquid",
                  "registry_name": "npm",
                  "version": "0.0.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "943734921",
                "source": "github",
                "url": "https://github.com/mektigboy/server-hyperliquid"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve mid prices for all coins on Hyperliquid",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_all_mids"
                },
                {
                  "description": "Get historical candlestick data for any token",
                  "inputschema": {
                    "properties": {
                      "coin": {
                        "type": "string"
                      },
                      "endTime": {
                        "type": "number"
                      },
                      "interval": {
                        "type": "string"
                      },
                      "startTime": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "coin",
                      "interval",
                      "startTime"
                    ],
                    "type": "object"
                  },
                  "name": "get_candle_snapshot"
                },
                {
                  "description": "Access the L2 order book for any token",
                  "inputschema": {
                    "properties": {
                      "symbol": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "symbol"
                    ],
                    "type": "object"
                  },
                  "name": "get_l2_book"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:12Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mem0ai": {
      "mcpproviderid": "mem0ai",
      "self": "#/mcpproviders/mem0ai",
      "xid": "/mcpproviders/mem0ai",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:50.456396408Z",
      "modifiedat": "2025-05-26T16:41:50.456396408Z",

      "serversurl": "#/mcpproviders/mem0ai/servers",
      "servers": {
        "mem0-mcp": {
          "serverid": "mem0-mcp",
          "self": "#/mcpproviders/mem0ai/servers/mem0-mcp",
          "xid": "/mcpproviders/mem0ai/servers/mem0-mcp",

          "metaurl": "#/mcpproviders/mem0ai/servers/mem0-mcp/meta",
          "meta": {
            "serverid": "mem0-mcp",
            "self": "#/mcpproviders/mem0ai/servers/mem0-mcp/meta",
            "xid": "/mcpproviders/mem0ai/servers/mem0-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:50.456396408Z",
            "modifiedat": "2025-05-26T16:41:50.456396408Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mem0ai/servers/mem0-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mem0ai/servers/mem0-mcp/versions",
          "versions": {
            "1": {
              "serverid": "mem0-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/mem0ai/servers/mem0-mcp/versions/1",
              "xid": "/mcpproviders/mem0ai/servers/mem0-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.mem0ai/mem0-mcp",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:50.456396408Z",
              "modifiedat": "2025-05-26T16:41:50.456396408Z",
              "ancestor": "1",
              "id": "4f189cdd-04a5-47f6-b87b-7d38cc82e625",
              "packages": [
                {
                  "name": "mem0-mcp",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "934683195",
                "source": "github",
                "url": "https://github.com/mem0ai/mem0-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Add a new memory. This method is called everytime the user informs anything about themselves, their preferences, or anything that has any relevent information whcih can be useful in the future conversation. This can also be called when the user asks you to remember something.",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "The content to store in memory",
                        "type": "string"
                      },
                      "userId": {
                        "description": "User ID for memory storage. If not provided explicitly, use a generic user ID like, 'mem0-mcp-user'",
                        "type": "string"
                      }
                    },
                    "required": [
                      "content",
                      "userId"
                    ],
                    "type": "object"
                  },
                  "name": "add-memory"
                },
                {
                  "description": "Search through stored memories. This method is called ANYTIME the user asks anything.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The search query. This is the query that the user has asked for. Example: 'What did I tell you about the weather last week?' or 'What did I tell you about my friend John?'",
                        "type": "string"
                      },
                      "userId": {
                        "description": "User ID for memory storage. If not provided explicitly, use a generic user ID like, 'mem0-mcp-user\"",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query",
                      "userId"
                    ],
                    "type": "object"
                  },
                  "name": "search-memories"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:02Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "memgraph": {
      "mcpproviderid": "memgraph",
      "self": "#/mcpproviders/memgraph",
      "xid": "/mcpproviders/memgraph",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:15.534292705Z",
      "modifiedat": "2025-05-26T16:42:15.534292705Z",

      "serversurl": "#/mcpproviders/memgraph/servers",
      "servers": {
        "mcp-memgraph": {
          "serverid": "mcp-memgraph",
          "self": "#/mcpproviders/memgraph/servers/mcp-memgraph",
          "xid": "/mcpproviders/memgraph/servers/mcp-memgraph",

          "metaurl": "#/mcpproviders/memgraph/servers/mcp-memgraph/meta",
          "meta": {
            "serverid": "mcp-memgraph",
            "self": "#/mcpproviders/memgraph/servers/mcp-memgraph/meta",
            "xid": "/mcpproviders/memgraph/servers/mcp-memgraph/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:15.534292705Z",
            "modifiedat": "2025-05-26T16:42:15.534292705Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/memgraph/servers/mcp-memgraph/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/memgraph/servers/mcp-memgraph/versions",
          "versions": {
            "1": {
              "serverid": "mcp-memgraph",
              "versionid": "1",
              "self": "#/mcpproviders/memgraph/servers/mcp-memgraph/versions/1",
              "xid": "/mcpproviders/memgraph/servers/mcp-memgraph/versions/1",
              "epoch": 1,
              "name": "io.github.memgraph/mcp-memgraph",
              "isdefault": true,
              "description": "Memgraph MCP Server",
              "createdat": "2025-05-26T16:42:15.534292705Z",
              "modifiedat": "2025-05-26T16:42:15.534292705Z",
              "ancestor": "1",
              "id": "dd730dba-107c-40f0-b172-85500a22b5c2",
              "packages": [
                {
                  "name": "mcp-memgraph",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "946087272",
                "source": "github",
                "url": "https://github.com/memgraph/mcp-memgraph"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:22Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mendableai": {
      "mcpproviderid": "mendableai",
      "self": "#/mcpproviders/mendableai",
      "xid": "/mcpproviders/mendableai",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:20.363651281Z",
      "modifiedat": "2025-05-26T16:42:20.363651281Z",

      "serversurl": "#/mcpproviders/mendableai/servers",
      "servers": {
        "firecrawl-mcp-server": {
          "serverid": "firecrawl-mcp-server",
          "self": "#/mcpproviders/mendableai/servers/firecrawl-mcp-server",
          "xid": "/mcpproviders/mendableai/servers/firecrawl-mcp-server",

          "metaurl": "#/mcpproviders/mendableai/servers/firecrawl-mcp-server/meta",
          "meta": {
            "serverid": "firecrawl-mcp-server",
            "self": "#/mcpproviders/mendableai/servers/firecrawl-mcp-server/meta",
            "xid": "/mcpproviders/mendableai/servers/firecrawl-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:20.363651281Z",
            "modifiedat": "2025-05-26T16:42:20.363651281Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mendableai/servers/firecrawl-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mendableai/servers/firecrawl-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "firecrawl-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/mendableai/servers/firecrawl-mcp-server/versions/1",
              "xid": "/mcpproviders/mendableai/servers/firecrawl-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.mendableai/firecrawl-mcp-server",
              "isdefault": true,
              "description": "Official Firecrawl MCP Server - Adds powerful web scraping to Cursor, Claude and any other LLM clients.",
              "createdat": "2025-05-26T16:42:20.363651281Z",
              "modifiedat": "2025-05-26T16:42:20.363651281Z",
              "ancestor": "1",
              "id": "13b91785-9041-468d-a136-e6c9e9dd7be9",
              "packages": [
                {
                  "name": "firecrawl-mcp",
                  "registry_name": "unknown",
                  "version": "1.9.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "899407931",
                "source": "github",
                "url": "https://github.com/mendableai/firecrawl-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Scrape a single webpage with advanced options for content extraction. Supports various formats including markdown, HTML, and screenshots. Can execute custom actions like clicking or scrolling before scraping.",
                  "inputschema": {
                    "properties": {
                      "actions": {
                        "description": "List of actions to perform before scraping",
                        "items": {
                          "properties": {
                            "direction": {
                              "description": "Scroll direction",
                              "enum": [
                                "up",
                                "down"
                              ],
                              "type": "string"
                            },
                            "fullPage": {
                              "description": "Take full page screenshot",
                              "type": "boolean"
                            },
                            "key": {
                              "description": "Key to press (for press action)",
                              "type": "string"
                            },
                            "milliseconds": {
                              "description": "Time to wait in milliseconds (for wait action)",
                              "type": "number"
                            },
                            "script": {
                              "description": "JavaScript code to execute",
                              "type": "string"
                            },
                            "selector": {
                              "description": "CSS selector for the target element",
                              "type": "string"
                            },
                            "text": {
                              "description": "Text to write (for write action)",
                              "type": "string"
                            },
                            "type": {
                              "description": "Type of action to perform",
                              "enum": [
                                "wait",
                                "click",
                                "screenshot",
                                "write",
                                "press",
                                "scroll",
                                "scrape",
                                "executeJavascript"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "excludeTags": {
                        "description": "HTML tags to exclude from extraction",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "extract": {
                        "description": "Configuration for structured data extraction",
                        "properties": {
                          "prompt": {
                            "description": "User prompt for LLM extraction",
                            "type": "string"
                          },
                          "schema": {
                            "description": "Schema for structured data extraction",
                            "type": "object"
                          },
                          "systemPrompt": {
                            "description": "System prompt for LLM extraction",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "formats": {
                        "description": "Content formats to extract (default: ['markdown'])",
                        "items": {
                          "enum": [
                            "markdown",
                            "html",
                            "rawHtml",
                            "screenshot",
                            "links",
                            "screenshot@fullPage",
                            "extract"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "includeTags": {
                        "description": "HTML tags to specifically include in extraction",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "location": {
                        "description": "Location settings for scraping",
                        "properties": {
                          "country": {
                            "description": "Country code for geolocation",
                            "type": "string"
                          },
                          "languages": {
                            "description": "Language codes for content",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "mobile": {
                        "description": "Use mobile viewport",
                        "type": "boolean"
                      },
                      "onlyMainContent": {
                        "description": "Extract only the main content, filtering out navigation, footers, etc.",
                        "type": "boolean"
                      },
                      "removeBase64Images": {
                        "description": "Remove base64 encoded images from output",
                        "type": "boolean"
                      },
                      "skipTlsVerification": {
                        "description": "Skip TLS certificate verification",
                        "type": "boolean"
                      },
                      "timeout": {
                        "description": "Maximum time in milliseconds to wait for the page to load",
                        "type": "number"
                      },
                      "url": {
                        "description": "The URL to scrape",
                        "type": "string"
                      },
                      "waitFor": {
                        "description": "Time in milliseconds to wait for dynamic content to load",
                        "type": "number"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_scrape"
                },
                {
                  "description": "Discover URLs from a starting point. Can use both sitemap.xml and HTML link discovery.",
                  "inputschema": {
                    "properties": {
                      "ignoreSitemap": {
                        "description": "Skip sitemap.xml discovery and only use HTML links",
                        "type": "boolean"
                      },
                      "includeSubdomains": {
                        "description": "Include URLs from subdomains in results",
                        "type": "boolean"
                      },
                      "limit": {
                        "description": "Maximum number of URLs to return",
                        "type": "number"
                      },
                      "search": {
                        "description": "Optional search term to filter URLs",
                        "type": "string"
                      },
                      "sitemapOnly": {
                        "description": "Only use sitemap.xml for discovery, ignore HTML links",
                        "type": "boolean"
                      },
                      "url": {
                        "description": "Starting URL for URL discovery",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_map"
                },
                {
                  "description": "Start an asynchronous crawl of multiple pages from a starting URL. Supports depth control, path filtering, and webhook notifications.",
                  "inputschema": {
                    "properties": {
                      "allowBackwardLinks": {
                        "description": "Allow crawling links that point to parent directories",
                        "type": "boolean"
                      },
                      "allowExternalLinks": {
                        "description": "Allow crawling links to external domains",
                        "type": "boolean"
                      },
                      "deduplicateSimilarURLs": {
                        "description": "Remove similar URLs during crawl",
                        "type": "boolean"
                      },
                      "excludePaths": {
                        "description": "URL paths to exclude from crawling",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "ignoreQueryParameters": {
                        "description": "Ignore query parameters when comparing URLs",
                        "type": "boolean"
                      },
                      "ignoreSitemap": {
                        "description": "Skip sitemap.xml discovery",
                        "type": "boolean"
                      },
                      "includePaths": {
                        "description": "Only crawl these URL paths",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "limit": {
                        "description": "Maximum number of pages to crawl",
                        "type": "number"
                      },
                      "maxDepth": {
                        "description": "Maximum link depth to crawl",
                        "type": "number"
                      },
                      "scrapeOptions": {
                        "description": "Options for scraping each page",
                        "properties": {
                          "excludeTags": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "formats": {
                            "items": {
                              "enum": [
                                "markdown",
                                "html",
                                "rawHtml",
                                "screenshot",
                                "links",
                                "screenshot@fullPage",
                                "extract"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "includeTags": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "onlyMainContent": {
                            "type": "boolean"
                          },
                          "waitFor": {
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "url": {
                        "description": "Starting URL for the crawl",
                        "type": "string"
                      },
                      "webhook": {
                        "oneOf": [
                          {
                            "description": "Webhook URL to notify when crawl is complete",
                            "type": "string"
                          },
                          {
                            "properties": {
                              "headers": {
                                "description": "Custom headers for webhook requests",
                                "type": "object"
                              },
                              "url": {
                                "description": "Webhook URL",
                                "type": "string"
                              }
                            },
                            "required": [
                              "url"
                            ],
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_crawl"
                },
                {
                  "description": "Check the status of a crawl job.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "Crawl job ID to check",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_check_crawl_status"
                },
                {
                  "description": "Search and retrieve content from web pages with optional scraping. Returns SERP results by default (url, title, description) or full page content when scrapeOptions are provided.",
                  "inputschema": {
                    "properties": {
                      "country": {
                        "description": "Country code for search results (default: us)",
                        "type": "string"
                      },
                      "filter": {
                        "description": "Search filter",
                        "type": "string"
                      },
                      "lang": {
                        "description": "Language code for search results (default: en)",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Maximum number of results to return (default: 5)",
                        "type": "number"
                      },
                      "location": {
                        "description": "Location settings for search",
                        "properties": {
                          "country": {
                            "description": "Country code for geolocation",
                            "type": "string"
                          },
                          "languages": {
                            "description": "Language codes for content",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "query": {
                        "description": "Search query string",
                        "type": "string"
                      },
                      "scrapeOptions": {
                        "description": "Options for scraping search results",
                        "properties": {
                          "formats": {
                            "description": "Content formats to extract from search results",
                            "items": {
                              "enum": [
                                "markdown",
                                "html",
                                "rawHtml"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "onlyMainContent": {
                            "description": "Extract only the main content from results",
                            "type": "boolean"
                          },
                          "waitFor": {
                            "description": "Time in milliseconds to wait for dynamic content",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "tbs": {
                        "description": "Time-based search filter",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_search"
                },
                {
                  "description": "Extract structured information from web pages using LLM. Supports both cloud AI and self-hosted LLM extraction.",
                  "inputschema": {
                    "properties": {
                      "allowExternalLinks": {
                        "description": "Allow extraction from external links",
                        "type": "boolean"
                      },
                      "enableWebSearch": {
                        "description": "Enable web search for additional context",
                        "type": "boolean"
                      },
                      "includeSubdomains": {
                        "description": "Include subdomains in extraction",
                        "type": "boolean"
                      },
                      "prompt": {
                        "description": "Prompt for the LLM extraction",
                        "type": "string"
                      },
                      "schema": {
                        "description": "JSON schema for structured data extraction",
                        "type": "object"
                      },
                      "systemPrompt": {
                        "description": "System prompt for LLM extraction",
                        "type": "string"
                      },
                      "urls": {
                        "description": "List of URLs to extract information from",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "urls"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_extract"
                },
                {
                  "description": "Conduct deep research on a query using web crawling, search, and AI analysis.",
                  "inputschema": {
                    "properties": {
                      "maxDepth": {
                        "description": "Maximum depth of research iterations (1-10)",
                        "type": "number"
                      },
                      "maxUrls": {
                        "description": "Maximum number of URLs to analyze (1-1000)",
                        "type": "number"
                      },
                      "query": {
                        "description": "The query to research",
                        "type": "string"
                      },
                      "timeLimit": {
                        "description": "Time limit in seconds (30-300)",
                        "type": "number"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_deep_research"
                },
                {
                  "description": "Generate standardized LLMs.txt file for a given URL, which provides context about how LLMs should interact with the website.",
                  "inputschema": {
                    "properties": {
                      "maxUrls": {
                        "description": "Maximum number of URLs to process (1-100, default: 10)",
                        "type": "number"
                      },
                      "showFullText": {
                        "description": "Whether to show the full LLMs-full.txt in the response",
                        "type": "boolean"
                      },
                      "url": {
                        "description": "The URL to generate LLMs.txt from",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_generate_llmstxt"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:58:55Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "metoro-io": {
      "mcpproviderid": "metoro-io",
      "self": "#/mcpproviders/metoro-io",
      "xid": "/mcpproviders/metoro-io",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:05.77354385Z",
      "modifiedat": "2025-05-26T16:42:05.77354385Z",

      "serversurl": "#/mcpproviders/metoro-io/servers",
      "servers": {
        "metoro-mcp-server": {
          "serverid": "metoro-mcp-server",
          "self": "#/mcpproviders/metoro-io/servers/metoro-mcp-server",
          "xid": "/mcpproviders/metoro-io/servers/metoro-mcp-server",

          "metaurl": "#/mcpproviders/metoro-io/servers/metoro-mcp-server/meta",
          "meta": {
            "serverid": "metoro-mcp-server",
            "self": "#/mcpproviders/metoro-io/servers/metoro-mcp-server/meta",
            "xid": "/mcpproviders/metoro-io/servers/metoro-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:05.77354385Z",
            "modifiedat": "2025-05-26T16:42:05.77354385Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/metoro-io/servers/metoro-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/metoro-io/servers/metoro-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "metoro-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/metoro-io/servers/metoro-mcp-server/versions/1",
              "xid": "/mcpproviders/metoro-io/servers/metoro-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.metoro-io/metoro-mcp-server",
              "isdefault": true,
              "description": "Metoro MCP Server",
              "createdat": "2025-05-26T16:42:05.77354385Z",
              "modifiedat": "2025-05-26T16:42:05.77354385Z",
              "ancestor": "1",
              "id": "95047d21-596b-4c32-b206-2ebd171733aa",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21lcklkIjoiOThlZDU1M2QtYzY4ZC00MDRhLWFhZjItNDM2ODllNWJiMGUzIiwiZW1haWwiOiJ0ZXN0QGNocmlzYmF0dGFyYmVlLmNvbSIsImV4cCI6MTgyMTI0NzIzN30.7G6alDpcZh_OThYj293Jce5rjeOBqAhOlANR_Fl5auw",
                      "name": "METORO_AUTH_TOKEN"
                    },
                    {
                      "description": "https://demo.us-east.metoro.io",
                      "name": "METORO_API_URL"
                    }
                  ],
                  "name": "metoro-io/metoro-mcp-server",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "900333594",
                "source": "github",
                "url": "https://github.com/metoro-io/metoro-mcp-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:25Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "metricool": {
      "mcpproviderid": "metricool",
      "self": "#/mcpproviders/metricool",
      "xid": "/mcpproviders/metricool",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:58.601870923Z",
      "modifiedat": "2025-05-26T16:41:58.601870923Z",

      "serversurl": "#/mcpproviders/metricool/servers",
      "servers": {
        "mcp-metricool": {
          "serverid": "mcp-metricool",
          "self": "#/mcpproviders/metricool/servers/mcp-metricool",
          "xid": "/mcpproviders/metricool/servers/mcp-metricool",

          "metaurl": "#/mcpproviders/metricool/servers/mcp-metricool/meta",
          "meta": {
            "serverid": "mcp-metricool",
            "self": "#/mcpproviders/metricool/servers/mcp-metricool/meta",
            "xid": "/mcpproviders/metricool/servers/mcp-metricool/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:58.601870923Z",
            "modifiedat": "2025-05-26T16:41:58.601870923Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/metricool/servers/mcp-metricool/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/metricool/servers/mcp-metricool/versions",
          "versions": {
            "1": {
              "serverid": "mcp-metricool",
              "versionid": "1",
              "self": "#/mcpproviders/metricool/servers/mcp-metricool/versions/1",
              "xid": "/mcpproviders/metricool/servers/mcp-metricool/versions/1",
              "epoch": 1,
              "name": "io.github.metricool/mcp-metricool",
              "isdefault": true,
              "description": "This is a Multi-Agent Collaboration Protocol (MCP) server for interacting with the Metricool API. It allows AI agents to access and analyze social media metrics and campaign data from your Metricool account.",
              "createdat": "2025-05-26T16:41:58.601870923Z",
              "modifiedat": "2025-05-26T16:41:58.601870923Z",
              "ancestor": "1",
              "id": "091ef217-8e6d-4e06-8cb9-bc5ffe5467b1",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cMETRICOOL_USER_TOKEN\u003e",
                      "name": "METRICOOL_USER_TOKEN"
                    },
                    {
                      "description": "\u003cMETRICOOL_USER_ID\u003e",
                      "name": "METRICOOL_USER_ID"
                    }
                  ],
                  "name": "mcp-metricool",
                  "registry_name": "unknown",
                  "version": "1.1.0"
                }
              ],
              "repository": {
                "id": "967888435",
                "source": "github",
                "url": "https://github.com/metricool/mcp-metricool"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:11Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mfukushim": {
      "mcpproviderid": "mfukushim",
      "self": "#/mcpproviders/mfukushim",
      "xid": "/mcpproviders/mfukushim",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:37.393147323Z",
      "modifiedat": "2025-05-26T16:42:37.393147323Z",

      "serversurl": "#/mcpproviders/mfukushim/servers",
      "servers": {
        "map-traveler-mcp": {
          "serverid": "map-traveler-mcp",
          "self": "#/mcpproviders/mfukushim/servers/map-traveler-mcp",
          "xid": "/mcpproviders/mfukushim/servers/map-traveler-mcp",

          "metaurl": "#/mcpproviders/mfukushim/servers/map-traveler-mcp/meta",
          "meta": {
            "serverid": "map-traveler-mcp",
            "self": "#/mcpproviders/mfukushim/servers/map-traveler-mcp/meta",
            "xid": "/mcpproviders/mfukushim/servers/map-traveler-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:37.393147323Z",
            "modifiedat": "2025-05-26T16:42:37.393147323Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mfukushim/servers/map-traveler-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mfukushim/servers/map-traveler-mcp/versions",
          "versions": {
            "1": {
              "serverid": "map-traveler-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/mfukushim/servers/map-traveler-mcp/versions/1",
              "xid": "/mcpproviders/mfukushim/servers/map-traveler-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.mfukushim/map-traveler-mcp",
              "isdefault": true,
              "description": "Virtual traveler library for MCP",
              "createdat": "2025-05-26T16:42:37.393147323Z",
              "modifiedat": "2025-05-26T16:42:37.393147323Z",
              "ancestor": "1",
              "id": "8b5bb45d-a025-4e7b-a185-dbb5e349af32",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "http://192.168.1.100:8188",
                      "name": "comfy_url"
                    },
                    {
                      "description": "C:\\Documents\\t2itest.json",
                      "name": "comfy_workflow_t2i"
                    },
                    {
                      "description": "C:\\Documents\\i2itest.json",
                      "name": "comfy_workflow_i2i"
                    },
                    {
                      "description": "ckpt_name='animagineXL40_v40.safetensors',denoise=0.65",
                      "name": "comfy_params"
                    }
                  ],
                  "name": "@mfukushim/map-traveler-mcp",
                  "registry_name": "unknown",
                  "version": "0.0.77"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "911417007",
                "source": "github",
                "url": "https://github.com/mfukushim/map-traveler-mcp"
              },
              "resources": [
                {
                  "description": "Has five custom prompt samples. When you import a prompt with Claude Desktop, Claude will act as a travel",
                  "name": "custom_prompt_samples",
                  "uritemplate": "/prompts/custom_samples"
                }
              ],
              "tools": [
                {
                  "description": "Gets information about the current travel avatar's location.",
                  "inputschema": {
                    "properties": {
                      "includeNearbyFacilities": {
                        "description": "Gets information about nearby facilities.",
                        "type": "boolean"
                      },
                      "includePhoto": {
                        "description": "Gets nearby Google Street View photos. If you have set up an image generation AI, it will synthesize the avatar.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "includePhoto",
                      "includeNearbyFacilities"
                    ],
                    "type": "object"
                  },
                  "name": "get_traveler_view_info"
                },
                {
                  "description": "Gets information about the current travel avatar's address and nearby facilities.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_traveler_location"
                },
                {
                  "description": "Reach a specified percentage of the destination (moveMode=skip only)",
                  "inputschema": {
                    "properties": {
                      "timeElapsedPercentage": {
                        "description": "Percent progress towards destination(0~100)",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "timeElapsedPercentage"
                    ],
                    "type": "object"
                  },
                  "name": "reach_a_percentage_of_destination"
                },
                {
                  "description": "Sets the current travel avatar's location.",
                  "inputschema": {
                    "properties": {
                      "address": {
                        "description": "Address information (exact address, or general name that Google Maps or Claude can recognize, etc.)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "address"
                    ],
                    "type": "object"
                  },
                  "name": "set_traveler_location"
                },
                {
                  "description": "Get the destination of the travel avatar you set",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_traveler_destination_address"
                },
                {
                  "description": "Set the destination of the travel avatar",
                  "inputschema": {
                    "properties": {
                      "address": {
                        "description": "Address information (exact address, or general name that Google Maps or Claude can recognize, etc.)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "address"
                    ],
                    "type": "object"
                  },
                  "name": "set_traveler_destination_address"
                },
                {
                  "description": "Start the journey at the destination.(moveMode=realtime only)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "start_traveler_journey"
                },
                {
                  "description": "Stop the journey.(moveMode=realtime only)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "stop_traveler_journey"
                },
                {
                  "description": "Set the traveler's attributes. Set the traveler's personality that you want to change dynamically, such as name and personality. However, if you use a role script, the script is more stable.",
                  "inputschema": {
                    "properties": {
                      "settings": {
                        "description": "Setting information such as name and personality.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "settings"
                    ],
                    "type": "object"
                  },
                  "name": "set_traveler_info"
                },
                {
                  "description": "Get the traveler's attributes. Get the traveler's personality.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_traveler_info"
                },
                {
                  "description": "Set the prompt when generating the travel avatar image. The default is an anime-style woman. The anime style is enforced to prevent fake images.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Prompt string",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "set_avatar_prompt"
                },
                {
                  "description": "Reset avatar generation prompts to default.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "reset_avatar_prompt"
                },
                {
                  "description": "Gets Bluesky SNS articles for the specified custom feed (feeds containing a specific tag).",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_sns_feeds"
                },
                {
                  "description": "Gets recent mentions (likes, replies) to Bluesky SNS posts that you made yourself.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_sns_mentions"
                },
                {
                  "description": "Posts an article to Bluesky SNS with the specified custom feed. Set a specific tag so that it can be determined that the post was generated by the travel bot.",
                  "inputschema": {
                    "properties": {
                      "message": {
                        "description": "article",
                        "type": "string"
                      }
                    },
                    "required": [
                      "message"
                    ],
                    "type": "object"
                  },
                  "name": "post_sns_writer"
                },
                {
                  "description": "Reply to the article with the specified id. Set a specific tag so that it can be determined that the post was generated by the travel bot.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "The ID of the post to reply to",
                        "type": "string"
                      },
                      "message": {
                        "description": "reply",
                        "type": "string"
                      }
                    },
                    "required": [
                      "message",
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "reply_sns_writer"
                },
                {
                  "description": "Add a like to the specified post.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "The ID of the post to like",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "add_like"
                },
                {
                  "description": "Guides you on how to set up features that have not yet been set.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "tips"
                },
                {
                  "description": "Get environment and image settings.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_setting"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:32Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mobile-next": {
      "mcpproviderid": "mobile-next",
      "self": "#/mcpproviders/mobile-next",
      "xid": "/mcpproviders/mobile-next",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:52.958586189Z",
      "modifiedat": "2025-05-26T16:41:52.958586189Z",

      "serversurl": "#/mcpproviders/mobile-next/servers",
      "servers": {
        "mobile-mcp": {
          "serverid": "mobile-mcp",
          "self": "#/mcpproviders/mobile-next/servers/mobile-mcp",
          "xid": "/mcpproviders/mobile-next/servers/mobile-mcp",

          "metaurl": "#/mcpproviders/mobile-next/servers/mobile-mcp/meta",
          "meta": {
            "serverid": "mobile-mcp",
            "self": "#/mcpproviders/mobile-next/servers/mobile-mcp/meta",
            "xid": "/mcpproviders/mobile-next/servers/mobile-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:52.958586189Z",
            "modifiedat": "2025-05-26T16:41:52.958586189Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mobile-next/servers/mobile-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mobile-next/servers/mobile-mcp/versions",
          "versions": {
            "1": {
              "serverid": "mobile-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/mobile-next/servers/mobile-mcp/versions/1",
              "xid": "/mcpproviders/mobile-next/servers/mobile-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.mobile-next/mobile-mcp",
              "isdefault": true,
              "description": "Model Context Protocol Server for Mobile Automation and Scraping (iOS, Android, Emulators, Simulators and Physical Devices)",
              "createdat": "2025-05-26T16:41:52.958586189Z",
              "modifiedat": "2025-05-26T16:41:52.958586189Z",
              "ancestor": "1",
              "id": "6fefc93f-3f03-47b0-9f42-21d5a5841490",
              "packages": [
                {
                  "name": "@mobilenext/mobile-mcp",
                  "registry_name": "npm",
                  "version": "0.0.17"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "956657893",
                "source": "github",
                "url": "https://github.com/mobile-next/mobile-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List all available devices. This includes both physical devices and simulators. If there is more than one device returned, you need to let the user select one of them.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "mobile_list_available_devices"
                },
                {
                  "description": "Select a device to use. This can be a simulator or an Android device. Use the list_available_devices tool to get a list of available devices.",
                  "inputschema": {
                    "properties": {
                      "device": {
                        "description": "The name of the device to select",
                        "type": "string"
                      },
                      "deviceType": {
                        "description": "The type of device to select",
                        "enum": [
                          "simulator",
                          "ios",
                          "android"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "device",
                      "deviceType"
                    ],
                    "type": "object"
                  },
                  "name": "mobile_use_device"
                },
                {
                  "description": "List all the installed apps on the device",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "mobile_list_apps"
                },
                {
                  "description": "Launch an app on mobile device. Use this to open a specific app. You can find the package name of the app by calling list_apps_on_device.",
                  "inputschema": {
                    "properties": {
                      "packageName": {
                        "description": "The package name of the app to launch",
                        "type": "string"
                      }
                    },
                    "required": [
                      "packageName"
                    ],
                    "type": "object"
                  },
                  "name": "mobile_launch_app"
                },
                {
                  "description": "Stop and terminate an app on mobile device",
                  "inputschema": {
                    "properties": {
                      "packageName": {
                        "description": "The package name of the app to terminate",
                        "type": "string"
                      }
                    },
                    "required": [
                      "packageName"
                    ],
                    "type": "object"
                  },
                  "name": "mobile_terminate_app"
                },
                {
                  "description": "Get the screen size of the mobile device in pixels",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "mobile_get_screen_size"
                },
                {
                  "description": "Click on the screen at given x,y coordinates",
                  "inputschema": {
                    "properties": {
                      "x": {
                        "description": "The x coordinate to click on the screen, in pixels",
                        "type": "number"
                      },
                      "y": {
                        "description": "The y coordinate to click on the screen, in pixels",
                        "type": "number"
                      }
                    },
                    "required": [
                      "x",
                      "y"
                    ],
                    "type": "object"
                  },
                  "name": "mobile_click_on_screen_at_coordinates"
                },
                {
                  "description": "List elements on screen and their coordinates, with display text or accessibility label. Do not cache this result.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "mobile_list_elements_on_screen"
                },
                {
                  "description": "Press a button on device",
                  "inputschema": {
                    "properties": {
                      "button": {
                        "description": "The button to press. Supported buttons: BACK (android only), HOME, VOLUME_UP, VOLUME_DOWN, ENTER",
                        "type": "string"
                      }
                    },
                    "required": [
                      "button"
                    ],
                    "type": "object"
                  },
                  "name": "mobile_press_button"
                },
                {
                  "description": "Open a URL in browser on device",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "description": "The URL to open",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "mobile_open_url"
                },
                {
                  "description": "Swipe on the screen",
                  "inputschema": {
                    "properties": {
                      "direction": {
                        "description": "The direction to swipe",
                        "enum": [
                          "up",
                          "down"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "direction"
                    ],
                    "type": "object"
                  },
                  "name": "swipe_on_screen"
                },
                {
                  "description": "Type text into the focused element",
                  "inputschema": {
                    "properties": {
                      "submit": {
                        "description": "Whether to submit the text. If true, the text will be submitted as if the user pressed the enter key.",
                        "type": "boolean"
                      },
                      "text": {
                        "description": "The text to type",
                        "type": "string"
                      }
                    },
                    "required": [
                      "text",
                      "submit"
                    ],
                    "type": "object"
                  },
                  "name": "mobile_type_keys"
                },
                {
                  "description": "Take a screenshot of the mobile device. Use this to understand what's on screen, if you need to press an element that is available through view hierarchy then you must list elements on screen instead. Do not cache this result.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "mobile_take_screenshot"
                },
                {
                  "description": "Change the screen orientation of the device",
                  "inputschema": {
                    "properties": {
                      "orientation": {
                        "description": "The desired orientation",
                        "enum": [
                          "portrait",
                          "landscape"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "orientation"
                    ],
                    "type": "object"
                  },
                  "name": "mobile_set_orientation"
                },
                {
                  "description": "Get the current screen orientation of the device",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "mobile_get_orientation"
                },
                {
                  "description": "Navigate to an item on screen with a specific label using D-pad. This is specifically for TV devices which depend on D-pad based traversal.",
                  "inputschema": {
                    "properties": {
                      "label": {
                        "description": "The label of the item to navigate to",
                        "type": "string"
                      }
                    },
                    "required": [
                      "label"
                    ],
                    "type": "object"
                  },
                  "name": "tv_dpad_navigate_to_item_with_label"
                },
                {
                  "description": "Press a button on the D-pad. This is specifically for TV Devices which depend on D-pad.",
                  "inputschema": {
                    "properties": {
                      "button": {
                        "description": "The D-pad button to press. Supported buttons: DPAD_CENTER (center), DPAD_UP(up), DPAD_DOWN(down), DPAD_LEFT(left), DPAD_RIGHT(right)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "button"
                    ],
                    "type": "object"
                  },
                  "name": "tv_dpad_press_button"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:36Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "momentohq": {
      "mcpproviderid": "momentohq",
      "self": "#/mcpproviders/momentohq",
      "xid": "/mcpproviders/momentohq",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:36.663010269Z",
      "modifiedat": "2025-05-26T16:42:36.663010269Z",

      "serversurl": "#/mcpproviders/momentohq/servers",
      "servers": {
        "mcp-momento": {
          "serverid": "mcp-momento",
          "self": "#/mcpproviders/momentohq/servers/mcp-momento",
          "xid": "/mcpproviders/momentohq/servers/mcp-momento",

          "metaurl": "#/mcpproviders/momentohq/servers/mcp-momento/meta",
          "meta": {
            "serverid": "mcp-momento",
            "self": "#/mcpproviders/momentohq/servers/mcp-momento/meta",
            "xid": "/mcpproviders/momentohq/servers/mcp-momento/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:36.663010269Z",
            "modifiedat": "2025-05-26T16:42:36.663010269Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/momentohq/servers/mcp-momento/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/momentohq/servers/mcp-momento/versions",
          "versions": {
            "1": {
              "serverid": "mcp-momento",
              "versionid": "1",
              "self": "#/mcpproviders/momentohq/servers/mcp-momento/versions/1",
              "xid": "/mcpproviders/momentohq/servers/mcp-momento/versions/1",
              "epoch": 1,
              "name": "io.github.momentohq/mcp-momento",
              "isdefault": true,
              "description": "A model context protocol server for Momento",
              "createdat": "2025-05-26T16:42:36.663010269Z",
              "modifiedat": "2025-05-26T16:42:36.663010269Z",
              "ancestor": "1",
              "id": "b99e5603-6346-4b2c-bae8-876c9b71e18b",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-api-key",
                      "name": "MOMENTO_API_KEY"
                    },
                    {
                      "description": "your-cache-name",
                      "name": "MOMENTO_CACHE_NAME"
                    },
                    {
                      "description": "60",
                      "name": "DEFAULT_TTL_SECONDS"
                    }
                  ],
                  "name": "@gomomento/mcp-momento",
                  "registry_name": "npm",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "960008375",
                "source": "github",
                "url": "https://github.com/momentohq/mcp-momento"
              },
              "resources": [],
              "tools": [
                {
                  "description": "get a key-value pair from the cache",
                  "inputschema": {
                    "properties": {
                      "cacheName": {
                        "description": "The name of the cache to get the value from. Uses the default cache name if not provided.",
                        "type": "string"
                      },
                      "key": {
                        "description": "The key to get from the cache",
                        "type": "string"
                      }
                    },
                    "required": [
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "get"
                },
                {
                  "description": "set a key-value pair in the cache",
                  "inputschema": {
                    "properties": {
                      "cacheName": {
                        "description": "The name of the cache to set the value in. Uses the default cache name if not provided.",
                        "type": "string"
                      },
                      "key": {
                        "description": "The key to set in the cache",
                        "type": "string"
                      },
                      "ttl": {
                        "description": "The TTL for the key in seconds",
                        "type": "number"
                      },
                      "value": {
                        "description": "The value to set in the cache",
                        "type": "string"
                      }
                    },
                    "required": [
                      "key",
                      "value"
                    ],
                    "type": "object"
                  },
                  "name": "set"
                },
                {
                  "description": "Lists all cache names in your Momento account",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list-caches"
                },
                {
                  "description": "Creates a new cache",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "description": "The name of the cache to create",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "create-cache"
                },
                {
                  "description": "Deletes a cache and all contained values from your Momento account",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "description": "The name of the cache to delete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "delete-cache"
                },
                {
                  "description": "publish a value to a topic",
                  "inputschema": {
                    "properties": {
                      "cacheName": {
                        "description": "The name of the cache to set the value in. Uses the default cache name if not provided.",
                        "type": "string"
                      },
                      "topicName": {
                        "description": "The name of the topic to publish the value to. Uses the default topic name if not provided.",
                        "type": "string"
                      },
                      "value": {
                        "description": "The value to publish",
                        "type": "string"
                      }
                    },
                    "required": [
                      "value"
                    ],
                    "type": "object"
                  },
                  "name": "publish"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:31Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mongodb-js": {
      "mcpproviderid": "mongodb-js",
      "self": "#/mcpproviders/mongodb-js",
      "xid": "/mcpproviders/mongodb-js",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:05.258939101Z",
      "modifiedat": "2025-05-26T16:42:05.258939101Z",

      "serversurl": "#/mcpproviders/mongodb-js/servers",
      "servers": {
        "mongodb-mcp-server": {
          "serverid": "mongodb-mcp-server",
          "self": "#/mcpproviders/mongodb-js/servers/mongodb-mcp-server",
          "xid": "/mcpproviders/mongodb-js/servers/mongodb-mcp-server",

          "metaurl": "#/mcpproviders/mongodb-js/servers/mongodb-mcp-server/meta",
          "meta": {
            "serverid": "mongodb-mcp-server",
            "self": "#/mcpproviders/mongodb-js/servers/mongodb-mcp-server/meta",
            "xid": "/mcpproviders/mongodb-js/servers/mongodb-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:05.258939101Z",
            "modifiedat": "2025-05-26T16:42:05.258939101Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mongodb-js/servers/mongodb-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mongodb-js/servers/mongodb-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "mongodb-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/mongodb-js/servers/mongodb-mcp-server/versions/1",
              "xid": "/mcpproviders/mongodb-js/servers/mongodb-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.mongodb-js/mongodb-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol server to connect to MongoDB databases and MongoDB Atlas Clusters.",
              "createdat": "2025-05-26T16:42:05.258939101Z",
              "modifiedat": "2025-05-26T16:42:05.258939101Z",
              "ancestor": "1",
              "id": "9fd2c1fb-b8a6-4411-89cf-d4612cc3a539",
              "packages": [
                {
                  "name": "mongodb-mcp-server",
                  "package_arguments": [
                    {
                      "default": "--apiClientId your-atlas-service-accounts-client-id",
                      "description": "your-atlas-service-accounts-client-id",
                      "format": "string",
                      "is_required": true,
                      "name": "--apiClientId your-atlas-service-accounts-client-id",
                      "type": "named",
                      "value": "--apiClientId your-atlas-service-accounts-client-id",
                      "value_hint": "your-atlas-service-accounts-client-id"
                    },
                    {
                      "default": "--apiClientSecret your-atlas-service-accounts-client-secret",
                      "description": "your-atlas-service-accounts-client-secret",
                      "format": "string",
                      "is_required": true,
                      "name": "--apiClientSecret your-atlas-service-accounts-client-secret",
                      "type": "named",
                      "value": "--apiClientSecret your-atlas-service-accounts-client-secret",
                      "value_hint": "your-atlas-service-accounts-client-secret"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "0.1.1"
                }
              ],
              "repository": {
                "id": "960484071",
                "source": "github",
                "url": "https://github.com/mongodb-js/mongodb-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:34Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "morningstar": {
      "mcpproviderid": "morningstar",
      "self": "#/mcpproviders/morningstar",
      "xid": "/mcpproviders/morningstar",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:43.259690854Z",
      "modifiedat": "2025-05-26T16:41:43.259690854Z",

      "serversurl": "#/mcpproviders/morningstar/servers",
      "servers": {
        "morningstar-mcp-server": {
          "serverid": "morningstar-mcp-server",
          "self": "#/mcpproviders/morningstar/servers/morningstar-mcp-server",
          "xid": "/mcpproviders/morningstar/servers/morningstar-mcp-server",

          "metaurl": "#/mcpproviders/morningstar/servers/morningstar-mcp-server/meta",
          "meta": {
            "serverid": "morningstar-mcp-server",
            "self": "#/mcpproviders/morningstar/servers/morningstar-mcp-server/meta",
            "xid": "/mcpproviders/morningstar/servers/morningstar-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:43.259690854Z",
            "modifiedat": "2025-05-26T16:41:43.259690854Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/morningstar/servers/morningstar-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/morningstar/servers/morningstar-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "morningstar-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/morningstar/servers/morningstar-mcp-server/versions/1",
              "xid": "/mcpproviders/morningstar/servers/morningstar-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.morningstar/morningstar-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:43.259690854Z",
              "modifiedat": "2025-05-26T16:41:43.259690854Z",
              "ancestor": "1",
              "id": "3f0811e0-35b7-4e9b-a610-d8aa0b71400d",
              "packages": [
                {
                  "name": "Morningstar/morningstar-mcp-server",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "956037631",
                "source": "github",
                "url": "https://github.com/Morningstar/morningstar-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:44Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "motherduckdb": {
      "mcpproviderid": "motherduckdb",
      "self": "#/mcpproviders/motherduckdb",
      "xid": "/mcpproviders/motherduckdb",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:23.93610953Z",
      "modifiedat": "2025-05-26T16:42:23.93610953Z",

      "serversurl": "#/mcpproviders/motherduckdb/servers",
      "servers": {
        "mcp-server-motherduck": {
          "serverid": "mcp-server-motherduck",
          "self": "#/mcpproviders/motherduckdb/servers/mcp-server-motherduck",
          "xid": "/mcpproviders/motherduckdb/servers/mcp-server-motherduck",

          "metaurl": "#/mcpproviders/motherduckdb/servers/mcp-server-motherduck/meta",
          "meta": {
            "serverid": "mcp-server-motherduck",
            "self": "#/mcpproviders/motherduckdb/servers/mcp-server-motherduck/meta",
            "xid": "/mcpproviders/motherduckdb/servers/mcp-server-motherduck/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:23.93610953Z",
            "modifiedat": "2025-05-26T16:42:23.93610953Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/motherduckdb/servers/mcp-server-motherduck/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/motherduckdb/servers/mcp-server-motherduck/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-motherduck",
              "versionid": "1",
              "self": "#/mcpproviders/motherduckdb/servers/mcp-server-motherduck/versions/1",
              "xid": "/mcpproviders/motherduckdb/servers/mcp-server-motherduck/versions/1",
              "epoch": 1,
              "name": "io.github.motherduckdb/mcp-server-motherduck",
              "isdefault": true,
              "description": "MCP server for DuckDB and MotherDuck",
              "createdat": "2025-05-26T16:42:23.93610953Z",
              "modifiedat": "2025-05-26T16:42:23.93610953Z",
              "ancestor": "1",
              "id": "b3fa3fa4-901d-4584-82cf-d027dbdf290b",
              "packages": [
                {
                  "name": "mcp-server-motherduck",
                  "package_arguments": [
                    {
                      "default": "--directory /path/to/your/local/mcp-server-motherduck",
                      "description": "--directory /path/to/your/local/mcp-server-motherduck",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory /path/to/your/local/mcp-server-motherduck",
                      "type": "named",
                      "value": "--directory /path/to/your/local/mcp-server-motherduck",
                      "value_hint": "/path/to/your/local/mcp-server-motherduck"
                    },
                    {
                      "default": "mcp-server-motherduck",
                      "description": "mcp-server-motherduck",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp-server-motherduck",
                      "value_hint": "mcp-server-motherduck"
                    },
                    {
                      "default": "--db-path md:",
                      "description": "--db-path md:",
                      "format": "string",
                      "is_required": true,
                      "name": "--db-path md:",
                      "type": "named",
                      "value": "--db-path md:",
                      "value_hint": "md:"
                    },
                    {
                      "default": "--motherduck-token \u003cYOUR_MOTHERDUCK_TOKEN_HERE\u003e",
                      "description": "--motherduck-token \u003cYOUR_MOTHERDUCK_TOKEN_HERE\u003e",
                      "format": "string",
                      "is_required": true,
                      "name": "--motherduck-token \u003cYOUR_MOTHERDUCK_TOKEN_HERE\u003e",
                      "type": "named",
                      "value": "--motherduck-token \u003cYOUR_MOTHERDUCK_TOKEN_HERE\u003e",
                      "value_hint": "\u003cYOUR_MOTHERDUCK_TOKEN_HERE\u003e"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.4.2"
                }
              ],
              "prompts": [
                {
                  "description": "A prompt to initialize a connection to DuckDB or MotherDuck and start working with it",
                  "name": "duckdb-motherduck-initial-prompt"
                }
              ],
              "repository": {
                "id": "902619224",
                "source": "github",
                "url": "https://github.com/motherduckdb/mcp-server-motherduck"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Execute a SQL query on the DuckDB or MotherDuck database",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "query"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:38Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mschneider82": {
      "mcpproviderid": "mschneider82",
      "self": "#/mcpproviders/mschneider82",
      "xid": "/mcpproviders/mschneider82",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:43.565900279Z",
      "modifiedat": "2025-05-26T16:41:43.565900279Z",

      "serversurl": "#/mcpproviders/mschneider82/servers",
      "servers": {
        "mcp-openweather": {
          "serverid": "mcp-openweather",
          "self": "#/mcpproviders/mschneider82/servers/mcp-openweather",
          "xid": "/mcpproviders/mschneider82/servers/mcp-openweather",

          "metaurl": "#/mcpproviders/mschneider82/servers/mcp-openweather/meta",
          "meta": {
            "serverid": "mcp-openweather",
            "self": "#/mcpproviders/mschneider82/servers/mcp-openweather/meta",
            "xid": "/mcpproviders/mschneider82/servers/mcp-openweather/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:43.565900279Z",
            "modifiedat": "2025-05-26T16:41:43.565900279Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mschneider82/servers/mcp-openweather/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mschneider82/servers/mcp-openweather/versions",
          "versions": {
            "1": {
              "serverid": "mcp-openweather",
              "versionid": "1",
              "self": "#/mcpproviders/mschneider82/servers/mcp-openweather/versions/1",
              "xid": "/mcpproviders/mschneider82/servers/mcp-openweather/versions/1",
              "epoch": 1,
              "name": "io.github.mschneider82/mcp-openweather",
              "isdefault": true,
              "description": "mcp server for openweather free api",
              "createdat": "2025-05-26T16:41:43.565900279Z",
              "modifiedat": "2025-05-26T16:41:43.565900279Z",
              "ancestor": "1",
              "id": "54a7e4fa-a7d1-476f-bd25-2f417766c3b5",
              "packages": [
                {
                  "name": "mschneider82/mcp-openweather",
                  "package_arguments": [
                    {
                      "default": "Berlin",
                      "description": "The city for which weather is requested",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "Berlin",
                      "value_hint": "Berlin"
                    },
                    {
                      "default": "units c",
                      "description": "Units to display temperature (c|f|k)",
                      "format": "string",
                      "name": "units c",
                      "type": "named",
                      "value": "units c",
                      "value_hint": "c"
                    },
                    {
                      "default": "lang en",
                      "description": "Language code for the response (en|de|fr|...)",
                      "format": "string",
                      "name": "lang en",
                      "type": "named",
                      "value": "lang en",
                      "value_hint": "en"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "982749772",
                "source": "github",
                "url": "https://github.com/mschneider82/mcp-openweather"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:11Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "msgbyte": {
      "mcpproviderid": "msgbyte",
      "self": "#/mcpproviders/msgbyte",
      "xid": "/mcpproviders/msgbyte",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:28.564451275Z",
      "modifiedat": "2025-05-26T16:41:28.564451275Z",

      "serversurl": "#/mcpproviders/msgbyte/servers",
      "servers": {
        "tianji": {
          "serverid": "tianji",
          "self": "#/mcpproviders/msgbyte/servers/tianji",
          "xid": "/mcpproviders/msgbyte/servers/tianji",

          "metaurl": "#/mcpproviders/msgbyte/servers/tianji/meta",
          "meta": {
            "serverid": "tianji",
            "self": "#/mcpproviders/msgbyte/servers/tianji/meta",
            "xid": "/mcpproviders/msgbyte/servers/tianji/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:28.564451275Z",
            "modifiedat": "2025-05-26T16:41:28.564451275Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/msgbyte/servers/tianji/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/msgbyte/servers/tianji/versions",
          "versions": {
            "1": {
              "serverid": "tianji",
              "versionid": "1",
              "self": "#/mcpproviders/msgbyte/servers/tianji/versions/1",
              "xid": "/mcpproviders/msgbyte/servers/tianji/versions/1",
              "epoch": 1,
              "name": "io.github.msgbyte/tianji",
              "isdefault": true,
              "description": "Tianji: Insight into everything, Website Analytics + Uptime Monitor + Server Status. not only another GA alternatives",
              "createdat": "2025-05-26T16:41:28.564451275Z",
              "modifiedat": "2025-05-26T16:41:28.564451275Z",
              "ancestor": "1",
              "id": "9dd7f908-4c1b-4ba3-a33f-86be881cc8b6",
              "packages": [
                {
                  "name": "tianji",
                  "registry_name": "unknown",
                  "version": "1.20.9"
                }
              ],
              "repository": {
                "id": "685392779",
                "source": "github",
                "url": "https://github.com/msgbyte/tianji"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:07Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mytechnotalent": {
      "mcpproviderid": "mytechnotalent",
      "self": "#/mcpproviders/mytechnotalent",
      "xid": "/mcpproviders/mytechnotalent",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:25.41412637Z",
      "modifiedat": "2025-05-26T16:41:25.41412637Z",

      "serversurl": "#/mcpproviders/mytechnotalent/servers",
      "servers": {
        "malwarebazaar_mcp": {
          "serverid": "malwarebazaar_mcp",
          "self": "#/mcpproviders/mytechnotalent/servers/malwarebazaar_mcp",
          "xid": "/mcpproviders/mytechnotalent/servers/malwarebazaar_mcp",

          "metaurl": "#/mcpproviders/mytechnotalent/servers/malwarebazaar_mcp/meta",
          "meta": {
            "serverid": "malwarebazaar_mcp",
            "self": "#/mcpproviders/mytechnotalent/servers/malwarebazaar_mcp/meta",
            "xid": "/mcpproviders/mytechnotalent/servers/malwarebazaar_mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:25.41412637Z",
            "modifiedat": "2025-05-26T16:41:25.41412637Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mytechnotalent/servers/malwarebazaar_mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mytechnotalent/servers/malwarebazaar_mcp/versions",
          "versions": {
            "1": {
              "serverid": "malwarebazaar_mcp",
              "versionid": "1",
              "self": "#/mcpproviders/mytechnotalent/servers/malwarebazaar_mcp/versions/1",
              "xid": "/mcpproviders/mytechnotalent/servers/malwarebazaar_mcp/versions/1",
              "epoch": 1,
              "name": "io.github.mytechnotalent/malwarebazaar_mcp",
              "isdefault": true,
              "description": "An AI-driven MCP server that autonomously interfaces with Malware Bazaar, delivering real-time threat intel and sample metadata for authorized cybersecurity research workflows.",
              "createdat": "2025-05-26T16:41:25.41412637Z",
              "modifiedat": "2025-05-26T16:41:25.41412637Z",
              "ancestor": "1",
              "id": "b8bb0138-d147-4982-85b0-dedbd2e004a5",
              "packages": [
                {
                  "name": "mytechnotalent/MalwareBazaar_MCP",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "965127478",
                "source": "github",
                "url": "https://github.com/mytechnotalent/MalwareBazaar_MCP"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:35Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "needle-ai": {
      "mcpproviderid": "needle-ai",
      "self": "#/mcpproviders/needle-ai",
      "xid": "/mcpproviders/needle-ai",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:26.782254884Z",
      "modifiedat": "2025-05-26T16:41:26.782254884Z",

      "serversurl": "#/mcpproviders/needle-ai/servers",
      "servers": {
        "needle-mcp": {
          "serverid": "needle-mcp",
          "self": "#/mcpproviders/needle-ai/servers/needle-mcp",
          "xid": "/mcpproviders/needle-ai/servers/needle-mcp",

          "metaurl": "#/mcpproviders/needle-ai/servers/needle-mcp/meta",
          "meta": {
            "serverid": "needle-mcp",
            "self": "#/mcpproviders/needle-ai/servers/needle-mcp/meta",
            "xid": "/mcpproviders/needle-ai/servers/needle-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:26.782254884Z",
            "modifiedat": "2025-05-26T16:41:26.782254884Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/needle-ai/servers/needle-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/needle-ai/servers/needle-mcp/versions",
          "versions": {
            "1": {
              "serverid": "needle-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/needle-ai/servers/needle-mcp/versions/1",
              "xid": "/mcpproviders/needle-ai/servers/needle-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.needle-ai/needle-mcp",
              "isdefault": true,
              "description": "Integration of Needle in modelcontextprotocol",
              "createdat": "2025-05-26T16:41:26.782254884Z",
              "modifiedat": "2025-05-26T16:41:26.782254884Z",
              "ancestor": "1",
              "id": "be6eb263-3492-4073-b28f-0fd33d070982",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_needle_api_key",
                      "name": "NEEDLE_API_KEY"
                    }
                  ],
                  "name": "needle-mcp",
                  "package_arguments": [
                    {
                      "default": "/path/to/needle-mcp",
                      "description": "/path/to/needle-mcp",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "/path/to/needle-mcp",
                      "value_hint": "/path/to/needle-mcp"
                    },
                    {
                      "default": "needle-mcp",
                      "description": "needle-mcp",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "needle-mcp",
                      "value_hint": "needle-mcp"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "903772115",
                "source": "github",
                "url": "https://github.com/needle-ai/needle-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve a complete list of all Needle document collections accessible to your account. Returns detailed information including collection IDs, names, and creation dates. Use this tool when you need to: - Get an overview of available document collections - Find collection IDs for subsequent operations - Verify collection existence before performing operations The response includes metadata that's required for other Needle operations.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "needle_list_collections"
                },
                {
                  "description": "Create a new document collection in Needle for organizing and searching documents. A collection acts as a container for related documents and enables semantic search across its contents. Use this tool when you need to: - Start a new document organization - Group related documents together - Set up a searchable document repository Returns a collection ID that's required for subsequent operations. Choose a descriptive name that reflects the collection's purpose for better organization.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "description": "A clear, descriptive name for the collection that reflects its purpose and contents",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "needle_create_collection"
                },
                {
                  "description": "Fetch comprehensive metadata about a specific Needle collection. Provides detailed information about the collection's configuration, creation date, and current status. Use this tool when you need to: - Verify a collection's existence and configuration - Check collection metadata before operations - Get creation date and other attributes Requires a valid collection ID and returns detailed collection metadata. Will error if collection doesn't exist.",
                  "inputschema": {
                    "properties": {
                      "collection_id": {
                        "description": "The unique collection identifier returned from needle_create_collection or needle_list_collections",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_id"
                    ],
                    "type": "object"
                  },
                  "name": "needle_get_collection_details"
                },
                {
                  "description": "Retrieve detailed statistical information about a Needle collection's contents and status. Provides metrics including: - Total number of documents - Processing status of documents - Storage usage and limits - Index status and health Use this tool to: - Monitor collection size and growth - Verify processing completion - Check collection health before operations Essential for ensuring collection readiness before performing searches.",
                  "inputschema": {
                    "properties": {
                      "collection_id": {
                        "description": "The unique collection identifier to get statistics for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_id"
                    ],
                    "type": "object"
                  },
                  "name": "needle_get_collection_stats"
                },
                {
                  "description": "List all documents stored within a specific Needle collection with their current status. Returns detailed information about each file including: - File ID and name - Processing status (pending, processing, complete, error) - Upload date and metadata Use this tool when you need to: - Inventory available documents - Check processing status of uploads - Get file IDs for reference - Verify document availability before searching Essential for monitoring document processing completion before performing searches.",
                  "inputschema": {
                    "properties": {
                      "collection_id": {
                        "description": "The unique collection identifier to list files from",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_id"
                    ],
                    "type": "object"
                  },
                  "name": "needle_list_files"
                },
                {
                  "description": "Add a new document to a Needle collection by providing a URL for download. Supports multiple file formats including: - PDF documents - Microsoft Word files (DOC, DOCX) - Plain text files (TXT) - Web pages (HTML) The document will be: 1. Downloaded from the provided URL 2. Processed for text extraction 3. Indexed for semantic search Use this tool when you need to: - Add new documents to a collection - Make documents searchable - Expand your knowledge base Important: Documents require processing time before they're searchable. Check processing status using needle_list_files before searching new content.",
                  "inputschema": {
                    "properties": {
                      "collection_id": {
                        "description": "The unique collection identifier where the file will be added",
                        "type": "string"
                      },
                      "name": {
                        "description": "A descriptive filename that will help identify this document in results",
                        "type": "string"
                      },
                      "url": {
                        "description": "Public URL where the document can be downloaded from",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_id",
                      "name",
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "needle_add_file"
                },
                {
                  "description": "Perform intelligent semantic search across documents in a Needle collection. This tool uses advanced embedding technology to find relevant content based on meaning, not just keywords. The search: - Understands natural language queries - Finds conceptually related content - Returns relevant text passages with source information - Ranks results by semantic relevance Use this tool when you need to: - Find specific information within documents - Answer questions from document content - Research topics across multiple documents - Locate relevant passages and their sources More effective than traditional keyword search for: - Natural language questions - Conceptual queries - Finding related content Returns matching text passages with their source file IDs.",
                  "inputschema": {
                    "properties": {
                      "collection_id": {
                        "description": "The unique collection identifier to search within",
                        "type": "string"
                      },
                      "query": {
                        "description": "Natural language query describing the information you're looking for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_id",
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "needle_search"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:40Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "neo4j-contrib": {
      "mcpproviderid": "neo4j-contrib",
      "self": "#/mcpproviders/neo4j-contrib",
      "xid": "/mcpproviders/neo4j-contrib",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:31.213151876Z",
      "modifiedat": "2025-05-26T16:41:31.213151876Z",

      "serversurl": "#/mcpproviders/neo4j-contrib/servers",
      "servers": {
        "mcp-neo4j": {
          "serverid": "mcp-neo4j",
          "self": "#/mcpproviders/neo4j-contrib/servers/mcp-neo4j",
          "xid": "/mcpproviders/neo4j-contrib/servers/mcp-neo4j",

          "metaurl": "#/mcpproviders/neo4j-contrib/servers/mcp-neo4j/meta",
          "meta": {
            "serverid": "mcp-neo4j",
            "self": "#/mcpproviders/neo4j-contrib/servers/mcp-neo4j/meta",
            "xid": "/mcpproviders/neo4j-contrib/servers/mcp-neo4j/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:31.213151876Z",
            "modifiedat": "2025-05-26T16:41:31.213151876Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/neo4j-contrib/servers/mcp-neo4j/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/neo4j-contrib/servers/mcp-neo4j/versions",
          "versions": {
            "1": {
              "serverid": "mcp-neo4j",
              "versionid": "1",
              "self": "#/mcpproviders/neo4j-contrib/servers/mcp-neo4j/versions/1",
              "xid": "/mcpproviders/neo4j-contrib/servers/mcp-neo4j/versions/1",
              "epoch": 1,
              "name": "io.github.neo4j-contrib/mcp-neo4j",
              "isdefault": true,
              "description": "Model Context Protocol with Neo4j",
              "createdat": "2025-05-26T16:41:31.213151876Z",
              "modifiedat": "2025-05-26T16:41:31.213151876Z",
              "ancestor": "1",
              "id": "ee33c4cb-5bdf-45c0-88a8-ba2d237189f9",
              "packages": [
                {
                  "name": "neo4j-contrib/mcp-neo4j",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "897992568",
                "source": "github",
                "url": "https://github.com/neo4j-contrib/mcp-neo4j"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:42Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "neondatabase": {
      "mcpproviderid": "neondatabase",
      "self": "#/mcpproviders/neondatabase",
      "xid": "/mcpproviders/neondatabase",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:34.123504605Z",
      "modifiedat": "2025-05-26T16:41:34.123504605Z",

      "serversurl": "#/mcpproviders/neondatabase/servers",
      "servers": {},
      "serverscount": 0
    },
    "neondatabase-labs": {
      "mcpproviderid": "neondatabase-labs",
      "self": "#/mcpproviders/neondatabase-labs",
      "xid": "/mcpproviders/neondatabase-labs",
      "epoch": 1,
      "name": "neondatabase labs",
      "description": "Neon's experimental projects",
      "documentation": "https://github.com/neondatabase-labs",
      "createdat": "2025-05-26T16:41:22.06260114Z",
      "modifiedat": "2025-05-26T16:41:22.06260114Z",

      "serversurl": "#/mcpproviders/neondatabase/servers",
      "servers": {
        "mcp-server-neon": {
          "serverid": "mcp-server-neon",
          "self": "#/mcpproviders/neondatabase/servers/mcp-server-neon",
          "xid": "/mcpproviders/neondatabase/servers/mcp-server-neon",

          "metaurl": "#/mcpproviders/neondatabase/servers/mcp-server-neon/meta",
          "meta": {
            "serverid": "mcp-server-neon",
            "self": "#/mcpproviders/neondatabase/servers/mcp-server-neon/meta",
            "xid": "/mcpproviders/neondatabase/servers/mcp-server-neon/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:34.123504605Z",
            "modifiedat": "2025-05-26T16:41:34.123504605Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/neondatabase/servers/mcp-server-neon/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/neondatabase/servers/mcp-server-neon/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-neon",
              "versionid": "1",
              "self": "#/mcpproviders/neondatabase/servers/mcp-server-neon/versions/1",
              "xid": "/mcpproviders/neondatabase/servers/mcp-server-neon/versions/1",
              "epoch": 1,
              "name": "io.github.neondatabase/mcp-server-neon",
              "isdefault": true,
              "description": "MCP server for interacting with Neon Management API and databases",
              "createdat": "2025-05-26T16:41:34.123504605Z",
              "modifiedat": "2025-05-26T16:41:34.123504605Z",
              "ancestor": "1",
              "id": "9a6bd437-fe20-4f40-b776-5507f2871441",
              "packages": [
                {
                  "name": "@neondatabase/mcp-server-neon",
                  "package_arguments": [
                    {
                      "default": "start",
                      "description": "Start the Neon MCP server",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "start",
                      "value_hint": "start"
                    },
                    {
                      "default": "\u003cYOUR_NEON_API_KEY\u003e",
                      "description": "Your Neon API key",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "\u003cYOUR_NEON_API_KEY\u003e",
                      "value_hint": "\u003cYOUR_NEON_API_KEY\u003e"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.4.0"
                }
              ],
              "repository": {
                "id": "896203400",
                "source": "github",
                "url": "https://github.com/neondatabase-labs/mcp-server-neon"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:45Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "nkapila6": {
      "mcpproviderid": "nkapila6",
      "self": "#/mcpproviders/nkapila6",
      "xid": "/mcpproviders/nkapila6",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:47.817887751Z",
      "modifiedat": "2025-05-26T16:41:47.817887751Z",

      "serversurl": "#/mcpproviders/nkapila6/servers",
      "servers": {
        "mcp-local-rag": {
          "serverid": "mcp-local-rag",
          "self": "#/mcpproviders/nkapila6/servers/mcp-local-rag",
          "xid": "/mcpproviders/nkapila6/servers/mcp-local-rag",

          "metaurl": "#/mcpproviders/nkapila6/servers/mcp-local-rag/meta",
          "meta": {
            "serverid": "mcp-local-rag",
            "self": "#/mcpproviders/nkapila6/servers/mcp-local-rag/meta",
            "xid": "/mcpproviders/nkapila6/servers/mcp-local-rag/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:47.817887751Z",
            "modifiedat": "2025-05-26T16:41:47.817887751Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/nkapila6/servers/mcp-local-rag/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/nkapila6/servers/mcp-local-rag/versions",
          "versions": {
            "1": {
              "serverid": "mcp-local-rag",
              "versionid": "1",
              "self": "#/mcpproviders/nkapila6/servers/mcp-local-rag/versions/1",
              "xid": "/mcpproviders/nkapila6/servers/mcp-local-rag/versions/1",
              "epoch": 1,
              "name": "io.github.nkapila6/mcp-local-rag",
              "isdefault": true,
              "description": "\"primitive\" RAG-like web search model context protocol (MCP) server that runs locally. ✨ no APIs ✨",
              "createdat": "2025-05-26T16:41:47.817887751Z",
              "modifiedat": "2025-05-26T16:41:47.817887751Z",
              "ancestor": "1",
              "id": "93be69a3-6dbf-4e3c-aa47-a4d5a15f0588",
              "packages": [
                {
                  "name": "mcp-local-rag",
                  "package_arguments": [
                    {
                      "default": "--directory \u003cpath where this folder is located\u003e/mcp-local-rag/",
                      "description": "A named argument for directory.",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory \u003cpath where this folder is located\u003e/mcp-local-rag/",
                      "type": "named",
                      "value": "--directory \u003cpath where this folder is located\u003e/mcp-local-rag/",
                      "value_hint": "\u003cpath where this folder is located\u003e/mcp-local-rag/"
                    },
                    {
                      "default": "src/mcp_local_rag/main.py",
                      "description": "A positional argument for the Python script.",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "src/mcp_local_rag/main.py",
                      "value_hint": "src/mcp_local_rag/main.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "947802631",
                "source": "github",
                "url": "https://github.com/nkapila6/mcp-local-rag"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Search the web for a given query. Give back context to the LLM with a RAG-like similarity sort.",
                  "inputschema": {
                    "properties": {
                      "num_results": {
                        "description": "Number of results to return.",
                        "type": "integer"
                      },
                      "query": {
                        "description": "The query to search for.",
                        "type": "string"
                      },
                      "top_k": {
                        "description": "Use top \"k\" results for content.",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "rag_search"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:54Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "nota": {
      "mcpproviderid": "nota",
      "self": "#/mcpproviders/nota",
      "xid": "/mcpproviders/nota",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:43.398797756Z",
      "modifiedat": "2025-05-26T16:41:43.398797756Z",

      "serversurl": "#/mcpproviders/nota/servers",
      "servers": {
        "gyazo-mcp-server": {
          "serverid": "gyazo-mcp-server",
          "self": "#/mcpproviders/nota/servers/gyazo-mcp-server",
          "xid": "/mcpproviders/nota/servers/gyazo-mcp-server",

          "metaurl": "#/mcpproviders/nota/servers/gyazo-mcp-server/meta",
          "meta": {
            "serverid": "gyazo-mcp-server",
            "self": "#/mcpproviders/nota/servers/gyazo-mcp-server/meta",
            "xid": "/mcpproviders/nota/servers/gyazo-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:43.398797756Z",
            "modifiedat": "2025-05-26T16:41:43.398797756Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/nota/servers/gyazo-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/nota/servers/gyazo-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "gyazo-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/nota/servers/gyazo-mcp-server/versions/1",
              "xid": "/mcpproviders/nota/servers/gyazo-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.nota/gyazo-mcp-server",
              "isdefault": true,
              "description": "Official Model Context Protocol server for Gyazo",
              "createdat": "2025-05-26T16:41:43.398797756Z",
              "modifiedat": "2025-05-26T16:41:43.398797756Z",
              "ancestor": "1",
              "id": "11e3a5f5-867c-4f1e-ba79-1b803550fb1a",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-access-token-here",
                      "name": "GYAZO_ACCESS_TOKEN"
                    }
                  ],
                  "name": "@notainc/gyazo-mcp-server",
                  "package_arguments": [
                    {
                      "default": "-i",
                      "description": "docker named argument for stdin",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i",
                      "value_hint": "-i"
                    },
                    {
                      "default": "--rm",
                      "description": "docker named argument for removing the container after exit",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm",
                      "value_hint": "--rm"
                    },
                    {
                      "default": "-e",
                      "description": "docker named argument to set environment variable",
                      "format": "string",
                      "is_required": true,
                      "name": "-e",
                      "type": "named",
                      "value": "-e",
                      "value_hint": "-e"
                    },
                    {
                      "default": "GYAZO_ACCESS_TOKEN",
                      "description": "docker positional argument indicating the image name",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "GYAZO_ACCESS_TOKEN",
                      "value_hint": "GYAZO_ACCESS_TOKEN"
                    },
                    {
                      "default": "gyazo-mcp-server",
                      "description": "docker positional argument indicating the package to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "gyazo-mcp-server",
                      "value_hint": "gyazo-mcp-server"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "922406701",
                "source": "github",
                "url": "https://github.com/nota/gyazo-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:10Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "nspady": {
      "mcpproviderid": "nspady",
      "self": "#/mcpproviders/nspady",
      "xid": "/mcpproviders/nspady",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:14.927966614Z",
      "modifiedat": "2025-05-26T16:42:14.927966614Z",

      "serversurl": "#/mcpproviders/nspady/servers",
      "servers": {
        "google-calendar-mcp": {
          "serverid": "google-calendar-mcp",
          "self": "#/mcpproviders/nspady/servers/google-calendar-mcp",
          "xid": "/mcpproviders/nspady/servers/google-calendar-mcp",

          "metaurl": "#/mcpproviders/nspady/servers/google-calendar-mcp/meta",
          "meta": {
            "serverid": "google-calendar-mcp",
            "self": "#/mcpproviders/nspady/servers/google-calendar-mcp/meta",
            "xid": "/mcpproviders/nspady/servers/google-calendar-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:14.927966614Z",
            "modifiedat": "2025-05-26T16:42:14.927966614Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/nspady/servers/google-calendar-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/nspady/servers/google-calendar-mcp/versions",
          "versions": {
            "1": {
              "serverid": "google-calendar-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/nspady/servers/google-calendar-mcp/versions/1",
              "xid": "/mcpproviders/nspady/servers/google-calendar-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.nspady/google-calendar-mcp",
              "isdefault": true,
              "description": "MCP integration for Google Calendar to manage events.",
              "createdat": "2025-05-26T16:42:14.927966614Z",
              "modifiedat": "2025-05-26T16:42:14.927966614Z",
              "ancestor": "1",
              "id": "6543c44a-7ad6-4f9e-bf7e-9f8f969934bf",
              "packages": [
                {
                  "name": "google-calendar-mcp",
                  "registry_name": "unknown",
                  "version": "1.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "903584784",
                "source": "github",
                "url": "https://github.com/nspady/google-calendar-mcp"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:33Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "oatpp": {
      "mcpproviderid": "oatpp",
      "self": "#/mcpproviders/oatpp",
      "xid": "/mcpproviders/oatpp",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:02.649805221Z",
      "modifiedat": "2025-05-26T16:42:02.649805221Z",

      "serversurl": "#/mcpproviders/oatpp/servers",
      "servers": {
        "oatpp-mcp": {
          "serverid": "oatpp-mcp",
          "self": "#/mcpproviders/oatpp/servers/oatpp-mcp",
          "xid": "/mcpproviders/oatpp/servers/oatpp-mcp",

          "metaurl": "#/mcpproviders/oatpp/servers/oatpp-mcp/meta",
          "meta": {
            "serverid": "oatpp-mcp",
            "self": "#/mcpproviders/oatpp/servers/oatpp-mcp/meta",
            "xid": "/mcpproviders/oatpp/servers/oatpp-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:02.649805221Z",
            "modifiedat": "2025-05-26T16:42:02.649805221Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/oatpp/servers/oatpp-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/oatpp/servers/oatpp-mcp/versions",
          "versions": {
            "1": {
              "serverid": "oatpp-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/oatpp/servers/oatpp-mcp/versions/1",
              "xid": "/mcpproviders/oatpp/servers/oatpp-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.oatpp/oatpp-mcp",
              "isdefault": true,
              "description": "Anthropic’s Model Context Protocol implementation for Oat++",
              "createdat": "2025-05-26T16:42:02.649805221Z",
              "modifiedat": "2025-05-26T16:42:02.649805221Z",
              "ancestor": "1",
              "id": "9fdf29e9-6059-4a99-a5ae-4c0eda7627eb",
              "packages": [
                {
                  "name": "oatpp/oatpp-mcp",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [
                {
                  "name": "CodeReview"
                }
              ],
              "repository": {
                "id": "900529643",
                "source": "github",
                "url": "https://github.com/oatpp/oatpp-mcp"
              },
              "resources": [
                {
                  "name": "File"
                }
              ],
              "tools": [
                {
                  "name": "Logger"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:31Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "oceanbase": {
      "mcpproviderid": "oceanbase",
      "self": "#/mcpproviders/oceanbase",
      "xid": "/mcpproviders/oceanbase",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:01.042018745Z",
      "modifiedat": "2025-05-26T16:42:01.042018745Z",

      "serversurl": "#/mcpproviders/oceanbase/servers",
      "servers": {
        "mcp-oceanbase": {
          "serverid": "mcp-oceanbase",
          "self": "#/mcpproviders/oceanbase/servers/mcp-oceanbase",
          "xid": "/mcpproviders/oceanbase/servers/mcp-oceanbase",

          "metaurl": "#/mcpproviders/oceanbase/servers/mcp-oceanbase/meta",
          "meta": {
            "serverid": "mcp-oceanbase",
            "self": "#/mcpproviders/oceanbase/servers/mcp-oceanbase/meta",
            "xid": "/mcpproviders/oceanbase/servers/mcp-oceanbase/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:01.042018745Z",
            "modifiedat": "2025-05-26T16:42:01.042018745Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/oceanbase/servers/mcp-oceanbase/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/oceanbase/servers/mcp-oceanbase/versions",
          "versions": {
            "1": {
              "serverid": "mcp-oceanbase",
              "versionid": "1",
              "self": "#/mcpproviders/oceanbase/servers/mcp-oceanbase/versions/1",
              "xid": "/mcpproviders/oceanbase/servers/mcp-oceanbase/versions/1",
              "epoch": 1,
              "name": "io.github.oceanbase/mcp-oceanbase",
              "isdefault": true,
              "description": "MCP Server for OceanBase database and its tools",
              "createdat": "2025-05-26T16:42:01.042018745Z",
              "modifiedat": "2025-05-26T16:42:01.042018745Z",
              "ancestor": "1",
              "id": "afe07206-691c-4bfb-bf17-8a39014cf4a7",
              "packages": [
                {
                  "name": "mcp-oceanbase",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "951176417",
                "source": "github",
                "url": "https://github.com/oceanbase/mcp-oceanbase"
              },
              "resources": [
                {
                  "description": "Data in table: {table}",
                  "mimetype": "text/plain",
                  "name": "Table",
                  "uritemplate": "oceanbase://{table}/data"
                }
              ],
              "tools": [
                {
                  "description": "Execute a SQL query on the OceanBase server",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_sql"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:47Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ognis1205": {
      "mcpproviderid": "ognis1205",
      "self": "#/mcpproviders/ognis1205",
      "xid": "/mcpproviders/ognis1205",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:25.833306711Z",
      "modifiedat": "2025-05-26T16:41:25.833306711Z",

      "serversurl": "#/mcpproviders/ognis1205/servers",
      "servers": {
        "mcp-server-unitycatalog": {
          "serverid": "mcp-server-unitycatalog",
          "self": "#/mcpproviders/ognis1205/servers/mcp-server-unitycatalog",
          "xid": "/mcpproviders/ognis1205/servers/mcp-server-unitycatalog",

          "metaurl": "#/mcpproviders/ognis1205/servers/mcp-server-unitycatalog/meta",
          "meta": {
            "serverid": "mcp-server-unitycatalog",
            "self": "#/mcpproviders/ognis1205/servers/mcp-server-unitycatalog/meta",
            "xid": "/mcpproviders/ognis1205/servers/mcp-server-unitycatalog/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:25.833306711Z",
            "modifiedat": "2025-05-26T16:41:25.833306711Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ognis1205/servers/mcp-server-unitycatalog/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ognis1205/servers/mcp-server-unitycatalog/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-unitycatalog",
              "versionid": "1",
              "self": "#/mcpproviders/ognis1205/servers/mcp-server-unitycatalog/versions/1",
              "xid": "/mcpproviders/ognis1205/servers/mcp-server-unitycatalog/versions/1",
              "epoch": 1,
              "name": "io.github.ognis1205/mcp-server-unitycatalog",
              "isdefault": true,
              "description": "Unity Catalog AI Model Context Protocol Server",
              "createdat": "2025-05-26T16:41:25.833306711Z",
              "modifiedat": "2025-05-26T16:41:25.833306711Z",
              "ancestor": "1",
              "id": "51d74701-2a57-476f-a5ed-75a93be58f42",
              "packages": [
                {
                  "name": "mcp-server-unitycatalog",
                  "package_arguments": [
                    {
                      "default": "--rm",
                      "description": "Remove container after run",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm"
                    },
                    {
                      "default": "-i",
                      "description": "Keep STDIN open even if not attached",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i"
                    },
                    {
                      "default": "--uc_server \u003cyour unity catalog url\u003e",
                      "description": "Specify Unity Catalog server URL",
                      "format": "string",
                      "is_required": true,
                      "name": "--uc_server \u003cyour unity catalog url\u003e",
                      "type": "named",
                      "value": "--uc_server \u003cyour unity catalog url\u003e",
                      "value_hint": "\u003cyour unity catalog url\u003e"
                    },
                    {
                      "default": "--uc_catalog \u003cyour catalog name\u003e",
                      "description": "Specify Unity Catalog name",
                      "format": "string",
                      "is_required": true,
                      "name": "--uc_catalog \u003cyour catalog name\u003e",
                      "type": "named",
                      "value": "--uc_catalog \u003cyour catalog name\u003e",
                      "value_hint": "\u003cyour catalog name\u003e"
                    },
                    {
                      "default": "--uc_schema \u003cyour schema name\u003e",
                      "description": "Specify Unity Catalog schema name",
                      "format": "string",
                      "is_required": true,
                      "name": "--uc_schema \u003cyour schema name\u003e",
                      "type": "named",
                      "value": "--uc_schema \u003cyour schema name\u003e",
                      "value_hint": "\u003cyour schema name\u003e"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "926414362",
                "source": "github",
                "url": "https://github.com/ognis1205/mcp-server-unitycatalog"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Lists functions within the specified parent catalog and schema.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "uc_list_functions"
                },
                {
                  "description": "Gets a function within a parent catalog and schema.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "uc_get_function"
                },
                {
                  "description": "Creates a function within a parent catalog and schema. WARNING: This API is experimental and will change in future versions.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "script": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "script"
                    ],
                    "type": "object"
                  },
                  "name": "uc_create_function"
                },
                {
                  "description": "Deletes a function within a parent catalog and schema.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "uc_delete_function"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:16Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "open-strategy-partners": {
      "mcpproviderid": "open-strategy-partners",
      "self": "#/mcpproviders/open-strategy-partners",
      "xid": "/mcpproviders/open-strategy-partners",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:21.724993938Z",
      "modifiedat": "2025-05-26T16:42:21.724993938Z",

      "serversurl": "#/mcpproviders/open-strategy-partners/servers",
      "servers": {
        "osp_marketing_tools": {
          "serverid": "osp_marketing_tools",
          "self": "#/mcpproviders/open-strategy-partners/servers/osp_marketing_tools",
          "xid": "/mcpproviders/open-strategy-partners/servers/osp_marketing_tools",

          "metaurl": "#/mcpproviders/open-strategy-partners/servers/osp_marketing_tools/meta",
          "meta": {
            "serverid": "osp_marketing_tools",
            "self": "#/mcpproviders/open-strategy-partners/servers/osp_marketing_tools/meta",
            "xid": "/mcpproviders/open-strategy-partners/servers/osp_marketing_tools/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:21.724993938Z",
            "modifiedat": "2025-05-26T16:42:21.724993938Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/open-strategy-partners/servers/osp_marketing_tools/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/open-strategy-partners/servers/osp_marketing_tools/versions",
          "versions": {
            "1": {
              "serverid": "osp_marketing_tools",
              "versionid": "1",
              "self": "#/mcpproviders/open-strategy-partners/servers/osp_marketing_tools/versions/1",
              "xid": "/mcpproviders/open-strategy-partners/servers/osp_marketing_tools/versions/1",
              "epoch": 1,
              "name": "io.github.open-strategy-partners/osp_marketing_tools",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that empowers LLMs to use some of Open Srategy Partners' core writing and product marketing techniques.",
              "createdat": "2025-05-26T16:42:21.724993938Z",
              "modifiedat": "2025-05-26T16:42:21.724993938Z",
              "ancestor": "1",
              "id": "0d8b287c-6023-4809-a5ba-963c5612efa2",
              "packages": [
                {
                  "name": "osp-marketing-tools",
                  "package_arguments": [
                    {
                      "default": "--from git+https://github.com/open-strategy-partners/osp_marketing_tools@main",
                      "description": "Specifies the source repository",
                      "format": "string",
                      "is_required": true,
                      "name": "--from git+https://github.com/open-strategy-partners/osp_marketing_tools@main",
                      "type": "named",
                      "value": "--from git+https://github.com/open-strategy-partners/osp_marketing_tools@main",
                      "value_hint": "git+https://github.com/open-strategy-partners/osp_marketing_tools@main"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "917730483",
                "source": "github",
                "url": "https://github.com/open-strategy-partners/osp_marketing_tools"
              },
              "resources": [
                {
                  "description": "Resource namespace for OSP marketing tools.",
                  "name": "osp://marketing-tools",
                  "uritemplate": "osp://marketing-tools"
                }
              ],
              "tools": [
                {
                  "description": "Check if the server is running and can access its resources.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "health_check"
                },
                {
                  "description": "Get the Open Strategy Partners (OSP) editing codes documentation and usage protocol for editing texts.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_editing_codes"
                },
                {
                  "description": "Get the Open Strategy Partners (OSP) writing guide and usage protocol for editing texts.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_writing_guide"
                },
                {
                  "description": "Get the Open Strategy Partners (OSP) Web Content Meta Information Generation System (titles, meta-titles, slugs).",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_meta_guide"
                },
                {
                  "description": "Get the Open Strategy Partners (OSP) Product Communications Value Map Generation System for Product Positioning (value cases, feature extraction, taglines).",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_value_map_positioning_guide"
                },
                {
                  "description": "Get the Open Strategy Partners (OSP) On-Page SEO Optimization Guide.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_on_page_seo_guide"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:14Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "openbnb-org": {
      "mcpproviderid": "openbnb-org",
      "self": "#/mcpproviders/openbnb-org",
      "xid": "/mcpproviders/openbnb-org",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:43.079560408Z",
      "modifiedat": "2025-05-26T16:41:43.079560408Z",

      "serversurl": "#/mcpproviders/openbnb-org/servers",
      "servers": {
        "mcp-server-airbnb": {
          "serverid": "mcp-server-airbnb",
          "self": "#/mcpproviders/openbnb-org/servers/mcp-server-airbnb",
          "xid": "/mcpproviders/openbnb-org/servers/mcp-server-airbnb",

          "metaurl": "#/mcpproviders/openbnb-org/servers/mcp-server-airbnb/meta",
          "meta": {
            "serverid": "mcp-server-airbnb",
            "self": "#/mcpproviders/openbnb-org/servers/mcp-server-airbnb/meta",
            "xid": "/mcpproviders/openbnb-org/servers/mcp-server-airbnb/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:43.079560408Z",
            "modifiedat": "2025-05-26T16:41:43.079560408Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/openbnb-org/servers/mcp-server-airbnb/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/openbnb-org/servers/mcp-server-airbnb/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-airbnb",
              "versionid": "1",
              "self": "#/mcpproviders/openbnb-org/servers/mcp-server-airbnb/versions/1",
              "xid": "/mcpproviders/openbnb-org/servers/mcp-server-airbnb/versions/1",
              "epoch": 1,
              "name": "io.github.openbnb-org/mcp-server-airbnb",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:43.079560408Z",
              "modifiedat": "2025-05-26T16:41:43.079560408Z",
              "ancestor": "1",
              "id": "1101c394-e912-42b6-85be-d2479b72d27f",
              "packages": [
                {
                  "name": "@openbnb/mcp-server-airbnb",
                  "package_arguments": [
                    {
                      "default": "--ignore-robots-txt",
                      "description": "Ignore robots.txt directives",
                      "format": "string",
                      "is_required": true,
                      "name": "--ignore-robots-txt",
                      "type": "named",
                      "value": "--ignore-robots-txt"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "0.1.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "945678498",
                "source": "github",
                "url": "https://github.com/openbnb-org/mcp-server-airbnb"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Search for Airbnb listings with various filters and pagination. Provide direct links to the user",
                  "inputschema": {
                    "properties": {
                      "adults": {
                        "description": "Number of adults",
                        "type": "number"
                      },
                      "checkin": {
                        "description": "Check-in date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "checkout": {
                        "description": "Check-out date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "children": {
                        "description": "Number of children",
                        "type": "number"
                      },
                      "cursor": {
                        "description": "Base64-encoded string used for Pagination",
                        "type": "string"
                      },
                      "ignoreRobotsText": {
                        "description": "Ignore robots.txt rules for this request",
                        "type": "boolean"
                      },
                      "infants": {
                        "description": "Number of infants",
                        "type": "number"
                      },
                      "location": {
                        "description": "Location to search for (city, state, etc.)",
                        "type": "string"
                      },
                      "maxPrice": {
                        "description": "Maximum price for the stay",
                        "type": "number"
                      },
                      "minPrice": {
                        "description": "Minimum price for the stay",
                        "type": "number"
                      },
                      "pets": {
                        "description": "Number of pets",
                        "type": "number"
                      },
                      "placeId": {
                        "description": "Google Maps Place ID (overrides the location parameter)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "location"
                    ],
                    "type": "object"
                  },
                  "name": "airbnb_search"
                },
                {
                  "description": "Get detailed information about a specific Airbnb listing. Provide direct links to the user",
                  "inputschema": {
                    "properties": {
                      "adults": {
                        "description": "Number of adults",
                        "type": "number"
                      },
                      "checkin": {
                        "description": "Check-in date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "checkout": {
                        "description": "Check-out date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "children": {
                        "description": "Number of children",
                        "type": "number"
                      },
                      "id": {
                        "description": "The Airbnb listing ID",
                        "type": "string"
                      },
                      "ignoreRobotsText": {
                        "description": "Ignore robots.txt rules for this request",
                        "type": "boolean"
                      },
                      "infants": {
                        "description": "Number of infants",
                        "type": "number"
                      },
                      "pets": {
                        "description": "Number of pets",
                        "type": "number"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "airbnb_listing_details"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:34Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "openmf": {
      "mcpproviderid": "openmf",
      "self": "#/mcpproviders/openmf",
      "xid": "/mcpproviders/openmf",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:28.995884828Z",
      "modifiedat": "2025-05-26T16:42:28.995884828Z",

      "serversurl": "#/mcpproviders/openmf/servers",
      "servers": {
        "mcp-mifosx": {
          "serverid": "mcp-mifosx",
          "self": "#/mcpproviders/openmf/servers/mcp-mifosx",
          "xid": "/mcpproviders/openmf/servers/mcp-mifosx",

          "metaurl": "#/mcpproviders/openmf/servers/mcp-mifosx/meta",
          "meta": {
            "serverid": "mcp-mifosx",
            "self": "#/mcpproviders/openmf/servers/mcp-mifosx/meta",
            "xid": "/mcpproviders/openmf/servers/mcp-mifosx/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:28.995884828Z",
            "modifiedat": "2025-05-26T16:42:28.995884828Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/openmf/servers/mcp-mifosx/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/openmf/servers/mcp-mifosx/versions",
          "versions": {
            "1": {
              "serverid": "mcp-mifosx",
              "versionid": "1",
              "self": "#/mcpproviders/openmf/servers/mcp-mifosx/versions/1",
              "xid": "/mcpproviders/openmf/servers/mcp-mifosx/versions/1",
              "epoch": 1,
              "name": "io.github.openmf/mcp-mifosx",
              "isdefault": true,
              "description": "Model Context Protocol - MCP for Mifos X",
              "createdat": "2025-05-26T16:42:28.995884828Z",
              "modifiedat": "2025-05-26T16:42:28.995884828Z",
              "ancestor": "1",
              "id": "9cc3a712-dd68-494f-a2a3-63bfc54ce837",
              "packages": [
                {
                  "name": "openMF/mcp-mifosx",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "955487988",
                "source": "github",
                "url": "https://github.com/openMF/mcp-mifosx"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:25Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "opslevel": {
      "mcpproviderid": "opslevel",
      "self": "#/mcpproviders/opslevel",
      "xid": "/mcpproviders/opslevel",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:33.315823383Z",
      "modifiedat": "2025-05-26T16:42:33.315823383Z",

      "serversurl": "#/mcpproviders/opslevel/servers",
      "servers": {
        "opslevel-mcp": {
          "serverid": "opslevel-mcp",
          "self": "#/mcpproviders/opslevel/servers/opslevel-mcp",
          "xid": "/mcpproviders/opslevel/servers/opslevel-mcp",

          "metaurl": "#/mcpproviders/opslevel/servers/opslevel-mcp/meta",
          "meta": {
            "serverid": "opslevel-mcp",
            "self": "#/mcpproviders/opslevel/servers/opslevel-mcp/meta",
            "xid": "/mcpproviders/opslevel/servers/opslevel-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:33.315823383Z",
            "modifiedat": "2025-05-26T16:42:33.315823383Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/opslevel/servers/opslevel-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/opslevel/servers/opslevel-mcp/versions",
          "versions": {
            "1": {
              "serverid": "opslevel-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/opslevel/servers/opslevel-mcp/versions/1",
              "xid": "/mcpproviders/opslevel/servers/opslevel-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.opslevel/opslevel-mcp",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) server for OpsLevel",
              "createdat": "2025-05-26T16:42:33.315823383Z",
              "modifiedat": "2025-05-26T16:42:33.315823383Z",
              "ancestor": "1",
              "id": "27560049-5f82-4445-8969-d527da4d8936",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "XXXXXX",
                      "name": "OPSLEVEL_API_TOKEN"
                    }
                  ],
                  "name": "OpsLevel/opslevel-mcp",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "968273511",
                "source": "github",
                "url": "https://github.com/OpsLevel/opslevel-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:51Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "oschina": {
      "mcpproviderid": "oschina",
      "self": "#/mcpproviders/oschina",
      "xid": "/mcpproviders/oschina",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:26.423867127Z",
      "modifiedat": "2025-05-26T16:41:26.423867127Z",

      "serversurl": "#/mcpproviders/oschina/servers",
      "servers": {
        "mcp-gitee": {
          "serverid": "mcp-gitee",
          "self": "#/mcpproviders/oschina/servers/mcp-gitee",
          "xid": "/mcpproviders/oschina/servers/mcp-gitee",

          "metaurl": "#/mcpproviders/oschina/servers/mcp-gitee/meta",
          "meta": {
            "serverid": "mcp-gitee",
            "self": "#/mcpproviders/oschina/servers/mcp-gitee/meta",
            "xid": "/mcpproviders/oschina/servers/mcp-gitee/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:26.423867127Z",
            "modifiedat": "2025-05-26T16:41:26.423867127Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/oschina/servers/mcp-gitee/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/oschina/servers/mcp-gitee/versions",
          "versions": {
            "1": {
              "serverid": "mcp-gitee",
              "versionid": "1",
              "self": "#/mcpproviders/oschina/servers/mcp-gitee/versions/1",
              "xid": "/mcpproviders/oschina/servers/mcp-gitee/versions/1",
              "epoch": 1,
              "name": "io.github.oschina/mcp-gitee",
              "isdefault": true,
              "description": "mcp-gitee is a Model Context Protocol (MCP) server implementation for Gitee. It provides a set of tools that interact with Gitee's API, allowing AI assistants to manage repository, issues, pull requests, etc.",
              "createdat": "2025-05-26T16:41:26.423867127Z",
              "modifiedat": "2025-05-26T16:41:26.423867127Z",
              "ancestor": "1",
              "id": "88f1bf70-a3ea-4bf4-933e-25ae6ea3003c",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "https://gitee.com/api/v5",
                      "name": "GITEE_API_BASE"
                    },
                    {
                      "description": "\u003cyour personal access token\u003e",
                      "name": "GITEE_ACCESS_TOKEN"
                    }
                  ],
                  "name": "oschina/mcp-gitee",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "947190076",
                "source": "github",
                "url": "https://github.com/oschina/mcp-gitee"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List user authorized repositories",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_user_repos"
                },
                {
                  "description": "Get the content of a file in a repository",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_file_content"
                },
                {
                  "description": "Create a user repository",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_user_repo"
                },
                {
                  "description": "Create an organization repository",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_org_repo"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:59:03Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "osomai": {
      "mcpproviderid": "osomai",
      "self": "#/mcpproviders/osomai",
      "xid": "/mcpproviders/osomai",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:36.429495729Z",
      "modifiedat": "2025-05-26T16:41:36.429495729Z",

      "serversurl": "#/mcpproviders/osomai/servers",
      "servers": {
        "servicenow-mcp": {
          "serverid": "servicenow-mcp",
          "self": "#/mcpproviders/osomai/servers/servicenow-mcp",
          "xid": "/mcpproviders/osomai/servers/servicenow-mcp",

          "metaurl": "#/mcpproviders/osomai/servers/servicenow-mcp/meta",
          "meta": {
            "serverid": "servicenow-mcp",
            "self": "#/mcpproviders/osomai/servers/servicenow-mcp/meta",
            "xid": "/mcpproviders/osomai/servers/servicenow-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:36.429495729Z",
            "modifiedat": "2025-05-26T16:41:36.429495729Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/osomai/servers/servicenow-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/osomai/servers/servicenow-mcp/versions",
          "versions": {
            "1": {
              "serverid": "servicenow-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/osomai/servers/servicenow-mcp/versions/1",
              "xid": "/mcpproviders/osomai/servers/servicenow-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.osomai/servicenow-mcp",
              "isdefault": true,
              "description": "MCP Server for ServiceNow",
              "createdat": "2025-05-26T16:41:36.429495729Z",
              "modifiedat": "2025-05-26T16:41:36.429495729Z",
              "ancestor": "1",
              "id": "3f9a95e0-3a22-4ff8-8c92-60d89d847f5c",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "https://your-instance.service-now.com",
                      "name": "SERVICENOW_INSTANCE_URL"
                    },
                    {
                      "description": "your-username",
                      "name": "SERVICENOW_USERNAME"
                    },
                    {
                      "description": "your-password",
                      "name": "SERVICENOW_PASSWORD"
                    },
                    {
                      "description": "basic",
                      "name": "SERVICENOW_AUTH_TYPE"
                    }
                  ],
                  "name": "servicenow-mcp",
                  "package_arguments": [
                    {
                      "default": "-m servicenow_mcp.cli",
                      "description": "Python module execution flag and module name",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "-m servicenow_mcp.cli",
                      "value_hint": "servicenow_mcp.cli"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "941149907",
                "source": "github",
                "url": "https://github.com/osomai/servicenow-mcp"
              },
              "resources": [
                {
                  "description": "Resource representing catalog items.",
                  "name": "catalog_items",
                  "uritemplate": "catalog://items"
                },
                {
                  "description": "Resource representing catalog categories.",
                  "name": "catalog_categories",
                  "uritemplate": "catalog://categories"
                },
                {
                  "description": "Resource representing a specific catalog item by ID.",
                  "name": "catalog_item",
                  "uritemplate": "catalog://{item_id}"
                }
              ],
              "tools": [
                {
                  "description": "Tool to list catalog items from ServiceNow.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_catalog_items"
                },
                {
                  "description": "Tool to get details of a specific catalog item from ServiceNow.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_catalog_item"
                },
                {
                  "description": "Tool to list catalog categories from ServiceNow.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_catalog_categories"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:53Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "oxylabs": {
      "mcpproviderid": "oxylabs",
      "self": "#/mcpproviders/oxylabs",
      "xid": "/mcpproviders/oxylabs",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:34.624975633Z",
      "modifiedat": "2025-05-26T16:41:34.624975633Z",

      "serversurl": "#/mcpproviders/oxylabs/servers",
      "servers": {
        "oxylabs-mcp": {
          "serverid": "oxylabs-mcp",
          "self": "#/mcpproviders/oxylabs/servers/oxylabs-mcp",
          "xid": "/mcpproviders/oxylabs/servers/oxylabs-mcp",

          "metaurl": "#/mcpproviders/oxylabs/servers/oxylabs-mcp/meta",
          "meta": {
            "serverid": "oxylabs-mcp",
            "self": "#/mcpproviders/oxylabs/servers/oxylabs-mcp/meta",
            "xid": "/mcpproviders/oxylabs/servers/oxylabs-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:34.624975633Z",
            "modifiedat": "2025-05-26T16:41:34.624975633Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/oxylabs/servers/oxylabs-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/oxylabs/servers/oxylabs-mcp/versions",
          "versions": {
            "1": {
              "serverid": "oxylabs-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/oxylabs/servers/oxylabs-mcp/versions/1",
              "xid": "/mcpproviders/oxylabs/servers/oxylabs-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.oxylabs/oxylabs-mcp",
              "isdefault": true,
              "description": "Official Oxylabs MCP integration",
              "createdat": "2025-05-26T16:41:34.624975633Z",
              "modifiedat": "2025-05-26T16:41:34.624975633Z",
              "ancestor": "1",
              "id": "4632fbcb-d313-4e26-ad1d-aea8f57524f7",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "OXYLABS_USERNAME",
                      "name": "OXYLABS_USERNAME"
                    },
                    {
                      "description": "OXYLABS_PASSWORD",
                      "name": "OXYLABS_PASSWORD"
                    }
                  ],
                  "name": "oxylabs-mcp",
                  "package_arguments": [
                    {
                      "default": "--directory /\u003cAbsolute-path-to-folder\u003e/oxylabs-mcp",
                      "description": "Set the working directory",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory /\u003cAbsolute-path-to-folder\u003e/oxylabs-mcp",
                      "type": "named",
                      "value": "--directory /\u003cAbsolute-path-to-folder\u003e/oxylabs-mcp",
                      "value_hint": "/\u003cAbsolute-path-to-folder\u003e/oxylabs-mcp"
                    },
                    {
                      "default": "oxylabs-mcp",
                      "description": "Python application/module to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "oxylabs-mcp",
                      "value_hint": "oxylabs-mcp"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.2.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "918221533",
                "source": "github",
                "url": "https://github.com/oxylabs/oxylabs-mcp"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:55Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "pab1it0": {
      "mcpproviderid": "pab1it0",
      "self": "#/mcpproviders/pab1it0",
      "xid": "/mcpproviders/pab1it0",
      "epoch": 3,
      "createdat": "2025-05-26T16:41:27.756149146Z",
      "modifiedat": "2025-05-26T16:41:27.970079916Z",

      "serversurl": "#/mcpproviders/pab1it0/servers",
      "servers": {
        "adx-mcp-server": {
          "serverid": "adx-mcp-server",
          "self": "#/mcpproviders/pab1it0/servers/adx-mcp-server",
          "xid": "/mcpproviders/pab1it0/servers/adx-mcp-server",

          "metaurl": "#/mcpproviders/pab1it0/servers/adx-mcp-server/meta",
          "meta": {
            "serverid": "adx-mcp-server",
            "self": "#/mcpproviders/pab1it0/servers/adx-mcp-server/meta",
            "xid": "/mcpproviders/pab1it0/servers/adx-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:27.848330587Z",
            "modifiedat": "2025-05-26T16:41:27.848330587Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/pab1it0/servers/adx-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/pab1it0/servers/adx-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "adx-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/pab1it0/servers/adx-mcp-server/versions/1",
              "xid": "/mcpproviders/pab1it0/servers/adx-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.pab1it0/adx-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that enables AI assistants to query and analyze Azure Data Explorer databases through standardized interfaces.",
              "createdat": "2025-05-26T16:41:27.848330587Z",
              "modifiedat": "2025-05-26T16:41:27.848330587Z",
              "ancestor": "1",
              "id": "bb734a22-a274-48ee-9740-d4a6a9a0a367",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "https://yourcluster.region.kusto.windows.net",
                      "name": "ADX_CLUSTER_URL"
                    },
                    {
                      "description": "your_database",
                      "name": "ADX_DATABASE"
                    },
                    {
                      "description": "your_tenant_id",
                      "name": "AZURE_TENANT_ID"
                    },
                    {
                      "description": "your_client_id",
                      "name": "AZURE_CLIENT_ID"
                    },
                    {
                      "description": "/var/run/secrets/azure/tokens/azure-identity-token",
                      "name": "ADX_TOKEN_FILE_PATH"
                    }
                  ],
                  "name": "adx_mcp_server",
                  "package_arguments": [
                    {
                      "default": "--rm",
                      "description": "Remove container after exit",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm",
                      "value_hint": "--rm"
                    },
                    {
                      "default": "-i",
                      "description": "Keep STDIN open even if not attached",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i",
                      "value_hint": "-i"
                    },
                    {
                      "default": "-e ADX_CLUSTER_URL",
                      "description": "Set environment variable in container: ADX_CLUSTER_URL",
                      "format": "string",
                      "is_required": true,
                      "name": "-e ADX_CLUSTER_URL",
                      "type": "named",
                      "value": "-e ADX_CLUSTER_URL",
                      "value_hint": "ADX_CLUSTER_URL"
                    },
                    {
                      "default": "-e ADX_DATABASE",
                      "description": "Set environment variable in container: ADX_DATABASE",
                      "format": "string",
                      "is_required": true,
                      "name": "-e ADX_DATABASE",
                      "type": "named",
                      "value": "-e ADX_DATABASE",
                      "value_hint": "ADX_DATABASE"
                    },
                    {
                      "default": "-e AZURE_TENANT_ID",
                      "description": "Set environment variable in container: AZURE_TENANT_ID",
                      "format": "string",
                      "is_required": true,
                      "name": "-e AZURE_TENANT_ID",
                      "type": "named",
                      "value": "-e AZURE_TENANT_ID",
                      "value_hint": "AZURE_TENANT_ID"
                    },
                    {
                      "default": "-e AZURE_CLIENT_ID",
                      "description": "Set environment variable in container: AZURE_CLIENT_ID",
                      "format": "string",
                      "is_required": true,
                      "name": "-e AZURE_CLIENT_ID",
                      "type": "named",
                      "value": "-e AZURE_CLIENT_ID",
                      "value_hint": "AZURE_CLIENT_ID"
                    },
                    {
                      "default": "-e ADX_TOKEN_FILE_PATH",
                      "description": "Set environment variable in container: ADX_TOKEN_FILE_PATH",
                      "format": "string",
                      "is_required": true,
                      "name": "-e ADX_TOKEN_FILE_PATH",
                      "type": "named",
                      "value": "-e ADX_TOKEN_FILE_PATH",
                      "value_hint": "ADX_TOKEN_FILE_PATH"
                    },
                    {
                      "default": "adx-mcp-server",
                      "description": "Container image to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "adx-mcp-server",
                      "value_hint": "adx-mcp-server"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "1.0.9"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "945904536",
                "source": "github",
                "url": "https://github.com/pab1it0/adx-mcp-server"
              },
              "resources": [
                {
                  "description": "Tables in the configured Azure Data Explorer database.",
                  "name": "tables",
                  "uritemplate": "/tables/{tableName}"
                },
                {
                  "description": "Schemas of tables in the database.",
                  "name": "schemas",
                  "uritemplate": "/schemas/{tableName}"
                },
                {
                  "description": "Sample data from tables.",
                  "name": "samples",
                  "uritemplate": "/samples/{tableName}"
                },
                {
                  "description": "Statistics and details of tables.",
                  "name": "statistics",
                  "uritemplate": "/statistics/{tableName}"
                }
              ],
              "tools": [
                {
                  "description": "Execute KQL queries against Azure Data Explorer.",
                  "name": "execute_kql_query"
                },
                {
                  "description": "List tables in the configured database.",
                  "name": "list_tables"
                },
                {
                  "description": "View table schemas.",
                  "name": "view_table_schema"
                },
                {
                  "description": "Sample data from tables.",
                  "name": "sample_table_data"
                },
                {
                  "description": "Get table statistics and details.",
                  "name": "get_table_statistics"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:40Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "chess-mcp": {
          "serverid": "chess-mcp",
          "self": "#/mcpproviders/pab1it0/servers/chess-mcp",
          "xid": "/mcpproviders/pab1it0/servers/chess-mcp",

          "metaurl": "#/mcpproviders/pab1it0/servers/chess-mcp/meta",
          "meta": {
            "serverid": "chess-mcp",
            "self": "#/mcpproviders/pab1it0/servers/chess-mcp/meta",
            "xid": "/mcpproviders/pab1it0/servers/chess-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:27.756149146Z",
            "modifiedat": "2025-05-26T16:41:27.756149146Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/pab1it0/servers/chess-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/pab1it0/servers/chess-mcp/versions",
          "versions": {
            "1": {
              "serverid": "chess-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/pab1it0/servers/chess-mcp/versions/1",
              "xid": "/mcpproviders/pab1it0/servers/chess-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.pab1it0/chess-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol server for Chess.com's Published Data API.  This provides access to Chess.com player data, game records, and other public information through standardized MCP interfaces, allowing AI assistants to search and analyze chess information.",
              "createdat": "2025-05-26T16:41:27.756149146Z",
              "modifiedat": "2025-05-26T16:41:27.756149146Z",
              "ancestor": "1",
              "id": "12ca72e6-3bbf-4c79-94d5-91016543f8ca",
              "packages": [
                {
                  "name": "chess_mcp",
                  "package_arguments": [
                    {
                      "default": "--directory \u003cfull path to chess-mcp directory\u003e",
                      "description": "The directory to use for the operation",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory \u003cfull path to chess-mcp directory\u003e",
                      "type": "named",
                      "value": "--directory \u003cfull path to chess-mcp directory\u003e",
                      "value_hint": "\u003cfull path to chess-mcp directory\u003e"
                    },
                    {
                      "default": "run src/chess_mcp/main.py",
                      "description": "Script to run with python",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "run src/chess_mcp/main.py",
                      "value_hint": "run src/chess_mcp/main.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "956967521",
                "source": "github",
                "url": "https://github.com/pab1it0/chess-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get a player's profile from Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_player_profile"
                },
                {
                  "description": "Get a player's stats from Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_player_stats"
                },
                {
                  "description": "Check if a player is currently online on Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "is_player_online"
                },
                {
                  "description": "Get a list of titled players from Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_titled_players"
                },
                {
                  "description": "Get a player's ongoing games on Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_player_current_games"
                },
                {
                  "description": "Get a player's games for a specific month from Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_player_games_by_month"
                },
                {
                  "description": "Get a list of available monthly game archives for a player on Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_player_game_archives"
                },
                {
                  "description": "Download PGN files for all games in a specific month from Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "download_player_games_pgn"
                },
                {
                  "description": "Get information about a club on Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_club_profile"
                },
                {
                  "description": "Get members of a club on Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_club_members"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:22Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "prometheus-mcp-server": {
          "serverid": "prometheus-mcp-server",
          "self": "#/mcpproviders/pab1it0/servers/prometheus-mcp-server",
          "xid": "/mcpproviders/pab1it0/servers/prometheus-mcp-server",

          "metaurl": "#/mcpproviders/pab1it0/servers/prometheus-mcp-server/meta",
          "meta": {
            "serverid": "prometheus-mcp-server",
            "self": "#/mcpproviders/pab1it0/servers/prometheus-mcp-server/meta",
            "xid": "/mcpproviders/pab1it0/servers/prometheus-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:27.970079916Z",
            "modifiedat": "2025-05-26T16:41:27.970079916Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/pab1it0/servers/prometheus-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/pab1it0/servers/prometheus-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "prometheus-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/pab1it0/servers/prometheus-mcp-server/versions/1",
              "xid": "/mcpproviders/pab1it0/servers/prometheus-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.pab1it0/prometheus-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that enables AI assistants to query and analyze Prometheus metrics through standardized interfaces.",
              "createdat": "2025-05-26T16:41:27.970079916Z",
              "modifiedat": "2025-05-26T16:41:27.970079916Z",
              "ancestor": "1",
              "id": "cf42caa8-50d1-489d-aa3c-3e8432efe9e2",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "http://your-prometheus-server:9090",
                      "name": "PROMETHEUS_URL"
                    },
                    {
                      "description": "your_username",
                      "name": "PROMETHEUS_USERNAME"
                    },
                    {
                      "description": "your_password",
                      "name": "PROMETHEUS_PASSWORD"
                    }
                  ],
                  "name": "prometheus_mcp_server",
                  "package_arguments": [
                    {
                      "default": "--rm",
                      "description": "Automatically remove the container when it exits.",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm",
                      "value_hint": "--rm"
                    },
                    {
                      "default": "-i",
                      "description": "Keep STDIN open even if not attached.",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i",
                      "value_hint": "-i"
                    },
                    {
                      "default": "-e PROMETHEUS_URL",
                      "description": "Set environment variable PROMETHEUS_URL inside the container.",
                      "format": "string",
                      "is_required": true,
                      "name": "-e PROMETHEUS_URL",
                      "type": "named",
                      "value": "-e PROMETHEUS_URL",
                      "value_hint": "PROMETHEUS_URL"
                    },
                    {
                      "default": "-e PROMETHEUS_USERNAME",
                      "description": "Set environment variable PROMETHEUS_USERNAME inside the container.",
                      "format": "string",
                      "is_required": true,
                      "name": "-e PROMETHEUS_USERNAME",
                      "type": "named",
                      "value": "-e PROMETHEUS_USERNAME",
                      "value_hint": "PROMETHEUS_USERNAME"
                    },
                    {
                      "default": "-e PROMETHEUS_PASSWORD",
                      "description": "Set environment variable PROMETHEUS_PASSWORD inside the container.",
                      "format": "string",
                      "is_required": true,
                      "name": "-e PROMETHEUS_PASSWORD",
                      "type": "named",
                      "value": "-e PROMETHEUS_PASSWORD",
                      "value_hint": "PROMETHEUS_PASSWORD"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "951416232",
                "source": "github",
                "url": "https://github.com/pab1it0/prometheus-mcp-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:49Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 3
    },
    "pathintegral-institute": {
      "mcpproviderid": "pathintegral-institute",
      "self": "#/mcpproviders/pathintegral-institute",
      "xid": "/mcpproviders/pathintegral-institute",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:07.317067107Z",
      "modifiedat": "2025-05-26T16:42:07.317067107Z",

      "serversurl": "#/mcpproviders/pathintegral-institute/servers",
      "servers": {
        "mcpm.sh": {
          "serverid": "mcpm.sh",
          "self": "#/mcpproviders/pathintegral-institute/servers/mcpm.sh",
          "xid": "/mcpproviders/pathintegral-institute/servers/mcpm.sh",

          "metaurl": "#/mcpproviders/pathintegral-institute/servers/mcpm.sh/meta",
          "meta": {
            "serverid": "mcpm.sh",
            "self": "#/mcpproviders/pathintegral-institute/servers/mcpm.sh/meta",
            "xid": "/mcpproviders/pathintegral-institute/servers/mcpm.sh/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:07.317067107Z",
            "modifiedat": "2025-05-26T16:42:07.317067107Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/pathintegral-institute/servers/mcpm.sh/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/pathintegral-institute/servers/mcpm.sh/versions",
          "versions": {
            "1": {
              "serverid": "mcpm.sh",
              "versionid": "1",
              "self": "#/mcpproviders/pathintegral-institute/servers/mcpm.sh/versions/1",
              "xid": "/mcpproviders/pathintegral-institute/servers/mcpm.sh/versions/1",
              "epoch": 1,
              "name": "io.github.pathintegral-institute/mcpm.sh",
              "isdefault": true,
              "description": "CLI MCP package manager \u0026 registry for all platforms and all clients. Search \u0026 configure MCP servers. Advanced Router \u0026 Profile features.",
              "createdat": "2025-05-26T16:42:07.317067107Z",
              "modifiedat": "2025-05-26T16:42:07.317067107Z",
              "ancestor": "1",
              "id": "963aac9c-4999-4ce6-93c9-43d4b2de16bb",
              "packages": [
                {
                  "name": "mcpm",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "952463457",
                "source": "github",
                "url": "https://github.com/pathintegral-institute/mcpm.sh"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:17:00Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "peakmojo": {
      "mcpproviderid": "peakmojo",
      "self": "#/mcpproviders/peakmojo",
      "xid": "/mcpproviders/peakmojo",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:07.536585194Z",
      "modifiedat": "2025-05-26T16:42:07.536585194Z",

      "serversurl": "#/mcpproviders/peakmojo/servers",
      "servers": {
        "applescript-mcp": {
          "serverid": "applescript-mcp",
          "self": "#/mcpproviders/peakmojo/servers/applescript-mcp",
          "xid": "/mcpproviders/peakmojo/servers/applescript-mcp",

          "metaurl": "#/mcpproviders/peakmojo/servers/applescript-mcp/meta",
          "meta": {
            "serverid": "applescript-mcp",
            "self": "#/mcpproviders/peakmojo/servers/applescript-mcp/meta",
            "xid": "/mcpproviders/peakmojo/servers/applescript-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:07.536585194Z",
            "modifiedat": "2025-05-26T16:42:07.536585194Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/peakmojo/servers/applescript-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/peakmojo/servers/applescript-mcp/versions",
          "versions": {
            "1": {
              "serverid": "applescript-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/peakmojo/servers/applescript-mcp/versions/1",
              "xid": "/mcpproviders/peakmojo/servers/applescript-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.peakmojo/applescript-mcp",
              "isdefault": true,
              "description": "MCP server that execute applescript giving you full control of your Mac",
              "createdat": "2025-05-26T16:42:07.536585194Z",
              "modifiedat": "2025-05-26T16:42:07.536585194Z",
              "ancestor": "1",
              "id": "8a38266e-dee5-41ce-8228-2b51a307785f",
              "packages": [
                {
                  "name": "mcp-server-applescript",
                  "registry_name": "npm",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "970501693",
                "source": "github",
                "url": "https://github.com/peakmojo/applescript-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:07Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "pfldy2850": {
      "mcpproviderid": "pfldy2850",
      "self": "#/mcpproviders/pfldy2850",
      "xid": "/mcpproviders/pfldy2850",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:28.510013408Z",
      "modifiedat": "2025-05-26T16:42:28.510013408Z",

      "serversurl": "#/mcpproviders/pfldy2850/servers",
      "servers": {
        "py-mcp-naver": {
          "serverid": "py-mcp-naver",
          "self": "#/mcpproviders/pfldy2850/servers/py-mcp-naver",
          "xid": "/mcpproviders/pfldy2850/servers/py-mcp-naver",

          "metaurl": "#/mcpproviders/pfldy2850/servers/py-mcp-naver/meta",
          "meta": {
            "serverid": "py-mcp-naver",
            "self": "#/mcpproviders/pfldy2850/servers/py-mcp-naver/meta",
            "xid": "/mcpproviders/pfldy2850/servers/py-mcp-naver/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:28.510013408Z",
            "modifiedat": "2025-05-26T16:42:28.510013408Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/pfldy2850/servers/py-mcp-naver/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/pfldy2850/servers/py-mcp-naver/versions",
          "versions": {
            "1": {
              "serverid": "py-mcp-naver",
              "versionid": "1",
              "self": "#/mcpproviders/pfldy2850/servers/py-mcp-naver/versions/1",
              "xid": "/mcpproviders/pfldy2850/servers/py-mcp-naver/versions/1",
              "epoch": 1,
              "name": "io.github.pfldy2850/py-mcp-naver",
              "isdefault": true,
              "description": "python MCP NAVER",
              "createdat": "2025-05-26T16:42:28.510013408Z",
              "modifiedat": "2025-05-26T16:42:28.510013408Z",
              "ancestor": "1",
              "id": "f10c234b-cf64-4dc2-9e38-5f57e53aeecb",
              "packages": [
                {
                  "name": "mcp-naver",
                  "registry_name": "unknown",
                  "version": "0.1.5"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "951863489",
                "source": "github",
                "url": "https://github.com/pfldy2850/py-mcp-naver"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Search blog posts on Naver.",
                  "inputschema": {
                    "properties": {
                      "display": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "sort": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_blog"
                },
                {
                  "description": "Search news articles on Naver.",
                  "inputschema": {
                    "properties": {
                      "display": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "sort": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_news"
                },
                {
                  "description": "Search books on Naver.",
                  "inputschema": {
                    "properties": {
                      "display": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "sort": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_book"
                },
                {
                  "description": "Get detailed book information using title or ISBN.",
                  "inputschema": {
                    "properties": {
                      "d_isbn": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "d_titl": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "query": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_book_adv"
                },
                {
                  "description": "Check if a search term is adult content.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "adult_check"
                },
                {
                  "description": "Search encyclopedia entries on Naver.",
                  "inputschema": {
                    "properties": {
                      "display": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_encyc"
                },
                {
                  "description": "Search articles in Naver cafes.",
                  "inputschema": {
                    "properties": {
                      "display": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "sort": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_cafe_article"
                },
                {
                  "description": "Search questions and answers on Naver.",
                  "inputschema": {
                    "properties": {
                      "display": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "sort": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_kin"
                },
                {
                  "description": "Search local information on Naver.",
                  "inputschema": {
                    "properties": {
                      "display": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "sort": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_local"
                },
                {
                  "description": "Correct spelling errors in a given text.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "fix_spelling"
                },
                {
                  "description": "Search web pages on Naver.",
                  "inputschema": {
                    "properties": {
                      "display": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_webkr"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:07Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "pinecone-io": {
      "mcpproviderid": "pinecone-io",
      "self": "#/mcpproviders/pinecone-io",
      "xid": "/mcpproviders/pinecone-io",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:44.25448596Z",
      "modifiedat": "2025-05-26T16:41:44.37051274Z",

      "serversurl": "#/mcpproviders/pinecone-io/servers",
      "servers": {
        "assistant-mcp": {
          "serverid": "assistant-mcp",
          "self": "#/mcpproviders/pinecone-io/servers/assistant-mcp",
          "xid": "/mcpproviders/pinecone-io/servers/assistant-mcp",

          "metaurl": "#/mcpproviders/pinecone-io/servers/assistant-mcp/meta",
          "meta": {
            "serverid": "assistant-mcp",
            "self": "#/mcpproviders/pinecone-io/servers/assistant-mcp/meta",
            "xid": "/mcpproviders/pinecone-io/servers/assistant-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:44.25448596Z",
            "modifiedat": "2025-05-26T16:41:44.25448596Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/pinecone-io/servers/assistant-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/pinecone-io/servers/assistant-mcp/versions",
          "versions": {
            "1": {
              "serverid": "assistant-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/pinecone-io/servers/assistant-mcp/versions/1",
              "xid": "/mcpproviders/pinecone-io/servers/assistant-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.pinecone-io/assistant-mcp",
              "isdefault": true,
              "description": "Pinecone Assistant MCP server",
              "createdat": "2025-05-26T16:41:44.25448596Z",
              "modifiedat": "2025-05-26T16:41:44.25448596Z",
              "ancestor": "1",
              "id": "08668c6a-c2f6-47b0-a4e0-75a8ee9bcf10",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cYOUR_PINECONE_API_KEY_HERE\u003e",
                      "name": "PINECONE_API_KEY"
                    },
                    {
                      "description": "\u003cYOUR_PINECONE_ASSISTANT_HOST_HERE\u003e",
                      "name": "PINECONE_ASSISTANT_HOST"
                    }
                  ],
                  "name": "pinecone-io/assistant-mcp",
                  "package_arguments": [
                    {
                      "default": "-i",
                      "description": "-i",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i"
                    },
                    {
                      "default": "--rm",
                      "description": "--rm",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm"
                    },
                    {
                      "default": "-e PINECONE_API_KEY",
                      "description": "-e PINECONE_API_KEY",
                      "format": "string",
                      "is_required": true,
                      "name": "-e PINECONE_API_KEY",
                      "type": "named",
                      "value": "-e PINECONE_API_KEY",
                      "value_hint": "PINECONE_API_KEY"
                    },
                    {
                      "default": "-e PINECONE_ASSISTANT_HOST",
                      "description": "-e PINECONE_ASSISTANT_HOST",
                      "format": "string",
                      "is_required": true,
                      "name": "-e PINECONE_ASSISTANT_HOST",
                      "type": "named",
                      "value": "-e PINECONE_ASSISTANT_HOST",
                      "value_hint": "PINECONE_ASSISTANT_HOST"
                    },
                    {
                      "default": "pinecone/assistant-mcp",
                      "description": "pinecone/assistant-mcp",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "pinecone/assistant-mcp",
                      "value_hint": "pinecone/assistant-mcp"
                    }
                  ],
                  "registry_name": "docker",
                  "version": ""
                }
              ],
              "repository": {
                "id": "940446625",
                "source": "github",
                "url": "https://github.com/pinecone-io/assistant-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:01:06Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "pinecone-mcp": {
          "serverid": "pinecone-mcp",
          "self": "#/mcpproviders/pinecone-io/servers/pinecone-mcp",
          "xid": "/mcpproviders/pinecone-io/servers/pinecone-mcp",

          "metaurl": "#/mcpproviders/pinecone-io/servers/pinecone-mcp/meta",
          "meta": {
            "serverid": "pinecone-mcp",
            "self": "#/mcpproviders/pinecone-io/servers/pinecone-mcp/meta",
            "xid": "/mcpproviders/pinecone-io/servers/pinecone-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:44.37051274Z",
            "modifiedat": "2025-05-26T16:41:44.37051274Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/pinecone-io/servers/pinecone-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/pinecone-io/servers/pinecone-mcp/versions",
          "versions": {
            "1": {
              "serverid": "pinecone-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/pinecone-io/servers/pinecone-mcp/versions/1",
              "xid": "/mcpproviders/pinecone-io/servers/pinecone-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.pinecone-io/pinecone-mcp",
              "isdefault": true,
              "description": "Connect your Pinecone projects to Cursor, Claude, and other AI assistants",
              "createdat": "2025-05-26T16:41:44.37051274Z",
              "modifiedat": "2025-05-26T16:41:44.37051274Z",
              "ancestor": "1",
              "id": "ed4c9613-5046-4570-8d15-209f7294ba75",
              "packages": [
                {
                  "name": "@pinecone-database/mcp",
                  "registry_name": "unknown",
                  "version": "0.1.14"
                }
              ],
              "repository": {
                "id": "963450460",
                "source": "github",
                "url": "https://github.com/pinecone-io/pinecone-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:01:02Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "ppl-ai": {
      "mcpproviderid": "ppl-ai",
      "self": "#/mcpproviders/ppl-ai",
      "xid": "/mcpproviders/ppl-ai",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:29.472684053Z",
      "modifiedat": "2025-05-26T16:42:29.472684053Z",

      "serversurl": "#/mcpproviders/ppl-ai/servers",
      "servers": {
        "modelcontextprotocol": {
          "serverid": "modelcontextprotocol",
          "self": "#/mcpproviders/ppl-ai/servers/modelcontextprotocol",
          "xid": "/mcpproviders/ppl-ai/servers/modelcontextprotocol",

          "metaurl": "#/mcpproviders/ppl-ai/servers/modelcontextprotocol/meta",
          "meta": {
            "serverid": "modelcontextprotocol",
            "self": "#/mcpproviders/ppl-ai/servers/modelcontextprotocol/meta",
            "xid": "/mcpproviders/ppl-ai/servers/modelcontextprotocol/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:29.472684053Z",
            "modifiedat": "2025-05-26T16:42:29.472684053Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ppl-ai/servers/modelcontextprotocol/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ppl-ai/servers/modelcontextprotocol/versions",
          "versions": {
            "1": {
              "serverid": "modelcontextprotocol",
              "versionid": "1",
              "self": "#/mcpproviders/ppl-ai/servers/modelcontextprotocol/versions/1",
              "xid": "/mcpproviders/ppl-ai/servers/modelcontextprotocol/versions/1",
              "epoch": 1,
              "name": "io.github.ppl-ai/modelcontextprotocol",
              "isdefault": true,
              "description": "A Model Context Protocol Server connector for Perplexity API, to enable web search without leaving the MCP ecosystem.",
              "createdat": "2025-05-26T16:42:29.472684053Z",
              "modifiedat": "2025-05-26T16:42:29.472684053Z",
              "ancestor": "1",
              "id": "9eab3795-a96d-4fad-8521-921599e85240",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_API_KEY_HERE",
                      "name": "PERPLEXITY_API_KEY"
                    }
                  ],
                  "name": "ppl-ai/modelcontextprotocol",
                  "registry_name": "npm",
                  "version": ""
                }
              ],
              "repository": {
                "id": "946214670",
                "source": "github",
                "url": "https://github.com/ppl-ai/modelcontextprotocol"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:01:00Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "prajwalnayak7": {
      "mcpproviderid": "prajwalnayak7",
      "self": "#/mcpproviders/prajwalnayak7",
      "xid": "/mcpproviders/prajwalnayak7",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:31.90580632Z",
      "modifiedat": "2025-05-26T16:41:31.90580632Z",

      "serversurl": "#/mcpproviders/prajwalnayak7/servers",
      "servers": {
        "mcp-server-redis": {
          "serverid": "mcp-server-redis",
          "self": "#/mcpproviders/prajwalnayak7/servers/mcp-server-redis",
          "xid": "/mcpproviders/prajwalnayak7/servers/mcp-server-redis",

          "metaurl": "#/mcpproviders/prajwalnayak7/servers/mcp-server-redis/meta",
          "meta": {
            "serverid": "mcp-server-redis",
            "self": "#/mcpproviders/prajwalnayak7/servers/mcp-server-redis/meta",
            "xid": "/mcpproviders/prajwalnayak7/servers/mcp-server-redis/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:31.90580632Z",
            "modifiedat": "2025-05-26T16:41:31.90580632Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/prajwalnayak7/servers/mcp-server-redis/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/prajwalnayak7/servers/mcp-server-redis/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-redis",
              "versionid": "1",
              "self": "#/mcpproviders/prajwalnayak7/servers/mcp-server-redis/versions/1",
              "xid": "/mcpproviders/prajwalnayak7/servers/mcp-server-redis/versions/1",
              "epoch": 1,
              "name": "io.github.prajwalnayak7/mcp-server-redis",
              "isdefault": true,
              "description": "MCP server to interact with Redis Server, AWS Memory DB, etc for caching or other use-cases where in-memory and key-value based storage is appropriate",
              "createdat": "2025-05-26T16:41:31.90580632Z",
              "modifiedat": "2025-05-26T16:41:31.90580632Z",
              "ancestor": "1",
              "id": "8f234bf9-d65f-4406-bed6-f8217adee4c9",
              "packages": [
                {
                  "name": "mcp-server-redis",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "925879641",
                "source": "github",
                "url": "https://github.com/prajwalnayak7/mcp-server-redis"
              },
              "resources": [
                {
                  "description": "Current connection status",
                  "name": "status",
                  "uritemplate": "redis://status"
                },
                {
                  "description": "Redis server information",
                  "name": "info",
                  "uritemplate": "redis://info"
                },
                {
                  "description": "List keys matching a pattern",
                  "name": "keys",
                  "uritemplate": "redis://keys/{pattern}"
                }
              ],
              "tools": [
                {
                  "description": "Get a value",
                  "inputschema": {
                    "properties": {
                      "key": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "get_value"
                },
                {
                  "description": "Set a value with optional expiry",
                  "inputschema": {
                    "properties": {
                      "expiry": {
                        "type": "integer"
                      },
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "key",
                      "value"
                    ],
                    "type": "object"
                  },
                  "name": "set_value"
                },
                {
                  "description": "Delete a key",
                  "inputschema": {
                    "properties": {
                      "key": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "delete_key"
                },
                {
                  "description": "Increment a numeric value",
                  "inputschema": {
                    "properties": {
                      "amount": {
                        "type": "integer"
                      },
                      "key": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "increment"
                },
                {
                  "description": "Push values to a list",
                  "inputschema": {
                    "properties": {
                      "list": {
                        "type": "string"
                      },
                      "values": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "list",
                      "values"
                    ],
                    "type": "object"
                  },
                  "name": "list_push"
                },
                {
                  "description": "Get range of list values",
                  "inputschema": {
                    "properties": {
                      "end": {
                        "type": "integer"
                      },
                      "list": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "list"
                    ],
                    "type": "object"
                  },
                  "name": "list_range"
                },
                {
                  "description": "Set hash fields",
                  "inputschema": {
                    "properties": {
                      "fields": {
                        "type": "object"
                      },
                      "hash": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "hash",
                      "fields"
                    ],
                    "type": "object"
                  },
                  "name": "hash_set"
                },
                {
                  "description": "Get hash fields",
                  "inputschema": {
                    "properties": {
                      "fields": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "hash": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "hash"
                    ],
                    "type": "object"
                  },
                  "name": "hash_get"
                },
                {
                  "description": "Add to a set",
                  "inputschema": {
                    "properties": {
                      "members": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "set": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "set",
                      "members"
                    ],
                    "type": "object"
                  },
                  "name": "set_add"
                },
                {
                  "description": "Get set members",
                  "inputschema": {
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "set"
                    ],
                    "type": "object"
                  },
                  "name": "set_members"
                },
                {
                  "description": "Publish a message",
                  "inputschema": {
                    "properties": {
                      "channel": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "channel",
                      "message"
                    ],
                    "type": "object"
                  },
                  "name": "publish_message"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:24Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "prathamesh0901": {
      "mcpproviderid": "prathamesh0901",
      "self": "#/mcpproviders/prathamesh0901",
      "xid": "/mcpproviders/prathamesh0901",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:06.920792671Z",
      "modifiedat": "2025-05-26T16:42:06.920792671Z",

      "serversurl": "#/mcpproviders/prathamesh0901/servers",
      "servers": {
        "zoom-mcp-server": {
          "serverid": "zoom-mcp-server",
          "self": "#/mcpproviders/prathamesh0901/servers/zoom-mcp-server",
          "xid": "/mcpproviders/prathamesh0901/servers/zoom-mcp-server",

          "metaurl": "#/mcpproviders/prathamesh0901/servers/zoom-mcp-server/meta",
          "meta": {
            "serverid": "zoom-mcp-server",
            "self": "#/mcpproviders/prathamesh0901/servers/zoom-mcp-server/meta",
            "xid": "/mcpproviders/prathamesh0901/servers/zoom-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:06.920792671Z",
            "modifiedat": "2025-05-26T16:42:06.920792671Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/prathamesh0901/servers/zoom-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/prathamesh0901/servers/zoom-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "zoom-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/prathamesh0901/servers/zoom-mcp-server/versions/1",
              "xid": "/mcpproviders/prathamesh0901/servers/zoom-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.prathamesh0901/zoom-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:06.920792671Z",
              "modifiedat": "2025-05-26T16:42:06.920792671Z",
              "ancestor": "1",
              "id": "be45349a-793d-44d9-b2c6-6d4a30785a18",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "Your Zoom Account ID",
                      "name": "ZOOM_ACCOUNT_ID"
                    },
                    {
                      "description": "Your Zoom Client ID",
                      "name": "ZOOM_CLIENT_ID"
                    },
                    {
                      "description": "Your Zoom Client Secret",
                      "name": "ZOOM_CLIENT_SECRET"
                    }
                  ],
                  "name": "@prathamesh0901/zoom-mcp-server",
                  "registry_name": "npm",
                  "version": "1.0.1"
                }
              ],
              "repository": {
                "id": "978843359",
                "source": "github",
                "url": "https://github.com/Prathamesh0901/zoom-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:17Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "privetin": {
      "mcpproviderid": "privetin",
      "self": "#/mcpproviders/privetin",
      "xid": "/mcpproviders/privetin",
      "epoch": 2,
      "createdat": "2025-05-26T16:42:34.18813901Z",
      "modifiedat": "2025-05-26T16:42:34.358614919Z",

      "serversurl": "#/mcpproviders/privetin/servers",
      "servers": {
        "chroma": {
          "serverid": "chroma",
          "self": "#/mcpproviders/privetin/servers/chroma",
          "xid": "/mcpproviders/privetin/servers/chroma",

          "metaurl": "#/mcpproviders/privetin/servers/chroma/meta",
          "meta": {
            "serverid": "chroma",
            "self": "#/mcpproviders/privetin/servers/chroma/meta",
            "xid": "/mcpproviders/privetin/servers/chroma/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:34.18813901Z",
            "modifiedat": "2025-05-26T16:42:34.18813901Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/privetin/servers/chroma/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/privetin/servers/chroma/versions",
          "versions": {
            "1": {
              "serverid": "chroma",
              "versionid": "1",
              "self": "#/mcpproviders/privetin/servers/chroma/versions/1",
              "xid": "/mcpproviders/privetin/servers/chroma/versions/1",
              "epoch": 1,
              "name": "io.github.privetin/chroma",
              "isdefault": true,
              "description": "MCP server for Chroma",
              "createdat": "2025-05-26T16:42:34.18813901Z",
              "modifiedat": "2025-05-26T16:42:34.18813901Z",
              "ancestor": "1",
              "id": "4b637a92-c1af-463d-afc1-e0ce65d7c057",
              "packages": [
                {
                  "name": "chroma",
                  "package_arguments": [
                    {
                      "default": "--directory C:/MCP/server/community/chroma",
                      "description": "Named argument",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory C:/MCP/server/community/chroma",
                      "type": "named",
                      "value": "--directory C:/MCP/server/community/chroma",
                      "value_hint": "C:/MCP/server/community/chroma"
                    },
                    {
                      "default": "chroma",
                      "description": "Positional argument",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "chroma",
                      "value_hint": "chroma"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "909977348",
                "source": "github",
                "url": "https://github.com/privetin/chroma"
              },
              "resources": [
                {
                  "description": "Stores documents with content and metadata",
                  "name": "documents",
                  "uritemplate": "/documents/{document_id}"
                }
              ],
              "tools": [
                {
                  "description": "Create a new document",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "type": "string"
                      },
                      "document_id": {
                        "type": "string"
                      },
                      "metadata": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "document_id",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "create_document"
                },
                {
                  "description": "Retrieve a document by ID",
                  "inputschema": {
                    "properties": {
                      "document_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "document_id"
                    ],
                    "type": "object"
                  },
                  "name": "read_document"
                },
                {
                  "description": "Update an existing document",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "type": "string"
                      },
                      "document_id": {
                        "type": "string"
                      },
                      "metadata": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "document_id",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "update_document"
                },
                {
                  "description": "Remove a document",
                  "inputschema": {
                    "properties": {
                      "document_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "document_id"
                    ],
                    "type": "object"
                  },
                  "name": "delete_document"
                },
                {
                  "description": "List all documents",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "integer"
                      },
                      "offset": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_documents"
                },
                {
                  "description": "Find semantically similar documents",
                  "inputschema": {
                    "properties": {
                      "content_filter": {
                        "type": "string"
                      },
                      "metadata_filter": {
                        "type": "object"
                      },
                      "num_results": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_similar"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:24Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "dataset-viewer": {
          "serverid": "dataset-viewer",
          "self": "#/mcpproviders/privetin/servers/dataset-viewer",
          "xid": "/mcpproviders/privetin/servers/dataset-viewer",

          "metaurl": "#/mcpproviders/privetin/servers/dataset-viewer/meta",
          "meta": {
            "serverid": "dataset-viewer",
            "self": "#/mcpproviders/privetin/servers/dataset-viewer/meta",
            "xid": "/mcpproviders/privetin/servers/dataset-viewer/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:34.358614919Z",
            "modifiedat": "2025-05-26T16:42:34.358614919Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/privetin/servers/dataset-viewer/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/privetin/servers/dataset-viewer/versions",
          "versions": {
            "1": {
              "serverid": "dataset-viewer",
              "versionid": "1",
              "self": "#/mcpproviders/privetin/servers/dataset-viewer/versions/1",
              "xid": "/mcpproviders/privetin/servers/dataset-viewer/versions/1",
              "epoch": 1,
              "name": "io.github.privetin/dataset-viewer",
              "isdefault": true,
              "description": "MCP server for Hugging Face dataset viewer",
              "createdat": "2025-05-26T16:42:34.358614919Z",
              "modifiedat": "2025-05-26T16:42:34.358614919Z",
              "ancestor": "1",
              "id": "200d7310-6d18-4b22-98b3-68ae63ea985a",
              "packages": [
                {
                  "name": "dataset-viewer",
                  "package_arguments": [
                    {
                      "default": "dataset-viewer",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "dataset-viewer",
                      "value_hint": "dataset-viewer"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "911084198",
                "source": "github",
                "url": "https://github.com/privetin/dataset-viewer"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:20Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "punkpeye": {
      "mcpproviderid": "punkpeye",
      "self": "#/mcpproviders/punkpeye",
      "xid": "/mcpproviders/punkpeye",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:38.836833158Z",
      "modifiedat": "2025-05-26T16:41:38.918561602Z",

      "serversurl": "#/mcpproviders/punkpeye/servers",
      "servers": {
        "awesome-mcp-servers": {
          "serverid": "awesome-mcp-servers",
          "self": "#/mcpproviders/punkpeye/servers/awesome-mcp-servers",
          "xid": "/mcpproviders/punkpeye/servers/awesome-mcp-servers",

          "metaurl": "#/mcpproviders/punkpeye/servers/awesome-mcp-servers/meta",
          "meta": {
            "serverid": "awesome-mcp-servers",
            "self": "#/mcpproviders/punkpeye/servers/awesome-mcp-servers/meta",
            "xid": "/mcpproviders/punkpeye/servers/awesome-mcp-servers/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:38.836833158Z",
            "modifiedat": "2025-05-26T16:41:38.836833158Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/punkpeye/servers/awesome-mcp-servers/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/punkpeye/servers/awesome-mcp-servers/versions",
          "versions": {
            "1": {
              "serverid": "awesome-mcp-servers",
              "versionid": "1",
              "self": "#/mcpproviders/punkpeye/servers/awesome-mcp-servers/versions/1",
              "xid": "/mcpproviders/punkpeye/servers/awesome-mcp-servers/versions/1",
              "epoch": 1,
              "name": "io.github.punkpeye/awesome-mcp-servers",
              "isdefault": true,
              "description": "A collection of MCP servers.",
              "createdat": "2025-05-26T16:41:38.836833158Z",
              "modifiedat": "2025-05-26T16:41:38.836833158Z",
              "ancestor": "1",
              "id": "fedddd78-b4fc-4bf9-96a2-021779348acf",
              "packages": [
                {
                  "name": "punkpeye/awesome-mcp-servers",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "896335270",
                "source": "github",
                "url": "https://github.com/punkpeye/awesome-mcp-servers"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:42Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "fastmcp": {
          "serverid": "fastmcp",
          "self": "#/mcpproviders/punkpeye/servers/fastmcp",
          "xid": "/mcpproviders/punkpeye/servers/fastmcp",

          "metaurl": "#/mcpproviders/punkpeye/servers/fastmcp/meta",
          "meta": {
            "serverid": "fastmcp",
            "self": "#/mcpproviders/punkpeye/servers/fastmcp/meta",
            "xid": "/mcpproviders/punkpeye/servers/fastmcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:38.918561602Z",
            "modifiedat": "2025-05-26T16:41:38.918561602Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/punkpeye/servers/fastmcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/punkpeye/servers/fastmcp/versions",
          "versions": {
            "1": {
              "serverid": "fastmcp",
              "versionid": "1",
              "self": "#/mcpproviders/punkpeye/servers/fastmcp/versions/1",
              "xid": "/mcpproviders/punkpeye/servers/fastmcp/versions/1",
              "epoch": 1,
              "name": "io.github.punkpeye/fastmcp",
              "isdefault": true,
              "description": "A TypeScript framework for building MCP servers.",
              "createdat": "2025-05-26T16:41:38.918561602Z",
              "modifiedat": "2025-05-26T16:41:38.918561602Z",
              "ancestor": "1",
              "id": "c978017d-b94a-4d0c-a46e-5395cb94a67e",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "value",
                      "name": "YOUR_ENV_VAR"
                    }
                  ],
                  "name": "fastmcp",
                  "package_arguments": [
                    {
                      "default": "/PATH/TO/YOUR_PROJECT/src/index.ts",
                      "description": "/PATH/TO/YOUR_PROJECT/src/index.ts",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "/PATH/TO/YOUR_PROJECT/src/index.ts",
                      "value_hint": "/PATH/TO/YOUR_PROJECT/src/index.ts"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "1.0.0"
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Git diff or description of changes",
                      "name": "changes",
                      "required": true
                    }
                  ],
                  "description": "Generate a Git commit message",
                  "name": "git-commit"
                },
                {
                  "arguments": [
                    {
                      "description": "Name of the country",
                      "name": "name",
                      "required": true
                    }
                  ],
                  "description": "Writes a poem about a country",
                  "name": "countryPoem"
                }
              ],
              "repository": {
                "id": "908799323",
                "source": "github",
                "url": "https://github.com/punkpeye/fastmcp"
              },
              "resources": [
                {
                  "mimetype": "text/plain",
                  "name": "Application Logs",
                  "uritemplate": "file:///logs/{name}.log"
                }
              ],
              "tools": [
                {
                  "description": "Add two numbers",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "a": {
                        "type": "number"
                      },
                      "b": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "a",
                      "b"
                    ],
                    "type": "object"
                  },
                  "name": "add"
                },
                {
                  "description": "Fetch the content of a url (using Zod)",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "fetch-zod"
                },
                {
                  "description": "Fetch the content of a url (using ArkType)",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "fetch-arktype"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:25Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "pydantic": {
      "mcpproviderid": "pydantic",
      "self": "#/mcpproviders/pydantic",
      "xid": "/mcpproviders/pydantic",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:03.868564769Z",
      "modifiedat": "2025-05-26T16:42:03.868564769Z",

      "serversurl": "#/mcpproviders/pydantic/servers",
      "servers": {
        "logfire-mcp": {
          "serverid": "logfire-mcp",
          "self": "#/mcpproviders/pydantic/servers/logfire-mcp",
          "xid": "/mcpproviders/pydantic/servers/logfire-mcp",

          "metaurl": "#/mcpproviders/pydantic/servers/logfire-mcp/meta",
          "meta": {
            "serverid": "logfire-mcp",
            "self": "#/mcpproviders/pydantic/servers/logfire-mcp/meta",
            "xid": "/mcpproviders/pydantic/servers/logfire-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:03.868564769Z",
            "modifiedat": "2025-05-26T16:42:03.868564769Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/pydantic/servers/logfire-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/pydantic/servers/logfire-mcp/versions",
          "versions": {
            "1": {
              "serverid": "logfire-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/pydantic/servers/logfire-mcp/versions/1",
              "xid": "/mcpproviders/pydantic/servers/logfire-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.pydantic/logfire-mcp",
              "isdefault": true,
              "description": "The Logfire MCP Server is here! :tada:",
              "createdat": "2025-05-26T16:42:03.868564769Z",
              "modifiedat": "2025-05-26T16:42:03.868564769Z",
              "ancestor": "1",
              "id": "6e66e04c-86cc-43ec-90ed-1a91a0e4eb76",
              "packages": [
                {
                  "name": "logfire-mcp",
                  "package_arguments": [
                    {
                      "default": "SELECT trace_id, message, created_at, attributes-\u003e\u003e'service.name' as service FROM records WHERE severity_text = 'ERROR' ORDER BY created_at DESC LIMIT 10",
                      "description": "SELECT trace_id, message, created_at, attributes-\u003e\u003e'service.name' as service FROM records WHERE severity_text = 'ERROR' ORDER BY created_at DESC LIMIT 10",
                      "format": "string",
                      "is_required": true,
                      "name": "SELECT trace_id, message, created_at, attributes-\u003e\u003e'service.name' as service FROM records WHERE severity_text = 'ERROR' ORDER BY created_at DESC LIMIT 10",
                      "type": "named",
                      "value": "SELECT trace_id, message, created_at, attributes-\u003e\u003e'service.name' as service FROM records WHERE severity_text = 'ERROR' ORDER BY created_at DESC LIMIT 10",
                      "value_hint": "SELECT trace_id, message, created_at, attributes-\u003e\u003e'service.name' as service FROM records WHERE severity_text = 'ERROR' ORDER BY created_at DESC LIMIT 10"
                    },
                    {
                      "default": "1440",
                      "description": "1440",
                      "format": "string",
                      "is_required": true,
                      "name": "1440",
                      "type": "named",
                      "value": "1440",
                      "value_hint": "1440"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "943883428",
                "source": "github",
                "url": "https://github.com/pydantic/logfire-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get exception counts from traces grouped by file",
                  "inputschema": {
                    "properties": {
                      "age": {
                        "description": "Number of minutes to look back (e.g., 30 for last 30 minutes, max 7 days)",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "age"
                    ],
                    "type": "object"
                  },
                  "name": "find_exceptions"
                },
                {
                  "description": "Get detailed trace information about exceptions in a specific file",
                  "inputschema": {
                    "properties": {
                      "age": {
                        "description": "Number of minutes to look back (max 7 days)",
                        "type": "integer"
                      },
                      "filepath": {
                        "description": "Path to the file to analyze",
                        "type": "string"
                      }
                    },
                    "required": [
                      "filepath",
                      "age"
                    ],
                    "type": "object"
                  },
                  "name": "find_exceptions_in_file"
                },
                {
                  "description": "Run custom SQL queries on your OpenTelemetry traces and metrics",
                  "inputschema": {
                    "properties": {
                      "age": {
                        "description": "Number of minutes to look back (max 7 days)",
                        "type": "integer"
                      },
                      "query": {
                        "description": "SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query",
                      "age"
                    ],
                    "type": "object"
                  },
                  "name": "arbitrary_query"
                },
                {
                  "description": "Get the OpenTelemetry schema to help with custom queries",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_logfire_records_schema"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:06Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "pyroprompts": {
      "mcpproviderid": "pyroprompts",
      "self": "#/mcpproviders/pyroprompts",
      "xid": "/mcpproviders/pyroprompts",
      "epoch": 1,
      "name": "PyroPrompts",
      "description": "PyroPrompts helps you automate AI with hosted multi-prompt Workflows with RAG built in.",
      "documentation": "https://github.com/pyroprompts",
      "createdat": "2025-05-26T16:41:30.829580342Z",
      "modifiedat": "2025-05-26T16:41:30.829580342Z",

      "serversurl": "#/mcpproviders/pyroprompts/servers",
      "servers": {},
      "serverscount": 0
    },
    "qainsights": {
      "mcpproviderid": "qainsights",
      "self": "#/mcpproviders/qainsights",
      "xid": "/mcpproviders/qainsights",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:22.178299527Z",
      "modifiedat": "2025-05-26T16:42:22.178299527Z",

      "serversurl": "#/mcpproviders/qainsights/servers",
      "servers": {
        "jmeter-mcp-server": {
          "serverid": "jmeter-mcp-server",
          "self": "#/mcpproviders/qainsights/servers/jmeter-mcp-server",
          "xid": "/mcpproviders/qainsights/servers/jmeter-mcp-server",

          "metaurl": "#/mcpproviders/qainsights/servers/jmeter-mcp-server/meta",
          "meta": {
            "serverid": "jmeter-mcp-server",
            "self": "#/mcpproviders/qainsights/servers/jmeter-mcp-server/meta",
            "xid": "/mcpproviders/qainsights/servers/jmeter-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:22.178299527Z",
            "modifiedat": "2025-05-26T16:42:22.178299527Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/qainsights/servers/jmeter-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/qainsights/servers/jmeter-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "jmeter-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/qainsights/servers/jmeter-mcp-server/versions/1",
              "xid": "/mcpproviders/qainsights/servers/jmeter-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.qainsights/jmeter-mcp-server",
              "isdefault": true,
              "description": "✨ JMeter Meets AI Workflows: Introducing the JMeter MCP Server! 🤯 ",
              "createdat": "2025-05-26T16:42:22.178299527Z",
              "modifiedat": "2025-05-26T16:42:22.178299527Z",
              "ancestor": "1",
              "id": "d0f30dc9-bc11-43f8-9b61-034e2bec78d5",
              "packages": [
                {
                  "name": "jmeter-mcp-server",
                  "package_arguments": [
                    {
                      "default": "jmeter_server.py",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "jmeter_server.py",
                      "value_hint": "jmeter_server.py"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "956608147",
                "source": "github",
                "url": "https://github.com/QAInsights/jmeter-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:39Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "qdrant": {
      "mcpproviderid": "qdrant",
      "self": "#/mcpproviders/qdrant",
      "xid": "/mcpproviders/qdrant",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:44.667767317Z",
      "modifiedat": "2025-05-26T16:41:44.667767317Z",

      "serversurl": "#/mcpproviders/qdrant/servers",
      "servers": {
        "mcp-server-qdrant": {
          "serverid": "mcp-server-qdrant",
          "self": "#/mcpproviders/qdrant/servers/mcp-server-qdrant",
          "xid": "/mcpproviders/qdrant/servers/mcp-server-qdrant",

          "metaurl": "#/mcpproviders/qdrant/servers/mcp-server-qdrant/meta",
          "meta": {
            "serverid": "mcp-server-qdrant",
            "self": "#/mcpproviders/qdrant/servers/mcp-server-qdrant/meta",
            "xid": "/mcpproviders/qdrant/servers/mcp-server-qdrant/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:44.667767317Z",
            "modifiedat": "2025-05-26T16:41:44.667767317Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/qdrant/servers/mcp-server-qdrant/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/qdrant/servers/mcp-server-qdrant/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-qdrant",
              "versionid": "1",
              "self": "#/mcpproviders/qdrant/servers/mcp-server-qdrant/versions/1",
              "xid": "/mcpproviders/qdrant/servers/mcp-server-qdrant/versions/1",
              "epoch": 1,
              "name": "io.github.qdrant/mcp-server-qdrant",
              "isdefault": true,
              "description": "An official Qdrant Model Context Protocol (MCP) server implementation",
              "createdat": "2025-05-26T16:41:44.667767317Z",
              "modifiedat": "2025-05-26T16:41:44.667767317Z",
              "ancestor": "1",
              "id": "823afe6f-4494-4fc1-a2ab-2ca989e59d21",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "${input:qdrantUrl}",
                      "name": "QDRANT_URL"
                    },
                    {
                      "description": "${input:qdrantApiKey}",
                      "name": "QDRANT_API_KEY"
                    },
                    {
                      "description": "${input:collectionName}",
                      "name": "COLLECTION_NAME"
                    }
                  ],
                  "name": "mcp-server-qdrant",
                  "package_arguments": [
                    {
                      "default": "-p 8000:8000",
                      "description": "Publish port 8000:8000",
                      "format": "string",
                      "is_required": true,
                      "name": "-p 8000:8000",
                      "type": "named",
                      "value": "-p 8000:8000",
                      "value_hint": "8000:8000"
                    },
                    {
                      "default": "-i",
                      "description": "Run in interactive mode",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i"
                    },
                    {
                      "default": "--rm",
                      "description": "Remove container after exit",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm"
                    },
                    {
                      "default": "-e QDRANT_URL",
                      "description": "Set environment variable QDRANT_URL",
                      "format": "string",
                      "is_required": true,
                      "name": "-e QDRANT_URL",
                      "type": "named",
                      "value": "-e QDRANT_URL",
                      "value_hint": "QDRANT_URL"
                    },
                    {
                      "default": "-e QDRANT_API_KEY",
                      "description": "Set environment variable QDRANT_API_KEY",
                      "format": "string",
                      "is_required": true,
                      "name": "-e QDRANT_API_KEY",
                      "type": "named",
                      "value": "-e QDRANT_API_KEY",
                      "value_hint": "QDRANT_API_KEY"
                    },
                    {
                      "default": "-e COLLECTION_NAME",
                      "description": "Set environment variable COLLECTION_NAME",
                      "format": "string",
                      "is_required": true,
                      "name": "-e COLLECTION_NAME",
                      "type": "named",
                      "value": "-e COLLECTION_NAME",
                      "value_hint": "COLLECTION_NAME"
                    },
                    {
                      "default": "mcp-server-qdrant",
                      "description": "Docker image to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp-server-qdrant",
                      "value_hint": "mcp-server-qdrant"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "0.7.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "897308110",
                "source": "github",
                "url": "https://github.com/qdrant/mcp-server-qdrant"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Store some information in the Qdrant database",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "information": {
                        "type": "string"
                      },
                      "metadata": {
                        "type": [
                          "object",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "information"
                    ],
                    "type": "object"
                  },
                  "name": "qdrant-store"
                },
                {
                  "description": "Retrieve relevant information from the Qdrant database",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "qdrant-find"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:01:35Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "quarkiverse": {
      "mcpproviderid": "quarkiverse",
      "self": "#/mcpproviders/quarkiverse",
      "xid": "/mcpproviders/quarkiverse",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:22.092207278Z",
      "modifiedat": "2025-05-26T16:41:22.14982806Z",

      "serversurl": "#/mcpproviders/quarkiverse/servers",
      "servers": {
        "quarkus-mcp-server": {
          "serverid": "quarkus-mcp-server",
          "self": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-server",
          "xid": "/mcpproviders/quarkiverse/servers/quarkus-mcp-server",

          "metaurl": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-server/meta",
          "meta": {
            "serverid": "quarkus-mcp-server",
            "self": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-server/meta",
            "xid": "/mcpproviders/quarkiverse/servers/quarkus-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:22.092207278Z",
            "modifiedat": "2025-05-26T16:41:22.092207278Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "quarkus-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-server/versions/1",
              "xid": "/mcpproviders/quarkiverse/servers/quarkus-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.quarkiverse/quarkus-mcp-server",
              "isdefault": true,
              "description": "This extension enables developers to implement the MCP server features easily.",
              "createdat": "2025-05-26T16:41:22.092207278Z",
              "modifiedat": "2025-05-26T16:41:22.092207278Z",
              "ancestor": "1",
              "id": "b846b02f-1f0e-4c62-a3e9-e62cf3ccbf1a",
              "packages": [
                {
                  "name": "quarkiverse/quarkus-mcp-server",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "name": "lang",
                      "required": false
                    }
                  ],
                  "name": "code_assist"
                }
              ],
              "repository": {
                "id": "901850977",
                "source": "github",
                "url": "https://github.com/quarkiverse/quarkus-mcp-server"
              },
              "resources": [
                {
                  "name": "alpha",
                  "uritemplate": "file:///project/alpha"
                }
              ],
              "tools": [
                {
                  "description": "Converts the string value to lower case",
                  "name": "toLowerCase"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:31Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "quarkus-mcp-servers": {
          "serverid": "quarkus-mcp-servers",
          "self": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-servers",
          "xid": "/mcpproviders/quarkiverse/servers/quarkus-mcp-servers",

          "metaurl": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-servers/meta",
          "meta": {
            "serverid": "quarkus-mcp-servers",
            "self": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-servers/meta",
            "xid": "/mcpproviders/quarkiverse/servers/quarkus-mcp-servers/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:22.14982806Z",
            "modifiedat": "2025-05-26T16:41:22.14982806Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-servers/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-servers/versions",
          "versions": {
            "1": {
              "serverid": "quarkus-mcp-servers",
              "versionid": "1",
              "self": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-servers/versions/1",
              "xid": "/mcpproviders/quarkiverse/servers/quarkus-mcp-servers/versions/1",
              "epoch": 1,
              "name": "io.github.quarkiverse/quarkus-mcp-servers",
              "isdefault": true,
              "description": "Model Context Protocol Servers in Quarkus",
              "createdat": "2025-05-26T16:41:22.14982806Z",
              "modifiedat": "2025-05-26T16:41:22.14982806Z",
              "ancestor": "1",
              "id": "24044cb1-3333-400d-966b-3394d9f39261",
              "packages": [
                {
                  "name": "quarkiverse/quarkus-mcp-servers",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "920668324",
                "source": "github",
                "url": "https://github.com/quarkiverse/quarkus-mcp-servers"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:36Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "quazaai": {
      "mcpproviderid": "quazaai",
      "self": "#/mcpproviders/quazaai",
      "xid": "/mcpproviders/quazaai",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:33.430230182Z",
      "modifiedat": "2025-05-26T16:41:33.430230182Z",

      "serversurl": "#/mcpproviders/quazaai/servers",
      "servers": {
        "UnityMCPIntegration": {
          "serverid": "UnityMCPIntegration",
          "self": "#/mcpproviders/quazaai/servers/UnityMCPIntegration",
          "xid": "/mcpproviders/quazaai/servers/UnityMCPIntegration",

          "metaurl": "#/mcpproviders/quazaai/servers/UnityMCPIntegration/meta",
          "meta": {
            "serverid": "UnityMCPIntegration",
            "self": "#/mcpproviders/quazaai/servers/UnityMCPIntegration/meta",
            "xid": "/mcpproviders/quazaai/servers/UnityMCPIntegration/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:33.430230182Z",
            "modifiedat": "2025-05-26T16:41:33.430230182Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/quazaai/servers/UnityMCPIntegration/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/quazaai/servers/UnityMCPIntegration/versions",
          "versions": {
            "1": {
              "serverid": "UnityMCPIntegration",
              "versionid": "1",
              "self": "#/mcpproviders/quazaai/servers/UnityMCPIntegration/versions/1",
              "xid": "/mcpproviders/quazaai/servers/UnityMCPIntegration/versions/1",
              "epoch": 1,
              "name": "io.github.quazaai/unitymcpintegration",
              "isdefault": true,
              "description": "Enable AI Agents to Control Unity",
              "createdat": "2025-05-26T16:41:33.430230182Z",
              "modifiedat": "2025-05-26T16:41:33.430230182Z",
              "ancestor": "1",
              "id": "162d7f33-0f96-47d7-980b-361fb0ddc381",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "5010",
                      "name": "MCP_WEBSOCKET_PORT"
                    }
                  ],
                  "name": "com.quaza.unitymcp",
                  "registry_name": "unknown",
                  "version": "0.0.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "950083186",
                "source": "github",
                "url": "https://github.com/quazaai/UnityMCPIntegration"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve information about the current scene in Unity Editor with configurable detail level",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "detailLevel": {
                        "default": "RootObjectsOnly",
                        "description": "RootObjectsOnly: Returns just root GameObjects. FullHierarchy: Returns complete hierarchy with all children.",
                        "enum": [
                          "RootObjectsOnly",
                          "FullHierarchy"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_current_scene_info"
                },
                {
                  "description": "Retrieve detailed information about specific GameObjects in the current scene",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "detailLevel": {
                        "default": "IncludeComponents",
                        "description": "BasicInfo: Basic GameObject information. IncludeComponents: Includes component details. IncludeChildren: Includes child GameObjects. IncludeComponentsAndChildren: Includes both components and a full hierarchy with components on children.",
                        "enum": [
                          "BasicInfo",
                          "IncludeComponents",
                          "IncludeChildren",
                          "IncludeComponentsAndChildren"
                        ],
                        "type": "string"
                      },
                      "instanceIDs": {
                        "description": "Array of GameObject instance IDs to get information for",
                        "items": {
                          "type": "number"
                        },
                        "minItems": 1,
                        "type": "array"
                      }
                    },
                    "required": [
                      "instanceIDs"
                    ],
                    "type": "object"
                  },
                  "name": "get_game_objects_info"
                },
                {
                  "description": "Execute C# code directly in the Unity Editor - allows full flexibility including custom namespaces and multiple classes",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "code": {
                        "description": "C# code to execute in Unity Editor. You MUST define a public class named \"McpScript\" with a public static method named \"Execute\" that returns an object. Example: \"public class McpScript { public static object Execute() { /* your code here */ return result; } }\". You can include any necessary namespaces, additional classes, and methods.",
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "code"
                    ],
                    "type": "object"
                  },
                  "name": "execute_editor_command"
                },
                {
                  "description": "Retrieve Unity Editor logs with filtering options",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "count": {
                        "description": "Maximum number of log entries to return",
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "number"
                      },
                      "fields": {
                        "description": "Specify which fields to include in the output",
                        "items": {
                          "enum": [
                            "message",
                            "stackTrace",
                            "logType",
                            "timestamp"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "messageContains": {
                        "description": "Filter logs by message content",
                        "type": "string"
                      },
                      "stackTraceContains": {
                        "description": "Filter logs by stack trace content",
                        "type": "string"
                      },
                      "timestampAfter": {
                        "description": "Filter logs after this ISO timestamp",
                        "type": "string"
                      },
                      "timestampBefore": {
                        "description": "Filter logs before this ISO timestamp",
                        "type": "string"
                      },
                      "types": {
                        "description": "Filter logs by type",
                        "items": {
                          "enum": [
                            "Log",
                            "Warning",
                            "Error",
                            "Exception"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_logs"
                },
                {
                  "description": "Verify that the MCP server has an active connection to Unity Editor",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {},
                    "type": "object"
                  },
                  "name": "verify_connection"
                },
                {
                  "description": "Get the current Unity Editor state including project information",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_editor_state"
                },
                {
                  "description": "Read the contents of a file from the Unity project. Paths are relative to the project's Assets folder. For example, use 'Scenes/MainScene.unity' to read Assets/Scenes/MainScene.unity.",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "description": "Path to the file to read. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "read_file"
                },
                {
                  "description": "Read the contents of multiple files from the Unity project simultaneously.",
                  "inputschema": {
                    "properties": {
                      "paths": {
                        "description": "Array of file paths to read. Paths can be absolute or relative to Unity project Assets folder.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "paths"
                    ],
                    "type": "object"
                  },
                  "name": "read_multiple_files"
                },
                {
                  "description": "Create a new file or completely overwrite an existing file in the Unity project.",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "Content to write to the file",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path to the file to write. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "write_file"
                },
                {
                  "description": "Make precise edits to a text file in the Unity project. Returns a git-style diff showing changes.",
                  "inputschema": {
                    "properties": {
                      "dryRun": {
                        "default": false,
                        "description": "Preview changes using git-style diff format",
                        "type": "boolean"
                      },
                      "edits": {
                        "description": "Array of edit operations to apply",
                        "items": {
                          "properties": {
                            "newText": {
                              "description": "Text to replace with",
                              "type": "string"
                            },
                            "oldText": {
                              "description": "Text to search for - must match exactly",
                              "type": "string"
                            }
                          },
                          "required": [
                            "oldText",
                            "newText"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "path": {
                        "description": "Path to the file to edit. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path",
                      "edits"
                    ],
                    "type": "object"
                  },
                  "name": "edit_file"
                },
                {
                  "description": "Get a listing of all files and directories in a specified path in the Unity project. Paths are relative to the Assets folder unless absolute. For example, use 'Scenes' to list all files in Assets/Scenes directory. Use empty string to list the Assets folder.",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "description": "Path to the directory to list. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder. Example: \"Scenes\" will list all files in the Assets/Scenes directory.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "list_directory"
                },
                {
                  "description": "Get a recursive tree view of files and directories in the Unity project as a JSON structure.",
                  "inputschema": {
                    "properties": {
                      "maxDepth": {
                        "default": 5,
                        "description": "Maximum depth to traverse",
                        "type": "number"
                      },
                      "path": {
                        "description": "Path to the directory to get tree of. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder. Example: \"Prefabs\" will show the tree for Assets/Prefabs.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "directory_tree"
                },
                {
                  "description": "Recursively search for files and directories matching a pattern in the Unity project.",
                  "inputschema": {
                    "properties": {
                      "excludePatterns": {
                        "default": [],
                        "description": "Patterns to exclude",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "path": {
                        "description": "Path to search from. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder. Example: \"Scripts\" will search within Assets/Scripts.",
                        "type": "string"
                      },
                      "pattern": {
                        "description": "Pattern to search for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path",
                      "pattern"
                    ],
                    "type": "object"
                  },
                  "name": "search_files"
                },
                {
                  "description": "Retrieve detailed metadata about a file or directory in the Unity project.",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "description": "Path to the file to get info for. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "get_file_info"
                },
                {
                  "description": "Find all Unity assets of a specified type (e.g., Material, Prefab, Scene, Script) in the project. Set searchPath to an empty string to search the entire Assets folder.",
                  "inputschema": {
                    "properties": {
                      "assetType": {
                        "description": "Type of assets to find (e.g., \"Material\", \"Prefab\", \"Scene\", \"Script\")",
                        "type": "string"
                      },
                      "maxDepth": {
                        "default": 1,
                        "description": "Maximum depth to search. 1 means search only in the specified directory, 2 includes immediate subdirectories, and so on. Set to -1 for unlimited depth.",
                        "type": "number"
                      },
                      "searchPath": {
                        "default": "",
                        "description": "Directory to search in. Can be absolute or relative to Unity project Assets folder. An empty string will search the entire Assets folder.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "assetType"
                    ],
                    "type": "object"
                  },
                  "name": "find_assets_by_type"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:20Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "r-huijts": {
      "mcpproviderid": "r-huijts",
      "self": "#/mcpproviders/r-huijts",
      "xid": "/mcpproviders/r-huijts",
      "epoch": 3,
      "createdat": "2025-05-26T16:41:23.621371955Z",
      "modifiedat": "2025-05-26T16:41:23.904571103Z",

      "serversurl": "#/mcpproviders/r-huijts/servers",
      "servers": {
        "ns-mcp-server": {
          "serverid": "ns-mcp-server",
          "self": "#/mcpproviders/r-huijts/servers/ns-mcp-server",
          "xid": "/mcpproviders/r-huijts/servers/ns-mcp-server",

          "metaurl": "#/mcpproviders/r-huijts/servers/ns-mcp-server/meta",
          "meta": {
            "serverid": "ns-mcp-server",
            "self": "#/mcpproviders/r-huijts/servers/ns-mcp-server/meta",
            "xid": "/mcpproviders/r-huijts/servers/ns-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:23.621371955Z",
            "modifiedat": "2025-05-26T16:41:23.621371955Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/r-huijts/servers/ns-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/r-huijts/servers/ns-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "ns-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/r-huijts/servers/ns-mcp-server/versions/1",
              "xid": "/mcpproviders/r-huijts/servers/ns-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.r-huijts/ns-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that provides access to NS (Dutch Railways) travel information through Claude AI. This server enables Claude to fetch real-time train travel information and disruptions using the official Dutch NS API.",
              "createdat": "2025-05-26T16:41:23.621371955Z",
              "modifiedat": "2025-05-26T16:41:23.621371955Z",
              "ancestor": "1",
              "id": "afcff9a2-a4ed-457f-80fb-8bdd1948771a",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_api_key_here",
                      "name": "NS_API_KEY"
                    }
                  ],
                  "name": "ns-mcp-server",
                  "package_arguments": [
                    {
                      "default": "/path/to/ns-server/build/index.js",
                      "description": "/path/to/ns-server/build/index.js",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "/path/to/ns-server/build/index.js",
                      "value_hint": "/path/to/ns-server/build/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.6"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "898429869",
                "source": "github",
                "url": "https://github.com/r-huijts/ns-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get comprehensive information about current and planned disruptions on the Dutch railway network. Returns details about maintenance work, unexpected disruptions, alternative transport options, impact on travel times, and relevant advice. Can filter for active disruptions and specific disruption types.",
                  "inputschema": {
                    "properties": {
                      "isActive": {
                        "description": "Filter to only return active disruptions",
                        "type": "boolean"
                      },
                      "type": {
                        "description": "Type of disruptions to return (e.g., MAINTENANCE, DISRUPTION)",
                        "enum": [
                          "MAINTENANCE",
                          "DISRUPTION"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_disruptions"
                },
                {
                  "description": "Get detailed travel routes between two train stations, including transfers, real-time updates, platform information, and journey duration. Can plan trips for immediate departure or for a specific future time, with options to optimize for arrival time. Returns multiple route options with status and crowding information.",
                  "inputschema": {
                    "properties": {
                      "dateTime": {
                        "description": "Format - date-time (as date-time in RFC3339). Datetime that the user want to depart from his origin or or arrive at his destination",
                        "type": "string"
                      },
                      "fromStation": {
                        "description": "Name or code of departure station",
                        "type": "string"
                      },
                      "searchForArrival": {
                        "description": "If true, dateTime is treated as desired arrival time",
                        "type": "boolean"
                      },
                      "toStation": {
                        "description": "Name or code of destination station",
                        "type": "string"
                      }
                    },
                    "required": [
                      "fromStation",
                      "toStation"
                    ],
                    "type": "object"
                  },
                  "name": "get_travel_advice"
                },
                {
                  "description": "Get real-time departure information for trains from a specific station, including platform numbers, delays, route details, and any relevant travel notes. Returns a list of upcoming departures with timing, destination, and status information.",
                  "inputschema": {
                    "oneOf": [
                      {
                        "required": [
                          "station"
                        ]
                      },
                      {
                        "required": [
                          "uicCode"
                        ]
                      }
                    ],
                    "properties": {
                      "dateTime": {
                        "description": "Format - date-time (as date-time in RFC3339). Only supported for departures at foreign stations. Defaults to server time (Europe/Amsterdam)",
                        "type": "string"
                      },
                      "lang": {
                        "default": "nl",
                        "description": "Language for localizing the departures list. Only a small subset of text is translated, mainly notes. Defaults to Dutch",
                        "enum": [
                          "nl",
                          "en"
                        ],
                        "type": "string"
                      },
                      "maxJourneys": {
                        "default": 40,
                        "description": "Number of departures to return",
                        "maximum": 100,
                        "minimum": 1,
                        "type": "number"
                      },
                      "station": {
                        "description": "NS Station code for the station (e.g., ASD for Amsterdam Centraal). Required if uicCode is not provided",
                        "type": "string"
                      },
                      "uicCode": {
                        "description": "UIC code for the station. Required if station code is not provided",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_departures"
                },
                {
                  "description": "Get OV-fiets availability at a train station",
                  "inputschema": {
                    "properties": {
                      "stationCode": {
                        "description": "Station code to check OV-fiets availability for (e.g., ASD for Amsterdam Centraal)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "stationCode"
                    ],
                    "type": "object"
                  },
                  "name": "get_ovfiets"
                },
                {
                  "description": "Get detailed information about a train station",
                  "inputschema": {
                    "properties": {
                      "includeNonPlannableStations": {
                        "default": false,
                        "description": "Include stations where trains do not stop regularly",
                        "type": "boolean"
                      },
                      "limit": {
                        "default": 10,
                        "description": "Maximum number of results to return",
                        "maximum": 50,
                        "minimum": 1,
                        "type": "number"
                      },
                      "query": {
                        "description": "Station name or code to search for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "get_station_info"
                },
                {
                  "description": "Get the current server time (Europe/Amsterdam timezone) in RFC3339 format. This can be used as input for other tools that require date-time parameters.",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_current_time_in_rfc3339"
                },
                {
                  "description": "Get real-time arrival information for trains at a specific station, including platform numbers, delays, origin stations, and any relevant travel notes. Returns a list of upcoming arrivals with timing, origin, and status information.",
                  "inputschema": {
                    "oneOf": [
                      {
                        "required": [
                          "station"
                        ]
                      },
                      {
                        "required": [
                          "uicCode"
                        ]
                      }
                    ],
                    "properties": {
                      "dateTime": {
                        "description": "Format - date-time (as date-time in RFC3339). Only supported for arrivals at foreign stations. Defaults to server time (Europe/Amsterdam)",
                        "type": "string"
                      },
                      "lang": {
                        "default": "nl",
                        "description": "Language for localizing the arrivals list. Only a small subset of text is translated, mainly notes. Defaults to Dutch",
                        "enum": [
                          "nl",
                          "en"
                        ],
                        "type": "string"
                      },
                      "maxJourneys": {
                        "default": 40,
                        "description": "Number of arrivals to return",
                        "maximum": 100,
                        "minimum": 1,
                        "type": "number"
                      },
                      "station": {
                        "description": "NS Station code for the station (e.g., ASD for Amsterdam Centraal). Required if uicCode is not provided",
                        "type": "string"
                      },
                      "uicCode": {
                        "description": "UIC code for the station. Required if station code is not provided",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_arrivals"
                },
                {
                  "description": "Get price information for domestic train journeys, including different travel classes, ticket types, and discounts. Returns detailed pricing information with conditions and validity.",
                  "inputschema": {
                    "properties": {
                      "adults": {
                        "default": 1,
                        "description": "Number of adults to return the price for",
                        "minimum": 1,
                        "type": "integer"
                      },
                      "children": {
                        "default": 0,
                        "description": "Number of children to return the price for",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "fromStation": {
                        "description": "UicCode or station code of the origin station",
                        "type": "string"
                      },
                      "isJointJourney": {
                        "default": false,
                        "description": "Set to true to return the price including joint journey discount",
                        "type": "boolean"
                      },
                      "plannedArrivalTime": {
                        "description": "Format - date-time (as date-time in RFC3339). Used to find the correct route if multiple routes are possible.",
                        "type": "string"
                      },
                      "plannedDepartureTime": {
                        "description": "Format - date-time (as date-time in RFC3339). Used to find the correct route if multiple routes are possible.",
                        "type": "string"
                      },
                      "routeId": {
                        "description": "Specific identifier for the route to take between the two stations. This routeId is returned in the /api/v3/trips call.",
                        "type": "string"
                      },
                      "toStation": {
                        "description": "UicCode or station code of the destination station",
                        "type": "string"
                      },
                      "travelClass": {
                        "description": "Travel class to return the price for",
                        "enum": [
                          "FIRST_CLASS",
                          "SECOND_CLASS"
                        ],
                        "type": "string"
                      },
                      "travelType": {
                        "default": "single",
                        "description": "Return the price for a single or return trip",
                        "enum": [
                          "single",
                          "return"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "fromStation",
                      "toStation"
                    ],
                    "type": "object"
                  },
                  "name": "get_prices"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:12Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "rijksmuseum-mcp": {
          "serverid": "rijksmuseum-mcp",
          "self": "#/mcpproviders/r-huijts/servers/rijksmuseum-mcp",
          "xid": "/mcpproviders/r-huijts/servers/rijksmuseum-mcp",

          "metaurl": "#/mcpproviders/r-huijts/servers/rijksmuseum-mcp/meta",
          "meta": {
            "serverid": "rijksmuseum-mcp",
            "self": "#/mcpproviders/r-huijts/servers/rijksmuseum-mcp/meta",
            "xid": "/mcpproviders/r-huijts/servers/rijksmuseum-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:23.764292066Z",
            "modifiedat": "2025-05-26T16:41:23.764292066Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/r-huijts/servers/rijksmuseum-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/r-huijts/servers/rijksmuseum-mcp/versions",
          "versions": {
            "1": {
              "serverid": "rijksmuseum-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/r-huijts/servers/rijksmuseum-mcp/versions/1",
              "xid": "/mcpproviders/r-huijts/servers/rijksmuseum-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.r-huijts/rijksmuseum-mcp",
              "isdefault": true,
              "description": "Rijksmuseum MCP integration for artwork exploration and analysis",
              "createdat": "2025-05-26T16:41:23.764292066Z",
              "modifiedat": "2025-05-26T16:41:23.764292066Z",
              "ancestor": "1",
              "id": "6a64a548-c36c-400f-b43c-4d977aa1e482",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_api_key_here",
                      "name": "RIJKSMUSEUM_API_KEY"
                    }
                  ],
                  "name": "mcp-server-rijksmuseum",
                  "registry_name": "unknown",
                  "version": "1.0.4"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "907496920",
                "source": "github",
                "url": "https://github.com/r-huijts/rijksmuseum-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Search and filter artworks in the Rijksmuseum collection. This tool provides extensive filtering options including artist name, type of artwork, materials, techniques, time periods, colors, and more. Results can be sorted in various ways and are paginated.",
                  "inputschema": {
                    "properties": {
                      "century": {
                        "description": "Filter artworks by the century they were created in. Use negative numbers for BCE, positive for CE. Range from -1 (100-1 BCE) to 21 (2000-2099 CE). Example: 17 for 17th century (1600-1699).",
                        "maximum": 21,
                        "minimum": -1,
                        "type": "integer"
                      },
                      "color": {
                        "description": "Filter artworks by predominant color. Use hexadecimal color codes without the # symbol. Examples: 'FF0000' for red, '00FF00' for green, '0000FF' for blue. The API will match artworks containing this color.",
                        "type": "string"
                      },
                      "culture": {
                        "default": "en",
                        "description": "Language for the search and returned data. Use 'en' for English or 'nl' for Dutch (Nederlands). Affects artwork titles, descriptions, and other text fields.",
                        "enum": [
                          "nl",
                          "en"
                        ],
                        "type": "string"
                      },
                      "imgonly": {
                        "default": false,
                        "description": "When true, only returns artworks that have associated images. Set to true if you need to show or analyze the visual aspects of artworks.",
                        "type": "boolean"
                      },
                      "involvedMaker": {
                        "description": "Search for artworks by a specific artist. Must be case-sensitive and exact, e.g., 'Rembrandt+van+Rijn', 'Vincent+van+Gogh'. Use + for spaces in names.",
                        "type": "string"
                      },
                      "material": {
                        "description": "Filter by the material used in the artwork. Examples: 'canvas', 'paper', 'wood', 'oil paint', 'marble'. Matches exact material names from the museum's classification.",
                        "type": "string"
                      },
                      "p": {
                        "default": 0,
                        "description": "Page number for paginated results, starting at 0. Use in combination with 'ps' to navigate through large result sets. Note: p * ps cannot exceed 10,000.",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "ps": {
                        "default": 10,
                        "description": "Number of artworks to return per page. Higher values return more results but take longer to process. Maximum of 100 items per page.",
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "q": {
                        "description": "General search query that will match against artist names, artwork titles, descriptions, materials, techniques, etc. Use this for broad searches like 'sunflowers', 'portrait', 'landscape', etc.",
                        "type": "string"
                      },
                      "sortBy": {
                        "default": "relevance",
                        "description": "Determines the order of results. Options: 'relevance' (best matches first), 'objecttype' (grouped by type), 'chronologic' (oldest to newest), 'achronologic' (newest to oldest), 'artist' (artist name A-Z), 'artistdesc' (artist name Z-A).",
                        "enum": [
                          "relevance",
                          "objecttype",
                          "chronologic",
                          "achronologic",
                          "artist",
                          "artistdesc"
                        ],
                        "type": "string"
                      },
                      "technique": {
                        "description": "Filter by the technique used to create the artwork. Examples: 'oil painting', 'etching', 'watercolor', 'photography'. Matches specific techniques from the museum's classification.",
                        "type": "string"
                      },
                      "toppieces": {
                        "default": false,
                        "description": "When true, only returns artworks designated as masterpieces by the Rijksmuseum. These are the most significant and famous works in the collection.",
                        "type": "boolean"
                      },
                      "type": {
                        "description": "Filter by the type of artwork. Common values include 'painting', 'print', 'drawing', 'sculpture', 'photograph', 'furniture'. Use singular form.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "search_artwork"
                },
                {
                  "description": "Retrieve comprehensive details about a specific artwork from the Rijksmuseum collection. Returns extensive information including:\n\n- Basic details (title, artist, dates)\n- Physical properties (dimensions, materials, techniques)\n- Historical context (dating, historical persons, documentation)\n- Visual information (colors, image data)\n- Curatorial information (descriptions, labels, location)\n- Acquisition details\n- Exhibition history\n\nThis is the primary tool for in-depth research on a specific artwork, providing all available museum documentation and metadata.",
                  "inputschema": {
                    "properties": {
                      "culture": {
                        "default": "en",
                        "description": "Language for the artwork details. Use 'en' for English or 'nl' for Dutch (Nederlands). Affects all textual information including descriptions, titles, and historical documentation.",
                        "enum": [
                          "nl",
                          "en"
                        ],
                        "type": "string"
                      },
                      "objectNumber": {
                        "description": "The unique identifier of the artwork in the Rijksmuseum collection. Format is typically a combination of letters and numbers (e.g., 'SK-C-5' for The Night Watch, 'SK-A-3262' for Van Gogh's Self Portrait). Case-sensitive. This ID can be obtained from search results.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "objectNumber"
                    ],
                    "type": "object"
                  },
                  "name": "get_artwork_details"
                },
                {
                  "description": "Retrieve detailed image tile information for high-resolution viewing of an artwork. This tool provides data for implementing deep zoom functionality, allowing detailed examination of the artwork at various zoom levels.\n\nThe response includes multiple zoom levels (z0 to z6):\n- z0: Highest resolution (largest image)\n- z6: Lowest resolution (smallest image)\n\nEach zoom level contains:\n- Total width and height of the image at that level\n- A set of image tiles that make up the complete image\n- Position information (x,y) for each tile\n\nThis is particularly useful for:\n- Implementing deep zoom viewers\n- Studying fine artwork details\n- Analyzing brushwork or conservation details\n- Creating interactive viewing experiences",
                  "inputschema": {
                    "properties": {
                      "culture": {
                        "default": "en",
                        "description": "Language for the API response. Use 'en' for English or 'nl' for Dutch (Nederlands). While this endpoint primarily returns image data, any textual metadata will be in the specified language.",
                        "enum": [
                          "nl",
                          "en"
                        ],
                        "type": "string"
                      },
                      "objectNumber": {
                        "description": "The unique identifier of the artwork in the Rijksmuseum collection. Same format as used in get_artwork_details. The artwork must have an associated image for this to work.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "objectNumber"
                    ],
                    "type": "object"
                  },
                  "name": "get_artwork_image"
                },
                {
                  "description": "Retrieve collections created by Rijksstudio users. These are curated sets of artworks that users have grouped together based on themes, artists, periods, or personal interests.\n\nEach set includes:\n- Basic information (name, description, creation date)\n- Creator details (username, language preference)\n- Collection statistics (number of items)\n- Navigation links (API and web URLs)\n\nThis tool is useful for:\n- Discovering user-curated exhibitions\n- Finding thematically related artworks\n- Exploring popular artwork groupings\n- Studying collection patterns",
                  "inputschema": {
                    "properties": {
                      "culture": {
                        "default": "en",
                        "description": "Language for the response data. Use 'en' for English or 'nl' for Dutch (Nederlands). Affects set descriptions and user information.",
                        "enum": [
                          "nl",
                          "en"
                        ],
                        "type": "string"
                      },
                      "page": {
                        "default": 0,
                        "description": "Page number for paginated results, starting at 0. Use with pageSize to navigate through sets. Note: page * pageSize cannot exceed 10,000.",
                        "minimum": 0,
                        "type": "number"
                      },
                      "pageSize": {
                        "default": 10,
                        "description": "Number of user sets to return per page. Must be between 1 and 100. Larger values return more results but take longer to process.",
                        "maximum": 100,
                        "minimum": 1,
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_user_sets"
                },
                {
                  "description": "Retrieve detailed information about a specific user-created collection in Rijksstudio. Returns comprehensive information about the set and its contents, including:\n\n- Set metadata (name, description, creation date)\n- Creator information\n- List of artworks in the set\n- Image data for each artwork\n- Navigation links\n\nThis tool is particularly useful for:\n- Analyzing thematic groupings of artworks\n- Studying curatorial choices\n- Understanding collection patterns\n- Exploring relationships between artworks",
                  "inputschema": {
                    "properties": {
                      "culture": {
                        "default": "en",
                        "description": "Language for the response data. Use 'en' for English or 'nl' for Dutch (Nederlands). Affects set descriptions and artwork information.",
                        "enum": [
                          "nl",
                          "en"
                        ],
                        "type": "string"
                      },
                      "page": {
                        "default": 0,
                        "description": "Page number for paginated results, starting at 0. Use with pageSize to navigate through large sets. Note: page * pageSize cannot exceed 10,000.",
                        "minimum": 0,
                        "type": "number"
                      },
                      "pageSize": {
                        "default": 25,
                        "description": "Number of artworks to return per page. Must be between 1 and 100. Default is 25. Larger values return more artworks but take longer to process.",
                        "maximum": 100,
                        "minimum": 1,
                        "type": "number"
                      },
                      "setId": {
                        "description": "The unique identifier of the user set to fetch. Format is typically 'userId-setname'. This ID can be obtained from the get_user_sets results.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "setId"
                    ],
                    "type": "object"
                  },
                  "name": "get_user_set_details"
                },
                {
                  "description": "Open a high-resolution image of an artwork in the default web browser for viewing. This tool is useful when you want to examine an artwork visually or show it to the user. Works with any valid Rijksmuseum image URL.",
                  "inputschema": {
                    "properties": {
                      "imageUrl": {
                        "description": "The full URL of the artwork image to open. Must be a valid HTTP/HTTPS URL from the Rijksmuseum's servers. These URLs can be obtained from artwork search results or details.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "imageUrl"
                    ],
                    "type": "object"
                  },
                  "name": "open_image_in_browser"
                },
                {
                  "description": "Generate a chronological timeline of an artist's works in the Rijksmuseum collection. This tool is perfect for studying an artist's development, analyzing their artistic periods, or understanding their contribution to art history over time.",
                  "inputschema": {
                    "properties": {
                      "artist": {
                        "description": "The name of the artist to create a timeline for. Must match the museum's naming convention (e.g., 'Rembrandt van Rijn', 'Vincent van Gogh'). Case sensitive and exact match required.",
                        "type": "string"
                      },
                      "maxWorks": {
                        "default": 10,
                        "description": "Maximum number of works to include in the timeline. Works are selected based on significance and quality of available images. Higher numbers give a more complete picture but may include less significant works.",
                        "maximum": 50,
                        "minimum": 1,
                        "type": "number"
                      }
                    },
                    "required": [
                      "artist"
                    ],
                    "type": "object"
                  },
                  "name": "get_artist_timeline"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:32Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "strava-mcp": {
          "serverid": "strava-mcp",
          "self": "#/mcpproviders/r-huijts/servers/strava-mcp",
          "xid": "/mcpproviders/r-huijts/servers/strava-mcp",

          "metaurl": "#/mcpproviders/r-huijts/servers/strava-mcp/meta",
          "meta": {
            "serverid": "strava-mcp",
            "self": "#/mcpproviders/r-huijts/servers/strava-mcp/meta",
            "xid": "/mcpproviders/r-huijts/servers/strava-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:23.904571103Z",
            "modifiedat": "2025-05-26T16:41:23.904571103Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/r-huijts/servers/strava-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/r-huijts/servers/strava-mcp/versions",
          "versions": {
            "1": {
              "serverid": "strava-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/r-huijts/servers/strava-mcp/versions/1",
              "xid": "/mcpproviders/r-huijts/servers/strava-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.r-huijts/strava-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that connects to Strava API, providing tools to access Strava data through LLMs",
              "createdat": "2025-05-26T16:41:23.904571103Z",
              "modifiedat": "2025-05-26T16:41:23.904571103Z",
              "ancestor": "1",
              "id": "09a2ecf8-1774-490e-8542-2b25a6445a58",
              "packages": [
                {
                  "name": "strava-mcp-server",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "repository": {
                "id": "961429605",
                "source": "github",
                "url": "https://github.com/r-huijts/strava-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:17Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 3
    },
    "ragieai": {
      "mcpproviderid": "ragieai",
      "self": "#/mcpproviders/ragieai",
      "xid": "/mcpproviders/ragieai",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:23.720543687Z",
      "modifiedat": "2025-05-26T16:42:23.720543687Z",

      "serversurl": "#/mcpproviders/ragieai/servers",
      "servers": {
        "ragie-mcp-server": {
          "serverid": "ragie-mcp-server",
          "self": "#/mcpproviders/ragieai/servers/ragie-mcp-server",
          "xid": "/mcpproviders/ragieai/servers/ragie-mcp-server",

          "metaurl": "#/mcpproviders/ragieai/servers/ragie-mcp-server/meta",
          "meta": {
            "serverid": "ragie-mcp-server",
            "self": "#/mcpproviders/ragieai/servers/ragie-mcp-server/meta",
            "xid": "/mcpproviders/ragieai/servers/ragie-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:23.720543687Z",
            "modifiedat": "2025-05-26T16:42:23.720543687Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ragieai/servers/ragie-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ragieai/servers/ragie-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "ragie-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/ragieai/servers/ragie-mcp-server/versions/1",
              "xid": "/mcpproviders/ragieai/servers/ragie-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.ragieai/ragie-mcp-server",
              "isdefault": true,
              "description": "Ragie Model Context Protocol Server",
              "createdat": "2025-05-26T16:42:23.720543687Z",
              "modifiedat": "2025-05-26T16:42:23.720543687Z",
              "ancestor": "1",
              "id": "324d6879-eb6f-4565-bdeb-6c4b00d91384",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_api_key",
                      "name": "RAGIE_API_KEY"
                    }
                  ],
                  "name": "@ragieai/mcp-server",
                  "package_arguments": [
                    {
                      "default": "--partition optional_partition_id",
                      "description": "Partition identifier (optional)",
                      "format": "string",
                      "is_required": true,
                      "name": "--partition optional_partition_id",
                      "type": "named",
                      "value": "--partition optional_partition_id",
                      "value_hint": "optional_partition_id"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "0.0.7"
                }
              ],
              "repository": {
                "id": "940305209",
                "source": "github",
                "url": "https://github.com/ragieai/ragie-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:01:08Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "rajvirtual": {
      "mcpproviderid": "rajvirtual",
      "self": "#/mcpproviders/rajvirtual",
      "xid": "/mcpproviders/rajvirtual",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:38.277416663Z",
      "modifiedat": "2025-05-26T16:41:38.277416663Z",

      "serversurl": "#/mcpproviders/rajvirtual/servers",
      "servers": {
        "MCP-Servers": {
          "serverid": "MCP-Servers",
          "self": "#/mcpproviders/rajvirtual/servers/MCP-Servers",
          "xid": "/mcpproviders/rajvirtual/servers/MCP-Servers",

          "metaurl": "#/mcpproviders/rajvirtual/servers/MCP-Servers/meta",
          "meta": {
            "serverid": "MCP-Servers",
            "self": "#/mcpproviders/rajvirtual/servers/MCP-Servers/meta",
            "xid": "/mcpproviders/rajvirtual/servers/MCP-Servers/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:38.277416663Z",
            "modifiedat": "2025-05-26T16:41:38.277416663Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/rajvirtual/servers/MCP-Servers/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/rajvirtual/servers/MCP-Servers/versions",
          "versions": {
            "1": {
              "serverid": "MCP-Servers",
              "versionid": "1",
              "self": "#/mcpproviders/rajvirtual/servers/MCP-Servers/versions/1",
              "xid": "/mcpproviders/rajvirtual/servers/MCP-Servers/versions/1",
              "epoch": 1,
              "name": "io.github.rajvirtual/mcp-servers",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that provides AI assistants with access to Microsoft OneNote. This server enables AI models to read from and write to OneNote notebooks, sections, and pages.",
              "createdat": "2025-05-26T16:41:38.277416663Z",
              "modifiedat": "2025-05-26T16:41:38.277416663Z",
              "ancestor": "1",
              "id": "a2e44c59-4a60-47a6-8588-22b90cebe345",
              "packages": [
                {
                  "name": "rajvirtual/MCP-Servers",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [
                {
                  "description": "List all available OneNote notebooks",
                  "name": "Get all notebooks"
                },
                {
                  "description": "List all sections in a specific notebook",
                  "name": "Get sections in a notebook"
                },
                {
                  "description": "List all pages in a specific section",
                  "name": "Get pages in a section"
                },
                {
                  "description": "Get content from a specific page",
                  "name": "Get a specific page"
                },
                {
                  "description": "Create a brand new notebook",
                  "name": "Create a new notebook"
                },
                {
                  "description": "Create a new section in a specific notebook",
                  "name": "Create a section in a notebook"
                },
                {
                  "description": "Create a new page in a specific section",
                  "name": "Create a page in a section"
                }
              ],
              "repository": {
                "id": "947565134",
                "source": "github",
                "url": "https://github.com/rajvirtual/MCP-Servers"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Read content from Microsoft OneNote notebooks, sections, or pages",
                  "inputschema": {
                    "properties": {
                      "includeContent": {
                        "default": true,
                        "description": "Whether to include the content of the page",
                        "type": "boolean"
                      },
                      "includeMetadata": {
                        "default": false,
                        "description": "Whether to include metadata about the page",
                        "type": "boolean"
                      },
                      "notebookId": {
                        "description": "ID of the notebook to list sections from",
                        "type": "string"
                      },
                      "pageId": {
                        "description": "ID of the specific page to read",
                        "type": "string"
                      },
                      "sectionId": {
                        "description": "ID of the section to list pages from",
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "read_content"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  },
                  "name": "onenote-read"
                },
                {
                  "description": "Create new content in Microsoft OneNote",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "Content in Markdown format",
                        "type": "string"
                      },
                      "parentId": {
                        "description": "ID of the parent section or notebook",
                        "type": "string"
                      },
                      "title": {
                        "description": "Title of the content to create",
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "create_page",
                          "create_section",
                          "create_notebook"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "onenote-create"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:48Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ramp-public": {
      "mcpproviderid": "ramp-public",
      "self": "#/mcpproviders/ramp-public",
      "xid": "/mcpproviders/ramp-public",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:28.779168295Z",
      "modifiedat": "2025-05-26T16:41:28.779168295Z",

      "serversurl": "#/mcpproviders/ramp-public/servers",
      "servers": {
        "ramp-mcp": {
          "serverid": "ramp-mcp",
          "self": "#/mcpproviders/ramp-public/servers/ramp-mcp",
          "xid": "/mcpproviders/ramp-public/servers/ramp-mcp",

          "metaurl": "#/mcpproviders/ramp-public/servers/ramp-mcp/meta",
          "meta": {
            "serverid": "ramp-mcp",
            "self": "#/mcpproviders/ramp-public/servers/ramp-mcp/meta",
            "xid": "/mcpproviders/ramp-public/servers/ramp-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:28.779168295Z",
            "modifiedat": "2025-05-26T16:41:28.779168295Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ramp-public/servers/ramp-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ramp-public/servers/ramp-mcp/versions",
          "versions": {
            "1": {
              "serverid": "ramp-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ramp-public/servers/ramp-mcp/versions/1",
              "xid": "/mcpproviders/ramp-public/servers/ramp-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ramp-public/ramp-mcp",
              "isdefault": true,
              "description": "ramp_mcp",
              "createdat": "2025-05-26T16:41:28.779168295Z",
              "modifiedat": "2025-05-26T16:41:28.779168295Z",
              "ancestor": "1",
              "id": "687591a4-a5da-44df-8d55-f32e19d5658a",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cCLIENT_ID\u003e",
                      "name": "RAMP_CLIENT_ID"
                    },
                    {
                      "description": "\u003cCLIENT_SECRET\u003e",
                      "name": "RAMP_CLIENT_SECRET"
                    },
                    {
                      "description": "\u003cdemo|qa|prd\u003e",
                      "name": "RAMP_ENV"
                    }
                  ],
                  "name": "ramp-mcp",
                  "package_arguments": [
                    {
                      "default": "--directory /\u003cABSOLUTE-PATH-TO\u003e/ramp-mcp",
                      "description": "Specify the directory to use",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory /\u003cABSOLUTE-PATH-TO\u003e/ramp-mcp",
                      "type": "named",
                      "value": "--directory /\u003cABSOLUTE-PATH-TO\u003e/ramp-mcp",
                      "value_hint": "/\u003cABSOLUTE-PATH-TO\u003e/ramp-mcp"
                    },
                    {
                      "default": "ramp-mcp",
                      "description": "Application name",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "ramp-mcp",
                      "value_hint": "ramp-mcp"
                    },
                    {
                      "default": "-s",
                      "description": "Run in silent mode",
                      "format": "string",
                      "is_required": true,
                      "name": "-s",
                      "type": "named",
                      "value": "-s"
                    },
                    {
                      "default": "transactions:read,reimbursements:read",
                      "description": "Specify resource permissions",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "transactions:read,reimbursements:read",
                      "value_hint": "transactions:read,reimbursements:read"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.0.1"
                }
              ],
              "repository": {
                "id": "951969645",
                "source": "github",
                "url": "https://github.com/ramp-public/ramp_mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:01:39Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "raoulbia-ai": {
      "mcpproviderid": "raoulbia-ai",
      "self": "#/mcpproviders/raoulbia-ai",
      "xid": "/mcpproviders/raoulbia-ai",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:31.766576367Z",
      "modifiedat": "2025-05-26T16:41:31.766576367Z",

      "serversurl": "#/mcpproviders/raoulbia-ai/servers",
      "servers": {
        "mcp-server-for-intercom": {
          "serverid": "mcp-server-for-intercom",
          "self": "#/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom",
          "xid": "/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom",

          "metaurl": "#/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom/meta",
          "meta": {
            "serverid": "mcp-server-for-intercom",
            "self": "#/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom/meta",
            "xid": "/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:31.766576367Z",
            "modifiedat": "2025-05-26T16:41:31.766576367Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-for-intercom",
              "versionid": "1",
              "self": "#/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom/versions/1",
              "xid": "/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom/versions/1",
              "epoch": 1,
              "name": "io.github.raoulbia-ai/mcp-server-for-intercom",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:31.766576367Z",
              "modifiedat": "2025-05-26T16:41:31.766576367Z",
              "ancestor": "1",
              "id": "1967f4e6-f229-4d5f-a648-9bdc67d39da8",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_intercom_api_token",
                      "name": "INTERCOM_ACCESS_TOKEN"
                    }
                  ],
                  "name": "mcp-server-for-intercom",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "945565923",
                "source": "github",
                "url": "https://github.com/raoulbia-ai/mcp-server-for-intercom"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Searches for conversations by customer email or ID with optional date filtering.",
                  "inputschema": {
                    "properties": {
                      "customerIdentifier": {
                        "description": "Customer email or ID to search for",
                        "type": "string"
                      },
                      "endDate": {
                        "description": "Optional end date in DD/MM/YYYY format (e.g., '21/01/2025')",
                        "type": "string"
                      },
                      "keywords": {
                        "description": "Optional keywords to filter conversations by content",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "startDate": {
                        "description": "Optional start date in DD/MM/YYYY format (e.g., '15/01/2025')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "customerIdentifier"
                    ],
                    "type": "object"
                  },
                  "name": "search_conversations_by_customer"
                },
                {
                  "description": "Searches for tickets by status with optional date filtering.",
                  "inputschema": {
                    "properties": {
                      "endDate": {
                        "description": "Optional end date in DD/MM/YYYY format (e.g., '21/01/2025')",
                        "type": "string"
                      },
                      "startDate": {
                        "description": "Optional start date in DD/MM/YYYY format (e.g., '15/01/2025')",
                        "type": "string"
                      },
                      "status": {
                        "description": "Ticket status to search for (open, pending, or resolved)",
                        "enum": [
                          "open",
                          "pending",
                          "resolved"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "status"
                    ],
                    "type": "object"
                  },
                  "name": "search_tickets_by_status"
                },
                {
                  "description": "Retrieves Intercom conversations within a specific date range (max 7 days).",
                  "inputschema": {
                    "properties": {
                      "endDate": {
                        "description": "End date in DD/MM/YYYY format (e.g., '21/01/2025'). Required.",
                        "type": "string"
                      },
                      "exclude": {
                        "description": "Optional exclusion filter for conversation content.",
                        "type": "string"
                      },
                      "keyword": {
                        "description": "Optional keyword to filter conversations by content.",
                        "type": "string"
                      },
                      "startDate": {
                        "description": "Start date in DD/MM/YYYY format (e.g., '15/01/2025'). Required.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "startDate",
                      "endDate"
                    ],
                    "type": "object"
                  },
                  "name": "list_conversations"
                },
                {
                  "description": "Searches for tickets by customer email or ID with optional date filtering.",
                  "inputschema": {
                    "properties": {
                      "customerIdentifier": {
                        "description": "Customer email or ID to search for",
                        "type": "string"
                      },
                      "endDate": {
                        "description": "Optional end date in DD/MM/YYYY format (e.g., '21/01/2025')",
                        "type": "string"
                      },
                      "startDate": {
                        "description": "Optional start date in DD/MM/YYYY format (e.g., '15/01/2025')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "customerIdentifier"
                    ],
                    "type": "object"
                  },
                  "name": "search_tickets_by_customer"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:28Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ravenwits": {
      "mcpproviderid": "ravenwits",
      "self": "#/mcpproviders/ravenwits",
      "xid": "/mcpproviders/ravenwits",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:30.4304985Z",
      "modifiedat": "2025-05-26T16:42:30.4304985Z",

      "serversurl": "#/mcpproviders/ravenwits/servers",
      "servers": {
        "mcp-server-arangodb": {
          "serverid": "mcp-server-arangodb",
          "self": "#/mcpproviders/ravenwits/servers/mcp-server-arangodb",
          "xid": "/mcpproviders/ravenwits/servers/mcp-server-arangodb",

          "metaurl": "#/mcpproviders/ravenwits/servers/mcp-server-arangodb/meta",
          "meta": {
            "serverid": "mcp-server-arangodb",
            "self": "#/mcpproviders/ravenwits/servers/mcp-server-arangodb/meta",
            "xid": "/mcpproviders/ravenwits/servers/mcp-server-arangodb/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:30.4304985Z",
            "modifiedat": "2025-05-26T16:42:30.4304985Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ravenwits/servers/mcp-server-arangodb/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ravenwits/servers/mcp-server-arangodb/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-arangodb",
              "versionid": "1",
              "self": "#/mcpproviders/ravenwits/servers/mcp-server-arangodb/versions/1",
              "xid": "/mcpproviders/ravenwits/servers/mcp-server-arangodb/versions/1",
              "epoch": 1,
              "name": "io.github.ravenwits/mcp-server-arangodb",
              "isdefault": true,
              "description": "This is a TypeScript-based MCP server that provides database interaction capabilities through ArangoDB. It implements core database operations and allows seamless integration with ArangoDB through MCP tools. You can use it wih Claude app and also extension for VSCode that works with mcp like Cline!",
              "createdat": "2025-05-26T16:42:30.4304985Z",
              "modifiedat": "2025-05-26T16:42:30.4304985Z",
              "ancestor": "1",
              "id": "1e97b930-031a-47b6-afb1-8af61dd81ec0",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_database_url",
                      "name": "ARANGO_URL"
                    },
                    {
                      "description": "your_database_name",
                      "name": "ARANGO_DB"
                    },
                    {
                      "description": "your_username",
                      "name": "ARANGO_USERNAME"
                    },
                    {
                      "description": "your_password",
                      "name": "ARANGO_PASSWORD"
                    }
                  ],
                  "name": "arango-server",
                  "registry_name": "unknown",
                  "version": "0.4.4"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "909459279",
                "source": "github",
                "url": "https://github.com/ravenwits/mcp-server-arangodb"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Execute AQL queries",
                  "inputschema": {
                    "properties": {
                      "bindVars": {
                        "type": "object"
                      },
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "arango_query"
                },
                {
                  "description": "Insert documents into collections",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "document": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "collection",
                      "document"
                    ],
                    "type": "object"
                  },
                  "name": "arango_insert"
                },
                {
                  "description": "Update existing documents",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      },
                      "update": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "collection",
                      "key",
                      "update"
                    ],
                    "type": "object"
                  },
                  "name": "arango_update"
                },
                {
                  "description": "Remove documents from collections",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "arango_remove"
                },
                {
                  "description": "Backup all collections to JSON files",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "docLimit": {
                        "type": "integer"
                      },
                      "outputDir": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "outputDir"
                    ],
                    "type": "object"
                  },
                  "name": "arango_backup"
                },
                {
                  "description": "List all collections in the database",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "arango_list_collections"
                },
                {
                  "description": "Create a new collection in the database",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "document",
                          "edge"
                        ],
                        "type": "string"
                      },
                      "waitForSync": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "arango_create_collection"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:13Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "razvanmacovei": {
      "mcpproviderid": "razvanmacovei",
      "self": "#/mcpproviders/razvanmacovei",
      "xid": "/mcpproviders/razvanmacovei",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:25.068742419Z",
      "modifiedat": "2025-05-26T16:41:25.068742419Z",

      "serversurl": "#/mcpproviders/razvanmacovei/servers",
      "servers": {
        "k8s-multicluster-mcp": {
          "serverid": "k8s-multicluster-mcp",
          "self": "#/mcpproviders/razvanmacovei/servers/k8s-multicluster-mcp",
          "xid": "/mcpproviders/razvanmacovei/servers/k8s-multicluster-mcp",

          "metaurl": "#/mcpproviders/razvanmacovei/servers/k8s-multicluster-mcp/meta",
          "meta": {
            "serverid": "k8s-multicluster-mcp",
            "self": "#/mcpproviders/razvanmacovei/servers/k8s-multicluster-mcp/meta",
            "xid": "/mcpproviders/razvanmacovei/servers/k8s-multicluster-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:25.068742419Z",
            "modifiedat": "2025-05-26T16:41:25.068742419Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/razvanmacovei/servers/k8s-multicluster-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/razvanmacovei/servers/k8s-multicluster-mcp/versions",
          "versions": {
            "1": {
              "serverid": "k8s-multicluster-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/razvanmacovei/servers/k8s-multicluster-mcp/versions/1",
              "xid": "/mcpproviders/razvanmacovei/servers/k8s-multicluster-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.razvanmacovei/k8s-multicluster-mcp",
              "isdefault": true,
              "description": "An MCP (Model Context Protocol) server application for Kubernetes operations, providing a standardized API to interact with multiple Kubernetes clusters simultaneously using multiple kubeconfig files.",
              "createdat": "2025-05-26T16:41:25.068742419Z",
              "modifiedat": "2025-05-26T16:41:25.068742419Z",
              "ancestor": "1",
              "id": "87c3876b-995b-4838-901b-062cdfb884c7",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "/path/to/your/kubeconfigs",
                      "name": "KUBECONFIG_DIR"
                    }
                  ],
                  "name": "razvanmacovei/k8s-multicluster-mcp",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "979253683",
                "source": "github",
                "url": "https://github.com/razvanmacovei/k8s-multicluster-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:46Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "reading-plus-ai": {
      "mcpproviderid": "reading-plus-ai",
      "self": "#/mcpproviders/reading-plus-ai",
      "xid": "/mcpproviders/reading-plus-ai",
      "epoch": 2,
      "createdat": "2025-05-26T16:42:01.433536658Z",
      "modifiedat": "2025-05-26T16:42:01.539812677Z",

      "serversurl": "#/mcpproviders/reading-plus-ai/servers",
      "servers": {
        "mcp-server-data-exploration": {
          "serverid": "mcp-server-data-exploration",
          "self": "#/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration",
          "xid": "/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration",

          "metaurl": "#/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration/meta",
          "meta": {
            "serverid": "mcp-server-data-exploration",
            "self": "#/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration/meta",
            "xid": "/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:01.539812677Z",
            "modifiedat": "2025-05-26T16:42:01.539812677Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-data-exploration",
              "versionid": "1",
              "self": "#/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration/versions/1",
              "xid": "/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration/versions/1",
              "epoch": 1,
              "name": "io.github.reading-plus-ai/mcp-server-data-exploration",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:01.539812677Z",
              "modifiedat": "2025-05-26T16:42:01.539812677Z",
              "ancestor": "1",
              "id": "14074b80-f3a7-4b45-97ba-7204c92c5f6e",
              "packages": [
                {
                  "name": "mcp-server-ds",
                  "registry_name": "unknown",
                  "version": "0.1.6"
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "The path to the csv file",
                      "name": "csv_path",
                      "required": true
                    },
                    {
                      "description": "The topic the data exploration need to focus on",
                      "name": "topic",
                      "required": false
                    }
                  ],
                  "description": "A prompt to explore a csv dataset as a data scientist",
                  "name": "explore-data"
                }
              ],
              "repository": {
                "id": "899661027",
                "source": "github",
                "url": "https://github.com/reading-plus-ai/mcp-server-data-exploration"
              },
              "resources": [
                {
                  "description": "Notes generated by the data exploration server",
                  "mimetype": "text/plain",
                  "name": "Data Exploration Notes",
                  "uritemplate": "data-exploration://notes"
                }
              ],
              "tools": [
                {
                  "description": "Load CSV File Tool\n\nPurpose:\nLoad a local CSV file into a DataFrame.\n\nUsage Notes:\n\t•\tIf a df_name is not provided, the tool will automatically assign names sequentially as df_1, df_2, and so on.",
                  "inputschema": {
                    "properties": {
                      "csv_path": {
                        "type": "string"
                      },
                      "df_name": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "csv_path"
                    ],
                    "type": "object"
                  },
                  "name": "load_csv"
                },
                {
                  "description": "Python Script Execution Tool\n\nPurpose:\nExecute Python scripts for specific data analytics tasks.\n\nAllowed Actions\n\t1.\tPrint Results: Output will be displayed as the script’s stdout.\n\t2.\t[Optional] Save DataFrames: Store DataFrames in memory for future use by specifying a save_to_memory name.\n\nProhibited Actions\n\t1.\tOverwriting Original DataFrames: Do not modify existing DataFrames to preserve their integrity for future tasks.\n\t2.\tCreating Charts: Chart generation is not permitted.",
                  "inputschema": {
                    "properties": {
                      "save_to_memory": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "script": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "script"
                    ],
                    "type": "object"
                  },
                  "name": "run_script"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:16Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-server-deep-research": {
          "serverid": "mcp-server-deep-research",
          "self": "#/mcpproviders/reading-plus-ai/servers/mcp-server-deep-research",
          "xid": "/mcpproviders/reading-plus-ai/servers/mcp-server-deep-research",

          "metaurl": "#/mcpproviders/reading-plus-ai/servers/mcp-server-deep-research/meta",
          "meta": {
            "serverid": "mcp-server-deep-research",
            "self": "#/mcpproviders/reading-plus-ai/servers/mcp-server-deep-research/meta",
            "xid": "/mcpproviders/reading-plus-ai/servers/mcp-server-deep-research/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:01.433536658Z",
            "modifiedat": "2025-05-26T16:42:01.433536658Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/reading-plus-ai/servers/mcp-server-deep-research/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/reading-plus-ai/servers/mcp-server-deep-research/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-deep-research",
              "versionid": "1",
              "self": "#/mcpproviders/reading-plus-ai/servers/mcp-server-deep-research/versions/1",
              "xid": "/mcpproviders/reading-plus-ai/servers/mcp-server-deep-research/versions/1",
              "epoch": 1,
              "name": "io.github.reading-plus-ai/mcp-server-deep-research",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:01.433536658Z",
              "modifiedat": "2025-05-26T16:42:01.433536658Z",
              "ancestor": "1",
              "id": "79f72036-83ee-4420-9767-980e27590e6f",
              "packages": [
                {
                  "name": "mcp-server-deep-research",
                  "registry_name": "unknown",
                  "version": "0.1.1"
                }
              ],
              "repository": {
                "id": "953282616",
                "source": "github",
                "url": "https://github.com/reading-plus-ai/mcp-server-deep-research"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:32Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "redis": {
      "mcpproviderid": "redis",
      "self": "#/mcpproviders/redis",
      "xid": "/mcpproviders/redis",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:39.631503856Z",
      "modifiedat": "2025-05-26T16:41:39.737220243Z",

      "serversurl": "#/mcpproviders/redis/servers",
      "servers": {
        "mcp-redis": {
          "serverid": "mcp-redis",
          "self": "#/mcpproviders/redis/servers/mcp-redis",
          "xid": "/mcpproviders/redis/servers/mcp-redis",

          "metaurl": "#/mcpproviders/redis/servers/mcp-redis/meta",
          "versionsurl": "#/mcpproviders/redis/servers/mcp-redis/versions",
          "versions": {},
          "versionscount": 0
        },
        "mcp-redis-cloud": {
          "serverid": "mcp-redis-cloud",
          "self": "#/mcpproviders/redis/servers/mcp-redis-cloud",
          "xid": "/mcpproviders/redis/servers/mcp-redis-cloud",

          "metaurl": "#/mcpproviders/redis/servers/mcp-redis-cloud/meta",
          "meta": {
            "serverid": "mcp-redis-cloud",
            "self": "#/mcpproviders/redis/servers/mcp-redis-cloud/meta",
            "xid": "/mcpproviders/redis/servers/mcp-redis-cloud/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:39.631503856Z",
            "modifiedat": "2025-05-26T16:41:39.631503856Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/redis/servers/mcp-redis-cloud/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/redis/servers/mcp-redis-cloud/versions",
          "versions": {
            "1": {
              "serverid": "mcp-redis-cloud",
              "versionid": "1",
              "self": "#/mcpproviders/redis/servers/mcp-redis-cloud/versions/1",
              "xid": "/mcpproviders/redis/servers/mcp-redis-cloud/versions/1",
              "epoch": 1,
              "name": "io.github.redis/mcp-redis-cloud",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:39.631503856Z",
              "modifiedat": "2025-05-26T16:41:39.631503856Z",
              "ancestor": "1",
              "id": "b8c0e12b-0c04-486d-95a7-caa33b9eefeb",
              "packages": [
                {
                  "name": "mcp-redis-cloud",
                  "package_arguments": [
                    {
                      "default": "-i",
                      "description": "-i",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i",
                      "value_hint": "-i"
                    },
                    {
                      "default": "--rm",
                      "description": "--rm",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm",
                      "value_hint": "--rm"
                    },
                    {
                      "default": "-e API_KEY=\u003cyour_redis_cloud_api_key\u003e",
                      "description": "-e API_KEY=\u003cyour_redis_cloud_api_key\u003e",
                      "format": "string",
                      "is_required": true,
                      "name": "-e API_KEY=\u003cyour_redis_cloud_api_key\u003e",
                      "type": "named",
                      "value": "-e API_KEY=\u003cyour_redis_cloud_api_key\u003e",
                      "value_hint": "API_KEY=\u003cyour_redis_cloud_api_key\u003e"
                    },
                    {
                      "default": "-e SECRET_KEY=\u003cyour_redis_cloud_api_secret_key\u003e",
                      "description": "-e SECRET_KEY=\u003cyour_redis_cloud_api_secret_key\u003e",
                      "format": "string",
                      "is_required": true,
                      "name": "-e SECRET_KEY=\u003cyour_redis_cloud_api_secret_key\u003e",
                      "type": "named",
                      "value": "-e SECRET_KEY=\u003cyour_redis_cloud_api_secret_key\u003e",
                      "value_hint": "SECRET_KEY=\u003cyour_redis_cloud_api_secret_key\u003e"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "956477944",
                "source": "github",
                "url": "https://github.com/redis/mcp-redis-cloud"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:01:13Z",
                "version": "0.0.1-seed"
              },

              "meta": {
                "serverid": "mcp-redis",
                "self": "#/mcpproviders/redis/servers/mcp-redis/meta",
                "xid": "/mcpproviders/redis/servers/mcp-redis/meta",
                "epoch": 1,
                "createdat": "2025-05-26T16:41:39.737220243Z",
                "modifiedat": "2025-05-26T16:41:39.737220243Z",
                "readonly": false,
                "compatibility": "none",

                "defaultversionid": "1",
                "defaultversionurl": "#/mcpproviders/redis/servers/mcp-redis/versions/1",
                "defaultversionsticky": false
              }
            },
            "1": {
              "serverid": "mcp-redis",
              "versionid": "1",
              "self": "#/mcpproviders/redis/servers/mcp-redis/versions/1",
              "xid": "/mcpproviders/redis/servers/mcp-redis/versions/1",
              "epoch": 1,
              "name": "io.github.redis/mcp-redis",
              "isdefault": true,
              "description": "The official Redis MCP Server is a natural language interface designed for agentic applications to manage and search data in Redis efficiently",
              "createdat": "2025-05-26T16:41:39.737220243Z",
              "modifiedat": "2025-05-26T16:41:39.737220243Z",
              "ancestor": "1",
              "id": "87f325e6-a742-43e4-b8ae-069f7301475d",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "${input:apiKey}",
                      "name": "API_KEY"
                    }
                  ],
                  "name": "redis-mcp-server",
                  "registry_name": "npm",
                  "version": "0.2.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "959084910",
                "source": "github",
                "url": "https://github.com/redis/mcp-redis"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Tools to set, get strings with expiration. Useful for storing simple configuration values, session data, or caching responses.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "string"
                },
                {
                  "description": "Tools to store field-value pairs within a single key. The hash can store vector embeddings. Useful for representing objects with multiple attributes, user profiles, or product information where fields can be accessed individually.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "hash"
                },
                {
                  "description": "Tools with common operations to append and pop items. Useful for queues, message brokers, or maintaining a list of most recent actions.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list"
                },
                {
                  "description": "Tools to add, remove and list set members. Useful for tracking unique values like user IDs or tags, and for performing set operations like intersection.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "set"
                },
                {
                  "description": "Tools to manage data for e.g. leaderboards, priority queues, or time-based analytics with score-based ordering.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "sorted set"
                },
                {
                  "description": "Functionality to publish messages to channels and subscribe to receive them. Useful for real-time notifications, chat applications, or distributing updates to multiple clients.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "pub/sub"
                },
                {
                  "description": "Tools to add, read, and delete from data streams. Useful for event sourcing, activity feeds, or sensor data logging with consumer groups support.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "streams"
                },
                {
                  "description": "Tools to store, retrieve, and manipulate JSON documents in Redis. Useful for complex nested data structures, document databases, or configuration management with path-based access.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "JSON"
                },
                {
                  "description": "Tools to manage vector indexes and perform vector search",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "query engine"
                },
                {
                  "description": "Tool to retrieve information about the database",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "server management"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:01:10Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 2
        }
      },
      "serverscount": 2
    },
    "rember": {
      "mcpproviderid": "rember",
      "self": "#/mcpproviders/rember",
      "xid": "/mcpproviders/rember",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:21.094421893Z",
      "modifiedat": "2025-05-26T16:41:21.094421893Z",

      "serversurl": "#/mcpproviders/rember/servers",
      "servers": {
        "rember-mcp": {
          "serverid": "rember-mcp",
          "self": "#/mcpproviders/rember/servers/rember-mcp",
          "xid": "/mcpproviders/rember/servers/rember-mcp",

          "metaurl": "#/mcpproviders/rember/servers/rember-mcp/meta",
          "meta": {
            "serverid": "rember-mcp",
            "self": "#/mcpproviders/rember/servers/rember-mcp/meta",
            "xid": "/mcpproviders/rember/servers/rember-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:21.094421893Z",
            "modifiedat": "2025-05-26T16:41:21.094421893Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/rember/servers/rember-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/rember/servers/rember-mcp/versions",
          "versions": {
            "1": {
              "serverid": "rember-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/rember/servers/rember-mcp/versions/1",
              "xid": "/mcpproviders/rember/servers/rember-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.rember/rember-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for Rember.",
              "createdat": "2025-05-26T16:41:21.094421893Z",
              "modifiedat": "2025-05-26T16:41:21.094421893Z",
              "ancestor": "1",
              "id": "5e354d7f-e19e-40ba-a760-342d5c93e9aa",
              "packages": [
                {
                  "name": "@getrember/mcp",
                  "package_arguments": [
                    {
                      "default": "--api-key=YOUR_REMBER_API_KEY",
                      "description": "Rember API Key",
                      "format": "string",
                      "is_required": true,
                      "name": "--api-key=YOUR_REMBER_API_KEY",
                      "type": "named",
                      "value": "--api-key=YOUR_REMBER_API_KEY",
                      "value_hint": "YOUR_REMBER_API_KEY"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "1.1.3"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "940533374",
                "source": "github",
                "url": "https://github.com/rember/rember-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Create flashcards with AI. This tool takes a list of notes from Claude, it calls the Rember API to generate a few flashcards for each note. After learning something new in your chat with Claude, you can ask \"help me remember this\" or \"create a few flashcards\" or \"add to Rember\".",
                  "inputschema": {
                    "properties": {
                      "notes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "notes"
                    ],
                    "type": "object"
                  },
                  "name": "create_flashcards"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:01:43Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "rishabkoul": {
      "mcpproviderid": "rishabkoul",
      "self": "#/mcpproviders/rishabkoul",
      "xid": "/mcpproviders/rishabkoul",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:41.280821528Z",
      "modifiedat": "2025-05-26T16:41:41.280821528Z",

      "serversurl": "#/mcpproviders/rishabkoul/servers",
      "servers": {
        "iterm-mcp-server": {
          "serverid": "iterm-mcp-server",
          "self": "#/mcpproviders/rishabkoul/servers/iterm-mcp-server",
          "xid": "/mcpproviders/rishabkoul/servers/iterm-mcp-server",

          "metaurl": "#/mcpproviders/rishabkoul/servers/iterm-mcp-server/meta",
          "meta": {
            "serverid": "iterm-mcp-server",
            "self": "#/mcpproviders/rishabkoul/servers/iterm-mcp-server/meta",
            "xid": "/mcpproviders/rishabkoul/servers/iterm-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:41.280821528Z",
            "modifiedat": "2025-05-26T16:41:41.280821528Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/rishabkoul/servers/iterm-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/rishabkoul/servers/iterm-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "iterm-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/rishabkoul/servers/iterm-mcp-server/versions/1",
              "xid": "/mcpproviders/rishabkoul/servers/iterm-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.rishabkoul/iterm-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:41.280821528Z",
              "modifiedat": "2025-05-26T16:41:41.280821528Z",
              "ancestor": "1",
              "id": "add3f73d-394b-4b99-b255-8d9d89db84c2",
              "packages": [
                {
                  "name": "iterm_mcp_server",
                  "registry_name": "npm",
                  "version": "1.0.4"
                }
              ],
              "repository": {
                "id": "953500133",
                "source": "github",
                "url": "https://github.com/rishabkoul/iTerm-MCP-Server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:34Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "rishijatia": {
      "mcpproviderid": "rishijatia",
      "self": "#/mcpproviders/rishijatia",
      "xid": "/mcpproviders/rishijatia",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:36.079018469Z",
      "modifiedat": "2025-05-26T16:42:36.079018469Z",

      "serversurl": "#/mcpproviders/rishijatia/servers",
      "servers": {
        "fantasy-pl-mcp": {
          "serverid": "fantasy-pl-mcp",
          "self": "#/mcpproviders/rishijatia/servers/fantasy-pl-mcp",
          "xid": "/mcpproviders/rishijatia/servers/fantasy-pl-mcp",

          "metaurl": "#/mcpproviders/rishijatia/servers/fantasy-pl-mcp/meta",
          "meta": {
            "serverid": "fantasy-pl-mcp",
            "self": "#/mcpproviders/rishijatia/servers/fantasy-pl-mcp/meta",
            "xid": "/mcpproviders/rishijatia/servers/fantasy-pl-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:36.079018469Z",
            "modifiedat": "2025-05-26T16:42:36.079018469Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/rishijatia/servers/fantasy-pl-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/rishijatia/servers/fantasy-pl-mcp/versions",
          "versions": {
            "1": {
              "serverid": "fantasy-pl-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/rishijatia/servers/fantasy-pl-mcp/versions/1",
              "xid": "/mcpproviders/rishijatia/servers/fantasy-pl-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.rishijatia/fantasy-pl-mcp",
              "isdefault": true,
              "description": "Fantasy Premier League MCP Server",
              "createdat": "2025-05-26T16:42:36.079018469Z",
              "modifiedat": "2025-05-26T16:42:36.079018469Z",
              "ancestor": "1",
              "id": "f1da402e-a006-4364-a100-5131eb05b579",
              "packages": [
                {
                  "name": "fpl-mcp",
                  "registry_name": "unknown",
                  "version": "0.1.4"
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Available budget in millions (e.g., 8.5)",
                      "name": "budget",
                      "required": true
                    },
                    {
                      "description": "Optional position to target (e.g., MID, FWD, DEF, GKP)",
                      "name": "position",
                      "required": false
                    },
                    {
                      "description": "Optional team name if selling a player from that team",
                      "name": "team_to_sell",
                      "required": false
                    }
                  ],
                  "description": "Create a prompt for getting detailed FPL transfer advice",
                  "name": "transfer_advice_prompt"
                },
                {
                  "arguments": [
                    {
                      "description": "Name of the player to analyze",
                      "name": "player_name",
                      "required": true
                    },
                    {
                      "description": "Whether to compare with similar players",
                      "name": "include_comparisons",
                      "required": false
                    }
                  ],
                  "description": "Create a prompt for analyzing an FPL player in depth",
                  "name": "player_analysis_prompt"
                },
                {
                  "arguments": [
                    {
                      "description": "Comma-separated list of players in the team",
                      "name": "player_list",
                      "required": true
                    },
                    {
                      "description": "Remaining budget in millions",
                      "name": "budget_remaining",
                      "required": false
                    }
                  ],
                  "description": "Create a prompt for rating and analyzing an FPL team",
                  "name": "team_rating_prompt"
                },
                {
                  "arguments": [
                    {
                      "description": "Maximum ownership percentage to consider",
                      "name": "max_ownership",
                      "required": false
                    },
                    {
                      "description": "Optional maximum budget per player in millions",
                      "name": "budget",
                      "required": false
                    }
                  ],
                  "description": "Create a prompt for finding differential players with low ownership",
                  "name": "differential_players_prompt"
                },
                {
                  "arguments": [
                    {
                      "description": "Comma-separated list of available chips (e.g., \"Wildcard, Free Hit, Bench Boost\")",
                      "name": "available_chips",
                      "required": true
                    }
                  ],
                  "description": "Create a prompt for chip strategy advice",
                  "name": "chip_strategy_prompt"
                }
              ],
              "repository": {
                "id": "948676369",
                "source": "github",
                "url": "https://github.com/rishijatia/fantasy-pl-mcp"
              },
              "resources": [
                {
                  "description": "Get a formatted list of all players with comprehensive statistics",
                  "name": "players",
                  "uritemplate": "fpl://static/players"
                },
                {
                  "description": "Get player information by searching for their name",
                  "name": "player_by_name",
                  "uritemplate": "fpl://static/players/{name}"
                },
                {
                  "description": "Get a formatted list of all Premier League teams with strength ratings",
                  "name": "teams",
                  "uritemplate": "fpl://static/teams"
                },
                {
                  "description": "Get team information by searching for their name",
                  "name": "team_by_name",
                  "uritemplate": "fpl://static/teams/{name}"
                },
                {
                  "description": "Get information about the current gameweek",
                  "name": "current_gameweek",
                  "uritemplate": "fpl://gameweeks/current"
                },
                {
                  "description": "Get information about all gameweeks",
                  "name": "all_gameweeks",
                  "uritemplate": "fpl://gameweeks/all"
                },
                {
                  "description": "Get all fixtures for the current Premier League season",
                  "name": "fixtures",
                  "uritemplate": "fpl://fixtures"
                },
                {
                  "description": "Get fixtures for a specific gameweek",
                  "name": "gameweek_fixtures",
                  "uritemplate": "fpl://fixtures/gameweek/{gameweek_id}"
                },
                {
                  "description": "Get fixtures for a specific team",
                  "name": "team_fixtures",
                  "uritemplate": "fpl://fixtures/team/{team_name}"
                },
                {
                  "description": "Get upcoming fixtures for a specific player",
                  "name": "player_fixtures",
                  "uritemplate": "fpl://players/{player_name}/fixtures"
                },
                {
                  "description": "Get information about upcoming blank gameweeks",
                  "name": "blank_gameweeks",
                  "uritemplate": "fpl://gameweeks/blank"
                },
                {
                  "description": "Get information about upcoming double gameweeks",
                  "name": "double_gameweeks",
                  "uritemplate": "fpl://gameweeks/double"
                }
              ],
              "tools": [
                {
                  "description": "Check if FPL authentication is working correctly",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "check_fpl_authentication"
                },
                {
                  "description": "Get precise information about current, previous, and next gameweeks",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_gameweek_status"
                },
                {
                  "description": "Analyze upcoming fixtures for a player and provide a difficulty rating",
                  "inputschema": {
                    "properties": {
                      "num_fixtures": {
                        "type": "integer"
                      },
                      "player_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "player_name"
                    ],
                    "type": "object"
                  },
                  "name": "analyze_player_fixtures"
                },
                {
                  "description": "Get information about upcoming blank gameweeks where teams don't have fixtures",
                  "inputschema": {
                    "properties": {
                      "num_gameweeks": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_blank_gameweeks"
                },
                {
                  "description": "Get information about upcoming double gameweeks where teams play multiple times",
                  "inputschema": {
                    "properties": {
                      "num_gameweeks": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_double_gameweeks"
                },
                {
                  "description": "Filter and analyze FPL players based on multiple criteria",
                  "inputschema": {
                    "properties": {
                      "form_threshold": {
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "include_gameweeks": {
                        "type": "boolean"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "max_ownership": {
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "max_price": {
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "min_ownership": {
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "min_points": {
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "min_price": {
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "num_gameweeks": {
                        "type": "integer"
                      },
                      "position": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "sort_by": {
                        "type": "string"
                      },
                      "sort_order": {
                        "type": "string"
                      },
                      "team": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "name": "analyze_players"
                },
                {
                  "description": "Analyze upcoming fixtures for players, teams, or positions",
                  "inputschema": {
                    "properties": {
                      "entity_name": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "entity_type": {
                        "type": "string"
                      },
                      "include_blanks": {
                        "type": "boolean"
                      },
                      "include_doubles": {
                        "type": "boolean"
                      },
                      "num_gameweeks": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "name": "analyze_fixtures"
                },
                {
                  "description": "Compare multiple players across various metrics",
                  "inputschema": {
                    "properties": {
                      "include_fixture_analysis": {
                        "type": "boolean"
                      },
                      "include_gameweeks": {
                        "type": "boolean"
                      },
                      "metrics": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "num_gameweeks": {
                        "type": "integer"
                      },
                      "player_names": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "player_names"
                    ],
                    "type": "object"
                  },
                  "name": "compare_players"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:35Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "rishikavikondala": {
      "mcpproviderid": "rishikavikondala",
      "self": "#/mcpproviders/rishikavikondala",
      "xid": "/mcpproviders/rishikavikondala",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:52.756911866Z",
      "modifiedat": "2025-05-26T16:41:52.756911866Z",

      "serversurl": "#/mcpproviders/rishikavikondala/servers",
      "servers": {
        "mcp-server-aws": {
          "serverid": "mcp-server-aws",
          "self": "#/mcpproviders/rishikavikondala/servers/mcp-server-aws",
          "xid": "/mcpproviders/rishikavikondala/servers/mcp-server-aws",

          "metaurl": "#/mcpproviders/rishikavikondala/servers/mcp-server-aws/meta",
          "meta": {
            "serverid": "mcp-server-aws",
            "self": "#/mcpproviders/rishikavikondala/servers/mcp-server-aws/meta",
            "xid": "/mcpproviders/rishikavikondala/servers/mcp-server-aws/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:52.756911866Z",
            "modifiedat": "2025-05-26T16:41:52.756911866Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/rishikavikondala/servers/mcp-server-aws/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/rishikavikondala/servers/mcp-server-aws/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-aws",
              "versionid": "1",
              "self": "#/mcpproviders/rishikavikondala/servers/mcp-server-aws/versions/1",
              "xid": "/mcpproviders/rishikavikondala/servers/mcp-server-aws/versions/1",
              "epoch": 1,
              "name": "io.github.rishikavikondala/mcp-server-aws",
              "isdefault": true,
              "description": "A Model Context Protocol server implementation for operations on AWS resources",
              "createdat": "2025-05-26T16:41:52.756911866Z",
              "modifiedat": "2025-05-26T16:41:52.756911866Z",
              "ancestor": "1",
              "id": "e9799403-3917-4c38-9638-c69aebf1ac08",
              "packages": [
                {
                  "name": "mcp-server-aws",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "898207013",
                "source": "github",
                "url": "https://github.com/rishikavikondala/mcp-server-aws"
              },
              "resources": [
                {
                  "description": "Access to automatically logged AWS operations.",
                  "name": "aws-operations",
                  "uritemplate": "audit://aws-operations"
                }
              ],
              "tools": [
                {
                  "description": "Create a new S3 bucket",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "s3_bucket_create"
                },
                {
                  "description": "List all S3 buckets",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "s3_bucket_list"
                },
                {
                  "description": "Delete an S3 bucket",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "s3_bucket_delete"
                },
                {
                  "description": "Upload an object to S3",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "s3_object_upload"
                },
                {
                  "description": "Delete an object from S3",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "s3_object_delete"
                },
                {
                  "description": "List objects in an S3 bucket",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "s3_object_list"
                },
                {
                  "description": "Read an object's content from S3",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "s3_object_read"
                },
                {
                  "description": "Create a new DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_table_create"
                },
                {
                  "description": "Get details about a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_table_describe"
                },
                {
                  "description": "Delete a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_table_delete"
                },
                {
                  "description": "Update a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_table_update"
                },
                {
                  "description": "Put an item into a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_item_put"
                },
                {
                  "description": "Get an item from a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_item_get"
                },
                {
                  "description": "Update an item in a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_item_update"
                },
                {
                  "description": "Delete an item from a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_item_delete"
                },
                {
                  "description": "Query items in a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_item_query"
                },
                {
                  "description": "Scan items in a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_item_scan"
                },
                {
                  "description": "Batch get multiple items from DynamoDB tables",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_batch_get"
                },
                {
                  "description": "Batch write operations (put/delete) for DynamoDB items",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_item_batch_write"
                },
                {
                  "description": "Execute multiple PartiQL statements in a batch",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_batch_execute"
                },
                {
                  "description": "Get the TTL settings for a table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_describe_ttl"
                },
                {
                  "description": "Update the TTL settings for a table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_update_ttl"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:20Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "riza-io": {
      "mcpproviderid": "riza-io",
      "self": "#/mcpproviders/riza-io",
      "xid": "/mcpproviders/riza-io",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:34.58656613Z",
      "modifiedat": "2025-05-26T16:42:34.58656613Z",

      "serversurl": "#/mcpproviders/riza-io/servers",
      "servers": {
        "riza-mcp": {
          "serverid": "riza-mcp",
          "self": "#/mcpproviders/riza-io/servers/riza-mcp",
          "xid": "/mcpproviders/riza-io/servers/riza-mcp",

          "metaurl": "#/mcpproviders/riza-io/servers/riza-mcp/meta",
          "meta": {
            "serverid": "riza-mcp",
            "self": "#/mcpproviders/riza-io/servers/riza-mcp/meta",
            "xid": "/mcpproviders/riza-io/servers/riza-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:34.58656613Z",
            "modifiedat": "2025-05-26T16:42:34.58656613Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/riza-io/servers/riza-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/riza-io/servers/riza-mcp/versions",
          "versions": {
            "1": {
              "serverid": "riza-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/riza-io/servers/riza-mcp/versions/1",
              "xid": "/mcpproviders/riza-io/servers/riza-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.riza-io/riza-mcp",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:34.58656613Z",
              "modifiedat": "2025-05-26T16:42:34.58656613Z",
              "ancestor": "1",
              "id": "7b93304c-5a49-45a7-a37c-84e82707d81d",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-api-key",
                      "name": "RIZA_API_KEY"
                    }
                  ],
                  "name": "riza-io/riza-mcp",
                  "registry_name": "npm",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "902093354",
                "source": "github",
                "url": "https://github.com/riza-io/riza-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Your LLM can write code and save it as a tool using the Riza Tools API.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_tool"
                },
                {
                  "description": "Your LLM can fetch saved Riza tools, including source code, useful for editing tools.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "fetch_tool"
                },
                {
                  "description": "Executes a saved tool securely on Riza's code interpreter API.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "execute_tool"
                },
                {
                  "description": "Edits an existing saved tool.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "edit_tool"
                },
                {
                  "description": "Lists available saved tools.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_tools"
                },
                {
                  "description": "Executes arbitrary code safely on Riza's code interpreter API, without saving it as a tool.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "execute_code"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:01:46Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "rohans2": {
      "mcpproviderid": "rohans2",
      "self": "#/mcpproviders/rohans2",
      "xid": "/mcpproviders/rohans2",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:15.964037715Z",
      "modifiedat": "2025-05-26T16:42:15.964037715Z",

      "serversurl": "#/mcpproviders/rohans2/servers",
      "servers": {
        "mcp-google-sheets": {
          "serverid": "mcp-google-sheets",
          "self": "#/mcpproviders/rohans2/servers/mcp-google-sheets",
          "xid": "/mcpproviders/rohans2/servers/mcp-google-sheets",

          "metaurl": "#/mcpproviders/rohans2/servers/mcp-google-sheets/meta",
          "meta": {
            "serverid": "mcp-google-sheets",
            "self": "#/mcpproviders/rohans2/servers/mcp-google-sheets/meta",
            "xid": "/mcpproviders/rohans2/servers/mcp-google-sheets/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:15.964037715Z",
            "modifiedat": "2025-05-26T16:42:15.964037715Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/rohans2/servers/mcp-google-sheets/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/rohans2/servers/mcp-google-sheets/versions",
          "versions": {
            "1": {
              "serverid": "mcp-google-sheets",
              "versionid": "1",
              "self": "#/mcpproviders/rohans2/servers/mcp-google-sheets/versions/1",
              "xid": "/mcpproviders/rohans2/servers/mcp-google-sheets/versions/1",
              "epoch": 1,
              "name": "io.github.rohans2/mcp-google-sheets",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:15.964037715Z",
              "modifiedat": "2025-05-26T16:42:15.964037715Z",
              "ancestor": "1",
              "id": "b1051584-3b09-49af-a97f-a92b47861ed1",
              "packages": [
                {
                  "name": "backend",
                  "package_arguments": [
                    {
                      "default": "Budget Q2",
                      "description": "Budget Q2",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "Budget Q2",
                      "value_hint": "Budget Q2"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "975908174",
                "source": "github",
                "url": "https://github.com/rohans2/mcp-google-sheets"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:40Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ruixingshi": {
      "mcpproviderid": "ruixingshi",
      "self": "#/mcpproviders/ruixingshi",
      "xid": "/mcpproviders/ruixingshi",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:35.197885511Z",
      "modifiedat": "2025-05-26T16:41:35.197885511Z",

      "serversurl": "#/mcpproviders/ruixingshi/servers",
      "servers": {
        "deepseek-thinker-mcp": {
          "serverid": "deepseek-thinker-mcp",
          "self": "#/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp",
          "xid": "/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp",

          "metaurl": "#/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp/meta",
          "meta": {
            "serverid": "deepseek-thinker-mcp",
            "self": "#/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp/meta",
            "xid": "/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:35.197885511Z",
            "modifiedat": "2025-05-26T16:41:35.197885511Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp/versions",
          "versions": {
            "1": {
              "serverid": "deepseek-thinker-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp/versions/1",
              "xid": "/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ruixingshi/deepseek-thinker-mcp",
              "isdefault": true,
              "description": "A MCP provider Deepseek reasoning content to MCP-enabled AI Clients, like Claude Desktop. Supports access to Deepseek's CoT from the Deepseek API service or a local Ollama server.",
              "createdat": "2025-05-26T16:41:35.197885511Z",
              "modifiedat": "2025-05-26T16:41:35.197885511Z",
              "ancestor": "1",
              "id": "883a7c72-e6ca-41cb-91e9-e65436a58729",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cYour API Key\u003e",
                      "name": "API_KEY"
                    },
                    {
                      "description": "\u003cYour Base URL\u003e",
                      "name": "BASE_URL"
                    }
                  ],
                  "name": "deepseek-thinker-mcp",
                  "registry_name": "unknown",
                  "version": "1.0.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "931883120",
                "source": "github",
                "url": "https://github.com/ruixingshi/deepseek-thinker-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Perform reasoning using the Deepseek model",
                  "inputschema": {
                    "properties": {
                      "originPrompt": {
                        "description": "user's original prompt",
                        "type": "string"
                      }
                    },
                    "required": [
                      "originPrompt"
                    ],
                    "type": "object"
                  },
                  "name": "get-deepseek-thinker"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:38Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "run-llama": {
      "mcpproviderid": "run-llama",
      "self": "#/mcpproviders/run-llama",
      "xid": "/mcpproviders/run-llama",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:36.402095353Z",
      "modifiedat": "2025-05-26T16:42:36.402095353Z",

      "serversurl": "#/mcpproviders/run-llama/servers",
      "servers": {
        "mcp-server-llamacloud": {
          "serverid": "mcp-server-llamacloud",
          "self": "#/mcpproviders/run-llama/servers/mcp-server-llamacloud",
          "xid": "/mcpproviders/run-llama/servers/mcp-server-llamacloud",

          "metaurl": "#/mcpproviders/run-llama/servers/mcp-server-llamacloud/meta",
          "meta": {
            "serverid": "mcp-server-llamacloud",
            "self": "#/mcpproviders/run-llama/servers/mcp-server-llamacloud/meta",
            "xid": "/mcpproviders/run-llama/servers/mcp-server-llamacloud/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:36.402095353Z",
            "modifiedat": "2025-05-26T16:42:36.402095353Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/run-llama/servers/mcp-server-llamacloud/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/run-llama/servers/mcp-server-llamacloud/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-llamacloud",
              "versionid": "1",
              "self": "#/mcpproviders/run-llama/servers/mcp-server-llamacloud/versions/1",
              "xid": "/mcpproviders/run-llama/servers/mcp-server-llamacloud/versions/1",
              "epoch": 1,
              "name": "io.github.run-llama/mcp-server-llamacloud",
              "isdefault": true,
              "description": "A MCP server connecting to managed indexes on LlamaCloud",
              "createdat": "2025-05-26T16:42:36.402095353Z",
              "modifiedat": "2025-05-26T16:42:36.402095353Z",
              "ancestor": "1",
              "id": "6cfb4c39-82bb-4b43-94a5-1f50ebd10c71",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cYOUR_PROJECT_NAME\u003e",
                      "name": "LLAMA_CLOUD_PROJECT_NAME"
                    },
                    {
                      "description": "\u003cYOUR_API_KEY\u003e",
                      "name": "LLAMA_CLOUD_API_KEY"
                    }
                  ],
                  "name": "@llamaindex/mcp-server-llamacloud",
                  "package_arguments": [
                    {
                      "default": "--index 10k-SEC-Tesla",
                      "description": "Index to be used (first occurrence)",
                      "format": "string",
                      "is_required": true,
                      "name": "--index 10k-SEC-Tesla",
                      "type": "named",
                      "value": "--index 10k-SEC-Tesla",
                      "value_hint": "10k-SEC-Tesla"
                    },
                    {
                      "default": "--description 10k SEC documents from 2023 for Tesla",
                      "description": "Description for index (first occurrence)",
                      "format": "string",
                      "is_required": true,
                      "name": "--description 10k SEC documents from 2023 for Tesla",
                      "type": "named",
                      "value": "--description 10k SEC documents from 2023 for Tesla",
                      "value_hint": "10k SEC documents from 2023 for Tesla"
                    },
                    {
                      "default": "--index 10k-SEC-Apple",
                      "description": "Index to be used (second occurrence)",
                      "format": "string",
                      "is_required": true,
                      "name": "--index 10k-SEC-Apple",
                      "type": "named",
                      "value": "--index 10k-SEC-Apple",
                      "value_hint": "10k-SEC-Apple"
                    },
                    {
                      "default": "--description 10k SEC documents from 2023 for Apple",
                      "description": "Description for index (second occurrence)",
                      "format": "string",
                      "is_required": true,
                      "name": "--description 10k SEC documents from 2023 for Apple",
                      "type": "named",
                      "value": "--description 10k SEC documents from 2023 for Apple",
                      "value_hint": "10k SEC documents from 2023 for Apple"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "0.1.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "898328533",
                "source": "github",
                "url": "https://github.com/run-llama/mcp-server-llamacloud"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get information from the 10k-SEC-Tesla index. The index contains 10k SEC documents from 2023 for Tesla",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The query used to get information from the 10k-SEC-Tesla index.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "get_information_10k_sec_tesla"
                },
                {
                  "description": "Get information from the 10k-SEC-Apple index. The index contains 10k SEC documents from 2023 for Apple",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The query used to get information from the 10k-SEC-Apple index.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "get_information_10k_sec_apple"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:25Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "rust-mcp-stack": {
      "mcpproviderid": "rust-mcp-stack",
      "self": "#/mcpproviders/rust-mcp-stack",
      "xid": "/mcpproviders/rust-mcp-stack",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:16.171066118Z",
      "modifiedat": "2025-05-26T16:42:16.171066118Z",

      "serversurl": "#/mcpproviders/rust-mcp-stack/servers",
      "servers": {
        "rust-mcp-filesystem": {
          "serverid": "rust-mcp-filesystem",
          "self": "#/mcpproviders/rust-mcp-stack/servers/rust-mcp-filesystem",
          "xid": "/mcpproviders/rust-mcp-stack/servers/rust-mcp-filesystem",

          "metaurl": "#/mcpproviders/rust-mcp-stack/servers/rust-mcp-filesystem/meta",
          "meta": {
            "serverid": "rust-mcp-filesystem",
            "self": "#/mcpproviders/rust-mcp-stack/servers/rust-mcp-filesystem/meta",
            "xid": "/mcpproviders/rust-mcp-stack/servers/rust-mcp-filesystem/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:16.171066118Z",
            "modifiedat": "2025-05-26T16:42:16.171066118Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/rust-mcp-stack/servers/rust-mcp-filesystem/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/rust-mcp-stack/servers/rust-mcp-filesystem/versions",
          "versions": {
            "1": {
              "serverid": "rust-mcp-filesystem",
              "versionid": "1",
              "self": "#/mcpproviders/rust-mcp-stack/servers/rust-mcp-filesystem/versions/1",
              "xid": "/mcpproviders/rust-mcp-stack/servers/rust-mcp-filesystem/versions/1",
              "epoch": 1,
              "name": "io.github.rust-mcp-stack/rust-mcp-filesystem",
              "isdefault": true,
              "description": "Blazing-fast, asynchronous MCP server for seamless filesystem operations.",
              "createdat": "2025-05-26T16:42:16.171066118Z",
              "modifiedat": "2025-05-26T16:42:16.171066118Z",
              "ancestor": "1",
              "id": "583f254e-410c-4dd4-a96c-8f362475436e",
              "packages": [
                {
                  "name": "rust-mcp-stack/rust-mcp-filesystem",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "968849582",
                "source": "github",
                "url": "https://github.com/rust-mcp-stack/rust-mcp-filesystem"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:39Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "sakce": {
      "mcpproviderid": "sakce",
      "self": "#/mcpproviders/sakce",
      "xid": "/mcpproviders/sakce",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:29.318676558Z",
      "modifiedat": "2025-05-26T16:41:29.318676558Z",

      "serversurl": "#/mcpproviders/sakce/servers",
      "servers": {
        "mcp-server-monday": {
          "serverid": "mcp-server-monday",
          "self": "#/mcpproviders/sakce/servers/mcp-server-monday",
          "xid": "/mcpproviders/sakce/servers/mcp-server-monday",

          "metaurl": "#/mcpproviders/sakce/servers/mcp-server-monday/meta",
          "meta": {
            "serverid": "mcp-server-monday",
            "self": "#/mcpproviders/sakce/servers/mcp-server-monday/meta",
            "xid": "/mcpproviders/sakce/servers/mcp-server-monday/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:29.318676558Z",
            "modifiedat": "2025-05-26T16:41:29.318676558Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/sakce/servers/mcp-server-monday/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/sakce/servers/mcp-server-monday/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-monday",
              "versionid": "1",
              "self": "#/mcpproviders/sakce/servers/mcp-server-monday/versions/1",
              "xid": "/mcpproviders/sakce/servers/mcp-server-monday/versions/1",
              "epoch": 1,
              "name": "io.github.sakce/mcp-server-monday",
              "isdefault": true,
              "description": "MCP Server to interact with Monday.com boards and items",
              "createdat": "2025-05-26T16:41:29.318676558Z",
              "modifiedat": "2025-05-26T16:41:29.318676558Z",
              "ancestor": "1",
              "id": "ac665c5c-e1de-4686-9012-5ac101186a31",
              "packages": [
                {
                  "name": "mcp-server-monday",
                  "registry_name": "unknown",
                  "version": "0.2.9"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "936547010",
                "source": "github",
                "url": "https://github.com/sakce/mcp-server-monday"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Creates a new item or sub-item in a Monday.com board",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-create-item"
                },
                {
                  "description": "Retrieves all groups from a specified Monday.com board",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-get-board-groups"
                },
                {
                  "description": "Creates a comment/update on a Monday.com item",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-create-update"
                },
                {
                  "description": "Lists all available Monday.com boards",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-list-boards"
                },
                {
                  "description": "Lists all items in specified groups of a Monday.com board",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-list-items-in-groups"
                },
                {
                  "description": "Lists all sub-items for given Monday.com items",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-list-subitems-in-items"
                },
                {
                  "description": "Creates a new Monday.com board",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-create-board"
                },
                {
                  "description": "Creates a new group in a Monday.com board",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-create-board-group"
                },
                {
                  "description": "Moves a Monday.com item to a different group",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-move-item-to-group"
                },
                {
                  "description": "Deletes a Monday.com item",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-delete-item"
                },
                {
                  "description": "Archives a Monday.com item",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-archive-item"
                },
                {
                  "description": "Retrieves updates/comments for a specific item",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-get-item-updates"
                },
                {
                  "description": "Lists documents in Monday.com, optionally filtered by folder",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-get-docs"
                },
                {
                  "description": "Retrieves the content of a specific document",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-get-doc-content"
                },
                {
                  "description": "Creates a new document in Monday.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-create-doc"
                },
                {
                  "description": "Adds a block to an existing document",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-add-doc-block"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:42Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "salesforce-mcp": {
      "mcpproviderid": "salesforce-mcp",
      "self": "#/mcpproviders/salesforce-mcp",
      "xid": "/mcpproviders/salesforce-mcp",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:21.564166253Z",
      "modifiedat": "2025-05-26T16:41:21.564166253Z",

      "serversurl": "#/mcpproviders/salesforce-mcp/servers",
      "servers": {
        "salesforce-mcp": {
          "serverid": "salesforce-mcp",
          "self": "#/mcpproviders/salesforce-mcp/servers/salesforce-mcp",
          "xid": "/mcpproviders/salesforce-mcp/servers/salesforce-mcp",

          "metaurl": "#/mcpproviders/salesforce-mcp/servers/salesforce-mcp/meta",
          "meta": {
            "serverid": "salesforce-mcp",
            "self": "#/mcpproviders/salesforce-mcp/servers/salesforce-mcp/meta",
            "xid": "/mcpproviders/salesforce-mcp/servers/salesforce-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:21.564166253Z",
            "modifiedat": "2025-05-26T16:41:21.564166253Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/salesforce-mcp/servers/salesforce-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/salesforce-mcp/servers/salesforce-mcp/versions",
          "versions": {
            "1": {
              "serverid": "salesforce-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/salesforce-mcp/servers/salesforce-mcp/versions/1",
              "xid": "/mcpproviders/salesforce-mcp/servers/salesforce-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.salesforce-mcp/salesforce-mcp",
              "isdefault": true,
              "description": "Salesforce MCP",
              "createdat": "2025-05-26T16:41:21.564166253Z",
              "modifiedat": "2025-05-26T16:41:21.564166253Z",
              "ancestor": "1",
              "id": "938ee893-25dd-424a-88b4-7ebce53bcb22",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_SALESFORCE_USERNAME",
                      "name": "USERNAME"
                    },
                    {
                      "description": "YOUR_SALESFORCE_PASSWORD",
                      "name": "PASSWORD"
                    },
                    {
                      "description": "YOUR_SALESFORCE_SECURITY_TOKEN",
                      "name": "SECURITY_TOKEN"
                    }
                  ],
                  "name": "salesforce-mcp/salesforce-mcp",
                  "package_arguments": [
                    {
                      "default": "--from salesforce-mcp",
                      "description": "Argument for source identifier",
                      "format": "string",
                      "is_required": true,
                      "name": "--from salesforce-mcp",
                      "type": "named",
                      "value": "--from salesforce-mcp",
                      "value_hint": "salesforce-mcp"
                    },
                    {
                      "default": "salesforce",
                      "description": "Target package or operation",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "salesforce",
                      "value_hint": "salesforce"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "973629838",
                "source": "github",
                "url": "https://github.com/salesforce-mcp/salesforce-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:37Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "samuelgursky": {
      "mcpproviderid": "samuelgursky",
      "self": "#/mcpproviders/samuelgursky",
      "xid": "/mcpproviders/samuelgursky",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:34.368185189Z",
      "modifiedat": "2025-05-26T16:41:34.368185189Z",

      "serversurl": "#/mcpproviders/samuelgursky/servers",
      "servers": {
        "davinci-resolve-mcp": {
          "serverid": "davinci-resolve-mcp",
          "self": "#/mcpproviders/samuelgursky/servers/davinci-resolve-mcp",
          "xid": "/mcpproviders/samuelgursky/servers/davinci-resolve-mcp",

          "metaurl": "#/mcpproviders/samuelgursky/servers/davinci-resolve-mcp/meta",
          "meta": {
            "serverid": "davinci-resolve-mcp",
            "self": "#/mcpproviders/samuelgursky/servers/davinci-resolve-mcp/meta",
            "xid": "/mcpproviders/samuelgursky/servers/davinci-resolve-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:34.368185189Z",
            "modifiedat": "2025-05-26T16:41:34.368185189Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/samuelgursky/servers/davinci-resolve-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/samuelgursky/servers/davinci-resolve-mcp/versions",
          "versions": {
            "1": {
              "serverid": "davinci-resolve-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/samuelgursky/servers/davinci-resolve-mcp/versions/1",
              "xid": "/mcpproviders/samuelgursky/servers/davinci-resolve-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.samuelgursky/davinci-resolve-mcp",
              "isdefault": true,
              "description": "MCP server integration for DaVinci Resolve",
              "createdat": "2025-05-26T16:41:34.368185189Z",
              "modifiedat": "2025-05-26T16:41:34.368185189Z",
              "ancestor": "1",
              "id": "59a6acf5-d65f-4884-a9b8-ae7d2c9f6728",
              "packages": [
                {
                  "name": "samuelgursky/davinci-resolve-mcp",
                  "registry_name": "pypi",
                  "version": ""
                }
              ],
              "repository": {
                "id": "950355259",
                "source": "github",
                "url": "https://github.com/samuelgursky/davinci-resolve-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:18Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "scorzeth": {
      "mcpproviderid": "scorzeth",
      "self": "#/mcpproviders/scorzeth",
      "xid": "/mcpproviders/scorzeth",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:51.469842551Z",
      "modifiedat": "2025-05-26T16:41:51.469842551Z",

      "serversurl": "#/mcpproviders/scorzeth/servers",
      "servers": {
        "anki-mcp-server": {
          "serverid": "anki-mcp-server",
          "self": "#/mcpproviders/scorzeth/servers/anki-mcp-server",
          "xid": "/mcpproviders/scorzeth/servers/anki-mcp-server",

          "metaurl": "#/mcpproviders/scorzeth/servers/anki-mcp-server/meta",
          "meta": {
            "serverid": "anki-mcp-server",
            "self": "#/mcpproviders/scorzeth/servers/anki-mcp-server/meta",
            "xid": "/mcpproviders/scorzeth/servers/anki-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:51.469842551Z",
            "modifiedat": "2025-05-26T16:41:51.469842551Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/scorzeth/servers/anki-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/scorzeth/servers/anki-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "anki-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/scorzeth/servers/anki-mcp-server/versions/1",
              "xid": "/mcpproviders/scorzeth/servers/anki-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.scorzeth/anki-mcp-server",
              "isdefault": true,
              "description": "An MCP server for Anki",
              "createdat": "2025-05-26T16:41:51.469842551Z",
              "modifiedat": "2025-05-26T16:41:51.469842551Z",
              "ancestor": "1",
              "id": "1cc26407-7ab5-44dd-b5a2-99efd6fcb757",
              "packages": [
                {
                  "name": "@scorzeth/anki-mcp-server",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "901609361",
                "source": "github",
                "url": "https://github.com/scorzeth/anki-mcp-server"
              },
              "resources": [
                {
                  "description": "Returns all cards from current deck",
                  "mimetype": "application/json",
                  "name": "Current Deck",
                  "uritemplate": "anki://search/deckcurrent"
                },
                {
                  "description": "Returns cards in review and learning waiting to be studied",
                  "mimetype": "application/json",
                  "name": "Due cards",
                  "uritemplate": "anki://search/isdue"
                },
                {
                  "description": "Returns all unseen cards",
                  "mimetype": "application/json",
                  "name": "New cards",
                  "uritemplate": "anki://search/isnew"
                }
              ],
              "tools": [
                {
                  "description": "After the user answers cards you've quizzed them on, use this tool to mark them answered and update their ease",
                  "inputschema": {
                    "properties": {
                      "answers": {
                        "items": {
                          "properties": {
                            "cardId": {
                              "description": "Id of the card to answer",
                              "type": "number"
                            },
                            "ease": {
                              "description": "Ease of the card between 1 (Again) and 4 (Easy)",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "name": "update_cards"
                },
                {
                  "description": "Create a new flashcard in Anki for the user. Must use HTML formatting only. IMPORTANT FORMATTING RULES:\n1. Must use HTML tags for ALL formatting - NO markdown\n2. Use \u003cbr\u003e for ALL line breaks\n3. For code blocks, use \u003cpre\u003e with inline CSS styling\n4. Example formatting:\n   - Line breaks: \u003cbr\u003e\n   - Code: \u003cpre style=\"background-color: transparent; padding: 10px; border-radius: 5px;\"\u003e\n   - Lists: \u003col\u003e and \u003cli\u003e tags\n   - Bold: \u003cstrong\u003e\n   - Italic: \u003cem\u003e",
                  "inputschema": {
                    "properties": {
                      "back": {
                        "description": "The back of the card. Must use HTML formatting only.",
                        "type": "string"
                      },
                      "front": {
                        "description": "The front of the card. Must use HTML formatting only.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "front",
                      "back"
                    ],
                    "type": "object"
                  },
                  "name": "add_card"
                },
                {
                  "description": "Returns a given number (num) of cards due for review.",
                  "inputschema": {
                    "properties": {
                      "num": {
                        "description": "Number of due cards to get",
                        "type": "number"
                      }
                    },
                    "required": [
                      "num"
                    ],
                    "type": "object"
                  },
                  "name": "get_due_cards"
                },
                {
                  "description": "Returns a given number (num) of new and unseen cards.",
                  "inputschema": {
                    "properties": {
                      "num": {
                        "description": "Number of new cards to get",
                        "type": "number"
                      }
                    },
                    "required": [
                      "num"
                    ],
                    "type": "object"
                  },
                  "name": "get_new_cards"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:53Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "screenshotone": {
      "mcpproviderid": "screenshotone",
      "self": "#/mcpproviders/screenshotone",
      "xid": "/mcpproviders/screenshotone",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:28.464751494Z",
      "modifiedat": "2025-05-26T16:41:28.464751494Z",

      "serversurl": "#/mcpproviders/screenshotone/servers",
      "servers": {
        "mcp": {
          "serverid": "mcp",
          "self": "#/mcpproviders/screenshotone/servers/mcp",
          "xid": "/mcpproviders/screenshotone/servers/mcp",

          "metaurl": "#/mcpproviders/screenshotone/servers/mcp/meta",
          "meta": {
            "serverid": "mcp",
            "self": "#/mcpproviders/screenshotone/servers/mcp/meta",
            "xid": "/mcpproviders/screenshotone/servers/mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:28.464751494Z",
            "modifiedat": "2025-05-26T16:41:28.464751494Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/screenshotone/servers/mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/screenshotone/servers/mcp/versions",
          "versions": {
            "1": {
              "serverid": "mcp",
              "versionid": "1",
              "self": "#/mcpproviders/screenshotone/servers/mcp/versions/1",
              "xid": "/mcpproviders/screenshotone/servers/mcp/versions/1",
              "epoch": 1,
              "name": "io.github.screenshotone/mcp",
              "isdefault": true,
              "description": "A simple implementation of an MCP server for the ScreenshotOne API",
              "createdat": "2025-05-26T16:41:28.464751494Z",
              "modifiedat": "2025-05-26T16:41:28.464751494Z",
              "ancestor": "1",
              "id": "87c7dec1-1b0c-414b-9f7b-7a113e67989d",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cyour api key\u003e",
                      "name": "SCREENSHOTONE_API_KEY"
                    }
                  ],
                  "name": "screenshotone-mcp-server",
                  "package_arguments": [
                    {
                      "default": "path/to/screenshotone/mcp/build/index.js",
                      "description": "Positional argument for 'path/to/screenshotone/mcp/build/index.js'",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "path/to/screenshotone/mcp/build/index.js",
                      "value_hint": "path/to/screenshotone/mcp/build/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "934098377",
                "source": "github",
                "url": "https://github.com/screenshotone/mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Render a screenshot of a website and returns it as an image.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "render-website-screenshot"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:01:51Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "semgrep": {
      "mcpproviderid": "semgrep",
      "self": "#/mcpproviders/semgrep",
      "xid": "/mcpproviders/semgrep",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:40.305480523Z",
      "modifiedat": "2025-05-26T16:41:40.305480523Z",

      "serversurl": "#/mcpproviders/semgrep/servers",
      "servers": {
        "mcp": {
          "serverid": "mcp",
          "self": "#/mcpproviders/semgrep/servers/mcp",
          "xid": "/mcpproviders/semgrep/servers/mcp",

          "metaurl": "#/mcpproviders/semgrep/servers/mcp/meta",
          "meta": {
            "serverid": "mcp",
            "self": "#/mcpproviders/semgrep/servers/mcp/meta",
            "xid": "/mcpproviders/semgrep/servers/mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:40.305480523Z",
            "modifiedat": "2025-05-26T16:41:40.305480523Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/semgrep/servers/mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/semgrep/servers/mcp/versions",
          "versions": {
            "1": {
              "serverid": "mcp",
              "versionid": "1",
              "self": "#/mcpproviders/semgrep/servers/mcp/versions/1",
              "xid": "/mcpproviders/semgrep/servers/mcp/versions/1",
              "epoch": 1,
              "name": "io.github.semgrep/mcp",
              "isdefault": true,
              "description": "A MCP server for using Semgrep to scan code for security vulnerabilities.",
              "createdat": "2025-05-26T16:41:40.305480523Z",
              "modifiedat": "2025-05-26T16:41:40.305480523Z",
              "ancestor": "1",
              "id": "d012ea8c-2f32-43e4-9583-7418d750193e",
              "packages": [
                {
                  "name": "semgrep-mcp",
                  "registry_name": "unknown",
                  "version": "0.2.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "950213855",
                "source": "github",
                "url": "https://github.com/semgrep/mcp"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:01:53Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "sendaifun": {
      "mcpproviderid": "sendaifun",
      "self": "#/mcpproviders/sendaifun",
      "xid": "/mcpproviders/sendaifun",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:42.310328642Z",
      "modifiedat": "2025-05-26T16:41:42.310328642Z",

      "serversurl": "#/mcpproviders/sendaifun/servers",
      "servers": {
        "solana-agent-kit": {
          "serverid": "solana-agent-kit",
          "self": "#/mcpproviders/sendaifun/servers/solana-agent-kit",
          "xid": "/mcpproviders/sendaifun/servers/solana-agent-kit",

          "metaurl": "#/mcpproviders/sendaifun/servers/solana-agent-kit/meta",
          "meta": {
            "serverid": "solana-agent-kit",
            "self": "#/mcpproviders/sendaifun/servers/solana-agent-kit/meta",
            "xid": "/mcpproviders/sendaifun/servers/solana-agent-kit/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:42.310328642Z",
            "modifiedat": "2025-05-26T16:41:42.310328642Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/sendaifun/servers/solana-agent-kit/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/sendaifun/servers/solana-agent-kit/versions",
          "versions": {
            "1": {
              "serverid": "solana-agent-kit",
              "versionid": "1",
              "self": "#/mcpproviders/sendaifun/servers/solana-agent-kit/versions/1",
              "xid": "/mcpproviders/sendaifun/servers/solana-agent-kit/versions/1",
              "epoch": 1,
              "name": "io.github.sendaifun/solana-agent-kit",
              "isdefault": true,
              "description": "connect any ai agents to solana protocols",
              "createdat": "2025-05-26T16:41:42.310328642Z",
              "modifiedat": "2025-05-26T16:41:42.310328642Z",
              "ancestor": "1",
              "id": "f25f6cdb-0623-4a04-bac2-f1b26331b432",
              "packages": [
                {
                  "name": "solana-agent-kit",
                  "registry_name": "unknown",
                  "version": "2.0.3"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "889798967",
                "source": "github",
                "url": "https://github.com/sendaifun/solana-agent-kit"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:10Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "sergehuber": {
      "mcpproviderid": "sergehuber",
      "self": "#/mcpproviders/sergehuber",
      "xid": "/mcpproviders/sergehuber",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:02.829810168Z",
      "modifiedat": "2025-05-26T16:42:02.829810168Z",

      "serversurl": "#/mcpproviders/sergehuber/servers",
      "servers": {
        "inoyu-mcp-unomi-server": {
          "serverid": "inoyu-mcp-unomi-server",
          "self": "#/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server",
          "xid": "/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server",

          "metaurl": "#/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server/meta",
          "meta": {
            "serverid": "inoyu-mcp-unomi-server",
            "self": "#/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server/meta",
            "xid": "/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:02.829810168Z",
            "modifiedat": "2025-05-26T16:42:02.829810168Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server/versions",
          "versions": {
            "1": {
              "serverid": "inoyu-mcp-unomi-server",
              "versionid": "1",
              "self": "#/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server/versions/1",
              "xid": "/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server/versions/1",
              "epoch": 1,
              "name": "io.github.sergehuber/inoyu-mcp-unomi-server",
              "isdefault": true,
              "description": "An implementation of Anthropic's Model Context Protocol for the Apache Unomi CDP",
              "createdat": "2025-05-26T16:42:02.829810168Z",
              "modifiedat": "2025-05-26T16:42:02.829810168Z",
              "ancestor": "1",
              "id": "601ee7e9-e0db-470e-80e5-f1509cddf6d7",
              "packages": [
                {
                  "name": "@inoyu/mcp-unomi-server",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "896936323",
                "source": "github",
                "url": "https://github.com/sergehuber/inoyu-mcp-unomi-server"
              },
              "resources": [
                {
                  "description": "List of available Apache Unomi profiles",
                  "mimetype": "application/json",
                  "name": "Unomi Profiles",
                  "uritemplate": "unomi://profiles/list"
                }
              ],
              "tools": [
                {
                  "description": "Create a new Unomi scope",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "description": "Description of the scope",
                        "type": "string"
                      },
                      "name": {
                        "description": "Human-readable name for the scope",
                        "type": "string"
                      },
                      "scope": {
                        "description": "Scope identifier",
                        "type": "string"
                      }
                    },
                    "required": [
                      "scope"
                    ],
                    "type": "object"
                  },
                  "name": "create_scope"
                },
                {
                  "description": "Update properties of your profile using environment-provided ID",
                  "inputschema": {
                    "properties": {
                      "properties": {
                        "additionalProperties": {
                          "type": [
                            "string",
                            "number",
                            "boolean",
                            "null"
                          ]
                        },
                        "description": "Key-value pairs of properties to update",
                        "type": "object"
                      }
                    },
                    "required": [
                      "properties"
                    ],
                    "type": "object"
                  },
                  "name": "update_my_profile"
                },
                {
                  "description": "Get your profile using environment-provided IDs",
                  "inputschema": {
                    "properties": {
                      "requireScores": {
                        "description": "Whether to include scores in the response",
                        "type": "boolean"
                      },
                      "requireSegments": {
                        "description": "Whether to include segments in the response",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_my_profile"
                },
                {
                  "description": "Get a specific Unomi profile by ID",
                  "inputschema": {
                    "properties": {
                      "profileId": {
                        "description": "Profile ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "profileId"
                    ],
                    "type": "object"
                  },
                  "name": "get_profile"
                },
                {
                  "description": "Search Unomi profiles",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "description": "Maximum number of results",
                        "type": "number"
                      },
                      "offset": {
                        "description": "Result offset for pagination",
                        "type": "number"
                      },
                      "query": {
                        "description": "Search query",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_profiles"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:26Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "shanejonas": {
      "mcpproviderid": "shanejonas",
      "self": "#/mcpproviders/shanejonas",
      "xid": "/mcpproviders/shanejonas",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:07.110109566Z",
      "modifiedat": "2025-05-26T16:42:07.110109566Z",

      "serversurl": "#/mcpproviders/shanejonas/servers",
      "servers": {
        "openrpc-mpc-server": {
          "serverid": "openrpc-mpc-server",
          "self": "#/mcpproviders/shanejonas/servers/openrpc-mpc-server",
          "xid": "/mcpproviders/shanejonas/servers/openrpc-mpc-server",

          "metaurl": "#/mcpproviders/shanejonas/servers/openrpc-mpc-server/meta",
          "meta": {
            "serverid": "openrpc-mpc-server",
            "self": "#/mcpproviders/shanejonas/servers/openrpc-mpc-server/meta",
            "xid": "/mcpproviders/shanejonas/servers/openrpc-mpc-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:07.110109566Z",
            "modifiedat": "2025-05-26T16:42:07.110109566Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/shanejonas/servers/openrpc-mpc-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/shanejonas/servers/openrpc-mpc-server/versions",
          "versions": {
            "1": {
              "serverid": "openrpc-mpc-server",
              "versionid": "1",
              "self": "#/mcpproviders/shanejonas/servers/openrpc-mpc-server/versions/1",
              "xid": "/mcpproviders/shanejonas/servers/openrpc-mpc-server/versions/1",
              "epoch": 1,
              "name": "io.github.shanejonas/openrpc-mpc-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that provides JSON-RPC functionality through OpenRPC.",
              "createdat": "2025-05-26T16:42:07.110109566Z",
              "modifiedat": "2025-05-26T16:42:07.110109566Z",
              "ancestor": "1",
              "id": "9c804dd3-4283-4a5b-a34e-6f1c7065b671",
              "packages": [
                {
                  "name": "openrpc-mcp-server",
                  "registry_name": "npm",
                  "version": "0.1.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "897678596",
                "source": "github",
                "url": "https://github.com/shanejonas/openrpc-mpc-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Call any JSON-RPC method on a server with parameters. A user would prompt: Call method \u003cmethod\u003e on \u003cserver url\u003e with params \u003cparams\u003e",
                  "inputschema": {
                    "properties": {
                      "method": {
                        "description": "JSON-RPC method name to call",
                        "type": "string"
                      },
                      "params": {
                        "description": "Stringified Parameters to pass to the method",
                        "type": "string"
                      },
                      "server": {
                        "description": "Server URL",
                        "type": "string"
                      }
                    },
                    "required": [
                      "server",
                      "method"
                    ],
                    "type": "object"
                  },
                  "name": "rpc_call"
                },
                {
                  "description": "This uses JSON-RPC to call `rpc.discover` which is part of the OpenRPC Specification for discovery for JSON-RPC servers. A user would prompt: What JSON-RPC methods does this server have? \u003cserver url\u003e",
                  "inputschema": {
                    "properties": {
                      "server": {
                        "description": "Server URL",
                        "type": "string"
                      }
                    },
                    "required": [
                      "server"
                    ],
                    "type": "object"
                  },
                  "name": "rpc_discover"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:08Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "shannonlal": {
      "mcpproviderid": "shannonlal",
      "self": "#/mcpproviders/shannonlal",
      "xid": "/mcpproviders/shannonlal",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:45.16880855Z",
      "modifiedat": "2025-05-26T16:41:45.16880855Z",

      "serversurl": "#/mcpproviders/shannonlal/servers",
      "servers": {
        "mcp-postman": {
          "serverid": "mcp-postman",
          "self": "#/mcpproviders/shannonlal/servers/mcp-postman",
          "xid": "/mcpproviders/shannonlal/servers/mcp-postman",

          "metaurl": "#/mcpproviders/shannonlal/servers/mcp-postman/meta",
          "meta": {
            "serverid": "mcp-postman",
            "self": "#/mcpproviders/shannonlal/servers/mcp-postman/meta",
            "xid": "/mcpproviders/shannonlal/servers/mcp-postman/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:45.16880855Z",
            "modifiedat": "2025-05-26T16:41:45.16880855Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/shannonlal/servers/mcp-postman/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/shannonlal/servers/mcp-postman/versions",
          "versions": {
            "1": {
              "serverid": "mcp-postman",
              "versionid": "1",
              "self": "#/mcpproviders/shannonlal/servers/mcp-postman/versions/1",
              "xid": "/mcpproviders/shannonlal/servers/mcp-postman/versions/1",
              "epoch": 1,
              "name": "io.github.shannonlal/mcp-postman",
              "isdefault": true,
              "description": "MCP Server for running Postman Collections with Newman",
              "createdat": "2025-05-26T16:41:45.16880855Z",
              "modifiedat": "2025-05-26T16:41:45.16880855Z",
              "ancestor": "1",
              "id": "503a5c73-c147-4b2c-90d3-292378268706",
              "packages": [
                {
                  "name": "mcp-postman",
                  "registry_name": "unknown",
                  "version": "1.0.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "910565083",
                "source": "github",
                "url": "https://github.com/shannonlal/mcp-postman"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Run a Postman Collection using Newman",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Path or URL to the Postman collection",
                        "type": "string"
                      },
                      "environment": {
                        "description": "Optional path or URL to environment file",
                        "type": "string"
                      },
                      "globals": {
                        "description": "Optional path or URL to globals file",
                        "type": "string"
                      },
                      "iterationCount": {
                        "description": "Optional number of iterations to run",
                        "type": "number"
                      }
                    },
                    "required": [
                      "collection"
                    ],
                    "type": "object"
                  },
                  "name": "run-collection"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:40Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "shinzo-labs": {
      "mcpproviderid": "shinzo-labs",
      "self": "#/mcpproviders/shinzo-labs",
      "xid": "/mcpproviders/shinzo-labs",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:21.701087568Z",
      "modifiedat": "2025-05-26T16:41:21.701087568Z",

      "serversurl": "#/mcpproviders/shinzo-labs/servers",
      "servers": {
        "coinmarketcap-mcp": {
          "serverid": "coinmarketcap-mcp",
          "self": "#/mcpproviders/shinzo-labs/servers/coinmarketcap-mcp",
          "xid": "/mcpproviders/shinzo-labs/servers/coinmarketcap-mcp",

          "metaurl": "#/mcpproviders/shinzo-labs/servers/coinmarketcap-mcp/meta",
          "meta": {
            "serverid": "coinmarketcap-mcp",
            "self": "#/mcpproviders/shinzo-labs/servers/coinmarketcap-mcp/meta",
            "xid": "/mcpproviders/shinzo-labs/servers/coinmarketcap-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:21.701087568Z",
            "modifiedat": "2025-05-26T16:41:21.701087568Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/shinzo-labs/servers/coinmarketcap-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/shinzo-labs/servers/coinmarketcap-mcp/versions",
          "versions": {
            "1": {
              "serverid": "coinmarketcap-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/shinzo-labs/servers/coinmarketcap-mcp/versions/1",
              "xid": "/mcpproviders/shinzo-labs/servers/coinmarketcap-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.shinzo-labs/coinmarketcap-mcp",
              "isdefault": true,
              "description": "MCP Implementation for CoinMarketCap",
              "createdat": "2025-05-26T16:41:21.701087568Z",
              "modifiedat": "2025-05-26T16:41:21.701087568Z",
              "ancestor": "1",
              "id": "7e3a17ce-fbbd-48cb-b29f-34a4b8c6ca55",
              "packages": [
                {
                  "name": "@shinzolabs/coinmarketcap-mcp",
                  "registry_name": "unknown",
                  "version": "1.3.7"
                }
              ],
              "repository": {
                "id": "952163210",
                "source": "github",
                "url": "https://github.com/shinzo-labs/coinmarketcap-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:48Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "shy2593666979": {
      "mcpproviderid": "shy2593666979",
      "self": "#/mcpproviders/shy2593666979",
      "xid": "/mcpproviders/shy2593666979",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:53.82673306Z",
      "modifiedat": "2025-05-26T16:41:53.82673306Z",

      "serversurl": "#/mcpproviders/shy2593666979/servers",
      "servers": {
        "mcp-server-email": {
          "serverid": "mcp-server-email",
          "self": "#/mcpproviders/shy2593666979/servers/mcp-server-email",
          "xid": "/mcpproviders/shy2593666979/servers/mcp-server-email",

          "metaurl": "#/mcpproviders/shy2593666979/servers/mcp-server-email/meta",
          "meta": {
            "serverid": "mcp-server-email",
            "self": "#/mcpproviders/shy2593666979/servers/mcp-server-email/meta",
            "xid": "/mcpproviders/shy2593666979/servers/mcp-server-email/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:53.82673306Z",
            "modifiedat": "2025-05-26T16:41:53.82673306Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/shy2593666979/servers/mcp-server-email/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/shy2593666979/servers/mcp-server-email/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-email",
              "versionid": "1",
              "self": "#/mcpproviders/shy2593666979/servers/mcp-server-email/versions/1",
              "xid": "/mcpproviders/shy2593666979/servers/mcp-server-email/versions/1",
              "epoch": 1,
              "name": "io.github.shy2593666979/mcp-server-email",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:53.82673306Z",
              "modifiedat": "2025-05-26T16:41:53.82673306Z",
              "ancestor": "1",
              "id": "c0a64e6c-2ff2-4a2f-afe6-f52119a020a0",
              "packages": [
                {
                  "name": "mcp-server-email",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "953349763",
                "source": "github",
                "url": "https://github.com/Shy2593666979/mcp-server-email"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:22Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "singlestore-labs": {
      "mcpproviderid": "singlestore-labs",
      "self": "#/mcpproviders/singlestore-labs",
      "xid": "/mcpproviders/singlestore-labs",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:29.446342489Z",
      "modifiedat": "2025-05-26T16:41:29.446342489Z",

      "serversurl": "#/mcpproviders/singlestore-labs/servers",
      "servers": {
        "mcp-server-singlestore": {
          "serverid": "mcp-server-singlestore",
          "self": "#/mcpproviders/singlestore-labs/servers/mcp-server-singlestore",
          "xid": "/mcpproviders/singlestore-labs/servers/mcp-server-singlestore",

          "metaurl": "#/mcpproviders/singlestore-labs/servers/mcp-server-singlestore/meta",
          "meta": {
            "serverid": "mcp-server-singlestore",
            "self": "#/mcpproviders/singlestore-labs/servers/mcp-server-singlestore/meta",
            "xid": "/mcpproviders/singlestore-labs/servers/mcp-server-singlestore/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:29.446342489Z",
            "modifiedat": "2025-05-26T16:41:29.446342489Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/singlestore-labs/servers/mcp-server-singlestore/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/singlestore-labs/servers/mcp-server-singlestore/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-singlestore",
              "versionid": "1",
              "self": "#/mcpproviders/singlestore-labs/servers/mcp-server-singlestore/versions/1",
              "xid": "/mcpproviders/singlestore-labs/servers/mcp-server-singlestore/versions/1",
              "epoch": 1,
              "name": "io.github.singlestore-labs/mcp-server-singlestore",
              "isdefault": true,
              "description": "MCP server for interacting with SingleStore Management API and services",
              "createdat": "2025-05-26T16:41:29.446342489Z",
              "modifiedat": "2025-05-26T16:41:29.446342489Z",
              "ancestor": "1",
              "id": "901e1b1c-7414-4240-89b8-1def9aca4708",
              "packages": [
                {
                  "name": "singlestore_mcp_server",
                  "package_arguments": [
                    {
                      "default": "start",
                      "description": "Start the single store MCP server",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "start",
                      "value_hint": "start"
                    },
                    {
                      "default": "\u003cSINGLESTORE_API_KEY\u003e",
                      "description": "SingleStore API Key",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "\u003cSINGLESTORE_API_KEY\u003e",
                      "value_hint": "\u003cSINGLESTORE_API_KEY\u003e"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "941979361",
                "source": "github",
                "url": "https://github.com/singlestore-labs/mcp-server-singlestore"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve details about the workspace groups accessible to the user",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "workspace_groups_info"
                },
                {
                  "description": "Retrieve details about the workspaces in a specific workspace group",
                  "inputschema": {
                    "properties": {
                      "workspaceGroupID": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "workspaceGroupID"
                    ],
                    "type": "object"
                  },
                  "name": "workspaces_info"
                },
                {
                  "description": "Retrieve details about the user's current organization",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "organization_info"
                },
                {
                  "description": "Retrieve a list of all regions that support workspaces for the user",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_of_regions"
                },
                {
                  "description": "Execute SQL operations on a connected workspace",
                  "inputschema": {
                    "properties": {
                      "database": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      },
                      "sql_query": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      },
                      "workspace_group_identifier": {
                        "type": "string"
                      },
                      "workspace_identifier": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "workspace_group_identifier",
                      "workspace_identifier",
                      "username",
                      "password",
                      "database",
                      "sql_query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_sql"
                },
                {
                  "description": "List all starter workspaces accessible to the user",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_virtual_workspaces"
                },
                {
                  "description": "Create a new starter workspace",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "create_virtual_workspace"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:01:55Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "sirmews": {
      "mcpproviderid": "sirmews",
      "self": "#/mcpproviders/sirmews",
      "xid": "/mcpproviders/sirmews",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:29.899289969Z",
      "modifiedat": "2025-05-26T16:41:29.899289969Z",

      "serversurl": "#/mcpproviders/sirmews/servers",
      "servers": {
        "mcp-pinecone": {
          "serverid": "mcp-pinecone",
          "self": "#/mcpproviders/sirmews/servers/mcp-pinecone",
          "xid": "/mcpproviders/sirmews/servers/mcp-pinecone",

          "metaurl": "#/mcpproviders/sirmews/servers/mcp-pinecone/meta",
          "meta": {
            "serverid": "mcp-pinecone",
            "self": "#/mcpproviders/sirmews/servers/mcp-pinecone/meta",
            "xid": "/mcpproviders/sirmews/servers/mcp-pinecone/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:29.899289969Z",
            "modifiedat": "2025-05-26T16:41:29.899289969Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/sirmews/servers/mcp-pinecone/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/sirmews/servers/mcp-pinecone/versions",
          "versions": {
            "1": {
              "serverid": "mcp-pinecone",
              "versionid": "1",
              "self": "#/mcpproviders/sirmews/servers/mcp-pinecone/versions/1",
              "xid": "/mcpproviders/sirmews/servers/mcp-pinecone/versions/1",
              "epoch": 1,
              "name": "io.github.sirmews/mcp-pinecone",
              "isdefault": true,
              "description": "Model Context Protocol server to allow for reading and writing from Pinecone. Rudimentary RAG",
              "createdat": "2025-05-26T16:41:29.899289969Z",
              "modifiedat": "2025-05-26T16:41:29.899289969Z",
              "ancestor": "1",
              "id": "23b81af0-3e03-47b8-a310-c9b07bebd547",
              "packages": [
                {
                  "name": "mcp-pinecone",
                  "package_arguments": [
                    {
                      "default": "--index-name {your-index-name}",
                      "description": "Index name for the Pinecone database.",
                      "format": "string",
                      "is_required": true,
                      "name": "--index-name {your-index-name}",
                      "type": "named",
                      "value": "--index-name {your-index-name}",
                      "value_hint": "{your-index-name}"
                    },
                    {
                      "default": "--api-key {your-secret-api-key}",
                      "description": "API key for authenticating with Pinecone.",
                      "format": "string",
                      "is_required": true,
                      "name": "--api-key {your-secret-api-key}",
                      "type": "named",
                      "value": "--api-key {your-secret-api-key}",
                      "value_hint": "{your-secret-api-key}"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.8"
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "The question to answer, or the context to search for",
                      "name": "query",
                      "required": true
                    }
                  ],
                  "description": "Search Pinecone index and construct an answer based on relevant pinecone documents",
                  "name": "pinecone-query"
                },
                {
                  "arguments": [
                    {
                      "description": "The content to store as a Pinecone document",
                      "name": "content",
                      "required": true
                    },
                    {
                      "description": "The namespace to store the document in",
                      "name": "namespace",
                      "required": false
                    }
                  ],
                  "description": "Store content as document in Pinecone",
                  "name": "pinecone-store"
                }
              ],
              "repository": {
                "id": "900184645",
                "source": "github",
                "url": "https://github.com/sirmews/mcp-pinecone"
              },
              "resources": [
                {
                  "description": "Vector resource identified by vector ID in Pinecone index",
                  "mimetype": "text/plain",
                  "name": "Pinecone Vector",
                  "uritemplate": "pinecone://vectors/{id}"
                }
              ],
              "tools": [
                {
                  "description": "Search pinecone for documents",
                  "inputschema": {
                    "properties": {
                      "category": {
                        "type": "string"
                      },
                      "date_range": {
                        "properties": {
                          "end": {
                            "format": "date",
                            "type": "string"
                          },
                          "start": {
                            "format": "date",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "namespace": {
                        "description": "Optional namespace to search in",
                        "type": "string"
                      },
                      "query": {
                        "type": "string"
                      },
                      "tags": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "top_k": {
                        "default": 10,
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "semantic-search"
                },
                {
                  "description": "Read a document from pinecone",
                  "inputschema": {
                    "properties": {
                      "document_id": {
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Optional namespace to read from",
                        "type": "string"
                      }
                    },
                    "required": [
                      "document_id"
                    ],
                    "type": "object"
                  },
                  "name": "read-document"
                },
                {
                  "description": "Process a document. This will optionally chunk, then embed, and upsert the document into pinecone.",
                  "inputschema": {
                    "properties": {
                      "document_id": {
                        "type": "string"
                      },
                      "metadata": {
                        "type": "object"
                      },
                      "namespace": {
                        "description": "Optional namespace to store the document in",
                        "type": "string"
                      },
                      "text": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "document_id",
                      "text",
                      "metadata"
                    ],
                    "type": "object"
                  },
                  "name": "process-document"
                },
                {
                  "description": "List all documents in the knowledge base by namespace",
                  "inputschema": {
                    "properties": {
                      "namespace": {
                        "description": "Namespace to list documents in",
                        "type": "string"
                      }
                    },
                    "required": [
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "list-documents"
                },
                {
                  "description": "Get stats about the Pinecone index specified in this server",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "pinecone-stats"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:32Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "skydeckai": {
      "mcpproviderid": "skydeckai",
      "self": "#/mcpproviders/skydeckai",
      "xid": "/mcpproviders/skydeckai",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:18.200247978Z",
      "modifiedat": "2025-05-26T16:42:18.200247978Z",

      "serversurl": "#/mcpproviders/skydeckai/servers",
      "servers": {
        "mcp-server-rememberizer": {
          "serverid": "mcp-server-rememberizer",
          "self": "#/mcpproviders/skydeckai/servers/mcp-server-rememberizer",
          "xid": "/mcpproviders/skydeckai/servers/mcp-server-rememberizer",

          "metaurl": "#/mcpproviders/skydeckai/servers/mcp-server-rememberizer/meta",
          "meta": {
            "serverid": "mcp-server-rememberizer",
            "self": "#/mcpproviders/skydeckai/servers/mcp-server-rememberizer/meta",
            "xid": "/mcpproviders/skydeckai/servers/mcp-server-rememberizer/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:18.200247978Z",
            "modifiedat": "2025-05-26T16:42:18.200247978Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/skydeckai/servers/mcp-server-rememberizer/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/skydeckai/servers/mcp-server-rememberizer/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-rememberizer",
              "versionid": "1",
              "self": "#/mcpproviders/skydeckai/servers/mcp-server-rememberizer/versions/1",
              "xid": "/mcpproviders/skydeckai/servers/mcp-server-rememberizer/versions/1",
              "epoch": 1,
              "name": "io.github.skydeckai/mcp-server-rememberizer",
              "isdefault": true,
              "description": "An MCP Server to enable global access to Rememberizer",
              "createdat": "2025-05-26T16:42:18.200247978Z",
              "modifiedat": "2025-05-26T16:42:18.200247978Z",
              "ancestor": "1",
              "id": "b5ee338d-655b-4067-9e17-f1bfc442a1eb",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_rememberizer_api_token",
                      "name": "REMEMBERIZER_API_TOKEN"
                    }
                  ],
                  "name": "mcp-server-rememberizer",
                  "registry_name": "unknown",
                  "version": "0.1.5"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "901090359",
                "source": "github",
                "url": "https://github.com/skydeckai/mcp-server-rememberizer"
              },
              "resources": [
                {
                  "description": "Documents resource accessible by document ID.",
                  "mimetype": "text/json",
                  "name": "Documents",
                  "uritemplate": "document/{id}"
                },
                {
                  "description": "Slack discussions resource accessible by Slack discussion ID.",
                  "mimetype": "text/json",
                  "name": "Slack discussions",
                  "uritemplate": "slack/{id}"
                }
              ],
              "tools": [
                {
                  "description": "Get information about your Rememberizer.ai personal/team knowledge repository account. This includes account holder name and email address.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "rememberizer_account_information"
                },
                {
                  "description": "Send a block of text and retrieve cosine similar matches from your connected Rememberizer personal/team internal knowledge and memory repository.",
                  "inputschema": {
                    "properties": {
                      "from_datetime_ISO8601": {
                        "description": "Start date in ISO 8601 format with timezone (e.g., 2023-01-01T00:00:00Z). Use this to filter results from a specific date.",
                        "type": "string"
                      },
                      "match_this": {
                        "description": "Up to a 400-word sentence for which you wish to find semantically similar chunks of knowledge.",
                        "type": "string"
                      },
                      "n_results": {
                        "description": "Number of semantically similar chunks of text to return. Use 'n_results=3' for up to 5, and 'n_results=10' for more information. If you do not receive enough information, consider trying again with a larger 'n_results' value.",
                        "type": "integer"
                      },
                      "to_datetime_ISO8601": {
                        "description": "End date in ISO 8601 format with timezone (e.g., 2024-01-01T00:00:00Z). Use this to filter results until a specific date.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "match_this"
                    ],
                    "type": "object"
                  },
                  "name": "retrieve_semantically_similar_internal_knowledge"
                },
                {
                  "description": "Search for documents in Rememberizer in its personal/team internal knowledge and memory repository using a simple query that returns the results of an agentic search. The search may include sources such as Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files. Consider using the tool list_internal_knowledge_systems to find out which are available. Use the tool list_internal_knowledge_systems to find out which sources are available. You can specify a from_datetime_ISO8601 and a to_datetime_ISO8601, and you should look at the context of your request to make sure you put reasonable parameters around this by, for example, converting a reference to recently to a start date two weeks before today, or converting yesterday to a timeframe during the last day. But do be aware of the effect of time zone differences in the source data and for the requestor.",
                  "inputschema": {
                    "properties": {
                      "from_datetime_ISO8601": {
                        "description": "Start date in ISO 8601 format with timezone (e.g., 2023-01-01T00:00:00Z). Use this to filter results from a specific date.",
                        "type": "string"
                      },
                      "n_results": {
                        "description": "Number of semantically similar chunks of text to return. Use 'n_results=3' for up to 5, and 'n_results=10' for more information. If you do not receive enough information, consider trying again with a larger 'n_results' value.",
                        "type": "integer"
                      },
                      "query": {
                        "description": "Up to a 400-word sentence for which you wish to find semantically similar chunks of knowledge.",
                        "type": "string"
                      },
                      "to_datetime_ISO8601": {
                        "description": "End date in ISO 8601 format with timezone (e.g., 2024-01-01T00:00:00Z). Use this to filter results until a specific date.",
                        "type": "string"
                      },
                      "user_context": {
                        "description": "The additional context for the query. You might need to summarize the conversation up to this point for better context-awared results.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "smart_search_internal_knowledge"
                },
                {
                  "description": "List the sources of personal/team internal knowledge. These may include Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_internal_knowledge_systems"
                },
                {
                  "description": "Retrieves a paginated list of all documents in your personal/team knowledge system. Sources could include Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files. Consider using the tool list_internal_knowledge_systems to find out which are available. Use this tool to browse through available documents and their metadata. Examples: - List first 100 documents: {\"page\": 1, \"page_size\": 100} - Get next page: {\"page\": 2, \"page_size\": 100} - Get maximum allowed documents: {\"page\": 1, \"page_size\": 1000}.",
                  "inputschema": {
                    "properties": {
                      "page": {
                        "default": 1,
                        "description": "Page number for pagination (starts at 1)",
                        "minimum": 1,
                        "type": "integer"
                      },
                      "page_size": {
                        "default": 100,
                        "description": "Number of documents per page (1-1000)",
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_personal_team_knowledge_documents"
                },
                {
                  "description": "Save a piece of text information in your Rememberizer.ai knowledge system so that it may be recalled in future through tools retrieve_semantically_similar_internal_knowledge or smart_search_internal_knowledge.",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "The information you wish to memorize.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the information. This is used to identify the information in the future.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "remember_this"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:26Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "smithery-ai": {
      "mcpproviderid": "smithery-ai",
      "self": "#/mcpproviders/smithery-ai",
      "xid": "/mcpproviders/smithery-ai",
      "epoch": 1,
      "name": "Smithery",
      "documentation": "https://github.com/smithery-ai",
      "createdat": "2025-05-26T16:41:26.548746669Z",
      "modifiedat": "2025-05-26T16:41:26.548746669Z",

      "serversurl": "#/mcpproviders/smithery-ai/servers",
      "servers": {},
      "serverscount": 0
    },
    "smn2gnt": {
      "mcpproviderid": "smn2gnt",
      "self": "#/mcpproviders/smn2gnt",
      "xid": "/mcpproviders/smn2gnt",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:51.127720618Z",
      "modifiedat": "2025-05-26T16:41:51.127720618Z",

      "serversurl": "#/mcpproviders/smn2gnt/servers",
      "servers": {
        "MCP-Salesforce": {
          "serverid": "MCP-Salesforce",
          "self": "#/mcpproviders/smn2gnt/servers/MCP-Salesforce",
          "xid": "/mcpproviders/smn2gnt/servers/MCP-Salesforce",

          "metaurl": "#/mcpproviders/smn2gnt/servers/MCP-Salesforce/meta",
          "meta": {
            "serverid": "MCP-Salesforce",
            "self": "#/mcpproviders/smn2gnt/servers/MCP-Salesforce/meta",
            "xid": "/mcpproviders/smn2gnt/servers/MCP-Salesforce/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:51.127720618Z",
            "modifiedat": "2025-05-26T16:41:51.127720618Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/smn2gnt/servers/MCP-Salesforce/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/smn2gnt/servers/MCP-Salesforce/versions",
          "versions": {
            "1": {
              "serverid": "MCP-Salesforce",
              "versionid": "1",
              "self": "#/mcpproviders/smn2gnt/servers/MCP-Salesforce/versions/1",
              "xid": "/mcpproviders/smn2gnt/servers/MCP-Salesforce/versions/1",
              "epoch": 1,
              "name": "io.github.smn2gnt/mcp-salesforce",
              "isdefault": true,
              "description": "MCP Salesforce connector",
              "createdat": "2025-05-26T16:41:51.127720618Z",
              "modifiedat": "2025-05-26T16:41:51.127720618Z",
              "ancestor": "1",
              "id": "0e45cb5a-5b45-47f3-8b5e-12bdf88d176a",
              "packages": [
                {
                  "name": "mcp-salesforce-connector",
                  "registry_name": "unknown",
                  "version": "0.1.3"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "904538810",
                "source": "github",
                "url": "https://github.com/smn2gnt/MCP-Salesforce"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:41Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "snagasuri": {
      "mcpproviderid": "snagasuri",
      "self": "#/mcpproviders/snagasuri",
      "xid": "/mcpproviders/snagasuri",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:41.996182867Z",
      "modifiedat": "2025-05-26T16:41:41.996182867Z",

      "serversurl": "#/mcpproviders/snagasuri/servers",
      "servers": {
        "deebo-prototype": {
          "serverid": "deebo-prototype",
          "self": "#/mcpproviders/snagasuri/servers/deebo-prototype",
          "xid": "/mcpproviders/snagasuri/servers/deebo-prototype",

          "metaurl": "#/mcpproviders/snagasuri/servers/deebo-prototype/meta",
          "meta": {
            "serverid": "deebo-prototype",
            "self": "#/mcpproviders/snagasuri/servers/deebo-prototype/meta",
            "xid": "/mcpproviders/snagasuri/servers/deebo-prototype/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:41.996182867Z",
            "modifiedat": "2025-05-26T16:41:41.996182867Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/snagasuri/servers/deebo-prototype/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/snagasuri/servers/deebo-prototype/versions",
          "versions": {
            "1": {
              "serverid": "deebo-prototype",
              "versionid": "1",
              "self": "#/mcpproviders/snagasuri/servers/deebo-prototype/versions/1",
              "xid": "/mcpproviders/snagasuri/servers/deebo-prototype/versions/1",
              "epoch": 1,
              "name": "io.github.snagasuri/deebo-prototype",
              "isdefault": true,
              "description": "Autonomous debugging agent MCP server",
              "createdat": "2025-05-26T16:41:41.996182867Z",
              "modifiedat": "2025-05-26T16:41:41.996182867Z",
              "ancestor": "1",
              "id": "ec2849c6-e8ed-46b1-8e57-646fd2e8be93",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "development",
                      "name": "NODE_ENV"
                    },
                    {
                      "description": "true",
                      "name": "USE_MEMORY_BANK"
                    },
                    {
                      "description": "openrouter",
                      "name": "MOTHER_HOST"
                    },
                    {
                      "description": "anthropic/claude-3.5-sonnet",
                      "name": "MOTHER_MODEL"
                    },
                    {
                      "description": "openrouter",
                      "name": "SCENARIO_HOST"
                    },
                    {
                      "description": "deepseek/deepseek-chat",
                      "name": "SCENARIO_MODEL"
                    },
                    {
                      "description": "your-openrouter-api-key",
                      "name": "OPENROUTER_API_KEY"
                    }
                  ],
                  "name": "deebo-prototype",
                  "package_arguments": [
                    {
                      "default": "--experimental-specifier-resolution=node",
                      "description": "--experimental-specifier-resolution=node",
                      "format": "string",
                      "is_required": true,
                      "name": "--experimental-specifier-resolution=node",
                      "type": "named",
                      "value": "--experimental-specifier-resolution=node",
                      "value_hint": "node"
                    },
                    {
                      "default": "--experimental-modules",
                      "description": "--experimental-modules",
                      "format": "string",
                      "is_required": true,
                      "name": "--experimental-modules",
                      "type": "named",
                      "value": "--experimental-modules"
                    },
                    {
                      "default": "--max-old-space-size=4096",
                      "description": "--max-old-space-size=4096",
                      "format": "string",
                      "is_required": true,
                      "name": "--max-old-space-size=4096",
                      "type": "named",
                      "value": "--max-old-space-size=4096",
                      "value_hint": "4096"
                    },
                    {
                      "default": "/Users/[your-name]/.deebo/build/index.js",
                      "description": "/Users/[your-name]/.deebo/build/index.js",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "/Users/[your-name]/.deebo/build/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "repository": {
                "id": "954456943",
                "source": "github",
                "url": "https://github.com/snagasuri/deebo-prototype"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:30Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "snaggle-ai": {
      "mcpproviderid": "snaggle-ai",
      "self": "#/mcpproviders/snaggle-ai",
      "xid": "/mcpproviders/snaggle-ai",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:55.591299466Z",
      "modifiedat": "2025-05-26T16:41:55.591299466Z",

      "serversurl": "#/mcpproviders/snaggle-ai/servers",
      "servers": {
        "openapi-mcp-server": {
          "serverid": "openapi-mcp-server",
          "self": "#/mcpproviders/snaggle-ai/servers/openapi-mcp-server",
          "xid": "/mcpproviders/snaggle-ai/servers/openapi-mcp-server",

          "metaurl": "#/mcpproviders/snaggle-ai/servers/openapi-mcp-server/meta",
          "meta": {
            "serverid": "openapi-mcp-server",
            "self": "#/mcpproviders/snaggle-ai/servers/openapi-mcp-server/meta",
            "xid": "/mcpproviders/snaggle-ai/servers/openapi-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:55.591299466Z",
            "modifiedat": "2025-05-26T16:41:55.591299466Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/snaggle-ai/servers/openapi-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/snaggle-ai/servers/openapi-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "openapi-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/snaggle-ai/servers/openapi-mcp-server/versions/1",
              "xid": "/mcpproviders/snaggle-ai/servers/openapi-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.snaggle-ai/openapi-mcp-server",
              "isdefault": true,
              "description": "Allow AI to wade through complex OpenAPIs using Simple Language",
              "createdat": "2025-05-26T16:41:55.591299466Z",
              "modifiedat": "2025-05-26T16:41:55.591299466Z",
              "ancestor": "1",
              "id": "47685d63-d574-4311-b823-c0ddc29d8514",
              "packages": [
                {
                  "name": "openapi-mcp-server",
                  "registry_name": "unknown",
                  "version": "2.0.3"
                }
              ],
              "repository": {
                "id": "900049352",
                "source": "github",
                "url": "https://github.com/janwilmake/openapi-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:53Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "snyk": {
      "mcpproviderid": "snyk",
      "self": "#/mcpproviders/snyk",
      "xid": "/mcpproviders/snyk",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:49.634642137Z",
      "modifiedat": "2025-05-26T16:41:49.634642137Z",

      "serversurl": "#/mcpproviders/snyk/servers",
      "servers": {
        "snyk-ls": {
          "serverid": "snyk-ls",
          "self": "#/mcpproviders/snyk/servers/snyk-ls",
          "xid": "/mcpproviders/snyk/servers/snyk-ls",

          "metaurl": "#/mcpproviders/snyk/servers/snyk-ls/meta",
          "meta": {
            "serverid": "snyk-ls",
            "self": "#/mcpproviders/snyk/servers/snyk-ls/meta",
            "xid": "/mcpproviders/snyk/servers/snyk-ls/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:49.634642137Z",
            "modifiedat": "2025-05-26T16:41:49.634642137Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/snyk/servers/snyk-ls/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/snyk/servers/snyk-ls/versions",
          "versions": {
            "1": {
              "serverid": "snyk-ls",
              "versionid": "1",
              "self": "#/mcpproviders/snyk/servers/snyk-ls/versions/1",
              "xid": "/mcpproviders/snyk/servers/snyk-ls/versions/1",
              "epoch": 1,
              "name": "io.github.snyk/snyk-ls",
              "isdefault": true,
              "description": "Language Server used by IDEs as Snyk Backend for Frontends",
              "createdat": "2025-05-26T16:41:49.634642137Z",
              "modifiedat": "2025-05-26T16:41:49.634642137Z",
              "ancestor": "1",
              "id": "8e5b8c2e-6751-4567-b367-4e24e5c7fb8c",
              "packages": [
                {
                  "name": "snyk/snyk-ls",
                  "package_arguments": [
                    {
                      "default": "--activateSnykOpenSource true",
                      "description": "Enables Snyk Open Source - defaults to true",
                      "format": "string",
                      "is_required": true,
                      "name": "--activateSnykOpenSource true",
                      "type": "named",
                      "value": "--activateSnykOpenSource true",
                      "value_hint": "true"
                    },
                    {
                      "default": "--activateSnykCode false",
                      "description": "Enables Snyk Code, if enabled for your organization - defaults to false, deprecated in favor of specific Snyk Code analysis types",
                      "format": "string",
                      "is_required": true,
                      "name": "--activateSnykCode false",
                      "type": "named",
                      "value": "--activateSnykCode false",
                      "value_hint": "false"
                    },
                    {
                      "default": "--activateSnykIac true",
                      "description": "Enables Infrastructure as Code - defaults to true",
                      "format": "string",
                      "is_required": true,
                      "name": "--activateSnykIac true",
                      "type": "named",
                      "value": "--activateSnykIac true",
                      "value_hint": "true"
                    },
                    {
                      "default": "--insecure false",
                      "description": "Allows custom CAs (Certification Authorities)",
                      "format": "string",
                      "is_required": true,
                      "name": "--insecure false",
                      "type": "named",
                      "value": "--insecure false",
                      "value_hint": "false"
                    },
                    {
                      "default": "--endpoint https://api.eu.snyk.io",
                      "description": "Snyk API Endpoint required for non-default multi-tenant and single-tenant setups",
                      "format": "string",
                      "is_required": true,
                      "name": "--endpoint https://api.eu.snyk.io",
                      "type": "named",
                      "value": "--endpoint https://api.eu.snyk.io",
                      "value_hint": "https://api.eu.snyk.io"
                    },
                    {
                      "default": "--organization a string",
                      "description": "The name of your organization, e.g. the output of: curl -H \"Authorization: token $(snyk config get api)\"  https://api.snyk.io/v1/cli-config/settings/sast | jq .org",
                      "format": "string",
                      "is_required": true,
                      "name": "--organization a string",
                      "type": "named",
                      "value": "--organization a string",
                      "value_hint": "a string"
                    },
                    {
                      "default": "--path /usr/local/bin",
                      "description": "Adds to the system path used by the CLI",
                      "format": "string",
                      "is_required": true,
                      "name": "--path /usr/local/bin",
                      "type": "named",
                      "value": "--path /usr/local/bin",
                      "value_hint": "/usr/local/bin"
                    },
                    {
                      "default": "--cliPath /a/patch/snyk-cli",
                      "description": "The path where the CLI can be found, or where it should be downloaded to",
                      "format": "string",
                      "is_required": true,
                      "name": "--cliPath /a/patch/snyk-cli",
                      "type": "named",
                      "value": "--cliPath /a/patch/snyk-cli",
                      "value_hint": "/a/patch/snyk-cli"
                    },
                    {
                      "default": "--token secret-token",
                      "description": "The Snyk token, e.g.: snyk config get api or a token from authentication flow",
                      "format": "string",
                      "is_required": true,
                      "name": "--token secret-token",
                      "type": "named",
                      "value": "--token secret-token",
                      "value_hint": "secret-token"
                    },
                    {
                      "default": "--integrationName ECLIPSE",
                      "description": "The name of the IDE or editor the LS is running in",
                      "format": "string",
                      "is_required": true,
                      "name": "--integrationName ECLIPSE",
                      "type": "named",
                      "value": "--integrationName ECLIPSE",
                      "value_hint": "ECLIPSE"
                    },
                    {
                      "default": "--integrationVersion 1.0.0",
                      "description": "The version of the IDE or editor the LS is running in",
                      "format": "string",
                      "is_required": true,
                      "name": "--integrationVersion 1.0.0",
                      "type": "named",
                      "value": "--integrationVersion 1.0.0",
                      "value_hint": "1.0.0"
                    },
                    {
                      "default": "--automaticAuthentication true",
                      "description": "Whether LS will automatically authenticate on scan start (default: true)",
                      "format": "string",
                      "is_required": true,
                      "name": "--automaticAuthentication true",
                      "type": "named",
                      "value": "--automaticAuthentication true",
                      "value_hint": "true"
                    },
                    {
                      "default": "--deviceId a UUID",
                      "description": "A unique ID from the running the LS, used for telemetry",
                      "format": "string",
                      "is_required": true,
                      "name": "--deviceId a UUID",
                      "type": "named",
                      "value": "--deviceId a UUID",
                      "value_hint": "a UUID"
                    },
                    {
                      "default": "--filterSeverity critical:true,high:true,medium:true,low:true",
                      "description": "Optional filter to be applied for the determined issues (if omitted: no filtering)",
                      "format": "string",
                      "name": "--filterSeverity critical:true,high:true,medium:true,low:true",
                      "type": "named",
                      "value": "--filterSeverity critical:true,high:true,medium:true,low:true",
                      "value_hint": "critical:true,high:true,medium:true,low:true"
                    },
                    {
                      "default": "--issueViewOptions openIssues:true,ignoredIssues:false",
                      "description": "Optional filter to be applied for the determined issues (if omitted: no filtering)",
                      "format": "string",
                      "name": "--issueViewOptions openIssues:true,ignoredIssues:false",
                      "type": "named",
                      "value": "--issueViewOptions openIssues:true,ignoredIssues:false",
                      "value_hint": "openIssues:true,ignoredIssues:false"
                    },
                    {
                      "default": "--sendErrorReports true",
                      "description": "Whether to report errors to Snyk - defaults to true",
                      "format": "string",
                      "is_required": true,
                      "name": "--sendErrorReports true",
                      "type": "named",
                      "value": "--sendErrorReports true",
                      "value_hint": "true"
                    },
                    {
                      "default": "--manageBinariesAutomatically true",
                      "description": "Whether CLI/LS binaries will be downloaded \u0026 updated automatically",
                      "format": "string",
                      "is_required": true,
                      "name": "--manageBinariesAutomatically true",
                      "type": "named",
                      "value": "--manageBinariesAutomatically true",
                      "value_hint": "true"
                    },
                    {
                      "default": "--enableTrustedFoldersFeature true",
                      "description": "Whether LS will prompt to trust a folder (default: true)",
                      "format": "string",
                      "is_required": true,
                      "name": "--enableTrustedFoldersFeature true",
                      "type": "named",
                      "value": "--enableTrustedFoldersFeature true",
                      "value_hint": "true"
                    },
                    {
                      "default": "--activateSnykCodeSecurity false",
                      "description": "Enables Snyk Code Security reporting",
                      "format": "string",
                      "is_required": true,
                      "name": "--activateSnykCodeSecurity false",
                      "type": "named",
                      "value": "--activateSnykCodeSecurity false",
                      "value_hint": "false"
                    },
                    {
                      "default": "--activateSnykCodeQuality false",
                      "description": "Enable Snyk Code Quality issue reporting (Beta, only in IDEs and LS)",
                      "format": "string",
                      "is_required": true,
                      "name": "--activateSnykCodeQuality false",
                      "type": "named",
                      "value": "--activateSnykCodeQuality false",
                      "value_hint": "false"
                    },
                    {
                      "default": "--scanningMode auto",
                      "description": "Specifies the mode for scans: \"auto\" for background scans or \"manual\" for scans on command",
                      "format": "string",
                      "is_required": true,
                      "name": "--scanningMode auto",
                      "type": "named",
                      "value": "--scanningMode auto",
                      "value_hint": "auto"
                    },
                    {
                      "default": "--authenticationMethod oauth",
                      "description": "Specifies the authentication method to use: \"token\" for Snyk API token or \"oauth\" for Snyk OAuth flow. Default is token.",
                      "format": "string",
                      "is_required": true,
                      "name": "--authenticationMethod oauth",
                      "type": "named",
                      "value": "--authenticationMethod oauth",
                      "value_hint": "oauth"
                    },
                    {
                      "default": "--snykCodeApi https://deeproxy.snyk.io",
                      "description": "Specifies the Snyk Code API endpoint to use. Default is https://deeproxy.snyk.io",
                      "format": "string",
                      "is_required": true,
                      "name": "--snykCodeApi https://deeproxy.snyk.io",
                      "type": "named",
                      "value": "--snykCodeApi https://deeproxy.snyk.io",
                      "value_hint": "https://deeproxy.snyk.io"
                    },
                    {
                      "default": "--enableSnykLearnCodeActions true",
                      "description": "show snyk learns code actions",
                      "format": "string",
                      "is_required": true,
                      "name": "--enableSnykLearnCodeActions true",
                      "type": "named",
                      "value": "--enableSnykLearnCodeActions true",
                      "value_hint": "true"
                    },
                    {
                      "default": "--enableSnykOSSQuickFixCodeActions true",
                      "description": "show quickfixes for supported OSS package manager issues",
                      "format": "string",
                      "is_required": true,
                      "name": "--enableSnykOSSQuickFixCodeActions true",
                      "type": "named",
                      "value": "--enableSnykOSSQuickFixCodeActions true",
                      "value_hint": "true"
                    },
                    {
                      "default": "--enableSnykOpenBrowserActions false",
                      "description": "show code actions to open issue descriptions",
                      "format": "string",
                      "is_required": true,
                      "name": "--enableSnykOpenBrowserActions false",
                      "type": "named",
                      "value": "--enableSnykOpenBrowserActions false",
                      "value_hint": "false"
                    },
                    {
                      "default": "--enableDeltaFindings false",
                      "description": "only display issues that are not new and thus not on the base branch",
                      "format": "string",
                      "is_required": true,
                      "name": "--enableDeltaFindings false",
                      "type": "named",
                      "value": "--enableDeltaFindings false",
                      "value_hint": "false"
                    },
                    {
                      "default": "--requiredProtocolVersion 14",
                      "description": "the protocol version a client needs",
                      "format": "string",
                      "is_required": true,
                      "name": "--requiredProtocolVersion 14",
                      "type": "named",
                      "value": "--requiredProtocolVersion 14",
                      "value_hint": "14"
                    },
                    {
                      "default": "--hoverVerbosity 1",
                      "description": "0-3 with 0 the lowest verbosity. 0: off, 1: only description, 2: description \u0026 details 3: complete (default)",
                      "format": "string",
                      "is_required": true,
                      "name": "--hoverVerbosity 1",
                      "type": "named",
                      "value": "--hoverVerbosity 1",
                      "value_hint": "1"
                    },
                    {
                      "default": "--outputFormat md",
                      "description": "plain = plain, markdown = md (default) or html = HTML",
                      "format": "string",
                      "is_required": true,
                      "name": "--outputFormat md",
                      "type": "named",
                      "value": "--outputFormat md",
                      "value_hint": "md"
                    },
                    {
                      "default": "--additionalParams --all-projects",
                      "description": "Any extra params for Open Source scans using the Snyk CLI, separated by spaces",
                      "format": "string",
                      "name": "--additionalParams --all-projects",
                      "type": "named",
                      "value": "--additionalParams --all-projects",
                      "value_hint": "--all-projects"
                    },
                    {
                      "default": "--additionalEnv MAVEN_OPTS=-Djava.awt.headless=true;FOO=BAR",
                      "description": "Additional environment variables, separated by semicolons",
                      "format": "string",
                      "name": "--additionalEnv MAVEN_OPTS=-Djava.awt.headless=true;FOO=BAR",
                      "type": "named",
                      "value": "--additionalEnv MAVEN_OPTS=-Djava.awt.headless=true;FOO=BAR",
                      "value_hint": "MAVEN_OPTS=-Djava.awt.headless=true;FOO=BAR"
                    },
                    {
                      "default": "--trustedFolders /a/trusted/path,/another/trusted/path",
                      "description": "An array of folder that should be trusted",
                      "format": "string",
                      "name": "--trustedFolders /a/trusted/path,/another/trusted/path",
                      "type": "named",
                      "value": "--trustedFolders /a/trusted/path,/another/trusted/path",
                      "value_hint": "/a/trusted/path,/another/trusted/path"
                    },
                    {
                      "default": "--folderConfigs baseBranch:main,folderPath:a/b/c,additionalParameters:--file=pom.xml",
                      "description": "an array of folder configurations, defining the desired base branch of a workspaceFolder",
                      "format": "string",
                      "name": "--folderConfigs baseBranch:main,folderPath:a/b/c,additionalParameters:--file=pom.xml",
                      "type": "named",
                      "value": "--folderConfigs baseBranch:main,folderPath:a/b/c,additionalParameters:--file=pom.xml",
                      "value_hint": "baseBranch:main,folderPath:a/b/c,additionalParameters:--file=pom.xml"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "431904794",
                "source": "github",
                "url": "https://github.com/snyk/snyk-ls"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:01:29Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "sonnylazuardi": {
      "mcpproviderid": "sonnylazuardi",
      "self": "#/mcpproviders/sonnylazuardi",
      "xid": "/mcpproviders/sonnylazuardi",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:36.926561203Z",
      "modifiedat": "2025-05-26T16:42:36.926561203Z",

      "serversurl": "#/mcpproviders/sonnylazuardi/servers",
      "servers": {
        "cursor-talk-to-figma-mcp": {
          "serverid": "cursor-talk-to-figma-mcp",
          "self": "#/mcpproviders/sonnylazuardi/servers/cursor-talk-to-figma-mcp",
          "xid": "/mcpproviders/sonnylazuardi/servers/cursor-talk-to-figma-mcp",

          "metaurl": "#/mcpproviders/sonnylazuardi/servers/cursor-talk-to-figma-mcp/meta",
          "meta": {
            "serverid": "cursor-talk-to-figma-mcp",
            "self": "#/mcpproviders/sonnylazuardi/servers/cursor-talk-to-figma-mcp/meta",
            "xid": "/mcpproviders/sonnylazuardi/servers/cursor-talk-to-figma-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:36.926561203Z",
            "modifiedat": "2025-05-26T16:42:36.926561203Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/sonnylazuardi/servers/cursor-talk-to-figma-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/sonnylazuardi/servers/cursor-talk-to-figma-mcp/versions",
          "versions": {
            "1": {
              "serverid": "cursor-talk-to-figma-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/sonnylazuardi/servers/cursor-talk-to-figma-mcp/versions/1",
              "xid": "/mcpproviders/sonnylazuardi/servers/cursor-talk-to-figma-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.sonnylazuardi/cursor-talk-to-figma-mcp",
              "isdefault": true,
              "description": "Cursor Talk To Figma MCP",
              "createdat": "2025-05-26T16:42:36.926561203Z",
              "modifiedat": "2025-05-26T16:42:36.926561203Z",
              "ancestor": "1",
              "id": "9826cb7a-bc6f-41d9-b9b7-f76f781c1eca",
              "packages": [
                {
                  "name": "cursor-talk-to-figma-mcp",
                  "registry_name": "unknown",
                  "version": "0.2.1"
                }
              ],
              "repository": {
                "id": "949523404",
                "source": "github",
                "url": "https://github.com/sonnylazuardi/cursor-talk-to-figma-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:25Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "sooperset": {
      "mcpproviderid": "sooperset",
      "self": "#/mcpproviders/sooperset",
      "xid": "/mcpproviders/sooperset",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:38.700797572Z",
      "modifiedat": "2025-05-26T16:42:38.700797572Z",

      "serversurl": "#/mcpproviders/sooperset/servers",
      "servers": {
        "mcp-atlassian": {
          "serverid": "mcp-atlassian",
          "self": "#/mcpproviders/sooperset/servers/mcp-atlassian",
          "xid": "/mcpproviders/sooperset/servers/mcp-atlassian",

          "metaurl": "#/mcpproviders/sooperset/servers/mcp-atlassian/meta",
          "meta": {
            "serverid": "mcp-atlassian",
            "self": "#/mcpproviders/sooperset/servers/mcp-atlassian/meta",
            "xid": "/mcpproviders/sooperset/servers/mcp-atlassian/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:38.700797572Z",
            "modifiedat": "2025-05-26T16:42:38.700797572Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/sooperset/servers/mcp-atlassian/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/sooperset/servers/mcp-atlassian/versions",
          "versions": {
            "1": {
              "serverid": "mcp-atlassian",
              "versionid": "1",
              "self": "#/mcpproviders/sooperset/servers/mcp-atlassian/versions/1",
              "xid": "/mcpproviders/sooperset/servers/mcp-atlassian/versions/1",
              "epoch": 1,
              "name": "io.github.sooperset/mcp-atlassian",
              "isdefault": true,
              "description": "MCP server for Atlassian tools (Confluence, Jira)",
              "createdat": "2025-05-26T16:42:38.700797572Z",
              "modifiedat": "2025-05-26T16:42:38.700797572Z",
              "ancestor": "1",
              "id": "4df1406c-1bb1-4495-96e8-8c25de454b5d",
              "packages": [
                {
                  "name": "mcp-atlassian",
                  "registry_name": "unknown",
                  "version": "0.10.6"
                }
              ],
              "prompts": [],
              "remotes": [
                {
                  "transport_type": "sse",
                  "url": "http://localhost:9000/sse"
                }
              ],
              "repository": {
                "id": "897809208",
                "source": "github",
                "url": "https://github.com/sooperset/mcp-atlassian"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:16Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "sparfenyuk": {
      "mcpproviderid": "sparfenyuk",
      "self": "#/mcpproviders/sparfenyuk",
      "xid": "/mcpproviders/sparfenyuk",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:03.688952243Z",
      "modifiedat": "2025-05-26T16:42:03.688952243Z",

      "serversurl": "#/mcpproviders/sparfenyuk/servers",
      "servers": {
        "mcp-proxy": {
          "serverid": "mcp-proxy",
          "self": "#/mcpproviders/sparfenyuk/servers/mcp-proxy",
          "xid": "/mcpproviders/sparfenyuk/servers/mcp-proxy",

          "metaurl": "#/mcpproviders/sparfenyuk/servers/mcp-proxy/meta",
          "meta": {
            "serverid": "mcp-proxy",
            "self": "#/mcpproviders/sparfenyuk/servers/mcp-proxy/meta",
            "xid": "/mcpproviders/sparfenyuk/servers/mcp-proxy/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:03.688952243Z",
            "modifiedat": "2025-05-26T16:42:03.688952243Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/sparfenyuk/servers/mcp-proxy/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/sparfenyuk/servers/mcp-proxy/versions",
          "versions": {
            "1": {
              "serverid": "mcp-proxy",
              "versionid": "1",
              "self": "#/mcpproviders/sparfenyuk/servers/mcp-proxy/versions/1",
              "xid": "/mcpproviders/sparfenyuk/servers/mcp-proxy/versions/1",
              "epoch": 1,
              "name": "io.github.sparfenyuk/mcp-proxy",
              "isdefault": true,
              "description": "A bridge between Streamable HTTP and stdio MCP transports",
              "createdat": "2025-05-26T16:42:03.688952243Z",
              "modifiedat": "2025-05-26T16:42:03.688952243Z",
              "ancestor": "1",
              "id": "5b01e888-7245-46a6-8747-d6f9ca374c43",
              "packages": [
                {
                  "name": "mcp-proxy",
                  "registry_name": "unknown",
                  "version": "0.6.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "908734690",
                "source": "github",
                "url": "https://github.com/sparfenyuk/mcp-proxy"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:56Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "spgoodman": {
      "mcpproviderid": "spgoodman",
      "self": "#/mcpproviders/spgoodman",
      "xid": "/mcpproviders/spgoodman",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:23.510268497Z",
      "modifiedat": "2025-05-26T16:42:23.510268497Z",

      "serversurl": "#/mcpproviders/spgoodman/servers",
      "servers": {
        "createveai-nexus-server": {
          "serverid": "createveai-nexus-server",
          "self": "#/mcpproviders/spgoodman/servers/createveai-nexus-server",
          "xid": "/mcpproviders/spgoodman/servers/createveai-nexus-server",

          "metaurl": "#/mcpproviders/spgoodman/servers/createveai-nexus-server/meta",
          "meta": {
            "serverid": "createveai-nexus-server",
            "self": "#/mcpproviders/spgoodman/servers/createveai-nexus-server/meta",
            "xid": "/mcpproviders/spgoodman/servers/createveai-nexus-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:23.510268497Z",
            "modifiedat": "2025-05-26T16:42:23.510268497Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/spgoodman/servers/createveai-nexus-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/spgoodman/servers/createveai-nexus-server/versions",
          "versions": {
            "1": {
              "serverid": "createveai-nexus-server",
              "versionid": "1",
              "self": "#/mcpproviders/spgoodman/servers/createveai-nexus-server/versions/1",
              "xid": "/mcpproviders/spgoodman/servers/createveai-nexus-server/versions/1",
              "epoch": 1,
              "name": "io.github.spgoodman/createveai-nexus-server",
              "isdefault": true,
              "description": "Createve.AI Nexus Server: MCP and API bridge for ComfyUI-node compatible LLM and agent use",
              "createdat": "2025-05-26T16:42:23.510268497Z",
              "modifiedat": "2025-05-26T16:42:23.510268497Z",
              "ancestor": "1",
              "id": "8d24741f-2cdf-481a-932b-06517c8f9aeb",
              "packages": [
                {
                  "name": "spgoodman/createveai-nexus-server",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "945610929",
                "source": "github",
                "url": "https://github.com/spgoodman/createveai-nexus-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:57Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "sssjiang": {
      "mcpproviderid": "sssjiang",
      "self": "#/mcpproviders/sssjiang",
      "xid": "/mcpproviders/sssjiang",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:19.314043818Z",
      "modifiedat": "2025-05-26T16:42:19.314043818Z",

      "serversurl": "#/mcpproviders/sssjiang/servers",
      "servers": {
        "pubchem_mcp_server": {
          "serverid": "pubchem_mcp_server",
          "self": "#/mcpproviders/sssjiang/servers/pubchem_mcp_server",
          "xid": "/mcpproviders/sssjiang/servers/pubchem_mcp_server",

          "metaurl": "#/mcpproviders/sssjiang/servers/pubchem_mcp_server/meta",
          "meta": {
            "serverid": "pubchem_mcp_server",
            "self": "#/mcpproviders/sssjiang/servers/pubchem_mcp_server/meta",
            "xid": "/mcpproviders/sssjiang/servers/pubchem_mcp_server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:19.314043818Z",
            "modifiedat": "2025-05-26T16:42:19.314043818Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/sssjiang/servers/pubchem_mcp_server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/sssjiang/servers/pubchem_mcp_server/versions",
          "versions": {
            "1": {
              "serverid": "pubchem_mcp_server",
              "versionid": "1",
              "self": "#/mcpproviders/sssjiang/servers/pubchem_mcp_server/versions/1",
              "xid": "/mcpproviders/sssjiang/servers/pubchem_mcp_server/versions/1",
              "epoch": 1,
              "name": "io.github.sssjiang/pubchem_mcp_server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:19.314043818Z",
              "modifiedat": "2025-05-26T16:42:19.314043818Z",
              "ancestor": "1",
              "id": "68966508-9094-4eb5-9588-ff7456d6c1ce",
              "packages": [
                {
                  "name": "pubchem_mcp_server",
                  "registry_name": "unknown",
                  "version": "0.1.5"
                }
              ],
              "repository": {
                "id": "955038120",
                "source": "github",
                "url": "https://github.com/sssjiang/pubchem_mcp_server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:51Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "starwind-ui": {
      "mcpproviderid": "starwind-ui",
      "self": "#/mcpproviders/starwind-ui",
      "xid": "/mcpproviders/starwind-ui",
      "epoch": 1,
      "name": "Starwind UI",
      "description": "A set of powerful, accessible components for your Astro projects. Styled with Tailwind CSS v4.",
      "documentation": "https://github.com/starwind-ui",
      "createdat": "2025-05-26T16:42:19.216600993Z",
      "modifiedat": "2025-05-26T16:42:19.216600993Z",

      "serversurl": "#/mcpproviders/starwind-ui/servers",
      "servers": {},
      "serverscount": 0
    },
    "stass": {
      "mcpproviderid": "stass",
      "self": "#/mcpproviders/stass",
      "xid": "/mcpproviders/stass",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:41.006132422Z",
      "modifiedat": "2025-05-26T16:42:41.006132422Z",

      "serversurl": "#/mcpproviders/stass/servers",
      "servers": {
        "lldb-mcp": {
          "serverid": "lldb-mcp",
          "self": "#/mcpproviders/stass/servers/lldb-mcp",
          "xid": "/mcpproviders/stass/servers/lldb-mcp",

          "metaurl": "#/mcpproviders/stass/servers/lldb-mcp/meta",
          "meta": {
            "serverid": "lldb-mcp",
            "self": "#/mcpproviders/stass/servers/lldb-mcp/meta",
            "xid": "/mcpproviders/stass/servers/lldb-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:41.006132422Z",
            "modifiedat": "2025-05-26T16:42:41.006132422Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/stass/servers/lldb-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/stass/servers/lldb-mcp/versions",
          "versions": {
            "1": {
              "serverid": "lldb-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/stass/servers/lldb-mcp/versions/1",
              "xid": "/mcpproviders/stass/servers/lldb-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.stass/lldb-mcp",
              "isdefault": true,
              "description": "LLDB MCP server",
              "createdat": "2025-05-26T16:42:41.006132422Z",
              "modifiedat": "2025-05-26T16:42:41.006132422Z",
              "ancestor": "1",
              "id": "1fa71606-a2ca-47f1-b249-91031917ca41",
              "packages": [
                {
                  "name": "stass/lldb-mcp",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "955087112",
                "source": "github",
                "url": "https://github.com/stass/lldb-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:27Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "stefanoamorelli": {
      "mcpproviderid": "stefanoamorelli",
      "self": "#/mcpproviders/stefanoamorelli",
      "xid": "/mcpproviders/stefanoamorelli",
      "epoch": 4,
      "createdat": "2025-05-26T16:41:35.464800988Z",
      "modifiedat": "2025-05-26T16:41:35.804198658Z",

      "serversurl": "#/mcpproviders/stefanoamorelli/servers",
      "servers": {
        "fred-mcp-server": {
          "serverid": "fred-mcp-server",
          "self": "#/mcpproviders/stefanoamorelli/servers/fred-mcp-server",
          "xid": "/mcpproviders/stefanoamorelli/servers/fred-mcp-server",

          "metaurl": "#/mcpproviders/stefanoamorelli/servers/fred-mcp-server/meta",
          "meta": {
            "serverid": "fred-mcp-server",
            "self": "#/mcpproviders/stefanoamorelli/servers/fred-mcp-server/meta",
            "xid": "/mcpproviders/stefanoamorelli/servers/fred-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:35.804198658Z",
            "modifiedat": "2025-05-26T16:41:35.804198658Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/stefanoamorelli/servers/fred-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/stefanoamorelli/servers/fred-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "fred-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/stefanoamorelli/servers/fred-mcp-server/versions/1",
              "xid": "/mcpproviders/stefanoamorelli/servers/fred-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.stefanoamorelli/fred-mcp-server",
              "isdefault": true,
              "description": "Open-source MCP Server for the Federal Reserve Economic Data",
              "createdat": "2025-05-26T16:41:35.804198658Z",
              "modifiedat": "2025-05-26T16:41:35.804198658Z",
              "ancestor": "1",
              "id": "2382172a-b26a-40fc-adee-f82132b56edc",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cYOUR_API_KEY\u003e",
                      "name": "FRED_API_KEY"
                    }
                  ],
                  "name": "fred-mcp-server",
                  "registry_name": "unknown",
                  "version": "0.2.3"
                }
              ],
              "repository": {
                "id": "981791515",
                "source": "github",
                "url": "https://github.com/stefanoamorelli/fred-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:41Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "hyprmcp": {
          "serverid": "hyprmcp",
          "self": "#/mcpproviders/stefanoamorelli/servers/hyprmcp",
          "xid": "/mcpproviders/stefanoamorelli/servers/hyprmcp",

          "metaurl": "#/mcpproviders/stefanoamorelli/servers/hyprmcp/meta",
          "meta": {
            "serverid": "hyprmcp",
            "self": "#/mcpproviders/stefanoamorelli/servers/hyprmcp/meta",
            "xid": "/mcpproviders/stefanoamorelli/servers/hyprmcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:35.705654103Z",
            "modifiedat": "2025-05-26T16:41:35.705654103Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/stefanoamorelli/servers/hyprmcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/stefanoamorelli/servers/hyprmcp/versions",
          "versions": {
            "1": {
              "serverid": "hyprmcp",
              "versionid": "1",
              "self": "#/mcpproviders/stefanoamorelli/servers/hyprmcp/versions/1",
              "xid": "/mcpproviders/stefanoamorelli/servers/hyprmcp/versions/1",
              "epoch": 1,
              "name": "io.github.stefanoamorelli/hyprmcp",
              "isdefault": true,
              "description": "Community MCP server for hyprctl",
              "createdat": "2025-05-26T16:41:35.705654103Z",
              "modifiedat": "2025-05-26T16:41:35.705654103Z",
              "ancestor": "1",
              "id": "b51467a7-698f-4a33-9598-db5aaf4e07b3",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cglobal path of the repo\u003e/hyprmcp",
                      "name": "PYTHONPATH"
                    },
                    {
                      "description": "\u003cyour-hyprland-instance-signature\u003e",
                      "name": "HYPRLAND_INSTANCE_SIGNATURE"
                    }
                  ],
                  "name": "stefanoamorelli/hyprmcp",
                  "package_arguments": [
                    {
                      "default": "--with mcp[cli]",
                      "description": "--with mcp[cli]",
                      "format": "string",
                      "is_required": true,
                      "name": "--with mcp[cli]",
                      "type": "named",
                      "value": "--with mcp[cli]",
                      "value_hint": "mcp[cli]"
                    },
                    {
                      "default": "--with subprocess",
                      "description": "--with subprocess",
                      "format": "string",
                      "is_required": true,
                      "name": "--with subprocess",
                      "type": "named",
                      "value": "--with subprocess",
                      "value_hint": "subprocess"
                    },
                    {
                      "default": "mcp",
                      "description": "mcp",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp",
                      "value_hint": "mcp"
                    },
                    {
                      "default": "\u003cglobal path of the repo\u003e/hyprmcp/hyprmcp/server.py",
                      "description": "\u003cglobal path of the repo\u003e/hyprmcp/hyprmcp/server.py",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "\u003cglobal path of the repo\u003e/hyprmcp/hyprmcp/server.py",
                      "value_hint": "\u003cglobal path of the repo\u003e/hyprmcp/hyprmcp/server.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": ""
                }
              ],
              "repository": {
                "id": "973785828",
                "source": "github",
                "url": "https://github.com/stefanoamorelli/hyprmcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:17Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "nasdaq-data-link-mcp": {
          "serverid": "nasdaq-data-link-mcp",
          "self": "#/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp",
          "xid": "/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp",

          "metaurl": "#/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp/meta",
          "meta": {
            "serverid": "nasdaq-data-link-mcp",
            "self": "#/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp/meta",
            "xid": "/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:35.464800988Z",
            "modifiedat": "2025-05-26T16:41:35.464800988Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp/versions",
          "versions": {
            "1": {
              "serverid": "nasdaq-data-link-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp/versions/1",
              "xid": "/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.stefanoamorelli/nasdaq-data-link-mcp",
              "isdefault": true,
              "description": "A Nasdaq Data Link MCP (Model Context Protocol) Server",
              "createdat": "2025-05-26T16:41:35.464800988Z",
              "modifiedat": "2025-05-26T16:41:35.464800988Z",
              "ancestor": "1",
              "id": "9326c18e-b2fb-4012-a170-cdd5753f0b1e",
              "packages": [
                {
                  "name": "nasdaq-data-link-mcp-os",
                  "package_arguments": [
                    {
                      "default": "investment_company_type N-1A",
                      "description": "investment_company_type argument",
                      "format": "string",
                      "is_required": true,
                      "name": "investment_company_type N-1A",
                      "type": "named",
                      "value": "investment_company_type N-1A",
                      "value_hint": "N-1A"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.3"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "957599131",
                "source": "github",
                "url": "https://github.com/stefanoamorelli/nasdaq-data-link-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieves indicator values from World Bank dataset.",
                  "inputschema": {
                    "properties": {
                      "country": {
                        "type": "string"
                      },
                      "indicator": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "country",
                      "indicator"
                    ],
                    "type": "object"
                  },
                  "name": "get_indicator_value"
                },
                {
                  "description": "Returns country code for a given country name.",
                  "inputschema": {
                    "properties": {
                      "countryName": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "countryName"
                    ],
                    "type": "object"
                  },
                  "name": "country_code"
                },
                {
                  "description": "Lists all available World Bank indicators.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_worldbank_indicators"
                },
                {
                  "description": "Searches World Bank indicators by keyword.",
                  "inputschema": {
                    "properties": {
                      "keyword": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "keyword"
                    ],
                    "type": "object"
                  },
                  "name": "search_worldbank_indicators"
                },
                {
                  "description": "Retrieves Retail Trading Activity Tracker 10 (RTAT10) data for specific dates and optional tickers.",
                  "inputschema": {
                    "properties": {
                      "dates": {
                        "type": "string"
                      },
                      "tickers": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "dates"
                    ],
                    "type": "object"
                  },
                  "name": "get_rtat10"
                },
                {
                  "description": "Retrieves Retail Trading Activity (RTAT) data for specific dates and optional tickers.",
                  "inputschema": {
                    "properties": {
                      "dates": {
                        "type": "string"
                      },
                      "tickers": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "dates"
                    ],
                    "type": "object"
                  },
                  "name": "get_rtat"
                },
                {
                  "description": "Retrieves company statistics from Nasdaq Equities 360 database.",
                  "inputschema": {
                    "properties": {
                      "figi": {
                        "type": "string"
                      },
                      "symbol": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_stock_stats"
                },
                {
                  "description": "Lists all available fields in the stock statistics database with descriptions.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_stock_stat_fields"
                },
                {
                  "description": "Retrieves fundamental financial data from Nasdaq Equities 360 Fundamental Summary database.",
                  "inputschema": {
                    "properties": {
                      "calendardate": {
                        "type": "string"
                      },
                      "dimension": {
                        "type": "string"
                      },
                      "figi": {
                        "type": "string"
                      },
                      "symbol": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_fundamental_data"
                },
                {
                  "description": "Lists all available fields in the fundamental summary database with descriptions.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_fundamental_fields"
                },
                {
                  "description": "Retrieves detailed financial data from Nasdaq Equities 360 Fundamental Details database.",
                  "inputschema": {
                    "properties": {
                      "calendardate": {
                        "type": "string"
                      },
                      "dimension": {
                        "type": "string"
                      },
                      "figi": {
                        "type": "string"
                      },
                      "symbol": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_detailed_financials"
                },
                {
                  "description": "Lists all available fields in the fundamental details database with descriptions.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_detailed_financial_fields"
                },
                {
                  "description": "Retrieves balance sheet data from Nasdaq Equities 360 Balance Sheet database.",
                  "inputschema": {
                    "properties": {
                      "calendardate": {
                        "type": "string"
                      },
                      "dimension": {
                        "type": "string"
                      },
                      "figi": {
                        "type": "string"
                      },
                      "symbol": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_balance_sheet_data"
                },
                {
                  "description": "Lists all available fields in the balance sheet database with descriptions.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_balance_sheet_fields"
                },
                {
                  "description": "Retrieves cash flow statement data from Nasdaq Equities 360 Cash Flow database.",
                  "inputschema": {
                    "properties": {
                      "calendardate": {
                        "type": "string"
                      },
                      "dimension": {
                        "type": "string"
                      },
                      "figi": {
                        "type": "string"
                      },
                      "symbol": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_cash_flow_data"
                },
                {
                  "description": "Lists all available fields in the cash flow statement database with descriptions.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_cash_flow_fields"
                },
                {
                  "description": "Retrieves corporate actions data from Nasdaq Equities 360 Corporate Actions database.",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string"
                      },
                      "figi": {
                        "type": "string"
                      },
                      "symbol": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_corporate_action_data"
                },
                {
                  "description": "Lists all available fields in the corporate actions database with descriptions.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_corporate_action_fields"
                },
                {
                  "description": "Retrieves company reference data from Nasdaq Equities 360 Reference Data database.",
                  "inputschema": {
                    "properties": {
                      "figi": {
                        "type": "string"
                      },
                      "symbol": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_company_reference_data"
                },
                {
                  "description": "Lists all available fields in the company reference database with descriptions.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_reference_data_fields"
                },
                {
                  "description": "Retrieves Trade Summary data from Nasdaq Data Link NDAQ/TS datatable.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_trade_summary_data"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:03Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "sec-edgar-mcp": {
          "serverid": "sec-edgar-mcp",
          "self": "#/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp",
          "xid": "/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp",

          "metaurl": "#/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp/meta",
          "meta": {
            "serverid": "sec-edgar-mcp",
            "self": "#/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp/meta",
            "xid": "/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:35.61908781Z",
            "modifiedat": "2025-05-26T16:41:35.61908781Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp/versions",
          "versions": {
            "1": {
              "serverid": "sec-edgar-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp/versions/1",
              "xid": "/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.stefanoamorelli/sec-edgar-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) Server for SEC EDGAR",
              "createdat": "2025-05-26T16:41:35.61908781Z",
              "modifiedat": "2025-05-26T16:41:35.61908781Z",
              "ancestor": "1",
              "id": "8d526532-7125-4b3c-b180-901914ead390",
              "packages": [
                {
                  "name": "sec-edgar-mcp",
                  "registry_name": "unknown",
                  "version": "0.1.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "958733763",
                "source": "github",
                "url": "https://github.com/stefanoamorelli/sec-edgar-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Fetches submissions (filings) for a given company CIK.",
                  "inputschema": {
                    "properties": {
                      "cik": {
                        "description": "Central Index Key of the company",
                        "type": "string"
                      }
                    },
                    "required": [
                      "cik"
                    ],
                    "type": "object"
                  },
                  "name": "get_submissions"
                },
                {
                  "description": "Fetches specific financial concepts for a company.",
                  "inputschema": {
                    "properties": {
                      "cik": {
                        "description": "Central Index Key of the company",
                        "type": "string"
                      },
                      "concept": {
                        "description": "Financial concept to retrieve",
                        "type": "string"
                      }
                    },
                    "required": [
                      "cik",
                      "concept"
                    ],
                    "type": "object"
                  },
                  "name": "get_company_concepts"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:50Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 4
    },
    "stippi": {
      "mcpproviderid": "stippi",
      "self": "#/mcpproviders/stippi",
      "xid": "/mcpproviders/stippi",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:28.094246104Z",
      "modifiedat": "2025-05-26T16:41:28.094246104Z",

      "serversurl": "#/mcpproviders/stippi/servers",
      "servers": {
        "code-assistant": {
          "serverid": "code-assistant",
          "self": "#/mcpproviders/stippi/servers/code-assistant",
          "xid": "/mcpproviders/stippi/servers/code-assistant",

          "metaurl": "#/mcpproviders/stippi/servers/code-assistant/meta",
          "meta": {
            "serverid": "code-assistant",
            "self": "#/mcpproviders/stippi/servers/code-assistant/meta",
            "xid": "/mcpproviders/stippi/servers/code-assistant/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:28.094246104Z",
            "modifiedat": "2025-05-26T16:41:28.094246104Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/stippi/servers/code-assistant/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/stippi/servers/code-assistant/versions",
          "versions": {
            "1": {
              "serverid": "code-assistant",
              "versionid": "1",
              "self": "#/mcpproviders/stippi/servers/code-assistant/versions/1",
              "xid": "/mcpproviders/stippi/servers/code-assistant/versions/1",
              "epoch": 1,
              "name": "io.github.stippi/code-assistant",
              "isdefault": true,
              "description": "An LLM-powered, autonomous coding assistant. Also offers an MCP mode.",
              "createdat": "2025-05-26T16:41:28.094246104Z",
              "modifiedat": "2025-05-26T16:41:28.094246104Z",
              "ancestor": "1",
              "id": "ae6e66c8-bfef-42dd-b1c5-c69f35bfab36",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "pplx-...",
                      "name": "PERPLEXITY_API_KEY"
                    },
                    {
                      "description": "/bin/zsh",
                      "name": "SHELL"
                    }
                  ],
                  "name": "stippi/code-assistant",
                  "package_arguments": [
                    {
                      "default": "server",
                      "description": "second positional argument passed to the command",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "server",
                      "value_hint": "server"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "882757178",
                "source": "github",
                "url": "https://github.com/stippi/code-assistant"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:35Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "stripe": {
      "mcpproviderid": "stripe",
      "self": "#/mcpproviders/stripe",
      "xid": "/mcpproviders/stripe",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:46.129837122Z",
      "modifiedat": "2025-05-26T16:41:46.129837122Z",

      "serversurl": "#/mcpproviders/stripe/servers",
      "servers": {
        "agent-toolkit": {
          "serverid": "agent-toolkit",
          "self": "#/mcpproviders/stripe/servers/agent-toolkit",
          "xid": "/mcpproviders/stripe/servers/agent-toolkit",

          "metaurl": "#/mcpproviders/stripe/servers/agent-toolkit/meta",
          "meta": {
            "serverid": "agent-toolkit",
            "self": "#/mcpproviders/stripe/servers/agent-toolkit/meta",
            "xid": "/mcpproviders/stripe/servers/agent-toolkit/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:46.129837122Z",
            "modifiedat": "2025-05-26T16:41:46.129837122Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/stripe/servers/agent-toolkit/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/stripe/servers/agent-toolkit/versions",
          "versions": {
            "1": {
              "serverid": "agent-toolkit",
              "versionid": "1",
              "self": "#/mcpproviders/stripe/servers/agent-toolkit/versions/1",
              "xid": "/mcpproviders/stripe/servers/agent-toolkit/versions/1",
              "epoch": 1,
              "name": "io.github.stripe/agent-toolkit",
              "isdefault": true,
              "description": "Python and TypeScript library for integrating the Stripe API into agentic workflows",
              "createdat": "2025-05-26T16:41:46.129837122Z",
              "modifiedat": "2025-05-26T16:41:46.129837122Z",
              "ancestor": "1",
              "id": "5200c733-db46-48ba-a870-c1de02cf3e07",
              "packages": [
                {
                  "name": "stripe/agent-toolkit",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "886826524",
                "source": "github",
                "url": "https://github.com/stripe/agent-toolkit"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:00Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "strowk": {
      "mcpproviderid": "strowk",
      "self": "#/mcpproviders/strowk",
      "xid": "/mcpproviders/strowk",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:23.337339155Z",
      "modifiedat": "2025-05-26T16:41:23.407226097Z",

      "serversurl": "#/mcpproviders/strowk/servers",
      "servers": {
        "foxy-contexts": {
          "serverid": "foxy-contexts",
          "self": "#/mcpproviders/strowk/servers/foxy-contexts",
          "xid": "/mcpproviders/strowk/servers/foxy-contexts",

          "metaurl": "#/mcpproviders/strowk/servers/foxy-contexts/meta",
          "meta": {
            "serverid": "foxy-contexts",
            "self": "#/mcpproviders/strowk/servers/foxy-contexts/meta",
            "xid": "/mcpproviders/strowk/servers/foxy-contexts/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:23.407226097Z",
            "modifiedat": "2025-05-26T16:41:23.407226097Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/strowk/servers/foxy-contexts/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/strowk/servers/foxy-contexts/versions",
          "versions": {
            "1": {
              "serverid": "foxy-contexts",
              "versionid": "1",
              "self": "#/mcpproviders/strowk/servers/foxy-contexts/versions/1",
              "xid": "/mcpproviders/strowk/servers/foxy-contexts/versions/1",
              "epoch": 1,
              "name": "io.github.strowk/foxy-contexts",
              "isdefault": true,
              "description": "Foxy contexts is a library for building context servers supporting Model Context Protocol",
              "createdat": "2025-05-26T16:41:23.407226097Z",
              "modifiedat": "2025-05-26T16:41:23.407226097Z",
              "ancestor": "1",
              "id": "499f5fa7-c91e-4dac-bf51-9f075eaa2769",
              "packages": [
                {
                  "name": "strowk/foxy-contexts",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "896729097",
                "source": "github",
                "url": "https://github.com/strowk/foxy-contexts"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:27Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-k8s-go": {
          "serverid": "mcp-k8s-go",
          "self": "#/mcpproviders/strowk/servers/mcp-k8s-go",
          "xid": "/mcpproviders/strowk/servers/mcp-k8s-go",

          "metaurl": "#/mcpproviders/strowk/servers/mcp-k8s-go/meta",
          "meta": {
            "serverid": "mcp-k8s-go",
            "self": "#/mcpproviders/strowk/servers/mcp-k8s-go/meta",
            "xid": "/mcpproviders/strowk/servers/mcp-k8s-go/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:23.337339155Z",
            "modifiedat": "2025-05-26T16:41:23.337339155Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/strowk/servers/mcp-k8s-go/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/strowk/servers/mcp-k8s-go/versions",
          "versions": {
            "1": {
              "serverid": "mcp-k8s-go",
              "versionid": "1",
              "self": "#/mcpproviders/strowk/servers/mcp-k8s-go/versions/1",
              "xid": "/mcpproviders/strowk/servers/mcp-k8s-go/versions/1",
              "epoch": 1,
              "name": "io.github.strowk/mcp-k8s-go",
              "isdefault": true,
              "description": "MCP server connecting to Kubernetes",
              "createdat": "2025-05-26T16:41:23.337339155Z",
              "modifiedat": "2025-05-26T16:41:23.337339155Z",
              "ancestor": "1",
              "id": "a59a162f-d811-4344-bf53-606a74bb50c6",
              "packages": [
                {
                  "name": "strowk/mcp-k8s-go",
                  "package_arguments": [
                    {
                      "default": "-v ~/.kube/config:/home/nonroot/.kube/config",
                      "description": "Mounts ~/.kube/config into container",
                      "format": "string",
                      "is_required": true,
                      "name": "-v ~/.kube/config:/home/nonroot/.kube/config",
                      "type": "named",
                      "value": "-v ~/.kube/config:/home/nonroot/.kube/config",
                      "value_hint": "~/.kube/config:/home/nonroot/.kube/config"
                    },
                    {
                      "default": "--rm",
                      "description": "Removes container after exit",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm"
                    },
                    {
                      "default": "mcpk8s/server:latest",
                      "description": "Docker image to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcpk8s/server:latest",
                      "value_hint": "mcpk8s/server:latest"
                    }
                  ],
                  "registry_name": "docker",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "896738164",
                "source": "github",
                "url": "https://github.com/strowk/mcp-k8s-go"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:50Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "suekou": {
      "mcpproviderid": "suekou",
      "self": "#/mcpproviders/suekou",
      "xid": "/mcpproviders/suekou",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:25.578937698Z",
      "modifiedat": "2025-05-26T16:41:25.578937698Z",

      "serversurl": "#/mcpproviders/suekou/servers",
      "servers": {
        "mcp-notion-server": {
          "serverid": "mcp-notion-server",
          "self": "#/mcpproviders/suekou/servers/mcp-notion-server",
          "xid": "/mcpproviders/suekou/servers/mcp-notion-server",

          "metaurl": "#/mcpproviders/suekou/servers/mcp-notion-server/meta",
          "meta": {
            "serverid": "mcp-notion-server",
            "self": "#/mcpproviders/suekou/servers/mcp-notion-server/meta",
            "xid": "/mcpproviders/suekou/servers/mcp-notion-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:25.578937698Z",
            "modifiedat": "2025-05-26T16:41:25.578937698Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/suekou/servers/mcp-notion-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/suekou/servers/mcp-notion-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-notion-server",
              "versionid": "1",
              "self": "#/mcpproviders/suekou/servers/mcp-notion-server/versions/1",
              "xid": "/mcpproviders/suekou/servers/mcp-notion-server/versions/1",
              "epoch": 1,
              "name": "io.github.suekou/mcp-notion-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:25.578937698Z",
              "modifiedat": "2025-05-26T16:41:25.578937698Z",
              "ancestor": "1",
              "id": "e9a5215c-6485-462f-b086-6e97f0466b30",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-integration-token",
                      "name": "NOTION_API_TOKEN"
                    },
                    {
                      "description": "true",
                      "name": "NOTION_MARKDOWN_CONVERSION"
                    }
                  ],
                  "name": "@suekou/mcp-notion-server",
                  "package_arguments": [
                    {
                      "default": "your-built-file-path",
                      "description": "your-built-file-path",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "your-built-file-path",
                      "value_hint": "your-built-file-path"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.2.4"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "896417211",
                "source": "github",
                "url": "https://github.com/suekou/mcp-notion-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:22Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "suhail-ak-s": {
      "mcpproviderid": "suhail-ak-s",
      "self": "#/mcpproviders/suhail-ak-s",
      "xid": "/mcpproviders/suhail-ak-s",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:30.167597762Z",
      "modifiedat": "2025-05-26T16:42:30.167597762Z",

      "serversurl": "#/mcpproviders/suhail-ak-s/servers",
      "servers": {
        "mcp-typesense-server": {
          "serverid": "mcp-typesense-server",
          "self": "#/mcpproviders/suhail-ak-s/servers/mcp-typesense-server",
          "xid": "/mcpproviders/suhail-ak-s/servers/mcp-typesense-server",

          "metaurl": "#/mcpproviders/suhail-ak-s/servers/mcp-typesense-server/meta",
          "meta": {
            "serverid": "mcp-typesense-server",
            "self": "#/mcpproviders/suhail-ak-s/servers/mcp-typesense-server/meta",
            "xid": "/mcpproviders/suhail-ak-s/servers/mcp-typesense-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:30.167597762Z",
            "modifiedat": "2025-05-26T16:42:30.167597762Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/suhail-ak-s/servers/mcp-typesense-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/suhail-ak-s/servers/mcp-typesense-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-typesense-server",
              "versionid": "1",
              "self": "#/mcpproviders/suhail-ak-s/servers/mcp-typesense-server/versions/1",
              "xid": "/mcpproviders/suhail-ak-s/servers/mcp-typesense-server/versions/1",
              "epoch": 1,
              "name": "io.github.suhail-ak-s/mcp-typesense-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:30.167597762Z",
              "modifiedat": "2025-05-26T16:42:30.167597762Z",
              "ancestor": "1",
              "id": "a038d159-c51e-49ef-aa02-c794e8a5cb94",
              "packages": [
                {
                  "name": "typesense-mcp-server",
                  "package_arguments": [
                    {
                      "default": "--host your-typesense-host",
                      "description": "The Typesense server host",
                      "format": "string",
                      "is_required": true,
                      "name": "--host your-typesense-host",
                      "type": "named",
                      "value": "--host your-typesense-host",
                      "value_hint": "your-typesense-host"
                    },
                    {
                      "default": "--port 8108",
                      "description": "The Typesense server port",
                      "format": "string",
                      "is_required": true,
                      "name": "--port 8108",
                      "type": "named",
                      "value": "--port 8108",
                      "value_hint": "8108"
                    },
                    {
                      "default": "--protocol http",
                      "description": "The Typesense server protocol",
                      "format": "string",
                      "is_required": true,
                      "name": "--protocol http",
                      "type": "named",
                      "value": "--protocol http",
                      "value_hint": "http"
                    },
                    {
                      "default": "--api-key your-api-key",
                      "description": "The Typesense API key",
                      "format": "string",
                      "is_required": true,
                      "name": "--api-key your-api-key",
                      "type": "named",
                      "value": "--api-key your-api-key",
                      "value_hint": "your-api-key"
                    }
                  ],
                  "registry_name": "npm",
                  "version": "1.0.0"
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Name of the collection to analyze",
                      "name": "collection_name",
                      "required": true
                    }
                  ],
                  "description": "Analyze collection structure and contents",
                  "name": "analyze_collection"
                },
                {
                  "arguments": [
                    {
                      "description": "Name of the collection for search suggestions",
                      "name": "collection_name",
                      "required": true
                    }
                  ],
                  "description": "Get suggestions for effective search queries for a collection",
                  "name": "search_suggestions"
                }
              ],
              "repository": {
                "id": "940089654",
                "source": "github",
                "url": "https://github.com/suhail-ak-s/mcp-typesense-server"
              },
              "resources": [
                {
                  "description": "JSON schema information for each collection including field names and data types and sample documents",
                  "mimetype": "application/json",
                  "name": "Collection Schemas",
                  "uritemplate": "typesense://collections/{collection}"
                }
              ],
              "tools": [
                {
                  "description": "Search for documents in Typesense collections with powerful filtering",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "filters": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "query_text": {
                        "type": "string"
                      },
                      "search_fields": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "sort_options": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query_text",
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "typesense_query"
                },
                {
                  "description": "Retrieve specific documents by ID from collections",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "document_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_name",
                      "document_id"
                    ],
                    "type": "object"
                  },
                  "name": "typesense_get_document"
                },
                {
                  "description": "Get statistics about a Typesense collection",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "typesense_collection_stats"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:04Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "sunsetcoder": {
      "mcpproviderid": "sunsetcoder",
      "self": "#/mcpproviders/sunsetcoder",
      "xid": "/mcpproviders/sunsetcoder",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:41.241629065Z",
      "modifiedat": "2025-05-26T16:42:41.241629065Z",

      "serversurl": "#/mcpproviders/sunsetcoder/servers",
      "servers": {
        "flightradar24-mcp-server": {
          "serverid": "flightradar24-mcp-server",
          "self": "#/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server",
          "xid": "/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server",

          "metaurl": "#/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server/meta",
          "meta": {
            "serverid": "flightradar24-mcp-server",
            "self": "#/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server/meta",
            "xid": "/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:41.241629065Z",
            "modifiedat": "2025-05-26T16:42:41.241629065Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "flightradar24-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server/versions/1",
              "xid": "/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.sunsetcoder/flightradar24-mcp-server",
              "isdefault": true,
              "description": "Model Context Protocol server for Flight Tracking",
              "createdat": "2025-05-26T16:42:41.241629065Z",
              "modifiedat": "2025-05-26T16:42:41.241629065Z",
              "ancestor": "1",
              "id": "50b7ab52-c3d0-40bc-b342-38fa93da54ff",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_api_key_here",
                      "name": "FR24_API_KEY"
                    },
                    {
                      "description": "https://fr24api.flightradar24.com",
                      "name": "FR24_API_URL"
                    }
                  ],
                  "name": "flightradar24-mcp-server",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "903070998",
                "source": "github",
                "url": "https://github.com/sunsetcoder/flightradar24-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get real-time flight positions with various filtering options",
                  "inputschema": {
                    "properties": {
                      "airports": {
                        "description": "Comma-separated list of airport ICAO codes",
                        "type": "string"
                      },
                      "bounds": {
                        "description": "Geographical bounds (lat1,lon1,lat2,lon2)",
                        "type": "string"
                      },
                      "categories": {
                        "description": "Aircraft categories (P,C,J)",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Maximum number of results",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_flight_positions"
                },
                {
                  "description": "Get estimated arrival time for a specific flight",
                  "inputschema": {
                    "properties": {
                      "flightNumber": {
                        "description": "Flight number (e.g., UA123)",
                        "pattern": "^[A-Z0-9]{2,8}$",
                        "type": "string"
                      }
                    },
                    "required": [
                      "flightNumber"
                    ],
                    "type": "object"
                  },
                  "name": "get_flight_eta"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:55Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "sv": {
      "mcpproviderid": "sv",
      "self": "#/mcpproviders/sv",
      "xid": "/mcpproviders/sv",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:45.007538772Z",
      "modifiedat": "2025-05-26T16:41:45.007538772Z",

      "serversurl": "#/mcpproviders/sv/servers",
      "servers": {
        "mcp-paradex-py": {
          "serverid": "mcp-paradex-py",
          "self": "#/mcpproviders/sv/servers/mcp-paradex-py",
          "xid": "/mcpproviders/sv/servers/mcp-paradex-py",

          "metaurl": "#/mcpproviders/sv/servers/mcp-paradex-py/meta",
          "meta": {
            "serverid": "mcp-paradex-py",
            "self": "#/mcpproviders/sv/servers/mcp-paradex-py/meta",
            "xid": "/mcpproviders/sv/servers/mcp-paradex-py/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:45.007538772Z",
            "modifiedat": "2025-05-26T16:41:45.007538772Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/sv/servers/mcp-paradex-py/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/sv/servers/mcp-paradex-py/versions",
          "versions": {
            "1": {
              "serverid": "mcp-paradex-py",
              "versionid": "1",
              "self": "#/mcpproviders/sv/servers/mcp-paradex-py/versions/1",
              "xid": "/mcpproviders/sv/servers/mcp-paradex-py/versions/1",
              "epoch": 1,
              "name": "io.github.sv/mcp-paradex-py",
              "isdefault": true,
              "description": "Connect AI agents to the Paradex trading platform. Retrieve market data, manage accounts, and execute trades seamlessly. Enhance your trading experience with automated tools and real-time insights.",
              "createdat": "2025-05-26T16:41:45.007538772Z",
              "modifiedat": "2025-05-26T16:41:45.007538772Z",
              "ancestor": "1",
              "id": "038a3024-c319-4a07-bd7f-9cf699cfebf1",
              "packages": [
                {
                  "name": "mcp-paradex",
                  "package_arguments": [
                    {
                      "default": "--from mcpdoc",
                      "description": "--from mcpdoc",
                      "format": "string",
                      "is_required": true,
                      "name": "--from mcpdoc",
                      "type": "named",
                      "value": "--from mcpdoc",
                      "value_hint": "mcpdoc"
                    },
                    {
                      "default": "mcpdoc",
                      "description": "mcpdoc",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcpdoc",
                      "value_hint": "mcpdoc"
                    },
                    {
                      "default": "--urls Paradex:https://docs.paradex.trade/llms.txt",
                      "description": "--urls Paradex:https://docs.paradex.trade/llms.txt",
                      "format": "string",
                      "is_required": true,
                      "name": "--urls Paradex:https://docs.paradex.trade/llms.txt",
                      "type": "named",
                      "value": "--urls Paradex:https://docs.paradex.trade/llms.txt",
                      "value_hint": "Paradex:https://docs.paradex.trade/llms.txt"
                    },
                    {
                      "default": "--transport stdio",
                      "description": "--transport stdio",
                      "format": "string",
                      "is_required": true,
                      "name": "--transport stdio",
                      "type": "named",
                      "value": "--transport stdio",
                      "value_hint": "stdio"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "944258239",
                "source": "github",
                "url": "https://github.com/sv/mcp-paradex-py"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:24Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "syucream": {
      "mcpproviderid": "syucream",
      "self": "#/mcpproviders/syucream",
      "xid": "/mcpproviders/syucream",
      "epoch": 2,
      "createdat": "2025-05-26T16:42:02.302187176Z",
      "modifiedat": "2025-05-26T16:42:02.442249327Z",

      "serversurl": "#/mcpproviders/syucream/servers",
      "servers": {
        "holaspirit-mcp-server": {
          "serverid": "holaspirit-mcp-server",
          "self": "#/mcpproviders/syucream/servers/holaspirit-mcp-server",
          "xid": "/mcpproviders/syucream/servers/holaspirit-mcp-server",

          "metaurl": "#/mcpproviders/syucream/servers/holaspirit-mcp-server/meta",
          "meta": {
            "serverid": "holaspirit-mcp-server",
            "self": "#/mcpproviders/syucream/servers/holaspirit-mcp-server/meta",
            "xid": "/mcpproviders/syucream/servers/holaspirit-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:02.442249327Z",
            "modifiedat": "2025-05-26T16:42:02.442249327Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/syucream/servers/holaspirit-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/syucream/servers/holaspirit-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "holaspirit-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/syucream/servers/holaspirit-mcp-server/versions/1",
              "xid": "/mcpproviders/syucream/servers/holaspirit-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.syucream/holaspirit-mcp-server",
              "isdefault": true,
              "description": "A MCP server that accesses to Holaspirit",
              "createdat": "2025-05-26T16:42:02.442249327Z",
              "modifiedat": "2025-05-26T16:42:02.442249327Z",
              "ancestor": "1",
              "id": "fffcda50-ddc1-4357-a9bf-b7022f86c582",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cyour token\u003e",
                      "name": "HOLASPIRIT_API_TOKEN"
                    },
                    {
                      "description": "\u003cyour org id\u003e",
                      "name": "HOLASPIRIT_ORGANIZATION_ID"
                    }
                  ],
                  "name": "holaspirit-mcp-server",
                  "registry_name": "npm",
                  "version": "0.2.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "915876793",
                "source": "github",
                "url": "https://github.com/syucream/holaspirit-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List all tasks in the organization",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_list_tasks"
                },
                {
                  "description": "List all metrics in the organization",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_list_metrics"
                },
                {
                  "description": "List all circles in the organization",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_list_circles"
                },
                {
                  "description": "Get details of a specific circle",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_get_circle"
                },
                {
                  "description": "List all roles in the organization",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_list_roles"
                },
                {
                  "description": "Get details of a specific role",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_get_role"
                },
                {
                  "description": "List all domains in the organization",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_list_domains"
                },
                {
                  "description": "List all policies in the organization",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_list_policies"
                },
                {
                  "description": "List all meetings in the organization",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_list_meetings"
                },
                {
                  "description": "Get details of a specific meeting",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_get_meeting"
                },
                {
                  "description": "Get member feed",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_get_member_feed"
                },
                {
                  "description": "Get tensions for a meeting or meetings",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_get_tensions"
                },
                {
                  "description": "Search for a member by email",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_search_member"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:55Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "lightdash-mcp-server": {
          "serverid": "lightdash-mcp-server",
          "self": "#/mcpproviders/syucream/servers/lightdash-mcp-server",
          "xid": "/mcpproviders/syucream/servers/lightdash-mcp-server",

          "metaurl": "#/mcpproviders/syucream/servers/lightdash-mcp-server/meta",
          "meta": {
            "serverid": "lightdash-mcp-server",
            "self": "#/mcpproviders/syucream/servers/lightdash-mcp-server/meta",
            "xid": "/mcpproviders/syucream/servers/lightdash-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:02.302187176Z",
            "modifiedat": "2025-05-26T16:42:02.302187176Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/syucream/servers/lightdash-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/syucream/servers/lightdash-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "lightdash-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/syucream/servers/lightdash-mcp-server/versions/1",
              "xid": "/mcpproviders/syucream/servers/lightdash-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.syucream/lightdash-mcp-server",
              "isdefault": true,
              "description": "A MCP(Model Context Protocol) server that accesses to Lightdash",
              "createdat": "2025-05-26T16:42:02.302187176Z",
              "modifiedat": "2025-05-26T16:42:02.302187176Z",
              "ancestor": "1",
              "id": "17c2c7f2-20f2-424f-8466-b164ed19ddef",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cyour PAT\u003e",
                      "name": "LIGHTDASH_API_KEY"
                    },
                    {
                      "description": "https://\u003cyour base url\u003e",
                      "name": "LIGHTDASH_API_URL"
                    }
                  ],
                  "name": "lightdash-mcp-server",
                  "registry_name": "npm",
                  "version": "0.0.11"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "910751536",
                "source": "github",
                "url": "https://github.com/syucream/lightdash-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List all projects in the Lightdash organization",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_list_projects"
                },
                {
                  "description": "Get details of a specific project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_project"
                },
                {
                  "description": "List all spaces in a project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_list_spaces"
                },
                {
                  "description": "List all charts in a project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_list_charts"
                },
                {
                  "description": "List all dashboards in a project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_list_dashboards"
                },
                {
                  "description": "Get custom metrics for a project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_custom_metrics"
                },
                {
                  "description": "Get catalog for a project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_catalog"
                },
                {
                  "description": "Get metrics catalog for a project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_metrics_catalog"
                },
                {
                  "description": "Get charts as code for a project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_charts_as_code"
                },
                {
                  "description": "Get dashboards as code for a project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_dashboards_as_code"
                },
                {
                  "description": "Get metadata for a specific table in the data catalog",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_metadata"
                },
                {
                  "description": "Get analytics for a specific table in the data catalog",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_analytics"
                },
                {
                  "description": "Get organization user attributes",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_user_attributes"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:10Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "szeider": {
      "mcpproviderid": "szeider",
      "self": "#/mcpproviders/szeider",
      "xid": "/mcpproviders/szeider",
      "epoch": 2,
      "createdat": "2025-05-26T16:42:11.472610086Z",
      "modifiedat": "2025-05-26T16:42:11.589225563Z",

      "serversurl": "#/mcpproviders/szeider/servers",
      "servers": {
        "mcp-dblp": {
          "serverid": "mcp-dblp",
          "self": "#/mcpproviders/szeider/servers/mcp-dblp",
          "xid": "/mcpproviders/szeider/servers/mcp-dblp",

          "metaurl": "#/mcpproviders/szeider/servers/mcp-dblp/meta",
          "meta": {
            "serverid": "mcp-dblp",
            "self": "#/mcpproviders/szeider/servers/mcp-dblp/meta",
            "xid": "/mcpproviders/szeider/servers/mcp-dblp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:11.472610086Z",
            "modifiedat": "2025-05-26T16:42:11.472610086Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/szeider/servers/mcp-dblp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/szeider/servers/mcp-dblp/versions",
          "versions": {
            "1": {
              "serverid": "mcp-dblp",
              "versionid": "1",
              "self": "#/mcpproviders/szeider/servers/mcp-dblp/versions/1",
              "xid": "/mcpproviders/szeider/servers/mcp-dblp/versions/1",
              "epoch": 1,
              "name": "io.github.szeider/mcp-dblp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that provides access to the DBLP computer science bibliography database for Large Language Models.",
              "createdat": "2025-05-26T16:42:11.472610086Z",
              "modifiedat": "2025-05-26T16:42:11.472610086Z",
              "ancestor": "1",
              "id": "5a9955bc-6c28-4ebd-974e-73226eb3e58f",
              "packages": [
                {
                  "name": "mcp-dblp",
                  "registry_name": "unknown",
                  "version": "1.1.0"
                }
              ],
              "repository": {
                "id": "940314682",
                "source": "github",
                "url": "https://github.com/szeider/mcp-dblp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:03Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-solver": {
          "serverid": "mcp-solver",
          "self": "#/mcpproviders/szeider/servers/mcp-solver",
          "xid": "/mcpproviders/szeider/servers/mcp-solver",

          "metaurl": "#/mcpproviders/szeider/servers/mcp-solver/meta",
          "meta": {
            "serverid": "mcp-solver",
            "self": "#/mcpproviders/szeider/servers/mcp-solver/meta",
            "xid": "/mcpproviders/szeider/servers/mcp-solver/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:11.589225563Z",
            "modifiedat": "2025-05-26T16:42:11.589225563Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/szeider/servers/mcp-solver/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/szeider/servers/mcp-solver/versions",
          "versions": {
            "1": {
              "serverid": "mcp-solver",
              "versionid": "1",
              "self": "#/mcpproviders/szeider/servers/mcp-solver/versions/1",
              "xid": "/mcpproviders/szeider/servers/mcp-solver/versions/1",
              "epoch": 1,
              "name": "io.github.szeider/mcp-solver",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) server for constraint optimization and solving\"",
              "createdat": "2025-05-26T16:42:11.589225563Z",
              "modifiedat": "2025-05-26T16:42:11.589225563Z",
              "ancestor": "1",
              "id": "523175e8-6767-4387-af85-a46f256a6390",
              "packages": [
                {
                  "name": "mcp-solver",
                  "registry_name": "unknown",
                  "version": "3.2.0"
                }
              ],
              "repository": {
                "id": "903561149",
                "source": "github",
                "url": "https://github.com/szeider/mcp-solver"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:06Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "taazkareem": {
      "mcpproviderid": "taazkareem",
      "self": "#/mcpproviders/taazkareem",
      "xid": "/mcpproviders/taazkareem",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:20.728789334Z",
      "modifiedat": "2025-05-26T16:42:20.728789334Z",

      "serversurl": "#/mcpproviders/taazkareem/servers",
      "servers": {
        "clickup-mcp-server": {
          "serverid": "clickup-mcp-server",
          "self": "#/mcpproviders/taazkareem/servers/clickup-mcp-server",
          "xid": "/mcpproviders/taazkareem/servers/clickup-mcp-server",

          "metaurl": "#/mcpproviders/taazkareem/servers/clickup-mcp-server/meta",
          "meta": {
            "serverid": "clickup-mcp-server",
            "self": "#/mcpproviders/taazkareem/servers/clickup-mcp-server/meta",
            "xid": "/mcpproviders/taazkareem/servers/clickup-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:20.728789334Z",
            "modifiedat": "2025-05-26T16:42:20.728789334Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/taazkareem/servers/clickup-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/taazkareem/servers/clickup-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "clickup-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/taazkareem/servers/clickup-mcp-server/versions/1",
              "xid": "/mcpproviders/taazkareem/servers/clickup-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.taazkareem/clickup-mcp-server",
              "isdefault": true,
              "description": "ClickUp MCP Server - Integrate ClickUp task management with AI through Model Context Protocol",
              "createdat": "2025-05-26T16:42:20.728789334Z",
              "modifiedat": "2025-05-26T16:42:20.728789334Z",
              "ancestor": "1",
              "id": "34b93e72-0fa8-4dbe-ae9b-82a9e40de735",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-api-key",
                      "name": "CLICKUP_API_KEY"
                    },
                    {
                      "description": "your-team-id",
                      "name": "CLICKUP_TEAM_ID"
                    },
                    {
                      "description": "true",
                      "name": "ENABLE_SSE"
                    },
                    {
                      "description": "8000",
                      "name": "PORT"
                    }
                  ],
                  "name": "@taazkareem/clickup-mcp-server",
                  "registry_name": "npm",
                  "version": "0.7.2"
                }
              ],
              "repository": {
                "id": "930539984",
                "source": "github",
                "url": "https://github.com/taazkareem/clickup-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:30Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "tacticlaunch": {
      "mcpproviderid": "tacticlaunch",
      "self": "#/mcpproviders/tacticlaunch",
      "xid": "/mcpproviders/tacticlaunch",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:14.479135032Z",
      "modifiedat": "2025-05-26T16:42:14.479135032Z",

      "serversurl": "#/mcpproviders/tacticlaunch/servers",
      "servers": {
        "mcp-linear": {
          "serverid": "mcp-linear",
          "self": "#/mcpproviders/tacticlaunch/servers/mcp-linear",
          "xid": "/mcpproviders/tacticlaunch/servers/mcp-linear",

          "metaurl": "#/mcpproviders/tacticlaunch/servers/mcp-linear/meta",
          "meta": {
            "serverid": "mcp-linear",
            "self": "#/mcpproviders/tacticlaunch/servers/mcp-linear/meta",
            "xid": "/mcpproviders/tacticlaunch/servers/mcp-linear/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:14.479135032Z",
            "modifiedat": "2025-05-26T16:42:14.479135032Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/tacticlaunch/servers/mcp-linear/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/tacticlaunch/servers/mcp-linear/versions",
          "versions": {
            "1": {
              "serverid": "mcp-linear",
              "versionid": "1",
              "self": "#/mcpproviders/tacticlaunch/servers/mcp-linear/versions/1",
              "xid": "/mcpproviders/tacticlaunch/servers/mcp-linear/versions/1",
              "epoch": 1,
              "name": "io.github.tacticlaunch/mcp-linear",
              "isdefault": true,
              "description": "MCP server that enables AI assistants to interact with Linear project management system through natural language, allowing users to retrieve, create, and update issues, projects, and teams.",
              "createdat": "2025-05-26T16:42:14.479135032Z",
              "modifiedat": "2025-05-26T16:42:14.479135032Z",
              "ancestor": "1",
              "id": "a4a1013a-5789-4020-9a16-eda6c453aba7",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cYOUR_TOKEN\u003e",
                      "name": "LINEAR_API_TOKEN"
                    }
                  ],
                  "name": "@tacticlaunch/mcp-linear",
                  "registry_name": "npm",
                  "version": "1.0.9"
                }
              ],
              "repository": {
                "id": "953530564",
                "source": "github",
                "url": "https://github.com/tacticlaunch/mcp-linear"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:14Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "tadata-org": {
      "mcpproviderid": "tadata-org",
      "self": "#/mcpproviders/tadata-org",
      "xid": "/mcpproviders/tadata-org",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:40.43635448Z",
      "modifiedat": "2025-05-26T16:41:40.43635448Z",

      "serversurl": "#/mcpproviders/tadata-org/servers",
      "servers": {
        "fastapi_mcp": {
          "serverid": "fastapi_mcp",
          "self": "#/mcpproviders/tadata-org/servers/fastapi_mcp",
          "xid": "/mcpproviders/tadata-org/servers/fastapi_mcp",

          "metaurl": "#/mcpproviders/tadata-org/servers/fastapi_mcp/meta",
          "meta": {
            "serverid": "fastapi_mcp",
            "self": "#/mcpproviders/tadata-org/servers/fastapi_mcp/meta",
            "xid": "/mcpproviders/tadata-org/servers/fastapi_mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:40.43635448Z",
            "modifiedat": "2025-05-26T16:41:40.43635448Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/tadata-org/servers/fastapi_mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/tadata-org/servers/fastapi_mcp/versions",
          "versions": {
            "1": {
              "serverid": "fastapi_mcp",
              "versionid": "1",
              "self": "#/mcpproviders/tadata-org/servers/fastapi_mcp/versions/1",
              "xid": "/mcpproviders/tadata-org/servers/fastapi_mcp/versions/1",
              "epoch": 1,
              "name": "io.github.tadata-org/fastapi_mcp",
              "isdefault": true,
              "description": "Expose your FastAPI endpoints as Model Context Protocol (MCP) tools, with Auth!",
              "createdat": "2025-05-26T16:41:40.43635448Z",
              "modifiedat": "2025-05-26T16:41:40.43635448Z",
              "ancestor": "1",
              "id": "9297bbe7-81bc-4a7c-97ba-fcaaf8c7a626",
              "packages": [
                {
                  "name": "fastapi-mcp",
                  "registry_name": "unknown",
                  "version": "0.3.3"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "944976593",
                "source": "github",
                "url": "https://github.com/tadata-org/fastapi_mcp"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:22Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "taidgh-robinson": {
      "mcpproviderid": "taidgh-robinson",
      "self": "#/mcpproviders/taidgh-robinson",
      "xid": "/mcpproviders/taidgh-robinson",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:00.866926672Z",
      "modifiedat": "2025-05-26T16:42:00.866926672Z",

      "serversurl": "#/mcpproviders/taidgh-robinson/servers",
      "servers": {
        "nba-mcp-server": {
          "serverid": "nba-mcp-server",
          "self": "#/mcpproviders/taidgh-robinson/servers/nba-mcp-server",
          "xid": "/mcpproviders/taidgh-robinson/servers/nba-mcp-server",

          "metaurl": "#/mcpproviders/taidgh-robinson/servers/nba-mcp-server/meta",
          "meta": {
            "serverid": "nba-mcp-server",
            "self": "#/mcpproviders/taidgh-robinson/servers/nba-mcp-server/meta",
            "xid": "/mcpproviders/taidgh-robinson/servers/nba-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:00.866926672Z",
            "modifiedat": "2025-05-26T16:42:00.866926672Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/taidgh-robinson/servers/nba-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/taidgh-robinson/servers/nba-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "nba-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/taidgh-robinson/servers/nba-mcp-server/versions/1",
              "xid": "/mcpproviders/taidgh-robinson/servers/nba-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.taidgh-robinson/nba-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:00.866926672Z",
              "modifiedat": "2025-05-26T16:42:00.866926672Z",
              "ancestor": "1",
              "id": "9c7c309a-fb3c-4099-b461-0ca725c9083b",
              "packages": [
                {
                  "name": "mcp-server-nba",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "971505657",
                "source": "github",
                "url": "https://github.com/Taidgh-Robinson/nba-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:09Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "tavily-ai": {
      "mcpproviderid": "tavily-ai",
      "self": "#/mcpproviders/tavily-ai",
      "xid": "/mcpproviders/tavily-ai",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:37.717016209Z",
      "modifiedat": "2025-05-26T16:41:37.717016209Z",

      "serversurl": "#/mcpproviders/tavily-ai/servers",
      "servers": {
        "tavily-mcp": {
          "serverid": "tavily-mcp",
          "self": "#/mcpproviders/tavily-ai/servers/tavily-mcp",
          "xid": "/mcpproviders/tavily-ai/servers/tavily-mcp",

          "metaurl": "#/mcpproviders/tavily-ai/servers/tavily-mcp/meta",
          "meta": {
            "serverid": "tavily-mcp",
            "self": "#/mcpproviders/tavily-ai/servers/tavily-mcp/meta",
            "xid": "/mcpproviders/tavily-ai/servers/tavily-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:37.717016209Z",
            "modifiedat": "2025-05-26T16:41:37.717016209Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/tavily-ai/servers/tavily-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/tavily-ai/servers/tavily-mcp/versions",
          "versions": {
            "1": {
              "serverid": "tavily-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/tavily-ai/servers/tavily-mcp/versions/1",
              "xid": "/mcpproviders/tavily-ai/servers/tavily-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.tavily-ai/tavily-mcp",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:37.717016209Z",
              "modifiedat": "2025-05-26T16:41:37.717016209Z",
              "ancestor": "1",
              "id": "ba8028f7-73e6-4d3d-9974-790d438a1446",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your-api-key-here",
                      "name": "TAVILY_API_KEY"
                    }
                  ],
                  "name": "tavily-mcp",
                  "registry_name": "npm",
                  "version": "0.2.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "923109265",
                "source": "github",
                "url": "https://github.com/tavily-ai/tavily-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "A powerful web search tool that provides comprehensive, real-time results using Tavily's AI search engine. Returns relevant web content with customizable parameters for result count, content type, and domain filtering. Ideal for gathering current information, news, and detailed web content analysis.",
                  "inputschema": {
                    "properties": {
                      "days": {
                        "default": 3,
                        "description": "The number of days back from the current date to include in the search results. This specifies the time frame of data to be retrieved. Please note that this feature is only available when using the 'news' search topic",
                        "type": "number"
                      },
                      "exclude_domains": {
                        "default": [],
                        "description": "List of domains to specifically exclude, if the user asks to exclude a domain set this to the domain of the site",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "include_domains": {
                        "default": [],
                        "description": "A list of domains to specifically include in the search results, if the user asks to search on specific sites set this to the domain of the site",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "include_image_descriptions": {
                        "default": false,
                        "description": "Include a list of query-related images and their descriptions in the response",
                        "type": "boolean"
                      },
                      "include_images": {
                        "default": false,
                        "description": "Include a list of query-related images in the response",
                        "type": "boolean"
                      },
                      "include_raw_content": {
                        "default": false,
                        "description": "Include the cleaned and parsed HTML content of each search result",
                        "type": "boolean"
                      },
                      "max_results": {
                        "default": 10,
                        "description": "The maximum number of search results to return",
                        "maximum": 20,
                        "minimum": 5,
                        "type": "number"
                      },
                      "query": {
                        "description": "Search query",
                        "type": "string"
                      },
                      "search_depth": {
                        "default": "basic",
                        "description": "The depth of the search. It can be 'basic' or 'advanced'",
                        "enum": [
                          "basic",
                          "advanced"
                        ],
                        "type": "string"
                      },
                      "time_range": {
                        "description": "The time range back from the current date to include in the search results. This feature is available for both 'general' and 'news' search topics",
                        "enum": [
                          "day",
                          "week",
                          "month",
                          "year",
                          "d",
                          "w",
                          "m",
                          "y"
                        ],
                        "type": "string"
                      },
                      "topic": {
                        "default": "general",
                        "description": "The category of the search. This will determine which of our agents will be used for the search",
                        "enum": [
                          "general",
                          "news"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "tavily-search"
                },
                {
                  "description": "A powerful web content extraction tool that retrieves and processes raw content from specified URLs, ideal for data collection, content analysis, and research tasks.",
                  "inputschema": {
                    "properties": {
                      "extract_depth": {
                        "default": "basic",
                        "description": "Depth of extraction - 'basic' or 'advanced', if usrls are linkedin use 'advanced' or if explicitly told to use advanced",
                        "enum": [
                          "basic",
                          "advanced"
                        ],
                        "type": "string"
                      },
                      "include_images": {
                        "default": false,
                        "description": "Include a list of images extracted from the urls in the response",
                        "type": "boolean"
                      },
                      "urls": {
                        "description": "List of URLs to extract content from",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "urls"
                    ],
                    "type": "object"
                  },
                  "name": "tavily-extract"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:02Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "tbxark": {
      "mcpproviderid": "tbxark",
      "self": "#/mcpproviders/tbxark",
      "xid": "/mcpproviders/tbxark",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:55.432428098Z",
      "modifiedat": "2025-05-26T16:41:55.432428098Z",

      "serversurl": "#/mcpproviders/tbxark/servers",
      "servers": {
        "mcp-proxy": {
          "serverid": "mcp-proxy",
          "self": "#/mcpproviders/tbxark/servers/mcp-proxy",
          "xid": "/mcpproviders/tbxark/servers/mcp-proxy",

          "metaurl": "#/mcpproviders/tbxark/servers/mcp-proxy/meta",
          "meta": {
            "serverid": "mcp-proxy",
            "self": "#/mcpproviders/tbxark/servers/mcp-proxy/meta",
            "xid": "/mcpproviders/tbxark/servers/mcp-proxy/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:55.432428098Z",
            "modifiedat": "2025-05-26T16:41:55.432428098Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/tbxark/servers/mcp-proxy/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/tbxark/servers/mcp-proxy/versions",
          "versions": {
            "1": {
              "serverid": "mcp-proxy",
              "versionid": "1",
              "self": "#/mcpproviders/tbxark/servers/mcp-proxy/versions/1",
              "xid": "/mcpproviders/tbxark/servers/mcp-proxy/versions/1",
              "epoch": 1,
              "name": "io.github.tbxark/mcp-proxy",
              "isdefault": true,
              "description": "An MCP proxy server that aggregates and serves multiple MCP resource servers through a single HTTP server.",
              "createdat": "2025-05-26T16:41:55.432428098Z",
              "modifiedat": "2025-05-26T16:41:55.432428098Z",
              "ancestor": "1",
              "id": "9ad8f293-3ea1-4f0d-8c9f-a24945851bb6",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cYOUR_TOKEN\u003e",
                      "name": "GITHUB_PERSONAL_ACCESS_TOKEN"
                    }
                  ],
                  "name": "TBXark/mcp-proxy",
                  "registry_name": "npm",
                  "version": ""
                }
              ],
              "remotes": [
                {
                  "transport_type": "sse",
                  "url": "https://mcp.amap.com/sse?key=\u003cYOUR_TOKEN\u003e"
                }
              ],
              "repository": {
                "id": "955698123",
                "source": "github",
                "url": "https://github.com/TBXark/mcp-proxy"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:58Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "teddyzxcv": {
      "mcpproviderid": "teddyzxcv",
      "self": "#/mcpproviders/teddyzxcv",
      "xid": "/mcpproviders/teddyzxcv",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:37.155717143Z",
      "modifiedat": "2025-05-26T16:42:37.155717143Z",

      "serversurl": "#/mcpproviders/teddyzxcv/servers",
      "servers": {
        "ntfy-mcp": {
          "serverid": "ntfy-mcp",
          "self": "#/mcpproviders/teddyzxcv/servers/ntfy-mcp",
          "xid": "/mcpproviders/teddyzxcv/servers/ntfy-mcp",

          "metaurl": "#/mcpproviders/teddyzxcv/servers/ntfy-mcp/meta",
          "meta": {
            "serverid": "ntfy-mcp",
            "self": "#/mcpproviders/teddyzxcv/servers/ntfy-mcp/meta",
            "xid": "/mcpproviders/teddyzxcv/servers/ntfy-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:37.155717143Z",
            "modifiedat": "2025-05-26T16:42:37.155717143Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/teddyzxcv/servers/ntfy-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/teddyzxcv/servers/ntfy-mcp/versions",
          "versions": {
            "1": {
              "serverid": "ntfy-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/teddyzxcv/servers/ntfy-mcp/versions/1",
              "xid": "/mcpproviders/teddyzxcv/servers/ntfy-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.teddyzxcv/ntfy-mcp",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:37.155717143Z",
              "modifiedat": "2025-05-26T16:42:37.155717143Z",
              "ancestor": "1",
              "id": "dd3f5299-5869-43ec-89a8-77e25e6a157e",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cyour topic name\u003e",
                      "name": "NTFY_TOPIC"
                    }
                  ],
                  "name": "ntfy-mcp-server",
                  "package_arguments": [
                    {
                      "default": "/path/to/ntfy-mcp/build/index.js",
                      "description": "Path to the main entry point for ntfy-mcp",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "/path/to/ntfy-mcp/build/index.js",
                      "value_hint": "/path/to/ntfy-mcp/build/index.js"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "950853704",
                "source": "github",
                "url": "https://github.com/teddyzxcv/ntfy-mcp"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:27Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "tesla0225": {
      "mcpproviderid": "tesla0225",
      "self": "#/mcpproviders/tesla0225",
      "xid": "/mcpproviders/tesla0225",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:31.635821493Z",
      "modifiedat": "2025-05-26T16:41:31.635821493Z",

      "serversurl": "#/mcpproviders/tesla0225/servers",
      "servers": {
        "mcp-create": {
          "serverid": "mcp-create",
          "self": "#/mcpproviders/tesla0225/servers/mcp-create",
          "xid": "/mcpproviders/tesla0225/servers/mcp-create",

          "metaurl": "#/mcpproviders/tesla0225/servers/mcp-create/meta",
          "meta": {
            "serverid": "mcp-create",
            "self": "#/mcpproviders/tesla0225/servers/mcp-create/meta",
            "xid": "/mcpproviders/tesla0225/servers/mcp-create/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:31.635821493Z",
            "modifiedat": "2025-05-26T16:41:31.635821493Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/tesla0225/servers/mcp-create/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/tesla0225/servers/mcp-create/versions",
          "versions": {
            "1": {
              "serverid": "mcp-create",
              "versionid": "1",
              "self": "#/mcpproviders/tesla0225/servers/mcp-create/versions/1",
              "xid": "/mcpproviders/tesla0225/servers/mcp-create/versions/1",
              "epoch": 1,
              "name": "io.github.tesla0225/mcp-create",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:31.635821493Z",
              "modifiedat": "2025-05-26T16:41:31.635821493Z",
              "ancestor": "1",
              "id": "84bda3c9-65ce-45f2-898f-6e370718b43d",
              "packages": [
                {
                  "name": "mcp-create",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "945265954",
                "source": "github",
                "url": "https://github.com/tesla0225/mcp-create"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Create a new MCP server from a template.\n  \n  以下のテンプレートコードをベースに、ユーザーの要求に合わせたサーバーを実装してください。\n  言語に応じて適切なテンプレートを選択し、必要に応じて機能を追加・変更してください。\n  \n  TypeScriptテンプレート:\n  ```typescript\n  import { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\n  import { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\n  import { \n    CallToolRequestSchema, \n    ListToolsRequestSchema \n  } from \"@modelcontextprotocol/sdk/types.js\";\n\n  const server = new Server({\n    name: \"dynamic-test-server\",\n    version: \"1.0.0\"\n  }, {\n    capabilities: {\n      tools: {}\n    }\n  });\n\n  // ここでツールを実装してください\n  server.setRequestHandler(ListToolsRequestSchema, async () =\u003e {\n    return {\n      tools: [{\n        name: \"echo\",\n        description: \"Echo back a message\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            message: { type: \"string\" }\n          },\n          required: [\"message\"]\n        }\n      }]\n    };\n  });\n\n  server.setRequestHandler(CallToolRequestSchema, async (request) =\u003e {\n    if (request.params.name === \"echo\") {\n      // TypeScriptの型を適切に扱うため、型アサーションを使用\n      const message = request.params.arguments.message as string;\n      // または any を使う: const message: any = request.params.arguments.message;\n      \n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Echo: ${message}`\n          }\n        ]\n      };\n    }\n    throw new Error(\"Tool not found\");\n  });\n\n  // Server startup\n  const transport = new StdioServerTransport();\n  server.connect(transport);\n  ```\n  \n  Pythonテンプレート:\n  ```python\n  import asyncio\n  from mcp.server import Server\n  from mcp.server.stdio import stdio_server\n\n  app = Server(\"dynamic-test-server\")\n\n  @app.list_tools()\n  async def list_tools():\n      return [\n          {\n              \"name\": \"echo\",\n              \"description\": \"Echo back a message\",\n              \"inputSchema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                      \"message\": {\"type\": \"string\"}\n                  },\n                  \"required\": [\"message\"]\n              }\n          }\n      ]\n\n  @app.call_tool()\n  async def call_tool(name, arguments):\n      if name == \"echo\":\n          return [{\"type\": \"text\", \"text\": f\"Echo: {arguments.get('message')}\"}]\n      raise ValueError(f\"Tool not found: {name}\")\n\n  async def main():\n      async with stdio_server() as streams:\n          await app.run(\n              streams[0],\n              streams[1],\n              app.create_initialization_options()\n          )\n\n  if __name__ == \"__main__\":\n      asyncio.run(main())\n  ```\n  \n  注意事項：\n  - TypeScript実装時は、引数の型を適切に扱うために型アサーション（as string）を使用するか、\n    明示的に型を宣言してください（例：const value: string = request.params.arguments.someValue）。\n  - 複雑な型を扱う場合は、interface や type を定義して型安全性を確保することをお勧めします。\n  \n  ユーザーの要求に応じて上記のテンプレートを参考にカスタマイズしてください。その際、基本的な構造を維持しつつ、ツール名や機能を変更できます。",
                  "inputschema": {
                    "properties": {
                      "code": {
                        "description": "カスタマイズしたサーバーコード。テンプレートを元に変更したコードを入力してください。省略した場合はデフォルトのテンプレートが使用されます。",
                        "type": "string"
                      },
                      "dependencies": {
                        "description": "使用するライブラリとそのバージョン（例: { \"axios\": \"^1.0.0\" }）",
                        "type": "object"
                      },
                      "language": {
                        "description": "The programming language for the template",
                        "enum": [
                          "typescript",
                          "python"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "language"
                    ],
                    "type": "object"
                  },
                  "name": "create-server-from-template"
                },
                {
                  "description": "Execute a tool on a server",
                  "inputschema": {
                    "properties": {
                      "args": {
                        "description": "The arguments to pass to the tool",
                        "type": "object"
                      },
                      "serverId": {
                        "description": "The ID of the server",
                        "type": "string"
                      },
                      "toolName": {
                        "description": "The name of the tool to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "serverId",
                      "toolName"
                    ],
                    "type": "object"
                  },
                  "name": "execute-tool"
                },
                {
                  "description": "Get the tools available on a server",
                  "inputschema": {
                    "properties": {
                      "serverId": {
                        "description": "The ID of the server",
                        "type": "string"
                      }
                    },
                    "required": [
                      "serverId"
                    ],
                    "type": "object"
                  },
                  "name": "get-server-tools"
                },
                {
                  "description": "Delete a server",
                  "inputschema": {
                    "properties": {
                      "serverId": {
                        "description": "The ID of the server",
                        "type": "string"
                      }
                    },
                    "required": [
                      "serverId"
                    ],
                    "type": "object"
                  },
                  "name": "delete-server"
                },
                {
                  "description": "List all running servers",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list-servers"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:45Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "tevonsb": {
      "mcpproviderid": "tevonsb",
      "self": "#/mcpproviders/tevonsb",
      "xid": "/mcpproviders/tevonsb",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:57.327517057Z",
      "modifiedat": "2025-05-26T16:41:57.327517057Z",

      "serversurl": "#/mcpproviders/tevonsb/servers",
      "servers": {
        "homeassistant-mcp": {
          "serverid": "homeassistant-mcp",
          "self": "#/mcpproviders/tevonsb/servers/homeassistant-mcp",
          "xid": "/mcpproviders/tevonsb/servers/homeassistant-mcp",

          "metaurl": "#/mcpproviders/tevonsb/servers/homeassistant-mcp/meta",
          "meta": {
            "serverid": "homeassistant-mcp",
            "self": "#/mcpproviders/tevonsb/servers/homeassistant-mcp/meta",
            "xid": "/mcpproviders/tevonsb/servers/homeassistant-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:57.327517057Z",
            "modifiedat": "2025-05-26T16:41:57.327517057Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/tevonsb/servers/homeassistant-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/tevonsb/servers/homeassistant-mcp/versions",
          "versions": {
            "1": {
              "serverid": "homeassistant-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/tevonsb/servers/homeassistant-mcp/versions/1",
              "xid": "/mcpproviders/tevonsb/servers/homeassistant-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.tevonsb/homeassistant-mcp",
              "isdefault": true,
              "description": "A MCP server for Home Assistant",
              "createdat": "2025-05-26T16:41:57.327517057Z",
              "modifiedat": "2025-05-26T16:41:57.327517057Z",
              "ancestor": "1",
              "id": "b87405fe-1aae-4a7a-a4d7-cd0b5f267ad8",
              "packages": [
                {
                  "name": "homeassistant-mcp",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "902220777",
                "source": "github",
                "url": "https://github.com/tevonsb/homeassistant-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List all available Home Assistant devices",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_devices"
                },
                {
                  "description": "Control Home Assistant devices and services",
                  "inputschema": {
                    "properties": {
                      "brightness": {
                        "description": "Brightness level for lights (0-255)",
                        "maximum": 255,
                        "minimum": 0,
                        "type": "number"
                      },
                      "color_temp": {
                        "description": "Color temperature for lights",
                        "type": "number"
                      },
                      "command": {
                        "description": "The command to execute",
                        "enum": [
                          "turn_on",
                          "turn_off",
                          "toggle",
                          "open",
                          "close",
                          "stop",
                          "set_position",
                          "set_tilt_position",
                          "set_temperature",
                          "set_hvac_mode",
                          "set_fan_mode",
                          "set_humidity"
                        ],
                        "type": "string"
                      },
                      "entity_id": {
                        "description": "The entity ID to control",
                        "type": "string"
                      },
                      "fan_mode": {
                        "description": "Fan mode for climate devices",
                        "enum": [
                          "auto",
                          "low",
                          "medium",
                          "high"
                        ],
                        "type": "string"
                      },
                      "humidity": {
                        "description": "Target humidity for climate devices",
                        "maximum": 100,
                        "minimum": 0,
                        "type": "number"
                      },
                      "hvac_mode": {
                        "description": "HVAC mode for climate devices",
                        "enum": [
                          "off",
                          "heat",
                          "cool",
                          "heat_cool",
                          "auto",
                          "dry",
                          "fan_only"
                        ],
                        "type": "string"
                      },
                      "position": {
                        "description": "Position for covers (0-100)",
                        "maximum": 100,
                        "minimum": 0,
                        "type": "number"
                      },
                      "rgb_color": {
                        "description": "RGB color values",
                        "items": [
                          {
                            "type": "number"
                          },
                          {
                            "type": "number"
                          },
                          {
                            "type": "number"
                          }
                        ],
                        "type": "array"
                      },
                      "state": {
                        "description": "The desired state for the entity",
                        "type": "string"
                      },
                      "target_temp_high": {
                        "description": "Target high temperature for climate devices",
                        "type": "number"
                      },
                      "target_temp_low": {
                        "description": "Target low temperature for climate devices",
                        "type": "number"
                      },
                      "temperature": {
                        "description": "Target temperature for climate devices",
                        "type": "number"
                      },
                      "tilt_position": {
                        "description": "Tilt position for covers (0-100)",
                        "maximum": 100,
                        "minimum": 0,
                        "type": "number"
                      }
                    },
                    "required": [
                      "command",
                      "entity_id"
                    ],
                    "type": "object"
                  },
                  "name": "control"
                },
                {
                  "description": "Get state history for Home Assistant entities",
                  "inputschema": {
                    "properties": {
                      "end_time": {
                        "description": "End time in ISO format. Defaults to now",
                        "type": "string"
                      },
                      "entity_id": {
                        "description": "The entity ID to get history for",
                        "type": "string"
                      },
                      "minimal_response": {
                        "description": "Return minimal response to reduce data size",
                        "type": "boolean"
                      },
                      "significant_changes_only": {
                        "description": "Only return significant state changes",
                        "type": "boolean"
                      },
                      "start_time": {
                        "description": "Start time in ISO format. Defaults to 24 hours ago",
                        "type": "string"
                      }
                    },
                    "required": [
                      "entity_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_history"
                },
                {
                  "description": "Manage and activate Home Assistant scenes",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "description": "Action to perform with scenes",
                        "enum": [
                          "list",
                          "activate"
                        ],
                        "type": "string"
                      },
                      "scene_id": {
                        "description": "Scene ID to activate (required for activate action)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "action"
                    ],
                    "type": "object"
                  },
                  "name": "scene"
                },
                {
                  "description": "Send notifications through Home Assistant",
                  "inputschema": {
                    "properties": {
                      "data": {
                        "additionalProperties": true,
                        "description": "Additional notification data",
                        "type": "object"
                      },
                      "message": {
                        "description": "The notification message",
                        "type": "string"
                      },
                      "target": {
                        "description": "Specific notification target (e.g., mobile_app_phone)",
                        "type": "string"
                      },
                      "title": {
                        "description": "The notification title",
                        "type": "string"
                      }
                    },
                    "required": [
                      "message"
                    ],
                    "type": "object"
                  },
                  "name": "notify"
                },
                {
                  "description": "Manage Home Assistant automations",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "description": "Action to perform with automation",
                        "enum": [
                          "list",
                          "toggle",
                          "trigger"
                        ],
                        "type": "string"
                      },
                      "automation_id": {
                        "description": "Automation ID (required for toggle and trigger actions)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "action"
                    ],
                    "type": "object"
                  },
                  "name": "automation"
                },
                {
                  "description": "Manage Home Assistant add-ons",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "description": "Action to perform with add-on",
                        "enum": [
                          "list",
                          "info",
                          "install",
                          "uninstall",
                          "start",
                          "stop",
                          "restart"
                        ],
                        "type": "string"
                      },
                      "slug": {
                        "description": "Add-on slug (required for all actions except list)",
                        "type": "string"
                      },
                      "version": {
                        "description": "Version to install (only for install action)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "action"
                    ],
                    "type": "object"
                  },
                  "name": "addon"
                },
                {
                  "description": "Manage HACS packages and custom components",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "description": "Action to perform with package",
                        "enum": [
                          "list",
                          "install",
                          "uninstall",
                          "update"
                        ],
                        "type": "string"
                      },
                      "category": {
                        "description": "Package category",
                        "enum": [
                          "integration",
                          "plugin",
                          "theme",
                          "python_script",
                          "appdaemon",
                          "netdaemon"
                        ],
                        "type": "string"
                      },
                      "repository": {
                        "description": "Repository URL or name (required for install)",
                        "type": "string"
                      },
                      "version": {
                        "description": "Version to install",
                        "type": "string"
                      }
                    },
                    "required": [
                      "action",
                      "category"
                    ],
                    "type": "object"
                  },
                  "name": "package"
                },
                {
                  "description": "Advanced automation configuration and management",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "description": "Action to perform with automation config",
                        "enum": [
                          "create",
                          "update",
                          "delete",
                          "duplicate"
                        ],
                        "type": "string"
                      },
                      "automation_id": {
                        "description": "Automation ID (required for update, delete, and duplicate)",
                        "type": "string"
                      },
                      "config": {
                        "description": "Automation configuration (required for create and update)",
                        "properties": {
                          "action": {
                            "description": "List of actions",
                            "items": {},
                            "type": "array"
                          },
                          "alias": {
                            "description": "Friendly name for the automation",
                            "type": "string"
                          },
                          "condition": {
                            "description": "List of conditions",
                            "items": {},
                            "type": "array"
                          },
                          "description": {
                            "description": "Description of what the automation does",
                            "type": "string"
                          },
                          "mode": {
                            "description": "How multiple triggerings are handled",
                            "enum": [
                              "single",
                              "parallel",
                              "queued",
                              "restart"
                            ],
                            "type": "string"
                          },
                          "trigger": {
                            "description": "List of triggers",
                            "items": {},
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "action"
                    ],
                    "type": "object"
                  },
                  "name": "automation_config"
                },
                {
                  "description": "Subscribe to Home Assistant events via Server-Sent Events (SSE)",
                  "inputschema": {
                    "properties": {
                      "domain": {
                        "description": "Domain to monitor (e.g., \"light\", \"switch\", etc.)",
                        "type": "string"
                      },
                      "entity_id": {
                        "description": "Specific entity ID to monitor for state changes",
                        "type": "string"
                      },
                      "events": {
                        "description": "List of event types to subscribe to",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "token": {
                        "description": "Authentication token (required)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "token"
                    ],
                    "type": "object"
                  },
                  "name": "subscribe_events"
                },
                {
                  "description": "Get SSE connection statistics",
                  "inputschema": {
                    "properties": {
                      "token": {
                        "description": "Authentication token (required)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "token"
                    ],
                    "type": "object"
                  },
                  "name": "get_sse_stats"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:57Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "thirdweb-dev": {
      "mcpproviderid": "thirdweb-dev",
      "self": "#/mcpproviders/thirdweb-dev",
      "xid": "/mcpproviders/thirdweb-dev",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:38.145373332Z",
      "modifiedat": "2025-05-26T16:41:38.145373332Z",

      "serversurl": "#/mcpproviders/thirdweb-dev/servers",
      "servers": {
        "ai": {
          "serverid": "ai",
          "self": "#/mcpproviders/thirdweb-dev/servers/ai",
          "xid": "/mcpproviders/thirdweb-dev/servers/ai",

          "metaurl": "#/mcpproviders/thirdweb-dev/servers/ai/meta",
          "meta": {
            "serverid": "ai",
            "self": "#/mcpproviders/thirdweb-dev/servers/ai/meta",
            "xid": "/mcpproviders/thirdweb-dev/servers/ai/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:38.145373332Z",
            "modifiedat": "2025-05-26T16:41:38.145373332Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/thirdweb-dev/servers/ai/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/thirdweb-dev/servers/ai/versions",
          "versions": {
            "1": {
              "serverid": "ai",
              "versionid": "1",
              "self": "#/mcpproviders/thirdweb-dev/servers/ai/versions/1",
              "xid": "/mcpproviders/thirdweb-dev/servers/ai/versions/1",
              "epoch": 1,
              "name": "io.github.thirdweb-dev/ai",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:38.145373332Z",
              "modifiedat": "2025-05-26T16:41:38.145373332Z",
              "ancestor": "1",
              "id": "f5349be9-5e04-4e93-bf2f-2dae8db4a9e9",
              "packages": [
                {
                  "name": "thirdweb-dev/ai",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "947697435",
                "source": "github",
                "url": "https://github.com/thirdweb-dev/ai"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Tools for blockchain data intelligence including chains, transactions, blocks, events, prices, and tokens.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "Insight Tools"
                },
                {
                  "description": "AI agent blockchain interaction tools enabling natural language powered blockchain tasks.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "Nebula Tools"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:05Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "tinybirdco": {
      "mcpproviderid": "tinybirdco",
      "self": "#/mcpproviders/tinybirdco",
      "xid": "/mcpproviders/tinybirdco",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:58.105467036Z",
      "modifiedat": "2025-05-26T16:41:58.105467036Z",

      "serversurl": "#/mcpproviders/tinybirdco/servers",
      "servers": {
        "mcp-tinybird": {
          "serverid": "mcp-tinybird",
          "self": "#/mcpproviders/tinybirdco/servers/mcp-tinybird",
          "xid": "/mcpproviders/tinybirdco/servers/mcp-tinybird",

          "metaurl": "#/mcpproviders/tinybirdco/servers/mcp-tinybird/meta",
          "meta": {
            "serverid": "mcp-tinybird",
            "self": "#/mcpproviders/tinybirdco/servers/mcp-tinybird/meta",
            "xid": "/mcpproviders/tinybirdco/servers/mcp-tinybird/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:58.105467036Z",
            "modifiedat": "2025-05-26T16:41:58.105467036Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/tinybirdco/servers/mcp-tinybird/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/tinybirdco/servers/mcp-tinybird/versions",
          "versions": {
            "1": {
              "serverid": "mcp-tinybird",
              "versionid": "1",
              "self": "#/mcpproviders/tinybirdco/servers/mcp-tinybird/versions/1",
              "xid": "/mcpproviders/tinybirdco/servers/mcp-tinybird/versions/1",
              "epoch": 1,
              "name": "io.github.tinybirdco/mcp-tinybird",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:58.105467036Z",
              "modifiedat": "2025-05-26T16:41:58.105467036Z",
              "ancestor": "1",
              "id": "adb9a058-774f-4505-aa80-1afa9bab8cb9",
              "packages": [
                {
                  "name": "mcp-tinybird",
                  "registry_name": "unknown",
                  "version": "1.0.2"
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "The topic of the data you want to explore",
                      "name": "topic",
                      "required": true
                    }
                  ],
                  "description": "A prompt to get insights from the Data Sources and Pipe Endpoints in the Tinybird Workspace",
                  "name": "tinybird-default"
                }
              ],
              "repository": {
                "id": "894960290",
                "source": "github",
                "url": "https://github.com/tinybirdco/mcp-tinybird"
              },
              "resources": [
                {
                  "description": "A living document of discovered insights",
                  "mimetype": "text/plain",
                  "name": "Insights from Tinybird",
                  "uritemplate": "tinybird://insights"
                },
                {
                  "description": "Syntax and context to build .datasource datafiles",
                  "mimetype": "text/plain",
                  "name": "Context for datasource definition",
                  "uritemplate": "tinybird://datasource-definition-context"
                }
              ],
              "tools": [
                {
                  "description": "List all Data Sources in the Tinybird Workspace",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list-data-sources"
                },
                {
                  "description": "Get details of a Data Source in the Tinybird Workspace, such as the schema",
                  "inputschema": {
                    "properties": {
                      "datasource_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "datasource_id"
                    ],
                    "type": "object"
                  },
                  "name": "get-data-source"
                },
                {
                  "description": "List all Pipe Endpoints in the Tinybird Workspace",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list-pipes"
                },
                {
                  "description": "Get details of a Pipe Endpoint in the Tinybird Workspace, such as the nodes SQLs to understand what they do or what Data Sources they use",
                  "inputschema": {
                    "properties": {
                      "pipe_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "pipe_id"
                    ],
                    "type": "object"
                  },
                  "name": "get-pipe"
                },
                {
                  "description": "Requests data from a Pipe Endpoint in the Tinybird Workspace, includes parameters",
                  "inputschema": {
                    "properties": {
                      "params": {
                        "properties": {},
                        "type": "object"
                      },
                      "pipe_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "pipe_id"
                    ],
                    "type": "object"
                  },
                  "name": "request-pipe-data"
                },
                {
                  "description": "Runs a select query to the Tinybird Workspace. It may query Data Sources or Pipe Endpoints",
                  "inputschema": {
                    "properties": {
                      "select_query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "select_query"
                    ],
                    "type": "object"
                  },
                  "name": "run-select-query"
                },
                {
                  "description": "Add a business insight to the memo",
                  "inputschema": {
                    "properties": {
                      "insight": {
                        "description": "Business insight discovered from data analysis",
                        "type": "string"
                      }
                    },
                    "required": [
                      "insight"
                    ],
                    "type": "object"
                  },
                  "name": "append-insight"
                },
                {
                  "description": "The Tinybird product description and documentation, including API Reference in LLM friendly format",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "llms-tinybird-docs"
                },
                {
                  "description": "Analyze the Pipe Endpoint SQL",
                  "inputschema": {
                    "properties": {
                      "pipe_name": {
                        "description": "The Pipe Endpoint name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "pipe_name"
                    ],
                    "type": "object"
                  },
                  "name": "analyze-pipe"
                },
                {
                  "description": "Push a .datasource or .pipe file to the Workspace",
                  "inputschema": {
                    "properties": {
                      "files": {
                        "description": "The datafile local path",
                        "type": "string"
                      }
                    },
                    "required": [
                      "files"
                    ],
                    "type": "object"
                  },
                  "name": "push-datafile"
                },
                {
                  "description": "Sends an event to a Data Source in Tinybird. The data needs to be in NDJSON format and conform to the Data Source schema in Tinybird",
                  "inputschema": {
                    "properties": {
                      "data": {
                        "description": "A JSON object that will be converted to a NDJSON String to save in the Tinybird Data Source via the events API. It should contain one key for each column in the Data Source",
                        "type": "string"
                      },
                      "datasource_name": {
                        "description": "The name of the Data Source in Tinybird",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "save-event"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:09Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "tinyfish-io": {
      "mcpproviderid": "tinyfish-io",
      "self": "#/mcpproviders/tinyfish-io",
      "xid": "/mcpproviders/tinyfish-io",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:22.379002803Z",
      "modifiedat": "2025-05-26T16:41:22.379002803Z",

      "serversurl": "#/mcpproviders/tinyfish-io/servers",
      "servers": {
        "agentql-mcp": {
          "serverid": "agentql-mcp",
          "self": "#/mcpproviders/tinyfish-io/servers/agentql-mcp",
          "xid": "/mcpproviders/tinyfish-io/servers/agentql-mcp",

          "metaurl": "#/mcpproviders/tinyfish-io/servers/agentql-mcp/meta",
          "meta": {
            "serverid": "agentql-mcp",
            "self": "#/mcpproviders/tinyfish-io/servers/agentql-mcp/meta",
            "xid": "/mcpproviders/tinyfish-io/servers/agentql-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:22.379002803Z",
            "modifiedat": "2025-05-26T16:41:22.379002803Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/tinyfish-io/servers/agentql-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/tinyfish-io/servers/agentql-mcp/versions",
          "versions": {
            "1": {
              "serverid": "agentql-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/tinyfish-io/servers/agentql-mcp/versions/1",
              "xid": "/mcpproviders/tinyfish-io/servers/agentql-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.tinyfish-io/agentql-mcp",
              "isdefault": true,
              "description": "Model Context Protocol server that integrates AgentQL's data extraction capabilities.",
              "createdat": "2025-05-26T16:41:22.379002803Z",
              "modifiedat": "2025-05-26T16:41:22.379002803Z",
              "ancestor": "1",
              "id": "d86f2098-0be9-4b52-b32e-9d0f17333197",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_API_KEY",
                      "name": "AGENTQL_API_KEY"
                    }
                  ],
                  "name": "agentql-mcp",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "906462272",
                "source": "github",
                "url": "https://github.com/tinyfish-io/agentql-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Extracts structured data as JSON from a web page given a URL using a Natural Language description of the data.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Natural Language description of the data to extract from the page",
                        "type": "string"
                      },
                      "url": {
                        "description": "The URL of the public webpage to extract data from",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url",
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "extract-web-data"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T18:56:54Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "topoteretes": {
      "mcpproviderid": "topoteretes",
      "self": "#/mcpproviders/topoteretes",
      "xid": "/mcpproviders/topoteretes",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:21.384317545Z",
      "modifiedat": "2025-05-26T16:41:21.384317545Z",

      "serversurl": "#/mcpproviders/topoteretes/servers",
      "servers": {
        "cognee": {
          "serverid": "cognee",
          "self": "#/mcpproviders/topoteretes/servers/cognee",
          "xid": "/mcpproviders/topoteretes/servers/cognee",

          "metaurl": "#/mcpproviders/topoteretes/servers/cognee/meta",
          "meta": {
            "serverid": "cognee",
            "self": "#/mcpproviders/topoteretes/servers/cognee/meta",
            "xid": "/mcpproviders/topoteretes/servers/cognee/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:21.384317545Z",
            "modifiedat": "2025-05-26T16:41:21.384317545Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/topoteretes/servers/cognee/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/topoteretes/servers/cognee/versions",
          "versions": {
            "1": {
              "serverid": "cognee",
              "versionid": "1",
              "self": "#/mcpproviders/topoteretes/servers/cognee/versions/1",
              "xid": "/mcpproviders/topoteretes/servers/cognee/versions/1",
              "epoch": 1,
              "name": "io.github.topoteretes/cognee",
              "isdefault": true,
              "description": "Memory for AI Agents in 5 lines of code",
              "createdat": "2025-05-26T16:41:21.384317545Z",
              "modifiedat": "2025-05-26T16:41:21.384317545Z",
              "ancestor": "1",
              "id": "ae9ce022-800d-4a10-a452-5bc396d25430",
              "packages": [
                {
                  "name": "cognee",
                  "registry_name": "unknown",
                  "version": "0.1.40"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "679343504",
                "source": "github",
                "url": "https://github.com/topoteretes/cognee"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Cognifies text into knowledge graph",
                  "inputschema": {
                    "properties": {
                      "graph_model_file": {
                        "description": "The path to the graph model file (Optional)",
                        "type": "string"
                      },
                      "graph_model_name": {
                        "description": "The name of the graph model (Optional)",
                        "type": "string"
                      },
                      "text": {
                        "description": "The text to cognify",
                        "type": "string"
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "cognify"
                },
                {
                  "description": "Transforms codebase into knowledge graph",
                  "inputschema": {
                    "properties": {
                      "repo_path": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "repo_path"
                    ],
                    "type": "object"
                  },
                  "name": "codify"
                },
                {
                  "description": "Searches for information in knowledge graph",
                  "inputschema": {
                    "properties": {
                      "search_query": {
                        "description": "The query to search for",
                        "type": "string"
                      },
                      "search_type": {
                        "description": "The type of search to perform (e.g., INSIGHTS, CODE)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "search_query"
                    ],
                    "type": "object"
                  },
                  "name": "search"
                },
                {
                  "description": "Prunes knowledge graph",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "prune"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:43Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "translated": {
      "mcpproviderid": "translated",
      "self": "#/mcpproviders/translated",
      "xid": "/mcpproviders/translated",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:32.066459342Z",
      "modifiedat": "2025-05-26T16:41:32.066459342Z",

      "serversurl": "#/mcpproviders/translated/servers",
      "servers": {
        "lara-mcp": {
          "serverid": "lara-mcp",
          "self": "#/mcpproviders/translated/servers/lara-mcp",
          "xid": "/mcpproviders/translated/servers/lara-mcp",

          "metaurl": "#/mcpproviders/translated/servers/lara-mcp/meta",
          "meta": {
            "serverid": "lara-mcp",
            "self": "#/mcpproviders/translated/servers/lara-mcp/meta",
            "xid": "/mcpproviders/translated/servers/lara-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:32.066459342Z",
            "modifiedat": "2025-05-26T16:41:32.066459342Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/translated/servers/lara-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/translated/servers/lara-mcp/versions",
          "versions": {
            "1": {
              "serverid": "lara-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/translated/servers/lara-mcp/versions/1",
              "xid": "/mcpproviders/translated/servers/lara-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.translated/lara-mcp",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:32.066459342Z",
              "modifiedat": "2025-05-26T16:41:32.066459342Z",
              "ancestor": "1",
              "id": "5026f1b0-0426-4ea2-8ec2-fab1fabb0a7e",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "\u003cYOUR_ACCESS_KEY_ID\u003e",
                      "name": "LARA_ACCESS_KEY_ID"
                    },
                    {
                      "description": "\u003cYOUR_ACCESS_KEY_SECRET\u003e",
                      "name": "LARA_ACCESS_KEY_SECRET"
                    }
                  ],
                  "name": "@translated/lara-mcp",
                  "package_arguments": [
                    {
                      "default": "-i",
                      "description": "Run the docker container in interactive mode",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i"
                    },
                    {
                      "default": "--rm",
                      "description": "Automatically remove the container when it exits",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm"
                    },
                    {
                      "default": "-e LARA_ACCESS_KEY_ID",
                      "description": "Set environment variable LARA_ACCESS_KEY_ID in the container",
                      "format": "string",
                      "is_required": true,
                      "name": "-e LARA_ACCESS_KEY_ID",
                      "type": "named",
                      "value": "-e LARA_ACCESS_KEY_ID",
                      "value_hint": "LARA_ACCESS_KEY_ID"
                    },
                    {
                      "default": "-e LARA_ACCESS_KEY_SECRET",
                      "description": "Set environment variable LARA_ACCESS_KEY_SECRET in the container",
                      "format": "string",
                      "is_required": true,
                      "name": "-e LARA_ACCESS_KEY_SECRET",
                      "type": "named",
                      "value": "-e LARA_ACCESS_KEY_SECRET",
                      "value_hint": "LARA_ACCESS_KEY_SECRET"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "0.0.10"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "957768661",
                "source": "github",
                "url": "https://github.com/translated/lara-mcp"
              },
              "resources": [
                {
                  "description": "List of translation memories in your Lara Translate account.",
                  "name": "Translation Memories",
                  "uritemplate": "memories://list"
                },
                {
                  "description": "List of Lara Translate supported languages.",
                  "name": "Supported Languages",
                  "uritemplate": "languages://list"
                }
              ],
              "tools": [
                {
                  "description": "Translate text between languages with support for language detection, context-aware translations and translation memories using Lara Translate.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "translate"
                },
                {
                  "description": "Create a translation memory with a custom name in your Lara Translate account. Translation memories store pairs of source and target text segments (translation units) for reuse in future translations.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_memory"
                },
                {
                  "description": "Deletes a translation memory from your Lara Translate account.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_memory"
                },
                {
                  "description": "Updates a translation memory in your Lara Translate account.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_memory"
                },
                {
                  "description": "Adds a translation to a translation memory in your Lara Translate account.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "add_translation"
                },
                {
                  "description": "Deletes a translation from a translation memory from your Lara Translate account.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_translation"
                },
                {
                  "description": "Imports a TMX file into a translation memory in your Lara Translate account.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "import_tmx"
                },
                {
                  "description": "Checks the status of a TMX file import job in your Lara Translate account.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "check_import_status"
                },
                {
                  "description": "Lists all translation memories in your Lara Translate account.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_memories"
                },
                {
                  "description": "Lists all supported languages in your Lara Translate account.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_languages"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:04Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "tritlo": {
      "mcpproviderid": "tritlo",
      "self": "#/mcpproviders/tritlo",
      "xid": "/mcpproviders/tritlo",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:37.888460293Z",
      "modifiedat": "2025-05-26T16:41:37.888460293Z",

      "serversurl": "#/mcpproviders/tritlo/servers",
      "servers": {
        "lsp-mcp": {
          "serverid": "lsp-mcp",
          "self": "#/mcpproviders/tritlo/servers/lsp-mcp",
          "xid": "/mcpproviders/tritlo/servers/lsp-mcp",

          "metaurl": "#/mcpproviders/tritlo/servers/lsp-mcp/meta",
          "meta": {
            "serverid": "lsp-mcp",
            "self": "#/mcpproviders/tritlo/servers/lsp-mcp/meta",
            "xid": "/mcpproviders/tritlo/servers/lsp-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:37.888460293Z",
            "modifiedat": "2025-05-26T16:41:37.888460293Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/tritlo/servers/lsp-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/tritlo/servers/lsp-mcp/versions",
          "versions": {
            "1": {
              "serverid": "lsp-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/tritlo/servers/lsp-mcp/versions/1",
              "xid": "/mcpproviders/tritlo/servers/lsp-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.tritlo/lsp-mcp",
              "isdefault": true,
              "description": "An MCP server that lets you interact with LSP servers",
              "createdat": "2025-05-26T16:41:37.888460293Z",
              "modifiedat": "2025-05-26T16:41:37.888460293Z",
              "ancestor": "1",
              "id": "32f876df-1f34-40d7-aed8-0431b32d5091",
              "packages": [
                {
                  "name": "lsp-mcp-server",
                  "package_arguments": [
                    {
                      "default": "debug",
                      "description": "debug",
                      "format": "string",
                      "is_required": true,
                      "name": "debug",
                      "type": "named",
                      "value": "debug",
                      "value_hint": "debug"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.2.0"
                }
              ],
              "repository": {
                "id": "952869992",
                "source": "github",
                "url": "https://github.com/Tritlo/lsp-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:12Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ubie-oss": {
      "mcpproviderid": "ubie-oss",
      "self": "#/mcpproviders/ubie-oss",
      "xid": "/mcpproviders/ubie-oss",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:12.696412933Z",
      "modifiedat": "2025-05-26T16:42:12.696412933Z",

      "serversurl": "#/mcpproviders/ubie-oss/servers",
      "servers": {
        "mcp-vertexai-search": {
          "serverid": "mcp-vertexai-search",
          "self": "#/mcpproviders/ubie-oss/servers/mcp-vertexai-search",
          "xid": "/mcpproviders/ubie-oss/servers/mcp-vertexai-search",

          "metaurl": "#/mcpproviders/ubie-oss/servers/mcp-vertexai-search/meta",
          "meta": {
            "serverid": "mcp-vertexai-search",
            "self": "#/mcpproviders/ubie-oss/servers/mcp-vertexai-search/meta",
            "xid": "/mcpproviders/ubie-oss/servers/mcp-vertexai-search/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:12.696412933Z",
            "modifiedat": "2025-05-26T16:42:12.696412933Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ubie-oss/servers/mcp-vertexai-search/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ubie-oss/servers/mcp-vertexai-search/versions",
          "versions": {
            "1": {
              "serverid": "mcp-vertexai-search",
              "versionid": "1",
              "self": "#/mcpproviders/ubie-oss/servers/mcp-vertexai-search/versions/1",
              "xid": "/mcpproviders/ubie-oss/servers/mcp-vertexai-search/versions/1",
              "epoch": 1,
              "name": "io.github.ubie-oss/mcp-vertexai-search",
              "isdefault": true,
              "description": "A MCP server for Vertex AI Search",
              "createdat": "2025-05-26T16:42:12.696412933Z",
              "modifiedat": "2025-05-26T16:42:12.696412933Z",
              "ancestor": "1",
              "id": "07ccf835-680a-42b4-bf0b-db28367519ee",
              "packages": [
                {
                  "name": "mcp-vertexai-search",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "934580342",
                "source": "github",
                "url": "https://github.com/ubie-oss/mcp-vertexai-search"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:44Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "unibaseio": {
      "mcpproviderid": "unibaseio",
      "self": "#/mcpproviders/unibaseio",
      "xid": "/mcpproviders/unibaseio",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:24.174875357Z",
      "modifiedat": "2025-05-26T16:42:24.174875357Z",

      "serversurl": "#/mcpproviders/unibaseio/servers",
      "servers": {
        "membase-mcp": {
          "serverid": "membase-mcp",
          "self": "#/mcpproviders/unibaseio/servers/membase-mcp",
          "xid": "/mcpproviders/unibaseio/servers/membase-mcp",

          "metaurl": "#/mcpproviders/unibaseio/servers/membase-mcp/meta",
          "meta": {
            "serverid": "membase-mcp",
            "self": "#/mcpproviders/unibaseio/servers/membase-mcp/meta",
            "xid": "/mcpproviders/unibaseio/servers/membase-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:24.174875357Z",
            "modifiedat": "2025-05-26T16:42:24.174875357Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/unibaseio/servers/membase-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/unibaseio/servers/membase-mcp/versions",
          "versions": {
            "1": {
              "serverid": "membase-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/unibaseio/servers/membase-mcp/versions/1",
              "xid": "/mcpproviders/unibaseio/servers/membase-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.unibaseio/membase-mcp",
              "isdefault": true,
              "description": "A lightweight, decentralized memory server for AI agents to store and retrieve conversations via the Unibase memory layer.",
              "createdat": "2025-05-26T16:42:24.174875357Z",
              "modifiedat": "2025-05-26T16:42:24.174875357Z",
              "ancestor": "1",
              "id": "819f0338-1101-475c-9915-65a8727a8dc5",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your account, 0x...",
                      "name": "MEMBASE_ACCOUNT"
                    },
                    {
                      "description": "your conversation id, should be unique",
                      "name": "MEMBASE_CONVERSATION_ID"
                    },
                    {
                      "description": "your sub account, any string",
                      "name": "MEMBASE_ID"
                    }
                  ],
                  "name": "membase-mcp",
                  "package_arguments": [
                    {
                      "default": "--directory path/to/membase-mcp",
                      "description": "Specifies the directory to use",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory path/to/membase-mcp",
                      "type": "named",
                      "value": "--directory path/to/membase-mcp",
                      "value_hint": "path/to/membase-mcp"
                    },
                    {
                      "default": "src/membase_mcp/server.py",
                      "description": "Path to the membase MCP server script",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "src/membase_mcp/server.py",
                      "value_hint": "src/membase_mcp/server.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "957747274",
                "source": "github",
                "url": "https://github.com/unibaseio/membase-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Get the current conversation id.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_conversation_id"
                },
                {
                  "description": "Switch to a different conversation.",
                  "inputschema": {
                    "properties": {
                      "conversation_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "conversation_id"
                    ],
                    "type": "object"
                  },
                  "name": "switch_conversation"
                },
                {
                  "description": "Save a message/memory into the current conversation.",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "type": "string"
                      },
                      "msg_type": {
                        "enum": [
                          "user",
                          "assistant"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "save_message"
                },
                {
                  "description": "Get the last n messages from the current conversation.",
                  "inputschema": {
                    "properties": {
                      "recent_n": {
                        "type": "integer"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_messages"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:06Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "unifai-network": {
      "mcpproviderid": "unifai-network",
      "self": "#/mcpproviders/unifai-network",
      "xid": "/mcpproviders/unifai-network",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:03.044521031Z",
      "modifiedat": "2025-05-26T16:42:03.044521031Z",

      "serversurl": "#/mcpproviders/unifai-network/servers",
      "servers": {
        "unifai-mcp-server": {
          "serverid": "unifai-mcp-server",
          "self": "#/mcpproviders/unifai-network/servers/unifai-mcp-server",
          "xid": "/mcpproviders/unifai-network/servers/unifai-mcp-server",

          "metaurl": "#/mcpproviders/unifai-network/servers/unifai-mcp-server/meta",
          "meta": {
            "serverid": "unifai-mcp-server",
            "self": "#/mcpproviders/unifai-network/servers/unifai-mcp-server/meta",
            "xid": "/mcpproviders/unifai-network/servers/unifai-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:03.044521031Z",
            "modifiedat": "2025-05-26T16:42:03.044521031Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/unifai-network/servers/unifai-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/unifai-network/servers/unifai-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "unifai-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/unifai-network/servers/unifai-mcp-server/versions/1",
              "xid": "/mcpproviders/unifai-network/servers/unifai-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.unifai-network/unifai-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:42:03.044521031Z",
              "modifiedat": "2025-05-26T16:42:03.044521031Z",
              "ancestor": "1",
              "id": "9941c18c-f247-4b88-a6ff-7b001f806acf",
              "packages": [
                {
                  "name": "unifai-network/unifai-mcp-server",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "946711580",
                "source": "github",
                "url": "https://github.com/unifai-network/unifai-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:11Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "unstructured-io": {
      "mcpproviderid": "unstructured-io",
      "self": "#/mcpproviders/unstructured-io",
      "xid": "/mcpproviders/unstructured-io",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:47.347291734Z",
      "modifiedat": "2025-05-26T16:41:47.347291734Z",

      "serversurl": "#/mcpproviders/unstructured-io/servers",
      "servers": {
        "uns-mcp": {
          "serverid": "uns-mcp",
          "self": "#/mcpproviders/unstructured-io/servers/uns-mcp",
          "xid": "/mcpproviders/unstructured-io/servers/uns-mcp",

          "metaurl": "#/mcpproviders/unstructured-io/servers/uns-mcp/meta",
          "meta": {
            "serverid": "uns-mcp",
            "self": "#/mcpproviders/unstructured-io/servers/uns-mcp/meta",
            "xid": "/mcpproviders/unstructured-io/servers/uns-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:47.347291734Z",
            "modifiedat": "2025-05-26T16:41:47.347291734Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/unstructured-io/servers/uns-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/unstructured-io/servers/uns-mcp/versions",
          "versions": {
            "1": {
              "serverid": "uns-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/unstructured-io/servers/uns-mcp/versions/1",
              "xid": "/mcpproviders/unstructured-io/servers/uns-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.unstructured-io/uns-mcp",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:47.347291734Z",
              "modifiedat": "2025-05-26T16:41:47.347291734Z",
              "ancestor": "1",
              "id": "8b01f838-0cb6-4c17-b381-108713321d6d",
              "packages": [
                {
                  "name": "uns_mcp",
                  "package_arguments": [
                    {
                      "default": "--directory ABSOLUTE/PATH/TO/YOUR-UNS-MCP-REPO/uns_mcp",
                      "description": "Directory to use",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory ABSOLUTE/PATH/TO/YOUR-UNS-MCP-REPO/uns_mcp",
                      "type": "named",
                      "value": "--directory ABSOLUTE/PATH/TO/YOUR-UNS-MCP-REPO/uns_mcp",
                      "value_hint": "ABSOLUTE/PATH/TO/YOUR-UNS-MCP-REPO/uns_mcp"
                    },
                    {
                      "default": "server.py",
                      "description": "Python script file",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "server.py",
                      "value_hint": "server.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.6"
                }
              ],
              "repository": {
                "id": "947454003",
                "source": "github",
                "url": "https://github.com/Unstructured-IO/UNS-MCP"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:15Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "v-3": {
      "mcpproviderid": "v-3",
      "self": "#/mcpproviders/v-3",
      "xid": "/mcpproviders/v-3",
      "epoch": 3,
      "createdat": "2025-05-26T16:41:56.657524887Z",
      "modifiedat": "2025-05-26T16:41:56.963538299Z",

      "serversurl": "#/mcpproviders/v-3/servers",
      "servers": {
        "discordmcp": {
          "serverid": "discordmcp",
          "self": "#/mcpproviders/v-3/servers/discordmcp",
          "xid": "/mcpproviders/v-3/servers/discordmcp",

          "metaurl": "#/mcpproviders/v-3/servers/discordmcp/meta",
          "meta": {
            "serverid": "discordmcp",
            "self": "#/mcpproviders/v-3/servers/discordmcp/meta",
            "xid": "/mcpproviders/v-3/servers/discordmcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:56.657524887Z",
            "modifiedat": "2025-05-26T16:41:56.657524887Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/v-3/servers/discordmcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/v-3/servers/discordmcp/versions",
          "versions": {
            "1": {
              "serverid": "discordmcp",
              "versionid": "1",
              "self": "#/mcpproviders/v-3/servers/discordmcp/versions/1",
              "xid": "/mcpproviders/v-3/servers/discordmcp/versions/1",
              "epoch": 1,
              "name": "io.github.v-3/discordmcp",
              "isdefault": true,
              "description": "Discord MCP Server for Claude Integration",
              "createdat": "2025-05-26T16:41:56.657524887Z",
              "modifiedat": "2025-05-26T16:41:56.657524887Z",
              "ancestor": "1",
              "id": "361ed7f4-8df4-4a8e-931f-edfb380e0019",
              "packages": [
                {
                  "name": "discord-mcp-server",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "919856605",
                "source": "github",
                "url": "https://github.com/v-3/discordmcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Sends a message to a specified Discord channel.",
                  "inputschema": {
                    "properties": {
                      "channel": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      },
                      "server": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "channel",
                      "message"
                    ],
                    "type": "object"
                  },
                  "name": "send-message"
                },
                {
                  "description": "Reads recent messages from a specified Discord channel.",
                  "inputschema": {
                    "properties": {
                      "channel": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "server": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "channel"
                    ],
                    "type": "object"
                  },
                  "name": "read-messages"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:05:53Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "google-calendar": {
          "serverid": "google-calendar",
          "self": "#/mcpproviders/v-3/servers/google-calendar",
          "xid": "/mcpproviders/v-3/servers/google-calendar",

          "metaurl": "#/mcpproviders/v-3/servers/google-calendar/meta",
          "meta": {
            "serverid": "google-calendar",
            "self": "#/mcpproviders/v-3/servers/google-calendar/meta",
            "xid": "/mcpproviders/v-3/servers/google-calendar/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:56.963538299Z",
            "modifiedat": "2025-05-26T16:41:56.963538299Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/v-3/servers/google-calendar/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/v-3/servers/google-calendar/versions",
          "versions": {
            "1": {
              "serverid": "google-calendar",
              "versionid": "1",
              "self": "#/mcpproviders/v-3/servers/google-calendar/versions/1",
              "xid": "/mcpproviders/v-3/servers/google-calendar/versions/1",
              "epoch": 1,
              "name": "io.github.v-3/google-calendar",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:56.963538299Z",
              "modifiedat": "2025-05-26T16:41:56.963538299Z",
              "ancestor": "1",
              "id": "165ef95f-bfb3-4b08-b523-d17748fdfe31",
              "packages": [
                {
                  "name": "googlecalendar",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "906921955",
                "source": "github",
                "url": "https://github.com/v-3/google-calendar"
              },
              "resources": [],
              "tools": [
                {
                  "description": "List calendar events within a specified time range",
                  "inputschema": {
                    "properties": {
                      "maxResults": {
                        "description": "Maximum number of events to return",
                        "type": "number"
                      },
                      "timeMax": {
                        "description": "End time (ISO string)",
                        "type": "string"
                      },
                      "timeMin": {
                        "description": "Start time (ISO string)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_events"
                },
                {
                  "description": "Create a new calendar event",
                  "inputschema": {
                    "properties": {
                      "attendees": {
                        "description": "List of attendee email addresses",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "description": {
                        "description": "Event description",
                        "type": "string"
                      },
                      "endTime": {
                        "description": "Event end time (ISO string)",
                        "type": "string"
                      },
                      "startTime": {
                        "description": "Event start time (ISO string)",
                        "type": "string"
                      },
                      "summary": {
                        "description": "Event title",
                        "type": "string"
                      }
                    },
                    "required": [
                      "summary",
                      "startTime",
                      "endTime"
                    ],
                    "type": "object"
                  },
                  "name": "create_event"
                },
                {
                  "description": "Update an existing calendar event",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "description": "New event description",
                        "type": "string"
                      },
                      "endTime": {
                        "description": "New end time (ISO string)",
                        "type": "string"
                      },
                      "eventId": {
                        "description": "ID of the event to update",
                        "type": "string"
                      },
                      "required": [
                        "eventId"
                      ],
                      "startTime": {
                        "description": "New start time (ISO string)",
                        "type": "string"
                      },
                      "summary": {
                        "description": "New event title",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "update_event"
                },
                {
                  "description": "Delete a calendar event",
                  "inputschema": {
                    "properties": {
                      "eventId": {
                        "description": "ID of the event to delete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "eventId"
                    ],
                    "type": "object"
                  },
                  "name": "delete_event"
                },
                {
                  "description": "Find available time slots in the calendar",
                  "inputschema": {
                    "properties": {
                      "duration": {
                        "description": "Desired duration in minutes",
                        "type": "number"
                      },
                      "timeMax": {
                        "description": "End of time range (ISO string)",
                        "type": "string"
                      },
                      "timeMin": {
                        "description": "Start of time range (ISO string)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "timeMin",
                      "timeMax",
                      "duration"
                    ],
                    "type": "object"
                  },
                  "name": "find_free_time"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:31Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "notion-server": {
          "serverid": "notion-server",
          "self": "#/mcpproviders/v-3/servers/notion-server",
          "xid": "/mcpproviders/v-3/servers/notion-server",

          "metaurl": "#/mcpproviders/v-3/servers/notion-server/meta",
          "meta": {
            "serverid": "notion-server",
            "self": "#/mcpproviders/v-3/servers/notion-server/meta",
            "xid": "/mcpproviders/v-3/servers/notion-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:56.768407043Z",
            "modifiedat": "2025-05-26T16:41:56.768407043Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/v-3/servers/notion-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/v-3/servers/notion-server/versions",
          "versions": {
            "1": {
              "serverid": "notion-server",
              "versionid": "1",
              "self": "#/mcpproviders/v-3/servers/notion-server/versions/1",
              "xid": "/mcpproviders/v-3/servers/notion-server/versions/1",
              "epoch": 1,
              "name": "io.github.v-3/notion-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:56.768407043Z",
              "modifiedat": "2025-05-26T16:41:56.768407043Z",
              "ancestor": "1",
              "id": "1455eb68-3cf0-4cc3-a8ee-fd729a00acd3",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_notion_api_key_here",
                      "name": "NOTION_API_KEY"
                    }
                  ],
                  "name": "notionmcp",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "904087475",
                "source": "github",
                "url": "https://github.com/v-3/notion-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Search through Notion pages",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "Search query",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_pages"
                },
                {
                  "description": "Read a regular page's content (not for databases - use retrieve_database for databases). Shows block IDs with their types (needed for block operations)",
                  "inputschema": {
                    "properties": {
                      "pageId": {
                        "description": "ID of the page to read",
                        "type": "string"
                      }
                    },
                    "required": [
                      "pageId"
                    ],
                    "type": "object"
                  },
                  "name": "read_page"
                },
                {
                  "description": "Create a new page or database item. For database items, include 'properties' matching database schema. For pages, use 'title' and 'content'",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "Page content in markdown format (optional)",
                        "type": "string"
                      },
                      "parentPageId": {
                        "description": "ID of the parent page where this page will be created",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Additional properties for database items (optional)",
                        "type": "object"
                      },
                      "title": {
                        "description": "Page title (optional)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "parentPageId"
                    ],
                    "type": "object"
                  },
                  "name": "create_page"
                },
                {
                  "description": "Update an existing Notion page",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "New content to append",
                        "type": "string"
                      },
                      "mode": {
                        "description": "Update mode: replace all content, append to existing, or merge",
                        "enum": [
                          "replace",
                          "append",
                          "merge"
                        ],
                        "optional": true,
                        "type": "string"
                      },
                      "pageId": {
                        "description": "ID of the page to update",
                        "type": "string"
                      },
                      "position": {
                        "description": "Position for merge mode: start or end",
                        "enum": [
                          "start",
                          "end"
                        ],
                        "optional": true,
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of content to append",
                        "enum": [
                          "paragraph",
                          "task",
                          "todo",
                          "heading",
                          "image"
                        ],
                        "optional": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "pageId",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "update_page"
                },
                {
                  "description": "Get all comments from a page",
                  "inputschema": {
                    "properties": {
                      "pageId": {
                        "description": "ID of the page",
                        "type": "string"
                      },
                      "pageSize": {
                        "description": "Number of comments to retrieve (max 100)",
                        "type": "number"
                      },
                      "startCursor": {
                        "description": "Pagination cursor",
                        "type": "string"
                      }
                    },
                    "required": [
                      "pageId"
                    ],
                    "type": "object"
                  },
                  "name": "retrieve_comments"
                },
                {
                  "description": "Add a comment to a page",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "Comment text",
                        "type": "string"
                      },
                      "pageId": {
                        "description": "ID of the page to comment on",
                        "type": "string"
                      }
                    },
                    "required": [
                      "pageId",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "add_comment"
                },
                {
                  "description": "Create a new database in a page",
                  "inputschema": {
                    "properties": {
                      "parentPageId": {
                        "description": "ID of the parent page",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Database schema properties",
                        "type": "object"
                      },
                      "title": {
                        "description": "Database title",
                        "type": "string"
                      }
                    },
                    "required": [
                      "parentPageId",
                      "title",
                      "properties"
                    ],
                    "type": "object"
                  },
                  "name": "create_database"
                },
                {
                  "description": "Query a database",
                  "inputschema": {
                    "properties": {
                      "databaseId": {
                        "description": "ID of the database",
                        "type": "string"
                      },
                      "filter": {
                        "description": "Filter conditions",
                        "type": "object"
                      },
                      "sort": {
                        "description": "Sort conditions",
                        "type": "object"
                      }
                    },
                    "required": [
                      "databaseId"
                    ],
                    "type": "object"
                  },
                  "name": "query_database"
                },
                {
                  "description": "Update a block's content (must use same type as original block, use read_page first to get block IDs and types)",
                  "inputschema": {
                    "properties": {
                      "blockId": {
                        "description": "ID of the block to update",
                        "type": "string"
                      },
                      "content": {
                        "description": "New content for the block",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of block",
                        "enum": [
                          "paragraph",
                          "heading_1",
                          "heading_2",
                          "heading_3",
                          "bulleted_list_item",
                          "numbered_list_item"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "blockId",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "update_block"
                },
                {
                  "description": "Delete a specific block from a page",
                  "inputschema": {
                    "properties": {
                      "blockId": {
                        "description": "ID of the block to delete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "blockId"
                    ],
                    "type": "object"
                  },
                  "name": "delete_block"
                },
                {
                  "description": "Update a database item's properties (use query_database first to see required property structure)",
                  "inputschema": {
                    "properties": {
                      "pageId": {
                        "description": "ID of the database item (page) to update",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Properties to update",
                        "type": "object"
                      }
                    },
                    "required": [
                      "pageId",
                      "properties"
                    ],
                    "type": "object"
                  },
                  "name": "update_database_item"
                },
                {
                  "description": "Retrieve a database's metadata",
                  "inputschema": {
                    "properties": {
                      "databaseId": {
                        "description": "ID of the database to retrieve",
                        "type": "string"
                      }
                    },
                    "required": [
                      "databaseId"
                    ],
                    "type": "object"
                  },
                  "name": "retrieve_database"
                },
                {
                  "description": "Update a database's properties",
                  "inputschema": {
                    "properties": {
                      "databaseId": {
                        "description": "ID of the database to update",
                        "type": "string"
                      },
                      "description": {
                        "description": "New description for the database",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Properties schema to update",
                        "type": "object"
                      },
                      "title": {
                        "description": "New title for the database",
                        "type": "string"
                      }
                    },
                    "required": [
                      "databaseId"
                    ],
                    "type": "object"
                  },
                  "name": "update_database"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:24Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 3
    },
    "varunneal": {
      "mcpproviderid": "varunneal",
      "self": "#/mcpproviders/varunneal",
      "xid": "/mcpproviders/varunneal",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:29.214076009Z",
      "modifiedat": "2025-05-26T16:42:29.214076009Z",

      "serversurl": "#/mcpproviders/varunneal/servers",
      "servers": {
        "spotify-mcp": {
          "serverid": "spotify-mcp",
          "self": "#/mcpproviders/varunneal/servers/spotify-mcp",
          "xid": "/mcpproviders/varunneal/servers/spotify-mcp",

          "metaurl": "#/mcpproviders/varunneal/servers/spotify-mcp/meta",
          "meta": {
            "serverid": "spotify-mcp",
            "self": "#/mcpproviders/varunneal/servers/spotify-mcp/meta",
            "xid": "/mcpproviders/varunneal/servers/spotify-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:29.214076009Z",
            "modifiedat": "2025-05-26T16:42:29.214076009Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/varunneal/servers/spotify-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/varunneal/servers/spotify-mcp/versions",
          "versions": {
            "1": {
              "serverid": "spotify-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/varunneal/servers/spotify-mcp/versions/1",
              "xid": "/mcpproviders/varunneal/servers/spotify-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.varunneal/spotify-mcp",
              "isdefault": true,
              "description": "MCP to connect your LLM with Spotify.",
              "createdat": "2025-05-26T16:42:29.214076009Z",
              "modifiedat": "2025-05-26T16:42:29.214076009Z",
              "ancestor": "1",
              "id": "20c38c50-831e-478a-9f52-064d3ad8a6ce",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "YOUR_CLIENT_ID",
                      "name": "SPOTIFY_CLIENT_ID"
                    },
                    {
                      "description": "YOUR_CLIENT_SECRET",
                      "name": "SPOTIFY_CLIENT_SECRET"
                    },
                    {
                      "description": "http://127.0.0.1:8080/callback",
                      "name": "SPOTIFY_REDIRECT_URI"
                    }
                  ],
                  "name": "spotify-mcp",
                  "package_arguments": [
                    {
                      "default": "--directory /path/to/spotify_mcp",
                      "description": "Set the working directory",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory /path/to/spotify_mcp",
                      "type": "named",
                      "value": "--directory /path/to/spotify_mcp",
                      "value_hint": "/path/to/spotify_mcp"
                    },
                    {
                      "default": "spotify-mcp",
                      "description": "Program to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "spotify-mcp",
                      "value_hint": "spotify-mcp"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.2.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "896675928",
                "source": "github",
                "url": "https://github.com/varunneal/spotify-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Manages the current playback with the following actions: - get: Get information about user's current track. - start: Starts playing new item or resumes current playback if called with no uri. - pause: Pauses current playback. - skip: Skips current track.",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "description": "Action to perform: 'get', 'start', 'pause' or 'skip'.",
                        "type": "string"
                      },
                      "num_skips": {
                        "description": "Number of tracks to skip for `skip` action.",
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "spotify_uri": {
                        "description": "Spotify uri of item to play for 'start' action. If omitted, resumes current playback.",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "action"
                    ],
                    "type": "object"
                  },
                  "name": "SpotifyPlayback"
                },
                {
                  "description": "Manage the playback queue - get the queue or add tracks.",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "description": "Action to perform: 'add' or 'get'.",
                        "type": "string"
                      },
                      "track_id": {
                        "description": "Track ID to add to queue (required for add action)",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "action"
                    ],
                    "type": "object"
                  },
                  "name": "SpotifyQueue"
                },
                {
                  "description": "Get detailed information about a Spotify item (track, album, artist, or playlist).",
                  "inputschema": {
                    "properties": {
                      "item_uri": {
                        "description": "URI of the item to get information about. If 'playlist' or 'album', returns its tracks. If 'artist', returns albums and top tracks.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "item_uri"
                    ],
                    "type": "object"
                  },
                  "name": "SpotifyGetInfo"
                },
                {
                  "description": "Search for tracks, albums, artists, or playlists on Spotify.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "description": "Maximum number of items to return",
                        "type": "integer"
                      },
                      "qtype": {
                        "description": "Type of items to search for (track, album, artist, playlist, or comma-separated combination)",
                        "type": "string"
                      },
                      "query": {
                        "description": "query term",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "SpotifySearch"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:13Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "vectorize-io": {
      "mcpproviderid": "vectorize-io",
      "self": "#/mcpproviders/vectorize-io",
      "xid": "/mcpproviders/vectorize-io",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:21.937021231Z",
      "modifiedat": "2025-05-26T16:41:21.937021231Z",

      "serversurl": "#/mcpproviders/vectorize-io/servers",
      "servers": {
        "vectorize-mcp-server": {
          "serverid": "vectorize-mcp-server",
          "self": "#/mcpproviders/vectorize-io/servers/vectorize-mcp-server",
          "xid": "/mcpproviders/vectorize-io/servers/vectorize-mcp-server",

          "metaurl": "#/mcpproviders/vectorize-io/servers/vectorize-mcp-server/meta",
          "meta": {
            "serverid": "vectorize-mcp-server",
            "self": "#/mcpproviders/vectorize-io/servers/vectorize-mcp-server/meta",
            "xid": "/mcpproviders/vectorize-io/servers/vectorize-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:21.937021231Z",
            "modifiedat": "2025-05-26T16:41:21.937021231Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/vectorize-io/servers/vectorize-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/vectorize-io/servers/vectorize-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "vectorize-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/vectorize-io/servers/vectorize-mcp-server/versions/1",
              "xid": "/mcpproviders/vectorize-io/servers/vectorize-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.vectorize-io/vectorize-mcp-server",
              "isdefault": true,
              "description": "Official Vectorize MCP Server",
              "createdat": "2025-05-26T16:41:21.937021231Z",
              "modifiedat": "2025-05-26T16:41:21.937021231Z",
              "ancestor": "1",
              "id": "c1b727f7-1570-465f-8153-585840de260a",
              "packages": [
                {
                  "name": "@vectorize-io/vectorize-mcp-server",
                  "package_arguments": [
                    {
                      "default": "Generate a financial status report about the company",
                      "description": "Generate a financial status report about the company",
                      "format": "string",
                      "is_required": true,
                      "name": "Generate a financial status report about the company",
                      "type": "named",
                      "value": "Generate a financial status report about the company",
                      "value_hint": "Generate a financial status report about the company"
                    },
                    {
                      "default": "true",
                      "description": "true",
                      "format": "string",
                      "is_required": true,
                      "name": "true",
                      "type": "named",
                      "value": "true",
                      "value_hint": "true"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.4.3"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "946057362",
                "source": "github",
                "url": "https://github.com/vectorize-io/vectorize-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve documents from the configured pipeline.",
                  "inputschema": {
                    "properties": {
                      "k": {
                        "default": 4,
                        "description": "The number of documents to retrieve.",
                        "type": "number"
                      },
                      "question": {
                        "description": "The term to search for.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "question"
                    ],
                    "type": "object"
                  },
                  "name": "retrieve"
                },
                {
                  "description": "Generate a deep research on the configured pipeline.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The deep research query.",
                        "type": "string"
                      },
                      "webSearch": {
                        "description": "Whether to perform a web search.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "query",
                      "webSearch"
                    ],
                    "type": "object"
                  },
                  "name": "deep-research"
                },
                {
                  "description": "Perform text extraction and chunking on a document.",
                  "inputschema": {
                    "properties": {
                      "base64Document": {
                        "description": "Document encoded in base64.",
                        "type": "string"
                      },
                      "contentType": {
                        "description": "Document content type.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base64Document",
                      "contentType"
                    ],
                    "type": "object"
                  },
                  "name": "extract"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:18Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "vidhupv": {
      "mcpproviderid": "vidhupv",
      "self": "#/mcpproviders/vidhupv",
      "xid": "/mcpproviders/vidhupv",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:35.319904217Z",
      "modifiedat": "2025-05-26T16:41:35.319904217Z",

      "serversurl": "#/mcpproviders/vidhupv/servers",
      "servers": {
        "x-mcp": {
          "serverid": "x-mcp",
          "self": "#/mcpproviders/vidhupv/servers/x-mcp",
          "xid": "/mcpproviders/vidhupv/servers/x-mcp",

          "metaurl": "#/mcpproviders/vidhupv/servers/x-mcp/meta",
          "meta": {
            "serverid": "x-mcp",
            "self": "#/mcpproviders/vidhupv/servers/x-mcp/meta",
            "xid": "/mcpproviders/vidhupv/servers/x-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:35.319904217Z",
            "modifiedat": "2025-05-26T16:41:35.319904217Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/vidhupv/servers/x-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/vidhupv/servers/x-mcp/versions",
          "versions": {
            "1": {
              "serverid": "x-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/vidhupv/servers/x-mcp/versions/1",
              "xid": "/mcpproviders/vidhupv/servers/x-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.vidhupv/x-mcp",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:35.319904217Z",
              "modifiedat": "2025-05-26T16:41:35.319904217Z",
              "ancestor": "1",
              "id": "a24e506b-b16b-412d-b806-fcf7e39b4549",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_api_key",
                      "name": "TWITTER_API_KEY"
                    },
                    {
                      "description": "your_api_secret",
                      "name": "TWITTER_API_SECRET"
                    },
                    {
                      "description": "your_access_token",
                      "name": "TWITTER_ACCESS_TOKEN"
                    },
                    {
                      "description": "your_access_token_secret",
                      "name": "TWITTER_ACCESS_TOKEN_SECRET"
                    }
                  ],
                  "name": "x-mcp",
                  "package_arguments": [
                    {
                      "default": "x-mcp",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "x-mcp",
                      "value_hint": "x-mcp"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "898698501",
                "source": "github",
                "url": "https://github.com/vidhupv/x-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Create a draft tweet",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "The content of the tweet",
                        "type": "string"
                      }
                    },
                    "required": [
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "create_draft_tweet"
                },
                {
                  "description": "Create a draft tweet thread",
                  "inputschema": {
                    "properties": {
                      "contents": {
                        "description": "An array of tweet contents for the thread",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "contents"
                    ],
                    "type": "object"
                  },
                  "name": "create_draft_thread"
                },
                {
                  "description": "List all draft tweets and threads",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_drafts"
                },
                {
                  "description": "Publish a draft tweet or thread",
                  "inputschema": {
                    "properties": {
                      "draft_id": {
                        "description": "ID of the draft to publish",
                        "type": "string"
                      }
                    },
                    "required": [
                      "draft_id"
                    ],
                    "type": "object"
                  },
                  "name": "publish_draft"
                },
                {
                  "description": "Delete a draft tweet or thread",
                  "inputschema": {
                    "properties": {
                      "draft_id": {
                        "description": "ID of the draft to delete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "draft_id"
                    ],
                    "type": "object"
                  },
                  "name": "delete_draft"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:02Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "vishalmysore": {
      "mcpproviderid": "vishalmysore",
      "self": "#/mcpproviders/vishalmysore",
      "xid": "/mcpproviders/vishalmysore",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:07.720551094Z",
      "modifiedat": "2025-05-26T16:42:07.720551094Z",

      "serversurl": "#/mcpproviders/vishalmysore/servers",
      "servers": {
        "choturobo": {
          "serverid": "choturobo",
          "self": "#/mcpproviders/vishalmysore/servers/choturobo",
          "xid": "/mcpproviders/vishalmysore/servers/choturobo",

          "metaurl": "#/mcpproviders/vishalmysore/servers/choturobo/meta",
          "meta": {
            "serverid": "choturobo",
            "self": "#/mcpproviders/vishalmysore/servers/choturobo/meta",
            "xid": "/mcpproviders/vishalmysore/servers/choturobo/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:07.720551094Z",
            "modifiedat": "2025-05-26T16:42:07.720551094Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/vishalmysore/servers/choturobo/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/vishalmysore/servers/choturobo/versions",
          "versions": {
            "1": {
              "serverid": "choturobo",
              "versionid": "1",
              "self": "#/mcpproviders/vishalmysore/servers/choturobo/versions/1",
              "xid": "/mcpproviders/vishalmysore/servers/choturobo/versions/1",
              "epoch": 1,
              "name": "io.github.vishalmysore/choturobo",
              "isdefault": true,
              "description": "Integrate Arduino-based robotics (using the NodeMCU ESP32 or Arduino Nano 368 board) with AI using the MCP (Model Context Protocol) framework from Claude Anthropic",
              "createdat": "2025-05-26T16:42:07.720551094Z",
              "modifiedat": "2025-05-26T16:42:07.720551094Z",
              "ancestor": "1",
              "id": "466926d1-72a6-42be-b2c1-ef94d44e5a67",
              "packages": [
                {
                  "name": "choturoboserver",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "name": "steps"
                    }
                  ],
                  "description": "Prompt to move Chotu a specified number of steps.",
                  "name": "move-chotu"
                },
                {
                  "arguments": [],
                  "description": "Prompt to initialize Chotu and prepare for operation.",
                  "name": "start-chotu"
                },
                {
                  "arguments": [],
                  "description": "Prompt to stop Chotu safely and shut down operations.",
                  "name": "stop-chotu"
                },
                {
                  "arguments": [
                    {
                      "name": "direction"
                    }
                  ],
                  "description": "Prompt to turn Chotu left or right.",
                  "name": "turn-chotu"
                },
                {
                  "arguments": [
                    {
                      "name": "speed"
                    }
                  ],
                  "description": "Prompt to set Chotu's speed.",
                  "name": "set-chotu-speed"
                }
              ],
              "repository": {
                "id": "947567270",
                "source": "github",
                "url": "https://github.com/vishalmysore/choturobo"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Blink the eyes of Chotu for a specified time.",
                  "inputschema": {
                    "properties": {
                      "time": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "time"
                    ],
                    "type": "object"
                  },
                  "name": "chotuBlinkEyes"
                },
                {
                  "description": "Sound a buzzer for a specified time.",
                  "inputschema": {
                    "properties": {
                      "time": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "time"
                    ],
                    "type": "object"
                  },
                  "name": "chotuBuzzSound"
                },
                {
                  "description": "Run a motor at a certain speed.",
                  "inputschema": {
                    "properties": {
                      "speed": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "speed"
                    ],
                    "type": "object"
                  },
                  "name": "runMotor"
                },
                {
                  "description": "Move a servo motor to a specific angle.",
                  "inputschema": {
                    "properties": {
                      "angle": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "angle"
                    ],
                    "type": "object"
                  },
                  "name": "moveServo"
                },
                {
                  "description": "Turn a fan on or off.",
                  "inputschema": {
                    "properties": {
                      "state": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "state"
                    ],
                    "type": "object"
                  },
                  "name": "controlFan"
                },
                {
                  "description": "Switch a relay on or off.",
                  "inputschema": {
                    "properties": {
                      "state": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "state"
                    ],
                    "type": "object"
                  },
                  "name": "toggleRelay"
                },
                {
                  "description": "Read temperature from a sensor.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "readTemperature"
                },
                {
                  "description": "Measure distance using an ultrasonic sensor.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "readDistance"
                },
                {
                  "description": "Move the motor clockwise for a number of steps.",
                  "inputschema": {
                    "properties": {
                      "steps": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "steps"
                    ],
                    "type": "object"
                  },
                  "name": "moveBackward"
                },
                {
                  "description": "Move the motor counterclockwise for a number of steps.",
                  "inputschema": {
                    "properties": {
                      "steps": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "steps"
                    ],
                    "type": "object"
                  },
                  "name": "moveForward"
                },
                {
                  "description": "Make Chotu speak a given message.",
                  "inputschema": {
                    "properties": {
                      "message": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "message"
                    ],
                    "type": "object"
                  },
                  "name": "makeChotuSpeak"
                },
                {
                  "description": "Make Chotu sing a given message.",
                  "inputschema": {
                    "properties": {
                      "message": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "message"
                    ],
                    "type": "object"
                  },
                  "name": "makeChotuSing"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:03:14Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "vivekVells": {
      "mcpproviderid": "vivekVells",
      "self": "#/mcpproviders/vivekVells",
      "xid": "/mcpproviders/vivekVells",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:29.097664223Z",
      "modifiedat": "2025-05-26T16:41:29.097664223Z",

      "serversurl": "#/mcpproviders/vivekVells/servers",
      "servers": {
        "mcp-pandoc": {
          "serverid": "mcp-pandoc",
          "self": "#/mcpproviders/vivekVells/servers/mcp-pandoc",
          "xid": "/mcpproviders/vivekVells/servers/mcp-pandoc",

          "metaurl": "#/mcpproviders/vivekVells/servers/mcp-pandoc/meta",
          "meta": {
            "serverid": "mcp-pandoc",
            "self": "#/mcpproviders/vivekVells/servers/mcp-pandoc/meta",
            "xid": "/mcpproviders/vivekVells/servers/mcp-pandoc/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:29.097664223Z",
            "modifiedat": "2025-05-26T16:41:29.097664223Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/vivekVells/servers/mcp-pandoc/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/vivekVells/servers/mcp-pandoc/versions",
          "versions": {
            "1": {
              "serverid": "mcp-pandoc",
              "versionid": "1",
              "self": "#/mcpproviders/vivekVells/servers/mcp-pandoc/versions/1",
              "xid": "/mcpproviders/vivekVells/servers/mcp-pandoc/versions/1",
              "epoch": 1,
              "name": "io.github.vivekvells/mcp-pandoc",
              "isdefault": true,
              "description": "MCP server for document format conversion using pandoc.",
              "createdat": "2025-05-26T16:41:29.097664223Z",
              "modifiedat": "2025-05-26T16:41:29.097664223Z",
              "ancestor": "1",
              "id": "a0f6fd01-5eb2-4aca-b4a6-c67eb6e0c5da",
              "packages": [
                {
                  "name": "mcp-pandoc",
                  "registry_name": "unknown",
                  "version": "0.3.3"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "900427746",
                "source": "github",
                "url": "https://github.com/vivekVells/mcp-pandoc"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Converts content between different formats. Transforms input content from any supported format into the specified output format.\n\n🚨 CRITICAL REQUIREMENTS - PLEASE READ:\n1. PDF Conversion:\n   * You MUST install TeX Live BEFORE attempting PDF conversion:\n   * Ubuntu/Debian: `sudo apt-get install texlive-xetex`\n   * macOS: `brew install texlive`\n   * Windows: Install MiKTeX or TeX Live from https://miktex.org/ or https://tug.org/texlive/\n   * PDF conversion will FAIL without this installation\n\n2. File Paths - EXPLICIT REQUIREMENTS:\n   * When asked to save or convert to a file, you MUST provide:\n     - Complete directory path\n     - Filename\n     - File extension\n   * Example request: 'Write a story and save as PDF'\n   * You MUST specify: '/path/to/story.pdf' or 'C:\\Documents\\story.pdf'\n   * The tool will NOT automatically generate filenames or extensions\n\n3. File Location After Conversion:\n   * After successful conversion, the tool will display the exact path where the file is saved\n   * Look for message: 'Content successfully converted and saved to: [file_path]'\n   * You can find your converted file at the specified location\n   * If no path is specified, files may be saved in system temp directory (/tmp/ on Unix systems)\n   * For better control, always provide explicit output file paths\n\nSupported formats:\n- Basic formats: txt, html, markdown\n- Advanced formats (REQUIRE complete file paths): pdf, docx, rst, latex, epub\n\n✅ CORRECT Usage Examples:\n1. 'Convert this text to HTML' (basic conversion)\n   - Tool will show converted content\n\n2. 'Save this text as PDF at /documents/story.pdf'\n   - Correct: specifies path + filename + extension\n   - Tool will show: 'Content successfully converted and saved to: /documents/story.pdf'\n\n❌ INCORRECT Usage Examples:\n1. 'Save this as PDF in /documents/'\n   - Missing filename and extension\n2. 'Convert to PDF'\n   - Missing complete file path\n\nWhen requesting conversion, ALWAYS specify:\n1. The content or input file\n2. The desired output format\n3. For advanced formats: complete output path + filename + extension\nExample: 'Convert this markdown to PDF and save as /path/to/output.pdf'\n\nNote: After conversion, always check the success message for the exact file location.",
                  "inputschema": {
                    "allOf": [
                      {
                        "if": {
                          "properties": {
                            "output_format": {
                              "enum": [
                                "pdf",
                                "docx",
                                "rst",
                                "latex",
                                "epub"
                              ]
                            }
                          }
                        },
                        "then": {
                          "required": [
                            "output_file"
                          ]
                        }
                      }
                    ],
                    "oneOf": [
                      {
                        "required": [
                          "contents"
                        ]
                      },
                      {
                        "required": [
                          "input_file"
                        ]
                      }
                    ],
                    "properties": {
                      "contents": {
                        "description": "The content to be converted (required if input_file not provided)",
                        "type": "string"
                      },
                      "input_file": {
                        "description": "Complete path to input file including filename and extension (e.g., '/path/to/input.md')",
                        "type": "string"
                      },
                      "input_format": {
                        "default": "markdown",
                        "description": "Source format of the content (defaults to markdown)",
                        "enum": [
                          "markdown",
                          "html",
                          "pdf",
                          "docx",
                          "rst",
                          "latex",
                          "epub",
                          "txt"
                        ],
                        "type": "string"
                      },
                      "output_file": {
                        "description": "Complete path where to save the output including filename and extension (required for pdf, docx, rst, latex, epub formats)",
                        "type": "string"
                      },
                      "output_format": {
                        "default": "markdown",
                        "description": "Desired output format (defaults to markdown)",
                        "enum": [
                          "markdown",
                          "html",
                          "pdf",
                          "docx",
                          "rst",
                          "latex",
                          "epub",
                          "txt"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "convert-contents"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:12:21Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "vivekkumarneu": {
      "mcpproviderid": "vivekkumarneu",
      "self": "#/mcpproviders/vivekkumarneu",
      "xid": "/mcpproviders/vivekkumarneu",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:04.08034896Z",
      "modifiedat": "2025-05-26T16:42:04.08034896Z",

      "serversurl": "#/mcpproviders/vivekkumarneu/servers",
      "servers": {
        "mcp-lucene-server": {
          "serverid": "mcp-lucene-server",
          "self": "#/mcpproviders/vivekkumarneu/servers/mcp-lucene-server",
          "xid": "/mcpproviders/vivekkumarneu/servers/mcp-lucene-server",

          "metaurl": "#/mcpproviders/vivekkumarneu/servers/mcp-lucene-server/meta",
          "meta": {
            "serverid": "mcp-lucene-server",
            "self": "#/mcpproviders/vivekkumarneu/servers/mcp-lucene-server/meta",
            "xid": "/mcpproviders/vivekkumarneu/servers/mcp-lucene-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:04.08034896Z",
            "modifiedat": "2025-05-26T16:42:04.08034896Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/vivekkumarneu/servers/mcp-lucene-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/vivekkumarneu/servers/mcp-lucene-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-lucene-server",
              "versionid": "1",
              "self": "#/mcpproviders/vivekkumarneu/servers/mcp-lucene-server/versions/1",
              "xid": "/mcpproviders/vivekkumarneu/servers/mcp-lucene-server/versions/1",
              "epoch": 1,
              "name": "io.github.vivekkumarneu/mcp-lucene-server",
              "isdefault": true,
              "description": "MCP Lucene Server",
              "createdat": "2025-05-26T16:42:04.08034896Z",
              "modifiedat": "2025-05-26T16:42:04.08034896Z",
              "ancestor": "1",
              "id": "5446ebef-4e06-494b-a50f-3b02ff493274",
              "packages": [
                {
                  "name": "VivekKumarNeu/MCP-Lucene-Server",
                  "package_arguments": [
                    {
                      "default": "doc2",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "doc2",
                      "value_hint": "doc2"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "969059271",
                "source": "github",
                "url": "https://github.com/VivekKumarNeu/MCP-Lucene-Server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:09:32Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "voska": {
      "mcpproviderid": "voska",
      "self": "#/mcpproviders/voska",
      "xid": "/mcpproviders/voska",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:39.920342272Z",
      "modifiedat": "2025-05-26T16:42:39.920342272Z",

      "serversurl": "#/mcpproviders/voska/servers",
      "servers": {
        "hass-mcp": {
          "serverid": "hass-mcp",
          "self": "#/mcpproviders/voska/servers/hass-mcp",
          "xid": "/mcpproviders/voska/servers/hass-mcp",

          "metaurl": "#/mcpproviders/voska/servers/hass-mcp/meta",
          "meta": {
            "serverid": "hass-mcp",
            "self": "#/mcpproviders/voska/servers/hass-mcp/meta",
            "xid": "/mcpproviders/voska/servers/hass-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:39.920342272Z",
            "modifiedat": "2025-05-26T16:42:39.920342272Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/voska/servers/hass-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/voska/servers/hass-mcp/versions",
          "versions": {
            "1": {
              "serverid": "hass-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/voska/servers/hass-mcp/versions/1",
              "xid": "/mcpproviders/voska/servers/hass-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.voska/hass-mcp",
              "isdefault": true,
              "description": "Home Assistant MCP Server",
              "createdat": "2025-05-26T16:42:39.920342272Z",
              "modifiedat": "2025-05-26T16:42:39.920342272Z",
              "ancestor": "1",
              "id": "67c71178-8632-4d67-abad-c28f6e58c87f",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "http://homeassistant.local:8123",
                      "name": "HA_URL"
                    },
                    {
                      "description": "YOUR_LONG_LIVED_TOKEN",
                      "name": "HA_TOKEN"
                    }
                  ],
                  "name": "hass-mcp",
                  "package_arguments": [
                    {
                      "default": "-i",
                      "description": "-i",
                      "format": "string",
                      "is_required": true,
                      "name": "-i",
                      "type": "named",
                      "value": "-i"
                    },
                    {
                      "default": "--rm",
                      "description": "--rm",
                      "format": "string",
                      "is_required": true,
                      "name": "--rm",
                      "type": "named",
                      "value": "--rm"
                    },
                    {
                      "default": "-e HA_URL",
                      "description": "-e HA_URL",
                      "format": "string",
                      "is_required": true,
                      "name": "-e HA_URL",
                      "type": "named",
                      "value": "-e HA_URL",
                      "value_hint": "HA_URL"
                    },
                    {
                      "default": "-e HA_TOKEN",
                      "description": "-e HA_TOKEN",
                      "format": "string",
                      "is_required": true,
                      "name": "-e HA_TOKEN",
                      "type": "named",
                      "value": "-e HA_TOKEN",
                      "value_hint": "HA_TOKEN"
                    },
                    {
                      "default": "voska/hass-mcp",
                      "description": "voska/hass-mcp",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "voska/hass-mcp",
                      "value_hint": "voska/hass-mcp"
                    }
                  ],
                  "registry_name": "docker",
                  "version": "0.1.0"
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "The type of trigger for the automation",
                      "name": "trigger_type",
                      "required": true
                    },
                    {
                      "description": "Optional entity to use as the trigger source",
                      "name": "entity_id",
                      "required": false
                    }
                  ],
                  "description": "Guide a user through creating a Home Assistant automation",
                  "name": "create_automation"
                },
                {
                  "arguments": [
                    {
                      "description": "The entity ID of the automation to troubleshoot",
                      "name": "automation_id",
                      "required": true
                    }
                  ],
                  "description": "Help a user troubleshoot an automation that isn't working",
                  "name": "debug_automation"
                },
                {
                  "arguments": [
                    {
                      "description": "The entity ID having issues",
                      "name": "entity_id",
                      "required": true
                    }
                  ],
                  "description": "Guide a user through troubleshooting issues with an entity",
                  "name": "troubleshoot_entity"
                },
                {
                  "arguments": [],
                  "description": "Analyze usage patterns and suggest optimized routines based on actual behavior",
                  "name": "routine_optimizer"
                },
                {
                  "arguments": [],
                  "description": "Review all automations, find conflicts, redundancies, or improvement opportunities",
                  "name": "automation_health_check"
                },
                {
                  "arguments": [],
                  "description": "Audit entity names and suggest standardization improvements",
                  "name": "entity_naming_consistency"
                },
                {
                  "arguments": [],
                  "description": "Create optimized dashboards based on user preferences and usage patterns",
                  "name": "dashboard_layout_generator"
                }
              ],
              "repository": {
                "id": "949564493",
                "source": "github",
                "url": "https://github.com/voska/hass-mcp"
              },
              "resources": [
                {
                  "description": "Get the state of a Home Assistant entity as a resource",
                  "mimetype": "text/markdown",
                  "name": "entity",
                  "uritemplate": "hass://entities/{entity_id}"
                },
                {
                  "description": "Get a list of all Home Assistant entities as a resource",
                  "mimetype": "text/markdown",
                  "name": "entities",
                  "uritemplate": "hass://entities"
                },
                {
                  "description": "Search for entities matching a query string with a specified result limit",
                  "mimetype": "text/markdown",
                  "name": "search_entities",
                  "uritemplate": "hass://search/{query}/{limit}"
                },
                {
                  "description": "Get detailed information about a Home Assistant entity as a resource",
                  "mimetype": "text/markdown",
                  "name": "entity_detailed",
                  "uritemplate": "hass://entities/{entity_id}/detailed"
                },
                {
                  "description": "Get a list of entities for a specific domain as a resource",
                  "mimetype": "text/markdown",
                  "name": "entities_by_domain",
                  "uritemplate": "hass://entities/domain/{domain}"
                }
              ],
              "tools": [
                {
                  "description": "Get the Home Assistant version",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_version"
                },
                {
                  "description": "Get the state of a Home Assistant entity with optional field filtering",
                  "inputschema": {
                    "properties": {
                      "detailed": {
                        "description": "Return all entity fields without filtering",
                        "type": "boolean"
                      },
                      "entity_id": {
                        "description": "The entity ID to get (e.g. 'light.living_room')",
                        "type": "string"
                      },
                      "fields": {
                        "description": "Optional list of fields to include",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "entity_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_entity"
                },
                {
                  "description": "Perform an action on a Home Assistant entity (on, off, toggle)",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "description": "Action to perform ('on', 'off', 'toggle')",
                        "type": "string"
                      },
                      "entity_id": {
                        "description": "The entity ID to control",
                        "type": "string"
                      }
                    },
                    "required": [
                      "entity_id",
                      "action"
                    ],
                    "type": "object"
                  },
                  "name": "entity_action"
                },
                {
                  "description": "Get a list of Home Assistant entities with optional filtering",
                  "inputschema": {
                    "properties": {
                      "detailed": {
                        "description": "Return all entity fields without filtering",
                        "type": "boolean"
                      },
                      "domain": {
                        "description": "Optional domain to filter by",
                        "type": "string"
                      },
                      "fields": {
                        "description": "Optional list of specific fields to include",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "limit": {
                        "description": "Maximum number of entities to return",
                        "type": "integer"
                      },
                      "search_query": {
                        "description": "Optional search term to filter entities",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_entities"
                },
                {
                  "description": "Search for entities matching a query string",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "description": "Maximum number of results to return",
                        "type": "integer"
                      },
                      "query": {
                        "description": "Search query to match entity IDs, names, and attributes",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_entities_tool"
                },
                {
                  "description": "Get a summary of entities in a specific domain",
                  "inputschema": {
                    "properties": {
                      "domain": {
                        "description": "The domain to summarize",
                        "type": "string"
                      },
                      "example_limit": {
                        "description": "Maximum number of examples to include for each state",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "domain"
                    ],
                    "type": "object"
                  },
                  "name": "domain_summary"
                },
                {
                  "description": "Get a comprehensive overview of the entire Home Assistant system",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "system_overview"
                },
                {
                  "description": "Get a list of all automations from Home Assistant",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_automations"
                },
                {
                  "description": "Restart Home Assistant",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "restart_ha"
                },
                {
                  "description": "Call any Home Assistant service (low-level API access)",
                  "inputschema": {
                    "properties": {
                      "data": {
                        "description": "Optional data to pass to the service",
                        "type": [
                          "object",
                          "null"
                        ]
                      },
                      "domain": {
                        "description": "The domain of the service",
                        "type": "string"
                      },
                      "service": {
                        "description": "The service to call",
                        "type": "string"
                      }
                    },
                    "required": [
                      "domain",
                      "service"
                    ],
                    "type": "object"
                  },
                  "name": "call_service"
                },
                {
                  "description": "Get the history of an entity's state changes",
                  "inputschema": {
                    "properties": {
                      "entity_id": {
                        "description": "The entity ID to get history for",
                        "type": "string"
                      },
                      "hours": {
                        "description": "Number of hours of history to retrieve",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "entity_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_history"
                },
                {
                  "description": "Get the Home Assistant error log for troubleshooting",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_error_log"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:08:01Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "vrknetha": {
      "mcpproviderid": "vrknetha",
      "self": "#/mcpproviders/vrknetha",
      "xid": "/mcpproviders/vrknetha",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:57.166245128Z",
      "modifiedat": "2025-05-26T16:41:57.166245128Z",

      "serversurl": "#/mcpproviders/vrknetha/servers",
      "servers": {
        "mcp-server-firecrawl": {
          "serverid": "mcp-server-firecrawl",
          "self": "#/mcpproviders/vrknetha/servers/mcp-server-firecrawl",
          "xid": "/mcpproviders/vrknetha/servers/mcp-server-firecrawl",

          "metaurl": "#/mcpproviders/vrknetha/servers/mcp-server-firecrawl/meta",
          "meta": {
            "serverid": "mcp-server-firecrawl",
            "self": "#/mcpproviders/vrknetha/servers/mcp-server-firecrawl/meta",
            "xid": "/mcpproviders/vrknetha/servers/mcp-server-firecrawl/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:57.166245128Z",
            "modifiedat": "2025-05-26T16:41:57.166245128Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/vrknetha/servers/mcp-server-firecrawl/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/vrknetha/servers/mcp-server-firecrawl/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-firecrawl",
              "versionid": "1",
              "self": "#/mcpproviders/vrknetha/servers/mcp-server-firecrawl/versions/1",
              "xid": "/mcpproviders/vrknetha/servers/mcp-server-firecrawl/versions/1",
              "epoch": 1,
              "name": "io.github.vrknetha/mcp-server-firecrawl",
              "isdefault": true,
              "description": "Official Firecrawl MCP Server - Adds powerful web scraping to Cursor, Claude and any other LLM clients.",
              "createdat": "2025-05-26T16:41:57.166245128Z",
              "modifiedat": "2025-05-26T16:41:57.166245128Z",
              "ancestor": "1",
              "id": "3947e186-beb0-4372-8f74-045047dacebd",
              "packages": [
                {
                  "name": "firecrawl-mcp",
                  "registry_name": "unknown",
                  "version": "1.9.0"
                }
              ],
              "repository": {
                "id": "899407931",
                "source": "github",
                "url": "https://github.com/mendableai/firecrawl-mcp-server"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:52Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "wanaku-ai": {
      "mcpproviderid": "wanaku-ai",
      "self": "#/mcpproviders/wanaku-ai",
      "xid": "/mcpproviders/wanaku-ai",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:50.785699507Z",
      "modifiedat": "2025-05-26T16:41:50.785699507Z",

      "serversurl": "#/mcpproviders/wanaku-ai/servers",
      "servers": {
        "wanaku": {
          "serverid": "wanaku",
          "self": "#/mcpproviders/wanaku-ai/servers/wanaku",
          "xid": "/mcpproviders/wanaku-ai/servers/wanaku",

          "metaurl": "#/mcpproviders/wanaku-ai/servers/wanaku/meta",
          "meta": {
            "serverid": "wanaku",
            "self": "#/mcpproviders/wanaku-ai/servers/wanaku/meta",
            "xid": "/mcpproviders/wanaku-ai/servers/wanaku/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:50.785699507Z",
            "modifiedat": "2025-05-26T16:41:50.785699507Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/wanaku-ai/servers/wanaku/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/wanaku-ai/servers/wanaku/versions",
          "versions": {
            "1": {
              "serverid": "wanaku",
              "versionid": "1",
              "self": "#/mcpproviders/wanaku-ai/servers/wanaku/versions/1",
              "xid": "/mcpproviders/wanaku-ai/servers/wanaku/versions/1",
              "epoch": 1,
              "name": "io.github.wanaku-ai/wanaku",
              "isdefault": true,
              "description": "Wanaku MCP Router",
              "createdat": "2025-05-26T16:41:50.785699507Z",
              "modifiedat": "2025-05-26T16:41:50.785699507Z",
              "ancestor": "1",
              "id": "f3285cc9-1d33-472f-aa28-0b9d7723f877",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "${input:apiKey}",
                      "name": "API_KEY"
                    }
                  ],
                  "name": "wanaku-ai/wanaku",
                  "registry_name": "npm",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "925674818",
                "source": "github",
                "url": "https://github.com/wanaku-ai/wanaku"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:38Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "whataboutyou-ai": {
      "mcpproviderid": "whataboutyou-ai",
      "self": "#/mcpproviders/whataboutyou-ai",
      "xid": "/mcpproviders/whataboutyou-ai",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:25.495769716Z",
      "modifiedat": "2025-05-26T16:41:25.495769716Z",

      "serversurl": "#/mcpproviders/whataboutyou-ai/servers",
      "servers": {
        "eunomia-mcp-server": {
          "serverid": "eunomia-mcp-server",
          "self": "#/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server",
          "xid": "/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server",

          "metaurl": "#/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server/meta",
          "meta": {
            "serverid": "eunomia-mcp-server",
            "self": "#/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server/meta",
            "xid": "/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:25.495769716Z",
            "modifiedat": "2025-05-26T16:41:25.495769716Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "eunomia-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server/versions/1",
              "xid": "/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.whataboutyou-ai/eunomia-mcp-server",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:25.495769716Z",
              "modifiedat": "2025-05-26T16:41:25.495769716Z",
              "ancestor": "1",
              "id": "35e1e1a0-30c9-4857-a9e0-5c64f7e29fa9",
              "packages": [
                {
                  "name": "eunomia-mcp-server",
                  "registry_name": "unknown",
                  "version": "0.0.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "915645627",
                "source": "github",
                "url": "https://github.com/whataboutyou-ai/eunomia-mcp-server"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:25Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "wildfly-extras": {
      "mcpproviderid": "wildfly-extras",
      "self": "#/mcpproviders/wildfly-extras",
      "xid": "/mcpproviders/wildfly-extras",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:39.502260624Z",
      "modifiedat": "2025-05-26T16:41:39.502260624Z",

      "serversurl": "#/mcpproviders/wildfly-extras/servers",
      "servers": {
        "wildfly-mcp": {
          "serverid": "wildfly-mcp",
          "self": "#/mcpproviders/wildfly-extras/servers/wildfly-mcp",
          "xid": "/mcpproviders/wildfly-extras/servers/wildfly-mcp",

          "metaurl": "#/mcpproviders/wildfly-extras/servers/wildfly-mcp/meta",
          "meta": {
            "serverid": "wildfly-mcp",
            "self": "#/mcpproviders/wildfly-extras/servers/wildfly-mcp/meta",
            "xid": "/mcpproviders/wildfly-extras/servers/wildfly-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:39.502260624Z",
            "modifiedat": "2025-05-26T16:41:39.502260624Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/wildfly-extras/servers/wildfly-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/wildfly-extras/servers/wildfly-mcp/versions",
          "versions": {
            "1": {
              "serverid": "wildfly-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/wildfly-extras/servers/wildfly-mcp/versions/1",
              "xid": "/mcpproviders/wildfly-extras/servers/wildfly-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.wildfly-extras/wildfly-mcp",
              "isdefault": true,
              "description": "WildFly MCP server and other tooling to integrate WildFly in AI space",
              "createdat": "2025-05-26T16:41:39.502260624Z",
              "modifiedat": "2025-05-26T16:41:39.502260624Z",
              "ancestor": "1",
              "id": "598ea4ee-6e94-49b7-abce-c53b6b2b22f7",
              "packages": [
                {
                  "name": "wildfly-extras/wildfly-mcp",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "919946635",
                "source": "github",
                "url": "https://github.com/wildfly-extras/wildfly-mcp"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:51Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "wilsonchenghy": {
      "mcpproviderid": "wilsonchenghy",
      "self": "#/mcpproviders/wilsonchenghy",
      "xid": "/mcpproviders/wilsonchenghy",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:59.192299778Z",
      "modifiedat": "2025-05-26T16:41:59.192299778Z",

      "serversurl": "#/mcpproviders/wilsonchenghy/servers",
      "servers": {
        "ShaderToy-MCP": {
          "serverid": "ShaderToy-MCP",
          "self": "#/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP",
          "xid": "/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP",

          "metaurl": "#/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP/meta",
          "meta": {
            "serverid": "ShaderToy-MCP",
            "self": "#/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP/meta",
            "xid": "/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:59.192299778Z",
            "modifiedat": "2025-05-26T16:41:59.192299778Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP/versions",
          "versions": {
            "1": {
              "serverid": "ShaderToy-MCP",
              "versionid": "1",
              "self": "#/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP/versions/1",
              "xid": "/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP/versions/1",
              "epoch": 1,
              "name": "io.github.wilsonchenghy/shadertoy-mcp",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:59.192299778Z",
              "modifiedat": "2025-05-26T16:41:59.192299778Z",
              "ancestor": "1",
              "id": "0b245c5f-ba2b-4e8d-b9db-26681b0fa2e3",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "your_actual_api_key",
                      "name": "SHADERTOY_APP_KEY"
                    }
                  ],
                  "name": "wilsonchenghy/ShaderToy-MCP",
                  "package_arguments": [
                    {
                      "default": "--with mcp[cli]",
                      "description": "Use with optional extra dependencies",
                      "format": "string",
                      "is_required": true,
                      "name": "--with mcp[cli]",
                      "type": "named",
                      "value": "--with mcp[cli]",
                      "value_hint": "mcp[cli]"
                    },
                    {
                      "default": "mcp",
                      "description": "Specify mcp command",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp",
                      "value_hint": "mcp"
                    },
                    {
                      "default": "\u003cpath_to_project\u003e/ShaderToy-MCP/src/ShaderToy-MCP/server.py",
                      "description": "Path to the ShaderToy-MCP server script",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "\u003cpath_to_project\u003e/ShaderToy-MCP/src/ShaderToy-MCP/server.py",
                      "value_hint": "\u003cpath_to_project\u003e/ShaderToy-MCP/src/ShaderToy-MCP/server.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "958998300",
                "source": "github",
                "url": "https://github.com/wilsonchenghy/ShaderToy-MCP"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve information on any shader on ShaderToy.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_shader_info"
                },
                {
                  "description": "Search for shaders available on ShaderToy through a search prompt.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search_shader"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:23Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "wong2": {
      "mcpproviderid": "wong2",
      "self": "#/mcpproviders/wong2",
      "xid": "/mcpproviders/wong2",
      "epoch": 2,
      "createdat": "2025-05-26T16:41:57.843013036Z",
      "modifiedat": "2025-05-26T16:41:57.945544305Z",

      "serversurl": "#/mcpproviders/wong2/servers",
      "servers": {
        "awesome-mcp-servers": {
          "serverid": "awesome-mcp-servers",
          "self": "#/mcpproviders/wong2/servers/awesome-mcp-servers",
          "xid": "/mcpproviders/wong2/servers/awesome-mcp-servers",

          "metaurl": "#/mcpproviders/wong2/servers/awesome-mcp-servers/meta",
          "meta": {
            "serverid": "awesome-mcp-servers",
            "self": "#/mcpproviders/wong2/servers/awesome-mcp-servers/meta",
            "xid": "/mcpproviders/wong2/servers/awesome-mcp-servers/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:57.843013036Z",
            "modifiedat": "2025-05-26T16:41:57.843013036Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/wong2/servers/awesome-mcp-servers/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/wong2/servers/awesome-mcp-servers/versions",
          "versions": {
            "1": {
              "serverid": "awesome-mcp-servers",
              "versionid": "1",
              "self": "#/mcpproviders/wong2/servers/awesome-mcp-servers/versions/1",
              "xid": "/mcpproviders/wong2/servers/awesome-mcp-servers/versions/1",
              "epoch": 1,
              "name": "io.github.wong2/awesome-mcp-servers",
              "isdefault": true,
              "description": "A curated list of Model Context Protocol (MCP) servers",
              "createdat": "2025-05-26T16:41:57.843013036Z",
              "modifiedat": "2025-05-26T16:41:57.843013036Z",
              "ancestor": "1",
              "id": "9926bddd-9633-4a76-a5b6-bb3be30b2ed4",
              "packages": [
                {
                  "name": "wong2/awesome-mcp-servers",
                  "registry_name": "unknown",
                  "version": ""
                }
              ],
              "repository": {
                "id": "895553015",
                "source": "github",
                "url": "https://github.com/wong2/awesome-mcp-servers"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:44Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-cli": {
          "serverid": "mcp-cli",
          "self": "#/mcpproviders/wong2/servers/mcp-cli",
          "xid": "/mcpproviders/wong2/servers/mcp-cli",

          "metaurl": "#/mcpproviders/wong2/servers/mcp-cli/meta",
          "meta": {
            "serverid": "mcp-cli",
            "self": "#/mcpproviders/wong2/servers/mcp-cli/meta",
            "xid": "/mcpproviders/wong2/servers/mcp-cli/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:57.945544305Z",
            "modifiedat": "2025-05-26T16:41:57.945544305Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/wong2/servers/mcp-cli/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/wong2/servers/mcp-cli/versions",
          "versions": {
            "1": {
              "serverid": "mcp-cli",
              "versionid": "1",
              "self": "#/mcpproviders/wong2/servers/mcp-cli/versions/1",
              "xid": "/mcpproviders/wong2/servers/mcp-cli/versions/1",
              "epoch": 1,
              "name": "io.github.wong2/mcp-cli",
              "isdefault": true,
              "description": "A CLI inspector for the Model Context Protocol",
              "createdat": "2025-05-26T16:41:57.945544305Z",
              "modifiedat": "2025-05-26T16:41:57.945544305Z",
              "ancestor": "1",
              "id": "29cf2977-4a42-44f0-8e62-f92ca8391412",
              "packages": [
                {
                  "name": "@wong2/mcp-cli",
                  "registry_name": "unknown",
                  "version": "1.10.0"
                }
              ],
              "repository": {
                "id": "898806068",
                "source": "github",
                "url": "https://github.com/wong2/mcp-cli"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:56Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "xing5": {
      "mcpproviderid": "xing5",
      "self": "#/mcpproviders/xing5",
      "xid": "/mcpproviders/xing5",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:00.500864823Z",
      "modifiedat": "2025-05-26T16:42:00.500864823Z",

      "serversurl": "#/mcpproviders/xing5/servers",
      "servers": {
        "mcp-google-sheets": {
          "serverid": "mcp-google-sheets",
          "self": "#/mcpproviders/xing5/servers/mcp-google-sheets",
          "xid": "/mcpproviders/xing5/servers/mcp-google-sheets",

          "metaurl": "#/mcpproviders/xing5/servers/mcp-google-sheets/meta",
          "meta": {
            "serverid": "mcp-google-sheets",
            "self": "#/mcpproviders/xing5/servers/mcp-google-sheets/meta",
            "xid": "/mcpproviders/xing5/servers/mcp-google-sheets/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:00.500864823Z",
            "modifiedat": "2025-05-26T16:42:00.500864823Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/xing5/servers/mcp-google-sheets/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/xing5/servers/mcp-google-sheets/versions",
          "versions": {
            "1": {
              "serverid": "mcp-google-sheets",
              "versionid": "1",
              "self": "#/mcpproviders/xing5/servers/mcp-google-sheets/versions/1",
              "xid": "/mcpproviders/xing5/servers/mcp-google-sheets/versions/1",
              "epoch": 1,
              "name": "io.github.xing5/mcp-google-sheets",
              "isdefault": true,
              "description": "This MCP server integrates with your Google Drive and Google Sheets, to enable creating and modifying spreadsheets.",
              "createdat": "2025-05-26T16:42:00.500864823Z",
              "modifiedat": "2025-05-26T16:42:00.500864823Z",
              "ancestor": "1",
              "id": "69ae0fdb-713d-4f8e-bf8e-d214e79fa295",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "/full/path/to/cloned/mcp-google-sheets/service-account-key.json",
                      "name": "SERVICE_ACCOUNT_PATH"
                    },
                    {
                      "description": "your_shared_folder_id_here",
                      "name": "DRIVE_FOLDER_ID"
                    }
                  ],
                  "name": "mcp-google-sheets",
                  "package_arguments": [
                    {
                      "default": "mcp-google-sheets",
                      "description": "Positional argument for script to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp-google-sheets",
                      "value_hint": "mcp-google-sheets"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": ""
                }
              ],
              "repository": {
                "id": "952831973",
                "source": "github",
                "url": "https://github.com/xing5/mcp-google-sheets"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:38Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "xxxbrian": {
      "mcpproviderid": "xxxbrian",
      "self": "#/mcpproviders/xxxbrian",
      "xid": "/mcpproviders/xxxbrian",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:12.232501679Z",
      "modifiedat": "2025-05-26T16:42:12.232501679Z",

      "serversurl": "#/mcpproviders/xxxbrian/servers",
      "servers": {
        "mcp-rquest": {
          "serverid": "mcp-rquest",
          "self": "#/mcpproviders/xxxbrian/servers/mcp-rquest",
          "xid": "/mcpproviders/xxxbrian/servers/mcp-rquest",

          "metaurl": "#/mcpproviders/xxxbrian/servers/mcp-rquest/meta",
          "meta": {
            "serverid": "mcp-rquest",
            "self": "#/mcpproviders/xxxbrian/servers/mcp-rquest/meta",
            "xid": "/mcpproviders/xxxbrian/servers/mcp-rquest/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:12.232501679Z",
            "modifiedat": "2025-05-26T16:42:12.232501679Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/xxxbrian/servers/mcp-rquest/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/xxxbrian/servers/mcp-rquest/versions",
          "versions": {
            "1": {
              "serverid": "mcp-rquest",
              "versionid": "1",
              "self": "#/mcpproviders/xxxbrian/servers/mcp-rquest/versions/1",
              "xid": "/mcpproviders/xxxbrian/servers/mcp-rquest/versions/1",
              "epoch": 1,
              "name": "io.github.xxxbrian/mcp-rquest",
              "isdefault": true,
              "description": "A MCP server providing realistic browser-like HTTP request capabilities with accurate TLS/JA3/JA4 fingerprints for bypassing anti-bot measures. It also supports converting PDF and HTML documents to Markdown for easier processing by LLMs.",
              "createdat": "2025-05-26T16:42:12.232501679Z",
              "modifiedat": "2025-05-26T16:42:12.232501679Z",
              "ancestor": "1",
              "id": "0c43f128-7589-4ce6-9382-5399ba24bebd",
              "packages": [
                {
                  "name": "mcp-rquest",
                  "registry_name": "unknown",
                  "version": "0.1.13"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "950863558",
                "source": "github",
                "url": "https://github.com/xxxbrian/mcp-rquest"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Perform GET requests with optional parameters",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "http_get"
                },
                {
                  "description": "Submit data via POST requests",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "http_post"
                },
                {
                  "description": "Update resources with PUT requests",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "http_put"
                },
                {
                  "description": "Remove resources with DELETE requests",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "http_delete"
                },
                {
                  "description": "Partially update resources",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "http_patch"
                },
                {
                  "description": "Retrieve only headers from a resource",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "http_head"
                },
                {
                  "description": "Retrieve options for a resource",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "http_options"
                },
                {
                  "description": "Diagnostic request tracing",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "http_trace"
                },
                {
                  "description": "Retrieve stored large responses, optionally by line range",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_stored_response"
                },
                {
                  "description": "Convert HTML or PDF responses to Markdown format for better LLM processing",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_stored_response_with_markdown"
                },
                {
                  "description": "Get the current state of the PDF models loading process",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_model_state"
                },
                {
                  "description": "Restart the PDF models loading process if it failed or got stuck",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "restart_model_loading"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:13:30Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "yangkyeongmo": {
      "mcpproviderid": "yangkyeongmo",
      "self": "#/mcpproviders/yangkyeongmo",
      "xid": "/mcpproviders/yangkyeongmo",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:21.838831305Z",
      "modifiedat": "2025-05-26T16:41:21.838831305Z",

      "serversurl": "#/mcpproviders/yangkyeongmo/servers",
      "servers": {
        "mcp-server-apache-airflow": {
          "serverid": "mcp-server-apache-airflow",
          "self": "#/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow",
          "xid": "/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow",

          "metaurl": "#/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow/meta",
          "meta": {
            "serverid": "mcp-server-apache-airflow",
            "self": "#/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow/meta",
            "xid": "/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:21.838831305Z",
            "modifiedat": "2025-05-26T16:41:21.838831305Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-apache-airflow",
              "versionid": "1",
              "self": "#/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow/versions/1",
              "xid": "/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow/versions/1",
              "epoch": 1,
              "name": "io.github.yangkyeongmo/mcp-server-apache-airflow",
              "isdefault": true,
              "description": "",
              "createdat": "2025-05-26T16:41:21.838831305Z",
              "modifiedat": "2025-05-26T16:41:21.838831305Z",
              "ancestor": "1",
              "id": "ae6d4cd8-c930-4737-9aba-93609f53cde1",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "https://your-airflow-host",
                      "name": "AIRFLOW_HOST"
                    },
                    {
                      "description": "your-username",
                      "name": "AIRFLOW_USERNAME"
                    },
                    {
                      "description": "your-password",
                      "name": "AIRFLOW_PASSWORD"
                    }
                  ],
                  "name": "mcp-server-apache-airflow",
                  "package_arguments": [
                    {
                      "default": "--directory /path/to/mcp-server-apache-airflow",
                      "description": "Directory to run the server from",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory /path/to/mcp-server-apache-airflow",
                      "type": "named",
                      "value": "--directory /path/to/mcp-server-apache-airflow",
                      "value_hint": "/path/to/mcp-server-apache-airflow"
                    },
                    {
                      "default": "mcp-server-apache-airflow",
                      "description": "Name of the Airflow MCP server",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "mcp-server-apache-airflow",
                      "value_hint": "mcp-server-apache-airflow"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.2.2"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "931916510",
                "source": "github",
                "url": "https://github.com/yangkyeongmo/mcp-server-apache-airflow"
              },
              "resources": [
                {
                  "description": "Endpoints for managing DAGs in Apache Airflow.",
                  "name": "DAG Management",
                  "uritemplate": "/api/v1/dags"
                },
                {
                  "description": "Endpoints for managing DAG runs.",
                  "name": "DAG Runs",
                  "uritemplate": "/api/v1/dags/{dag_id}/dagRuns"
                },
                {
                  "description": "Endpoints for managing tasks within DAGs.",
                  "name": "Tasks",
                  "uritemplate": "/api/v1/dags/{dag_id}/tasks"
                },
                {
                  "description": "Endpoints for managing Airflow variables.",
                  "name": "Variables",
                  "uritemplate": "/api/v1/variables"
                },
                {
                  "description": "Endpoints for managing Airflow connections.",
                  "name": "Connections",
                  "uritemplate": "/api/v1/connections"
                },
                {
                  "description": "Endpoints for managing Airflow pools.",
                  "name": "Pools",
                  "uritemplate": "/api/v1/pools"
                },
                {
                  "description": "Endpoints for managing XCom entries.",
                  "name": "XComs",
                  "uritemplate": "/api/v1/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries"
                },
                {
                  "description": "Endpoints for managing datasets.",
                  "name": "Datasets",
                  "uritemplate": "/api/v1/datasets"
                }
              ],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:43Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "yanmxa": {
      "mcpproviderid": "yanmxa",
      "self": "#/mcpproviders/yanmxa",
      "xid": "/mcpproviders/yanmxa",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:23.296328154Z",
      "modifiedat": "2025-05-26T16:42:23.296328154Z",

      "serversurl": "#/mcpproviders/yanmxa/servers",
      "servers": {
        "multicluster-mcp-server": {
          "serverid": "multicluster-mcp-server",
          "self": "#/mcpproviders/yanmxa/servers/multicluster-mcp-server",
          "xid": "/mcpproviders/yanmxa/servers/multicluster-mcp-server",

          "metaurl": "#/mcpproviders/yanmxa/servers/multicluster-mcp-server/meta",
          "meta": {
            "serverid": "multicluster-mcp-server",
            "self": "#/mcpproviders/yanmxa/servers/multicluster-mcp-server/meta",
            "xid": "/mcpproviders/yanmxa/servers/multicluster-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:23.296328154Z",
            "modifiedat": "2025-05-26T16:42:23.296328154Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/yanmxa/servers/multicluster-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/yanmxa/servers/multicluster-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "multicluster-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/yanmxa/servers/multicluster-mcp-server/versions/1",
              "xid": "/mcpproviders/yanmxa/servers/multicluster-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.yanmxa/multicluster-mcp-server",
              "isdefault": true,
              "description": "The gateway for GenAI systems to interact with multiple Kubernetes clusters through the MCP",
              "createdat": "2025-05-26T16:42:23.296328154Z",
              "modifiedat": "2025-05-26T16:42:23.296328154Z",
              "ancestor": "1",
              "id": "55ba52cd-8e0a-4bcb-9a96-1658f2d713e0",
              "packages": [
                {
                  "name": "multicluster-mcp-server",
                  "registry_name": "unknown",
                  "version": "0.1.3"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "940456029",
                "source": "github",
                "url": "https://github.com/yanmxa/multicluster-mcp-server"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Tool to create new notes",
                  "inputschema": {
                    "properties": {},
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  },
                  "name": "create_note"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:46Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "yeonupark": {
      "mcpproviderid": "yeonupark",
      "self": "#/mcpproviders/yeonupark",
      "xid": "/mcpproviders/yeonupark",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:34.751493027Z",
      "modifiedat": "2025-05-26T16:41:34.751493027Z",

      "serversurl": "#/mcpproviders/yeonupark/servers",
      "servers": {
        "mcp-soccer-data": {
          "serverid": "mcp-soccer-data",
          "self": "#/mcpproviders/yeonupark/servers/mcp-soccer-data",
          "xid": "/mcpproviders/yeonupark/servers/mcp-soccer-data",

          "metaurl": "#/mcpproviders/yeonupark/servers/mcp-soccer-data/meta",
          "meta": {
            "serverid": "mcp-soccer-data",
            "self": "#/mcpproviders/yeonupark/servers/mcp-soccer-data/meta",
            "xid": "/mcpproviders/yeonupark/servers/mcp-soccer-data/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:34.751493027Z",
            "modifiedat": "2025-05-26T16:41:34.751493027Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/yeonupark/servers/mcp-soccer-data/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/yeonupark/servers/mcp-soccer-data/versions",
          "versions": {
            "1": {
              "serverid": "mcp-soccer-data",
              "versionid": "1",
              "self": "#/mcpproviders/yeonupark/servers/mcp-soccer-data/versions/1",
              "xid": "/mcpproviders/yeonupark/servers/mcp-soccer-data/versions/1",
              "epoch": 1,
              "name": "io.github.yeonupark/mcp-soccer-data",
              "isdefault": true,
              "description": "An MCP server that provides real-time football data based on the SoccerDataAPI.",
              "createdat": "2025-05-26T16:41:34.751493027Z",
              "modifiedat": "2025-05-26T16:41:34.751493027Z",
              "ancestor": "1",
              "id": "387ef1e6-0e4c-43ea-9416-bf3b399a3c76",
              "packages": [
                {
                  "name": "mcp-soccer-data",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "966702385",
                "source": "github",
                "url": "https://github.com/yeonupark/mcp-soccer-data"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Returns real-time information about ongoing football matches around the world.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_livescores()"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:14:08Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "yuanoOo": {
      "mcpproviderid": "yuanoOo",
      "self": "#/mcpproviders/yuanoOo",
      "xid": "/mcpproviders/yuanoOo",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:04.263532272Z",
      "modifiedat": "2025-05-26T16:42:04.263532272Z",

      "serversurl": "#/mcpproviders/yuanoOo/servers",
      "servers": {
        "oceanbase_mcp_server": {
          "serverid": "oceanbase_mcp_server",
          "self": "#/mcpproviders/yuanoOo/servers/oceanbase_mcp_server",
          "xid": "/mcpproviders/yuanoOo/servers/oceanbase_mcp_server",

          "metaurl": "#/mcpproviders/yuanoOo/servers/oceanbase_mcp_server/meta",
          "meta": {
            "serverid": "oceanbase_mcp_server",
            "self": "#/mcpproviders/yuanoOo/servers/oceanbase_mcp_server/meta",
            "xid": "/mcpproviders/yuanoOo/servers/oceanbase_mcp_server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:04.263532272Z",
            "modifiedat": "2025-05-26T16:42:04.263532272Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/yuanoOo/servers/oceanbase_mcp_server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/yuanoOo/servers/oceanbase_mcp_server/versions",
          "versions": {
            "1": {
              "serverid": "oceanbase_mcp_server",
              "versionid": "1",
              "self": "#/mcpproviders/yuanoOo/servers/oceanbase_mcp_server/versions/1",
              "xid": "/mcpproviders/yuanoOo/servers/oceanbase_mcp_server/versions/1",
              "epoch": 1,
              "name": "io.github.yuanooo/oceanbase_mcp_server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that enables secure interaction with OceanBase databases. This server allows AI assistants to list tables, read data, and execute SQL queries through a controlled interface, making database exploration and analysis safer and more structured.",
              "createdat": "2025-05-26T16:42:04.263532272Z",
              "modifiedat": "2025-05-26T16:42:04.263532272Z",
              "ancestor": "1",
              "id": "b71bb3e0-0871-4ca6-9336-3c731607d3ad",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "localhost",
                      "name": "OB_HOST"
                    },
                    {
                      "description": "2881",
                      "name": "OB_PORT"
                    },
                    {
                      "description": "your_username",
                      "name": "OB_USER"
                    },
                    {
                      "description": "your_password",
                      "name": "OB_PASSWORD"
                    },
                    {
                      "description": "your_database",
                      "name": "OB_DATABASE"
                    }
                  ],
                  "name": "oceanbase_mcp_server",
                  "package_arguments": [
                    {
                      "default": "oceanbase_mcp_server",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "oceanbase_mcp_server",
                      "value_hint": "oceanbase_mcp_server"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "943079798",
                "source": "github",
                "url": "https://github.com/yuanoOo/oceanbase_mcp_server"
              },
              "resources": [
                {
                  "description": "Data in table: {table}",
                  "mimetype": "text/plain",
                  "name": "Table",
                  "uritemplate": "oceanbase://{table}/data"
                }
              ],
              "tools": [
                {
                  "description": "Execute an SQL query on the OceanBase server",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_sql"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:11:39Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "zcaceres": {
      "mcpproviderid": "zcaceres",
      "self": "#/mcpproviders/zcaceres",
      "xid": "/mcpproviders/zcaceres",
      "epoch": 4,
      "createdat": "2025-05-26T16:41:32.218115268Z",
      "modifiedat": "2025-05-26T16:41:32.527031414Z",

      "serversurl": "#/mcpproviders/zcaceres/servers",
      "servers": {
        "easy-mcp": {
          "serverid": "easy-mcp",
          "self": "#/mcpproviders/zcaceres/servers/easy-mcp",
          "xid": "/mcpproviders/zcaceres/servers/easy-mcp",

          "metaurl": "#/mcpproviders/zcaceres/servers/easy-mcp/meta",
          "meta": {
            "serverid": "easy-mcp",
            "self": "#/mcpproviders/zcaceres/servers/easy-mcp/meta",
            "xid": "/mcpproviders/zcaceres/servers/easy-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:32.289702279Z",
            "modifiedat": "2025-05-26T16:41:32.289702279Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/zcaceres/servers/easy-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/zcaceres/servers/easy-mcp/versions",
          "versions": {
            "1": {
              "serverid": "easy-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/zcaceres/servers/easy-mcp/versions/1",
              "xid": "/mcpproviders/zcaceres/servers/easy-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.zcaceres/easy-mcp",
              "isdefault": true,
              "description": "Absurdly easy Model Context Protocol Servers in Typescript",
              "createdat": "2025-05-26T16:41:32.289702279Z",
              "modifiedat": "2025-05-26T16:41:32.289702279Z",
              "ancestor": "1",
              "id": "c636fa7e-796e-40a3-bdfc-52d7f4b82db4",
              "packages": [
                {
                  "name": "easy-mcp",
                  "registry_name": "unknown",
                  "version": "1.0.1"
                }
              ],
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "",
                      "name": "name",
                      "required": true
                    }
                  ],
                  "description": "",
                  "name": "greetingPrompt"
                },
                {
                  "arguments": [
                    {
                      "description": "",
                      "name": "name",
                      "required": true
                    }
                  ],
                  "description": "",
                  "name": "simplePrompt"
                },
                {
                  "arguments": [
                    {
                      "description": "The name of the thing to prompt",
                      "name": "name",
                      "required": true
                    }
                  ],
                  "description": "A prompt with a name and description",
                  "name": "configured-prompt"
                },
                {
                  "arguments": [
                    {
                      "description": "",
                      "name": "name",
                      "required": true
                    }
                  ],
                  "description": "",
                  "name": "simplePrompt"
                },
                {
                  "arguments": [
                    {
                      "description": "User's name",
                      "name": "name",
                      "required": true
                    },
                    {
                      "description": "User's age",
                      "name": "age",
                      "required": false
                    }
                  ],
                  "description": "A custom prompt with multiple parameters",
                  "name": "customPrompt"
                }
              ],
              "repository": {
                "id": "908705399",
                "source": "github",
                "url": "https://github.com/zcaceres/easy-mcp"
              },
              "resources": [
                {
                  "description": "",
                  "mimetype": "",
                  "name": "simpleResource",
                  "uritemplate": "simple-resource"
                },
                {
                  "description": "",
                  "mimetype": "",
                  "name": "myResourceTemplate",
                  "uritemplate": "greeting/{name}"
                },
                {
                  "description": "",
                  "mimetype": "",
                  "name": "simpleResource",
                  "uritemplate": "test://simple-resource"
                },
                {
                  "description": "",
                  "mimetype": "",
                  "name": "resourceWithParam",
                  "uritemplate": "test://resource/{param}"
                }
              ],
              "tools": [
                {
                  "description": "",
                  "inputschema": {
                    "properties": {
                      "height": {
                        "type": "number"
                      },
                      "nickname": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "nickname",
                      "height"
                    ],
                    "type": "object"
                  },
                  "name": "simpleFunc"
                },
                {
                  "description": "An optional description",
                  "inputschema": {
                    "properties": {
                      "active": {
                        "type": "string"
                      },
                      "age": {
                        "type": "number"
                      },
                      "items": {
                        "items": {},
                        "type": "array"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "middleFunc"
                },
                {
                  "description": "A function with various parameter types",
                  "inputschema": {
                    "properties": {
                      "date": {
                        "type": "string"
                      },
                      "season": {
                        "type": "string"
                      },
                      "year": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "date",
                      "season"
                    ],
                    "type": "object"
                  },
                  "name": "complexTool"
                },
                {
                  "description": "A tool that uses context",
                  "inputschema": {
                    "properties": {
                      "context": {
                        "type": "object"
                      },
                      "dataSource": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "dataSource",
                      "context"
                    ],
                    "type": "object"
                  },
                  "name": "processData"
                },
                {
                  "description": "",
                  "inputschema": {
                    "properties": {
                      "param1": {
                        "type": "string"
                      },
                      "param2": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "param1",
                      "param2"
                    ],
                    "type": "object"
                  },
                  "name": "simpleTool"
                },
                {
                  "description": "A tool with optional parameters",
                  "inputschema": {
                    "properties": {
                      "optionalParam": {
                        "type": "number"
                      },
                      "requiredParam": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "requiredParam"
                    ],
                    "type": "object"
                  },
                  "name": "toolWithOptionals"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:16:20Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "fetch-mcp": {
          "serverid": "fetch-mcp",
          "self": "#/mcpproviders/zcaceres/servers/fetch-mcp",
          "xid": "/mcpproviders/zcaceres/servers/fetch-mcp",

          "metaurl": "#/mcpproviders/zcaceres/servers/fetch-mcp/meta",
          "meta": {
            "serverid": "fetch-mcp",
            "self": "#/mcpproviders/zcaceres/servers/fetch-mcp/meta",
            "xid": "/mcpproviders/zcaceres/servers/fetch-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:32.527031414Z",
            "modifiedat": "2025-05-26T16:41:32.527031414Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/zcaceres/servers/fetch-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/zcaceres/servers/fetch-mcp/versions",
          "versions": {
            "1": {
              "serverid": "fetch-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/zcaceres/servers/fetch-mcp/versions/1",
              "xid": "/mcpproviders/zcaceres/servers/fetch-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.zcaceres/fetch-mcp",
              "isdefault": true,
              "description": "A flexible HTTP fetching Model Context Protocol server.",
              "createdat": "2025-05-26T16:41:32.527031414Z",
              "modifiedat": "2025-05-26T16:41:32.527031414Z",
              "ancestor": "1",
              "id": "c2f4ab61-b279-4cb9-932d-5f60bcd1534a",
              "packages": [
                {
                  "name": "fetch",
                  "registry_name": "unknown",
                  "version": "1.0.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "905004409",
                "source": "github",
                "url": "https://github.com/zcaceres/fetch-mcp"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Fetch a website and return the content as HTML",
                  "inputschema": {
                    "properties": {
                      "headers": {
                        "description": "Optional headers to include in the request",
                        "type": "object"
                      },
                      "url": {
                        "description": "URL of the website to fetch",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "fetch_html"
                },
                {
                  "description": "Fetch a website and return the content as Markdown",
                  "inputschema": {
                    "properties": {
                      "headers": {
                        "description": "Optional headers to include in the request",
                        "type": "object"
                      },
                      "url": {
                        "description": "URL of the website to fetch",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "fetch_markdown"
                },
                {
                  "description": "Fetch a website, return the content as plain text (no HTML)",
                  "inputschema": {
                    "properties": {
                      "headers": {
                        "description": "Optional headers to include in the request",
                        "type": "object"
                      },
                      "url": {
                        "description": "URL of the website to fetch",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "fetch_txt"
                },
                {
                  "description": "Fetch a JSON file from a URL",
                  "inputschema": {
                    "properties": {
                      "headers": {
                        "description": "Optional headers to include in the request",
                        "type": "object"
                      },
                      "url": {
                        "description": "URL of the JSON to fetch",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "fetch_json"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:06:44Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "gtasks-mcp": {
          "serverid": "gtasks-mcp",
          "self": "#/mcpproviders/zcaceres/servers/gtasks-mcp",
          "xid": "/mcpproviders/zcaceres/servers/gtasks-mcp",

          "metaurl": "#/mcpproviders/zcaceres/servers/gtasks-mcp/meta",
          "meta": {
            "serverid": "gtasks-mcp",
            "self": "#/mcpproviders/zcaceres/servers/gtasks-mcp/meta",
            "xid": "/mcpproviders/zcaceres/servers/gtasks-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:32.415768652Z",
            "modifiedat": "2025-05-26T16:41:32.415768652Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/zcaceres/servers/gtasks-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/zcaceres/servers/gtasks-mcp/versions",
          "versions": {
            "1": {
              "serverid": "gtasks-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/zcaceres/servers/gtasks-mcp/versions/1",
              "xid": "/mcpproviders/zcaceres/servers/gtasks-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.zcaceres/gtasks-mcp",
              "isdefault": true,
              "description": "A Google Tasks Model Context Protocol Server for Claude",
              "createdat": "2025-05-26T16:41:32.415768652Z",
              "modifiedat": "2025-05-26T16:41:32.415768652Z",
              "ancestor": "1",
              "id": "5486801a-8243-44ae-8d59-2e9a02c13a8e",
              "packages": [
                {
                  "name": "@modelcontextprotocol/server-gtasks",
                  "registry_name": "unknown",
                  "version": "0.0.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "904953715",
                "source": "github",
                "url": "https://github.com/zcaceres/gtasks-mcp"
              },
              "resources": [
                {
                  "description": "Represents individual tasks in Google Tasks. Supports reading task details including title, status, due date, notes, and other metadata. Can be listed, read, created, updated, and deleted using the provided tools.",
                  "mimetype": "text/plain",
                  "name": "Tasks",
                  "uritemplate": "gtasks:///{task_id}"
                }
              ],
              "tools": [
                {
                  "description": "Search for a task in Google Tasks",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "Search query",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search"
                },
                {
                  "description": "List all tasks in Google Tasks",
                  "inputschema": {
                    "properties": {
                      "cursor": {
                        "description": "Cursor for pagination",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list"
                },
                {
                  "description": "Create a new task in Google Tasks",
                  "inputschema": {
                    "properties": {
                      "due": {
                        "description": "Due date",
                        "type": "string"
                      },
                      "notes": {
                        "description": "Task notes",
                        "type": "string"
                      },
                      "taskListId": {
                        "description": "Task list ID",
                        "type": "string"
                      },
                      "title": {
                        "description": "Task title",
                        "type": "string"
                      }
                    },
                    "required": [
                      "title"
                    ],
                    "type": "object"
                  },
                  "name": "create"
                },
                {
                  "description": "Clear completed tasks from a Google Tasks task list",
                  "inputschema": {
                    "properties": {
                      "taskListId": {
                        "description": "Task list ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "taskListId"
                    ],
                    "type": "object"
                  },
                  "name": "clear"
                },
                {
                  "description": "Delete a task in Google Tasks",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "Task id",
                        "type": "string"
                      },
                      "taskListId": {
                        "description": "Task list ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "taskListId"
                    ],
                    "type": "object"
                  },
                  "name": "delete"
                },
                {
                  "description": "Update a task in Google Tasks",
                  "inputschema": {
                    "properties": {
                      "due": {
                        "description": "Due date",
                        "type": "string"
                      },
                      "id": {
                        "description": "Task ID",
                        "type": "string"
                      },
                      "notes": {
                        "description": "Task notes",
                        "type": "string"
                      },
                      "status": {
                        "description": "Task status (needsAction or completed)",
                        "enum": [
                          "needsAction",
                          "completed"
                        ],
                        "type": "string"
                      },
                      "taskListId": {
                        "description": "Task list ID",
                        "type": "string"
                      },
                      "title": {
                        "description": "Task title",
                        "type": "string"
                      },
                      "uri": {
                        "description": "Task URI",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "name": "update"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:07:42Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-markdownify-server": {
          "serverid": "mcp-markdownify-server",
          "self": "#/mcpproviders/zcaceres/servers/mcp-markdownify-server",
          "xid": "/mcpproviders/zcaceres/servers/mcp-markdownify-server",

          "metaurl": "#/mcpproviders/zcaceres/servers/mcp-markdownify-server/meta",
          "meta": {
            "serverid": "mcp-markdownify-server",
            "self": "#/mcpproviders/zcaceres/servers/mcp-markdownify-server/meta",
            "xid": "/mcpproviders/zcaceres/servers/mcp-markdownify-server/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:32.218115268Z",
            "modifiedat": "2025-05-26T16:41:32.218115268Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/zcaceres/servers/mcp-markdownify-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/zcaceres/servers/mcp-markdownify-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-markdownify-server",
              "versionid": "1",
              "self": "#/mcpproviders/zcaceres/servers/mcp-markdownify-server/versions/1",
              "xid": "/mcpproviders/zcaceres/servers/mcp-markdownify-server/versions/1",
              "epoch": 1,
              "name": "io.github.zcaceres/mcp-markdownify-server",
              "isdefault": true,
              "description": "A Model Context Protocol server for converting almost anything to Markdown",
              "createdat": "2025-05-26T16:41:32.218115268Z",
              "modifiedat": "2025-05-26T16:41:32.218115268Z",
              "ancestor": "1",
              "id": "4365781f-28ff-4865-aa7d-909678f6dbb4",
              "packages": [
                {
                  "name": "ocr",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "905450127",
                "source": "github",
                "url": "https://github.com/zcaceres/markdownify-mcp"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:10:21Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 4
    },
    "zenml-io": {
      "mcpproviderid": "zenml-io",
      "self": "#/mcpproviders/zenml-io",
      "xid": "/mcpproviders/zenml-io",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:20.938165575Z",
      "modifiedat": "2025-05-26T16:42:20.938165575Z",

      "serversurl": "#/mcpproviders/zenml-io/servers",
      "servers": {
        "mcp-zenml": {
          "serverid": "mcp-zenml",
          "self": "#/mcpproviders/zenml-io/servers/mcp-zenml",
          "xid": "/mcpproviders/zenml-io/servers/mcp-zenml",

          "metaurl": "#/mcpproviders/zenml-io/servers/mcp-zenml/meta",
          "meta": {
            "serverid": "mcp-zenml",
            "self": "#/mcpproviders/zenml-io/servers/mcp-zenml/meta",
            "xid": "/mcpproviders/zenml-io/servers/mcp-zenml/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:20.938165575Z",
            "modifiedat": "2025-05-26T16:42:20.938165575Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/zenml-io/servers/mcp-zenml/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/zenml-io/servers/mcp-zenml/versions",
          "versions": {
            "1": {
              "serverid": "mcp-zenml",
              "versionid": "1",
              "self": "#/mcpproviders/zenml-io/servers/mcp-zenml/versions/1",
              "xid": "/mcpproviders/zenml-io/servers/mcp-zenml/versions/1",
              "epoch": 1,
              "name": "io.github.zenml-io/mcp-zenml",
              "isdefault": true,
              "description": "MCP server to connect an MCP client (Cursor, Claude Desktop etc) with your ZenML MLOps and LLMOps pipelines",
              "createdat": "2025-05-26T16:42:20.938165575Z",
              "modifiedat": "2025-05-26T16:42:20.938165575Z",
              "ancestor": "1",
              "id": "64fdea5a-9fe3-4492-b9fb-6260e6c3dc34",
              "packages": [
                {
                  "environment_variables": [
                    {
                      "description": "INFO",
                      "name": "LOGLEVEL"
                    },
                    {
                      "description": "1",
                      "name": "NO_COLOR"
                    },
                    {
                      "description": "1",
                      "name": "PYTHONUNBUFFERED"
                    },
                    {
                      "description": "UTF-8",
                      "name": "PYTHONIOENCODING"
                    },
                    {
                      "description": "https://your-zenml-server-goes-here.com",
                      "name": "ZENML_STORE_URL"
                    },
                    {
                      "description": "your-api-key-here",
                      "name": "ZENML_STORE_API_KEY"
                    }
                  ],
                  "name": "zenml-io/mcp-zenml",
                  "package_arguments": [
                    {
                      "default": "path/to/zenml_server.py",
                      "description": "Python script to run",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "path/to/zenml_server.py",
                      "value_hint": "path/to/zenml_server.py"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": ""
                }
              ],
              "prompts": [],
              "repository": {
                "id": "937211343",
                "source": "github",
                "url": "https://github.com/zenml-io/mcp-zenml"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:02:28Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "zilliztech": {
      "mcpproviderid": "zilliztech",
      "self": "#/mcpproviders/zilliztech",
      "xid": "/mcpproviders/zilliztech",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:21.950675207Z",
      "modifiedat": "2025-05-26T16:42:21.950675207Z",

      "serversurl": "#/mcpproviders/zilliztech/servers",
      "servers": {
        "mcp-server-milvus": {
          "serverid": "mcp-server-milvus",
          "self": "#/mcpproviders/zilliztech/servers/mcp-server-milvus",
          "xid": "/mcpproviders/zilliztech/servers/mcp-server-milvus",

          "metaurl": "#/mcpproviders/zilliztech/servers/mcp-server-milvus/meta",
          "meta": {
            "serverid": "mcp-server-milvus",
            "self": "#/mcpproviders/zilliztech/servers/mcp-server-milvus/meta",
            "xid": "/mcpproviders/zilliztech/servers/mcp-server-milvus/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:21.950675207Z",
            "modifiedat": "2025-05-26T16:42:21.950675207Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/zilliztech/servers/mcp-server-milvus/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/zilliztech/servers/mcp-server-milvus/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-milvus",
              "versionid": "1",
              "self": "#/mcpproviders/zilliztech/servers/mcp-server-milvus/versions/1",
              "xid": "/mcpproviders/zilliztech/servers/mcp-server-milvus/versions/1",
              "epoch": 1,
              "name": "io.github.zilliztech/mcp-server-milvus",
              "isdefault": true,
              "description": "Model Context Protocol Servers for Milvus",
              "createdat": "2025-05-26T16:42:21.950675207Z",
              "modifiedat": "2025-05-26T16:42:21.950675207Z",
              "ancestor": "1",
              "id": "e458676a-2727-4daf-84c5-d607932fa000",
              "packages": [
                {
                  "name": "mcp-server-milvus",
                  "package_arguments": [
                    {
                      "default": "--directory /path/to/mcp-server-milvus/src/mcp_server_milvus",
                      "description": "Directory argument",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory /path/to/mcp-server-milvus/src/mcp_server_milvus",
                      "type": "named",
                      "value": "--directory /path/to/mcp-server-milvus/src/mcp_server_milvus",
                      "value_hint": "/path/to/mcp-server-milvus/src/mcp_server_milvus"
                    },
                    {
                      "default": "server.py",
                      "description": "Python server entry file",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "server.py",
                      "value_hint": "server.py"
                    },
                    {
                      "default": "--milvus-uri http://127.0.0.1:19530",
                      "description": "Milvus URI",
                      "format": "string",
                      "is_required": true,
                      "name": "--milvus-uri http://127.0.0.1:19530",
                      "type": "named",
                      "value": "--milvus-uri http://127.0.0.1:19530",
                      "value_hint": "http://127.0.0.1:19530"
                    }
                  ],
                  "registry_name": "unknown",
                  "version": "0.1.1"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "943619628",
                "source": "github",
                "url": "https://github.com/zilliztech/mcp-server-milvus"
              },
              "resources": [],
              "tools": [],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:00:28Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "zilongxue": {
      "mcpproviderid": "zilongxue",
      "self": "#/mcpproviders/zilongxue",
      "xid": "/mcpproviders/zilongxue",
      "epoch": 1,
      "createdat": "2025-05-26T16:41:27.067531664Z",
      "modifiedat": "2025-05-26T16:41:27.067531664Z",

      "serversurl": "#/mcpproviders/zilongxue/servers",
      "servers": {
        "claude-post": {
          "serverid": "claude-post",
          "self": "#/mcpproviders/zilongxue/servers/claude-post",
          "xid": "/mcpproviders/zilongxue/servers/claude-post",

          "metaurl": "#/mcpproviders/zilongxue/servers/claude-post/meta",
          "meta": {
            "serverid": "claude-post",
            "self": "#/mcpproviders/zilongxue/servers/claude-post/meta",
            "xid": "/mcpproviders/zilongxue/servers/claude-post/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:41:27.067531664Z",
            "modifiedat": "2025-05-26T16:41:27.067531664Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/zilongxue/servers/claude-post/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/zilongxue/servers/claude-post/versions",
          "versions": {
            "1": {
              "serverid": "claude-post",
              "versionid": "1",
              "self": "#/mcpproviders/zilongxue/servers/claude-post/versions/1",
              "xid": "/mcpproviders/zilongxue/servers/claude-post/versions/1",
              "epoch": 1,
              "name": "io.github.zilongxue/claude-post",
              "isdefault": true,
              "description": "ClaudePost enables seamless email management through natural language conversations with Claude, offering secure features like email search, reading, and sending.",
              "createdat": "2025-05-26T16:41:27.067531664Z",
              "modifiedat": "2025-05-26T16:41:27.067531664Z",
              "ancestor": "1",
              "id": "3b404956-9bad-4bd9-89a9-17534b4bd22e",
              "packages": [
                {
                  "name": "email_client",
                  "package_arguments": [
                    {
                      "default": "--directory /path/to/claude-post/src/email_client",
                      "description": "Directory to execute the command in",
                      "format": "string",
                      "is_required": true,
                      "name": "--directory /path/to/claude-post/src/email_client",
                      "type": "named",
                      "value": "--directory /path/to/claude-post/src/email_client",
                      "value_hint": "/path/to/claude-post/src/email_client"
                    },
                    {
                      "default": "email-client",
                      "description": "Name of the email client script",
                      "format": "string",
                      "is_required": true,
                      "type": "positional",
                      "value": "email-client",
                      "value_hint": "email-client"
                    }
                  ],
                  "registry_name": "pypi",
                  "version": "0.1.0"
                }
              ],
              "repository": {
                "id": "913146173",
                "source": "github",
                "url": "https://github.com/ZilongXue/claude-post"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:04:28Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "zueai": {
      "mcpproviderid": "zueai",
      "self": "#/mcpproviders/zueai",
      "xid": "/mcpproviders/zueai",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:05.965289897Z",
      "modifiedat": "2025-05-26T16:42:05.965289897Z",

      "serversurl": "#/mcpproviders/zueai/servers",
      "servers": {
        "mcp-manager": {
          "serverid": "mcp-manager",
          "self": "#/mcpproviders/zueai/servers/mcp-manager",
          "xid": "/mcpproviders/zueai/servers/mcp-manager",

          "metaurl": "#/mcpproviders/zueai/servers/mcp-manager/meta",
          "meta": {
            "serverid": "mcp-manager",
            "self": "#/mcpproviders/zueai/servers/mcp-manager/meta",
            "xid": "/mcpproviders/zueai/servers/mcp-manager/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:05.965289897Z",
            "modifiedat": "2025-05-26T16:42:05.965289897Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/zueai/servers/mcp-manager/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/zueai/servers/mcp-manager/versions",
          "versions": {
            "1": {
              "serverid": "mcp-manager",
              "versionid": "1",
              "self": "#/mcpproviders/zueai/servers/mcp-manager/versions/1",
              "xid": "/mcpproviders/zueai/servers/mcp-manager/versions/1",
              "epoch": 1,
              "name": "io.github.zueai/mcp-manager",
              "isdefault": true,
              "description": "simple web ui to manage mcp (model context protocol) servers in the claude app",
              "createdat": "2025-05-26T16:42:05.965289897Z",
              "modifiedat": "2025-05-26T16:42:05.965289897Z",
              "ancestor": "1",
              "id": "3288499d-b820-45c9-8abf-60c050c5c741",
              "packages": [
                {
                  "name": "mcp-manager",
                  "registry_name": "unknown",
                  "version": "0.1.9"
                }
              ],
              "repository": {
                "id": "900260982",
                "source": "github",
                "url": "https://github.com/zueai/mcp-manager"
              },
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:17:02Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "zzaebok": {
      "mcpproviderid": "zzaebok",
      "self": "#/mcpproviders/zzaebok",
      "xid": "/mcpproviders/zzaebok",
      "epoch": 1,
      "createdat": "2025-05-26T16:42:26.144018512Z",
      "modifiedat": "2025-05-26T16:42:26.144018512Z",

      "serversurl": "#/mcpproviders/zzaebok/servers",
      "servers": {
        "mcp-wikidata": {
          "serverid": "mcp-wikidata",
          "self": "#/mcpproviders/zzaebok/servers/mcp-wikidata",
          "xid": "/mcpproviders/zzaebok/servers/mcp-wikidata",

          "metaurl": "#/mcpproviders/zzaebok/servers/mcp-wikidata/meta",
          "meta": {
            "serverid": "mcp-wikidata",
            "self": "#/mcpproviders/zzaebok/servers/mcp-wikidata/meta",
            "xid": "/mcpproviders/zzaebok/servers/mcp-wikidata/meta",
            "epoch": 1,
            "createdat": "2025-05-26T16:42:26.144018512Z",
            "modifiedat": "2025-05-26T16:42:26.144018512Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/zzaebok/servers/mcp-wikidata/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/zzaebok/servers/mcp-wikidata/versions",
          "versions": {
            "1": {
              "serverid": "mcp-wikidata",
              "versionid": "1",
              "self": "#/mcpproviders/zzaebok/servers/mcp-wikidata/versions/1",
              "xid": "/mcpproviders/zzaebok/servers/mcp-wikidata/versions/1",
              "epoch": 1,
              "name": "io.github.zzaebok/mcp-wikidata",
              "isdefault": true,
              "description": "A server implementation for Wikidata API using the Model Context Protocol (MCP).",
              "createdat": "2025-05-26T16:42:26.144018512Z",
              "modifiedat": "2025-05-26T16:42:26.144018512Z",
              "ancestor": "1",
              "id": "02b79b89-cce8-4401-aa1f-255b01587266",
              "packages": [
                {
                  "name": "mcp-wikidata",
                  "registry_name": "unknown",
                  "version": "0.1.0"
                }
              ],
              "prompts": [],
              "repository": {
                "id": "959274715",
                "source": "github",
                "url": "https://github.com/zzaebok/mcp-wikidata"
              },
              "resources": [],
              "tools": [
                {
                  "description": "Search for a Wikidata entity ID by its query.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_entity"
                },
                {
                  "description": "Search for a Wikidata property ID by its query.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_property"
                },
                {
                  "description": "Get the properties associated with a given Wikidata entity ID.",
                  "inputschema": {
                    "properties": {
                      "entity_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "entity_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_properties"
                },
                {
                  "description": "Execute a SPARQL query.",
                  "inputschema": {
                    "properties": {
                      "sparql_query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "sparql_query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_sparql"
                }
              ],
              "version_detail": {
                "is_latest": true,
                "release_date": "2025-05-16T19:15:49Z",
                "version": "0.0.1-seed"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    }
  },
  "mcpproviderscount": 403
}
