name: Deploy to Azure Static Web Apps

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      use_existing_static_site:
        description: 'Use existing static-site branch (skip rebuild)'
        required: false
        default: true
        type: boolean
      azure_token_secret:
        description: 'Name of the GitHub secret containing Azure token'
        required: false
        default: 'AZURE_STATIC_WEB_APPS_API_TOKEN'
        type: string
  
  # Run after static site build completes
  workflow_run:
    workflows: ["Build static content into static-site branch"]
    types:  
      - completed

permissions:
  contents: read
  id-token: write

concurrency:
  group: "azure-static-site"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # Only run if Azure token is configured
    if: vars.ENABLE_AZURE_DEPLOYMENT == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Check Azure Configuration
        run: |
          if [ -z "${{ secrets[inputs.azure_token_secret || 'AZURE_STATIC_WEB_APPS_API_TOKEN'] }}" ]; then
            echo "‚ö†Ô∏è  Azure Static Web Apps token not configured."
            echo "To enable Azure deployment:"
            echo "1. Create an Azure Static Web App"
            echo "2. Add the deployment token as a GitHub secret"
            echo "3. Set ENABLE_AZURE_DEPLOYMENT variable to 'true'"
            if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
              echo "Skipping deployment due to missing configuration."
              exit 1
            fi
          else
            echo "‚úÖ Azure configuration found"
          fi

      # 1. Checkout the Angular SPA repo
      - name: Checkout xregistry-viewer SPA
        uses: actions/checkout@v4
        with:
          repository: clemensv/xregistry-viewer

      # 2. Checkout the pre-built static site (branch: static-site) ‚Üí ./public/registry
      - name: Checkout xRegistry static site
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: static-site
          path: public/registry
          token: ${{ secrets.GITHUB_TOKEN }}

      # 3. Checkout main repo for configuration files
      - name: Checkout main repository for config
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          path: repo
          token: ${{ secrets.GITHUB_TOKEN }}

      # 4. Configure Angular app for Azure
      - name: Configure Angular for Azure Static Web Apps
        run: |
          # Update config.json if it exists
          CONFIG_DIR="public"
          if [ -d "$CONFIG_DIR" ]; then
            for file in "$CONFIG_DIR"/config.json; do
              if [ -f "$file" ]; then
                tmpfile=$(mktemp)
                # For Azure, we can use the root domain since it will be configured
                jq '.baseUrl = "/"' "$file" > "$tmpfile" && mv "$tmpfile" "$file"
                echo "Updated baseUrl in $file for Azure deployment"
              fi
            done
          fi
          
          # Update environment.prod.ts for Azure
          ENV_FILE="src/environments/environment.prod.ts"
          if [ -f "$ENV_FILE" ]; then
            # Use relative path for registry on Azure
            sed -i "s|https://[^/]*/registry|/registry|g" "$ENV_FILE"
            echo "Updated $ENV_FILE for Azure deployment"
          fi

      # 5. Copy Azure configuration files
      - name: Setup Azure Static Web App configuration
        run: |
          # Copy Azure configuration files from the main repo
          if [ -f "repo/xreg/registry-staticwebapp.config.json" ]; then
            cp repo/xreg/registry-staticwebapp.config.json public/registry/staticwebapp.config.json
            echo "Copied registry Azure config"
          fi
          
          if [ -f "repo/xreg/root-staticwebapp.config.json" ]; then
            cp repo/xreg/root-staticwebapp.config.json public/staticwebapp.config.json
            echo "Copied root Azure config"
          fi
          
          # Verify Azure config structure
          echo "Azure configuration files:"
          find public -name "staticwebapp.config.json" -exec echo "Found: {}" \;
          
          # List registry content to debug
          echo "Registry content in public/registry:"
          ls -la public/registry/ || echo "No registry directory found"

      # 6. Build Angular app and copy registry files
      - name: Build Angular app and prepare static content
        run: |
          # Install Node.js dependencies first
          npm install
          
          # Build the Angular application
          npm run build-prod
          
          # Ensure the registry directory exists in the output
          mkdir -p dist/xregistry-viewer/registry
          
          # Copy registry files to the output directory
          if [ -d "public/registry" ]; then
            cp -r public/registry/* dist/xregistry-viewer/registry/
            echo "Copied registry files to output directory"
            
            # List the contents to verify
            echo "Contents of dist/xregistry-viewer/registry:"
            ls -la dist/xregistry-viewer/registry/
            
            # Verify specific files
            if [ -f "dist/xregistry-viewer/registry/index.json" ]; then
              echo "‚úÖ Registry index.json found in output"
            else
              echo "‚ùå Registry index.json NOT found in output"
            fi
          else
            echo "‚ùå Source registry directory not found at public/registry"
          fi

      # 7. Deploy to Azure Static Web Apps
      - name: Build and Deploy to Azure
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        if: success() && (vars.ENABLE_AZURE_DEPLOYMENT == 'true' || github.event_name == 'workflow_dispatch')
        with:
          azure_static_web_apps_api_token: ${{ secrets[inputs.azure_token_secret || 'AZURE_STATIC_WEB_APPS_API_TOKEN'] }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "dist/xregistry-viewer"
          skip_app_build: true
          output_location: ""
          
      - name: Deployment Summary
        if: success()
        run: |
          echo "üöÄ Azure Static Web App deployment completed!"
          echo "üìã Registry content deployed from static-site branch"
          echo "üîß Azure configurations applied"
          if [ "${{ steps.builddeploy.outputs.static_web_app_url }}" ]; then
            echo "üåê Site URL: ${{ steps.builddeploy.outputs.static_web_app_url }}"
            echo "üìã Registry API: ${{ steps.builddeploy.outputs.static_web_app_url }}/registry/"
          fi

  # Deployment check job
  check-deployment:
    runs-on: ubuntu-latest
    if: always() && needs.build-and-deploy.result == 'skipped'
    needs: build-and-deploy
    steps:
      - name: Azure Deployment Status
        run: |
          echo "‚ÑπÔ∏è  Azure Static Web Apps deployment was skipped."
          echo ""
          echo "To enable Azure deployment:"
          echo "1. Create an Azure Static Web App in the Azure portal"
          echo "2. Copy the deployment token from the Azure portal"
          echo "3. Add it as a GitHub repository secret (default name: AZURE_STATIC_WEB_APPS_API_TOKEN)"
          echo "4. Set the repository variable ENABLE_AZURE_DEPLOYMENT to 'true'"
          echo ""
          echo "Or run this workflow manually to test with different settings." 