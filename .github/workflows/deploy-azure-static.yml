name: Deploy to Azure Static Web Apps

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      use_existing_static_site:
        description: 'Use existing static-site branch (skip rebuild)'
        required: false
        default: true
        type: boolean
      azure_token_secret:
        description: 'Name of the GitHub secret containing Azure token'
        required: false
        default: 'AZURE_STATIC_WEB_APPS_API_TOKEN'
        type: string
  
  # Run after static site build completes
  workflow_run:
    workflows: ["Build static content into static-site branch"]
    types:  
      - completed

permissions:
  contents: read
  id-token: write

concurrency:
  group: "azure-static-site"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # Only run if Azure token is configured
    if: vars.ENABLE_AZURE_DEPLOYMENT == 'true' || github.event_name == 'workflow_dispatch'
    outputs:
      azure_url: ${{ steps.builddeploy.outputs.static_web_app_url }}
    
    steps:
      - name: Check Azure Configuration
        run: |
          if [ -z "${{ secrets[inputs.azure_token_secret || 'AZURE_STATIC_WEB_APPS_API_TOKEN'] }}" ]; then
            echo "⚠️  Azure Static Web Apps token not configured."
            echo "To enable Azure deployment:"
            echo "1. Create an Azure Static Web App"
            echo "2. Add the deployment token as a GitHub secret"
            echo "3. Set ENABLE_AZURE_DEPLOYMENT variable to 'true'"
            if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
              echo "Skipping deployment due to missing configuration."
              exit 1
            fi
          else
            echo "✅ Azure configuration found"
          fi

      # 1. Checkout the Angular SPA repo
      - name: Checkout xregistry-viewer SPA
        uses: actions/checkout@v4
        with:
          repository: clemensv/xregistry-viewer

      # 2. Checkout the pre-built static site (branch: static-site) → ./public/registry
      - name: Checkout xRegistry static site
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: static-site
          path: temp-static-site
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2b. Extract only the registry files
      - name: Extract registry files from static site
        run: |
          mkdir -p public
          if [ -d "temp-static-site/registry" ]; then
            cp -r temp-static-site/registry public/
            echo "Registry directory copied from static-site branch"
            ls -la public/registry/
          else
            echo "Registry directory not found in static-site branch"
            exit 1
          fi
          rm -rf temp-static-site

      # 3. Checkout main repo for configuration files
      - name: Checkout main repository for config
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          path: repo
          token: ${{ secrets.GITHUB_TOKEN }}

      # 4. Configure Angular app for Azure
      - name: Configure Angular for Azure Static Web Apps
        run: |
          # Update config.json if it exists
          CONFIG_DIR="public"
          if [ -d "$CONFIG_DIR" ]; then
            for file in "$CONFIG_DIR"/config.json; do
              if [ -f "$file" ]; then
                tmpfile=$(mktemp)
                # For Azure, we can use the root domain since it will be configured
                jq '.baseUrl = "/"' "$file" > "$tmpfile" && mv "$tmpfile" "$file"
                echo "Updated baseUrl in $file for Azure deployment"
              fi
            done
          fi
          
          # Update environment.prod.ts for Azure
          ENV_FILE="src/environments/environment.prod.ts"
          if [ -f "$ENV_FILE" ]; then
            # Use relative path for registry on Azure
            sed -i "s|https://[^/]*/registry|/registry|g" "$ENV_FILE"
            echo "Updated $ENV_FILE for Azure deployment"
          fi

      # 5. Copy Azure configuration files
      - name: Setup Azure Static Web App configuration
        run: |
          # Copy Azure configuration files from the main repo
        
          if [ -f "repo/xreg/root-staticwebapp.config.json" ]; then
            cp repo/xreg/root-staticwebapp.config.json public/staticwebapp.config.json
            echo "Copied root Azure config"
          fi
          
          # Verify Azure config structure
          echo "Azure configuration files:"
          find public -name "staticwebapp.config.json" -exec echo "Found: {}" \;
          
          # List registry content to debug
          echo "Registry content in public/registry:"
          ls -la public/registry/ || echo "No registry directory found"

      # 6. Build Angular app and copy registry files
      - name: Fix Angular CSS budget limits
        run: |
          # Increase CSS budget limits to handle large stylesheets
          if [ -f "angular.json" ]; then
            # Create a backup
            cp angular.json angular.json.backup
            
            # Update budget limits using jq
            jq '.projects."xregistry-viewer".architect.build.configurations.production.budgets[0].maximumError = "50kb"' angular.json > angular.json.tmp && mv angular.json.tmp angular.json
            jq '.projects."xregistry-viewer".architect.build.configurations.production.budgets[0].maximumWarning = "40kb"' angular.json > angular.json.tmp && mv angular.json.tmp angular.json
            
            echo "Updated Angular budget limits:"
            jq '.projects."xregistry-viewer".architect.build.configurations.production.budgets[0]' angular.json
          fi
          
      - name: Build Angular app and prepare static content
        run: |
          # Install Node.js dependencies first
          npm install
          
          # Build the Angular application
          npm run build-prod
          
          # Copy registry files to the output directory
          if [ -d "public/registry" ]; then
            # Remove any existing registry directory in output
            rm -rf dist/xregistry-viewer/registry
            
            # Copy the entire registry directory structure
            cp -r public/registry dist/xregistry-viewer/
            echo "Copied registry files to output directory"
            
            # List the contents to verify
            echo "Contents of dist/xregistry-viewer/registry:"
            ls -la dist/xregistry-viewer/registry/
            
            # Verify specific files
            if [ -f "dist/xregistry-viewer/registry/index.json" ]; then
              echo "✅ Registry index.json found in output"
            else
              echo "❌ Registry index.json NOT found in output"
            fi
            
            # Verify subdirectories
            if [ -f "dist/xregistry-viewer/registry/mcpproviders/index.json" ]; then
              echo "✅ MCP providers index.json found in output"
            else
              echo "❌ MCP providers index.json NOT found in output"
            fi
            
            if [ -f "dist/xregistry-viewer/registry/agentcardproviders/index.json" ]; then
              echo "✅ Agent card providers index.json found in output"
            else
              echo "❌ Agent card providers index.json NOT found in output"
            fi
          else
            echo "❌ Source registry directory not found at public/registry"
          fi

      # 7. Deploy to Azure Static Web Apps
      - name: Build and Deploy to Azure
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        if: success() && (vars.ENABLE_AZURE_DEPLOYMENT == 'true' || github.event_name == 'workflow_dispatch')
        with:
          azure_static_web_apps_api_token: ${{ secrets[inputs.azure_token_secret || 'AZURE_STATIC_WEB_APPS_API_TOKEN'] }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "dist/xregistry-viewer"
          skip_app_build: true
          output_location: ""
          
      - name: Deployment Summary
        if: success()
        run: |
          echo "🚀 Azure Static Web App deployment completed!"
          echo "📋 Registry content deployed from static-site branch"
          echo "🔧 Azure configurations applied"
          if [ "${{ steps.builddeploy.outputs.static_web_app_url }}" ]; then
            echo "🌐 Site URL: ${{ steps.builddeploy.outputs.static_web_app_url }}"
            echo "📋 Registry API: ${{ steps.builddeploy.outputs.static_web_app_url }}/registry/"
          fi

  # Registry endpoint verification job
  verify-registry-endpoints:
    runs-on: ubuntu-latest
    if: needs.build-and-deploy.result == 'success'
    needs: build-and-deploy
    timeout-minutes: 10
    steps:
      - name: Determine Azure Static Web App URLs
        id: determine-urls
        run: |
          # Extract Azure Static Web App URL from deployment output
          AZURE_URL="${{ needs.build-and-deploy.outputs.azure_url }}"
          
          if [ -z "$AZURE_URL" ]; then
            echo "❌ Could not determine Azure Static Web App URL from deployment output"
            # Try to construct from repository info as fallback
            REPO_NAME="${{ github.repository }}"
            REPO_OWNER="${{ github.repository_owner }}"
            AZURE_URL="https://${REPO_NAME/\//-}.azurestaticapps.net"
            echo "⚠️  Using fallback Azure URL: $AZURE_URL"
          fi
          
          # Clean up URL (remove trailing slash)
          AZURE_URL=$(echo "$AZURE_URL" | sed 's|/$||')
          
          # Define registry endpoints
          AZURE_REGISTRY_URL="${AZURE_URL}/registry/"
          CUSTOM_REGISTRY_URL="https://mcpxreg.com/registry/"
          
          echo "azure_base_url=$AZURE_URL" >> $GITHUB_OUTPUT
          echo "azure_registry_url=$AZURE_REGISTRY_URL" >> $GITHUB_OUTPUT
          echo "custom_registry_url=$CUSTOM_REGISTRY_URL" >> $GITHUB_OUTPUT
          
          echo "🔗 Azure Base URL: $AZURE_URL"
          echo "🔗 Azure Registry URL: $AZURE_REGISTRY_URL"
          echo "🔗 Custom Registry URL: $CUSTOM_REGISTRY_URL"
      
      - name: Wait for deployment to settle
        run: |
          echo "⏱️  Waiting for Azure deployment to fully propagate..."
          sleep 60
          
          echo "🔄 Checking Azure base URL availability..."
          for i in {1..12}; do
            if curl -sf "${{ steps.determine-urls.outputs.azure_base_url }}" > /dev/null 2>&1; then
              echo "✅ Azure base URL is responding (attempt $i)"
              break
            else
              echo "⏳ Waiting for Azure base URL... (attempt $i/12)"
              sleep 15
            fi
          done
      
      - name: Verify Azure Registry Endpoint
        id: verify-azure
        run: |
          AZURE_REGISTRY_URL="${{ steps.determine-urls.outputs.azure_registry_url }}"
          echo "🧪 Testing Azure registry endpoint: $AZURE_REGISTRY_URL"
          
          # Test registry endpoint with retry logic
          SUCCESS=false
          for i in {1..5}; do
            echo "Attempt $i/5 for Azure registry endpoint..."
            
            if RESPONSE=$(curl -sf --max-time 30 "$AZURE_REGISTRY_URL" 2>/dev/null); then
              echo "✅ Azure registry endpoint is responding"
              
              # Validate JSON structure
              if echo "$RESPONSE" | jq -e '.registryid' > /dev/null 2>&1; then
                REGISTRY_ID=$(echo "$RESPONSE" | jq -r '.registryid')
                MCP_COUNT=$(echo "$RESPONSE" | jq -r '.mcpproviderscount // 0')
                AGENT_COUNT=$(echo "$RESPONSE" | jq -r '.agentcardproviderscount // 0')
                SPEC_VERSION=$(echo "$RESPONSE" | jq -r '.specversion // "unknown"')
                
                echo "✅ Valid JSON structure detected"
                echo "📊 Registry ID: $REGISTRY_ID"
                echo "📊 MCP Providers: $MCP_COUNT"
                echo "📊 Agent Card Providers: $AGENT_COUNT"
                echo "📊 Spec Version: $SPEC_VERSION"
                
                # Verify expected fields
                if [ "$REGISTRY_ID" = "xRegistry" ] && [ "$MCP_COUNT" -gt 0 ]; then
                  echo "✅ Azure registry endpoint validation successful"
                  echo "azure_endpoint_status=success" >> $GITHUB_OUTPUT
                  echo "azure_mcp_count=$MCP_COUNT" >> $GITHUB_OUTPUT
                  echo "azure_agent_count=$AGENT_COUNT" >> $GITHUB_OUTPUT
                  SUCCESS=true
                  break
                else
                  echo "⚠️  Registry data validation failed (registryid: $REGISTRY_ID, mcp_count: $MCP_COUNT)"
                fi
              else
                echo "❌ Invalid JSON response from Azure endpoint"
                echo "Response: $RESPONSE"
              fi
            else
              echo "⚠️  Azure registry endpoint not responding (attempt $i/5)"
            fi
            
            sleep 20
          done
          
          if [ "$SUCCESS" = false ]; then
            echo "❌ Azure registry endpoint verification failed after all attempts"
            echo "azure_endpoint_status=failed" >> $GITHUB_OUTPUT
          fi
      
      - name: Verify Custom Domain Endpoint (Optional)
        id: verify-custom
        continue-on-error: true
        run: |
          CUSTOM_REGISTRY_URL="${{ steps.determine-urls.outputs.custom_registry_url }}"
          echo "🧪 Testing custom domain registry endpoint: $CUSTOM_REGISTRY_URL"
          
          if RESPONSE=$(curl -sf --max-time 30 "$CUSTOM_REGISTRY_URL" 2>/dev/null); then
            echo "✅ Custom domain endpoint is responding"
            
            # Validate JSON structure
            if echo "$RESPONSE" | jq -e '.registryid' > /dev/null 2>&1; then
              REGISTRY_ID=$(echo "$RESPONSE" | jq -r '.registryid')
              MCP_COUNT=$(echo "$RESPONSE" | jq -r '.mcpproviderscount // 0')
              AGENT_COUNT=$(echo "$RESPONSE" | jq -r '.agentcardproviderscount // 0')
              
              echo "✅ Valid JSON structure detected"
              echo "📊 Registry ID: $REGISTRY_ID"
              echo "📊 MCP Providers: $MCP_COUNT"
              echo "📊 Agent Card Providers: $AGENT_COUNT"
              
              if [ "$REGISTRY_ID" = "xRegistry" ] && [ "$MCP_COUNT" -gt 0 ]; then
                echo "✅ Custom domain endpoint validation successful"
                echo "custom_endpoint_status=success" >> $GITHUB_OUTPUT
                echo "custom_mcp_count=$MCP_COUNT" >> $GITHUB_OUTPUT
                echo "custom_agent_count=$AGENT_COUNT" >> $GITHUB_OUTPUT
              else
                echo "⚠️  Custom domain registry data validation failed"
                echo "custom_endpoint_status=validation_failed" >> $GITHUB_OUTPUT
              fi
            else
              echo "❌ Invalid JSON response from custom domain"
              echo "custom_endpoint_status=invalid_json" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️  Custom domain endpoint not responding (this is optional)"
            echo "custom_endpoint_status=not_responding" >> $GITHUB_OUTPUT
          fi
      
      - name: Deployment Verification Summary
        run: |
          echo "## 🚀 Deployment Verification Results"
          echo ""
          
          # Azure endpoint results
          AZURE_STATUS="${{ steps.verify-azure.outputs.azure_endpoint_status }}"
          if [ "$AZURE_STATUS" = "success" ]; then
            echo "✅ **Azure Registry Endpoint**: PASSED"
            echo "   - URL: ${{ steps.determine-urls.outputs.azure_registry_url }}"
            echo "   - MCP Providers: ${{ steps.verify-azure.outputs.azure_mcp_count }}"
            echo "   - Agent Card Providers: ${{ steps.verify-azure.outputs.azure_agent_count }}"
          else
            echo "❌ **Azure Registry Endpoint**: FAILED"
            echo "   - URL: ${{ steps.determine-urls.outputs.azure_registry_url }}"
            echo "   - Status: $AZURE_STATUS"
          fi
          
          echo ""
          
          # Custom domain results
          CUSTOM_STATUS="${{ steps.verify-custom.outputs.custom_endpoint_status }}"
          case "$CUSTOM_STATUS" in
            "success")
              echo "✅ **Custom Domain Endpoint**: PASSED"
              echo "   - URL: ${{ steps.determine-urls.outputs.custom_registry_url }}"
              echo "   - MCP Providers: ${{ steps.verify-custom.outputs.custom_mcp_count }}"
              echo "   - Agent Card Providers: ${{ steps.verify-custom.outputs.custom_agent_count }}"
              ;;
            "validation_failed")
              echo "⚠️  **Custom Domain Endpoint**: DATA VALIDATION FAILED"
              echo "   - URL: ${{ steps.determine-urls.outputs.custom_registry_url }}"
              ;;
            "invalid_json")
              echo "⚠️  **Custom Domain Endpoint**: INVALID JSON RESPONSE"
              echo "   - URL: ${{ steps.determine-urls.outputs.custom_registry_url }}"
              ;;
            "not_responding")
              echo "⚠️  **Custom Domain Endpoint**: NOT RESPONDING"
              echo "   - URL: ${{ steps.determine-urls.outputs.custom_registry_url }}"
              ;;
            *)
              echo "ℹ️  **Custom Domain Endpoint**: NOT TESTED"
              ;;
          esac
          
          echo ""
          echo "## 📋 Registry API Specification"
          echo "Both endpoints should return a JSON response with the following structure:"
          echo '```json'
          echo '{'
          echo '  "registryid": "xRegistry",'
          echo '  "mcpproviderscount": <number>,'
          echo '  "agentcardproviderscount": <number>,'
          echo '  "specversion": "1.0-rc1",'
          echo '  "xid": "/",'
          echo '  "createdat": "<timestamp>",'
          echo '  "modifiedat": "<timestamp>",'
          echo '  "epoch": <number>,'
          echo '  "mcpprovidersurl": "<base_url>/mcpproviders",'
          echo '  "agentcardprovidersurl": "<base_url>/agentcardproviders",'
          echo '  "self": "<base_url>/"'
          echo '}'
          echo '```'
          
          # Fail the job if Azure endpoint failed
          if [ "$AZURE_STATUS" != "success" ]; then
            echo ""
            echo "❌ **CRITICAL**: Azure registry endpoint validation failed!"
            exit 1
          fi

  # Deployment check job for skipped deployments
  check-deployment:
    runs-on: ubuntu-latest
    if: always() && needs.build-and-deploy.result == 'skipped'
    needs: build-and-deploy
    steps:
      - name: Azure Deployment Status
        run: |
          echo "ℹ️  Azure Static Web Apps deployment was skipped."
          echo ""
          echo "To enable Azure deployment:"
          echo "1. Create an Azure Static Web App in the Azure portal"
          echo "2. Copy the deployment token from the Azure portal"
          echo "3. Add it as a GitHub repository secret (default name: AZURE_STATIC_WEB_APPS_API_TOKEN)"
          echo "4. Set the repository variable ENABLE_AZURE_DEPLOYMENT to 'true'"
          echo ""
          echo "Or run this workflow manually to test with different settings." 