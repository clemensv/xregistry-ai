name: Build static content into static-site branch

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if no changes detected'
        required: false
        default: false
        type: boolean
  
  # Trigger on pushes to main/master that affect registry content
  push:
    branches: ["main", "master"]
    paths:
      - 'registry/**'
      - 'models/**'
      - 'xreg/**'
      - '.github/workflows/build-static-site.yml'

  # Run after successful registry submissions
  workflow_run:
    workflows: ["Process A2A Registry Submission", "Process MCP Registry Submission"]
    types:
      - completed

permissions:
  contents: write
  id-token: write

concurrency:
  group: "static-site-build"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git config --global credential.helper store
          echo "https://${{ secrets.GITHUB_TOKEN }}@github.com" > ~/.git-credentials
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies
        run: |
          pip install jsonpointer pandas
      
      - name: Set Repository Variables
        run: |
          export GITHUB_SERVER_URL="${{ github.server_url }}"
          export GITHUB_REPOSITORY="${{ github.repository }}"
          if [ -n "$GITHUB_ACTIONS" ]; then
            REPO_ORG=$(echo "$GITHUB_REPOSITORY" | awk -F/ '{print $1}')
            REPO_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F/ '{print $2}')
            GITHUB_PAGES_URL="https://${REPO_ORG}.github.io/${REPO_NAME}/"
            echo "GITHUB_PAGES_URL=$GITHUB_PAGES_URL" >> $GITHUB_ENV
            echo "REPO_ORG=$REPO_ORG" >> $GITHUB_ENV
            echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          fi
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Pages URL: $GITHUB_PAGES_URL"
      
      - name: Generate unified schemas
        run: |
          cd xreg
          echo "Generating unified schemas for all protocols..."
          python schema-generator.py --models --type json-schema --output ../schema/json-schema.json
          python schema-generator.py --models --type openapi --output ../openapi/openapi.json
          python schema-generator.py --models --type avro-schema --output ../schema/avro-schema.json
          echo "Schema generation complete"
      
      - name: Check out xregistry-viewer for site building
        run: |
          SITE_DIR="$GITHUB_WORKSPACE/site"
          if [ ! -d "$SITE_DIR" ]; then
            git clone https://github.com/clemensv/xregistry-viewer "$SITE_DIR"
          else
            cd "$SITE_DIR"
            git pull
            cd "$GITHUB_WORKSPACE"
          fi
          echo "SITE_DIR=$SITE_DIR" >> $GITHUB_ENV
      
      - name: Configure xregistry-viewer for GitHub Pages
        run: |
          # Update config.json with base URL
          CONFIG_DIR="$SITE_DIR/public"
          if [ -d "$CONFIG_DIR" ]; then
            for file in "$CONFIG_DIR"/config.json; do
              if [ -f "$file" ]; then
                tmpfile=$(mktemp)
                jq --arg url "${GITHUB_PAGES_URL}" '.baseUrl = $url' "$file" > "$tmpfile" && mv "$tmpfile" "$file"
                echo "Updated baseUrl in $file to ${GITHUB_PAGES_URL}"
              fi
            done
          fi
          
          # Update Angular app's base href
          INDEX_FILE="$SITE_DIR/src/index.html"
          if [ -f "$INDEX_FILE" ]; then
            sed -i "s|<base href=\"/\">|<base href=\"$GITHUB_PAGES_URL\">|g" "$INDEX_FILE"
            echo "Updated base URL in $INDEX_FILE to $GITHUB_PAGES_URL"
            # Copy to 404.html for SPA routing
            cp "$INDEX_FILE" "$SITE_DIR/src/404.html"
          fi
          
          # Update environment.prod.ts
          ENV_FILE="$SITE_DIR/src/environments/environment.prod.ts"
          if [ -f "$ENV_FILE" ]; then
            sed -i "s|https://mcpxreg.org/registry|$GITHUB_PAGES_URL/registry|g" "$ENV_FILE"
            echo "Updated $ENV_FILE with GitHub Pages URL: $GITHUB_PAGES_URL"
          fi
      
      - name: Start xRegistry server for data export
        run: |
          echo "Starting xRegistry server container..."
          CONTAINER_NAME="xregistry-server"
          
          # Check if container already exists and remove it
          if [ "$(docker ps -aq -f name=${CONTAINER_NAME})" ]; then
            docker stop "${CONTAINER_NAME}" || true
            docker rm "${CONTAINER_NAME}" || true
          fi
          
          # Start new container
          CONTAINER_ID=$(docker run -d --name "${CONTAINER_NAME}" \
            -v $GITHUB_WORKSPACE:/workspace \
            -p 8080:8080 \
            ghcr.io/xregistry/xrserver-all --recreatedb)
          
          echo "CONTAINER_ID=$CONTAINER_ID" >> $GITHUB_ENV
          echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
          
          # Wait for server to be ready
          echo "Waiting for xregistry server to be ready..."
          max_attempts=30
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl --silent --get http://localhost:8080 -I | grep "200 OK" > /dev/null; then
              echo "Server is ready!"
              break
            fi
            echo "Waiting for server... (attempt $((attempt+1))/$max_attempts)"
            sleep 10
            attempt=$((attempt+1))
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "Server failed to start within expected time"
            docker logs "${CONTAINER_NAME}"
            exit 1
          fi
      
      - name: Update registry model and populate data
        run: |
          echo "Updating registry model..."
          
          # Use the unified model from our generated schemas
          # Create a temporary combined model file
          TEMP_MODEL=$(mktemp)
          cat > "$TEMP_MODEL" << 'EOF'
          {
            "groups": {
              "agentcardproviders": {
                "plural": "agentcardproviders",
                "singular": "agentcardprovider",
                "description": "Organizations providing agent cards for the Agent-to-Agent protocol",
                "resources": {
                  "agentcards": {
                    "plural": "agentcards", 
                    "singular": "agentcard",
                    "description": "Agent card definitions following the A2A protocol",
                    "attributes": {
                      "name": {"type": "string", "required": true},
                      "version": {"type": "string", "required": true},
                      "description": {"type": "string"},
                      "manifestUrl": {"type": "string", "format": "uri"}
                    }
                  }
                }
              },
              "mcpproviders": {
                "plural": "mcpproviders",
                "singular": "mcpprovider", 
                "description": "Organizations providing Model Context Protocol servers",
                "resources": {
                  "servers": {
                    "plural": "servers",
                    "singular": "server",
                    "description": "MCP server implementations",
                    "attributes": {
                      "name": {"type": "string", "required": true},
                      "version": {"type": "string", "required": true},
                      "description": {"type": "string"},
                      "manifestUrl": {"type": "string", "format": "uri"}
                    }
                  }
                }
              }
            }
          }
          EOF
          
          docker exec "${CONTAINER_ID}" /xr model update /dev/stdin -s localhost:8080 < "$TEMP_MODEL"
          rm "$TEMP_MODEL"
          
          # Create entries for each registry index.json
          echo "Creating registry entries..."
          docker exec "${CONTAINER_ID}" /bin/sh -c '
            REGISTRY_DIR=/workspace/registry
            find $REGISTRY_DIR -type f -name index.json | while read file; do
              path=${file#"$REGISTRY_DIR"/}
              path=${path%/index.json}
              echo "Processing: $path -> $file"
              /xr create "$path" -d "@$file" -s localhost:8080
              if [ $? -ne 0 ]; then
                echo "Error processing file: $file"
              else
                echo "Successfully processed file: $file"
              fi 
            done
          '
      
      - name: Export registry data
        run: |
          echo "Exporting live registry data..."
          DATA_EXPORT_DIR="$GITHUB_WORKSPACE/live"
          mkdir -p "$DATA_EXPORT_DIR"
          
          # Export live data
          docker exec "${CONTAINER_ID}" /bin/sh -c "
            mkdir -p /tmp/live
            /xr download -s localhost:8080 /tmp/live -u $GITHUB_PAGES_URL/registry
          "
          
          # Copy exported data to host
          docker cp "${CONTAINER_ID}:/tmp/live/." "$DATA_EXPORT_DIR/"
          
          echo "Registry data exported to $DATA_EXPORT_DIR"
          ls -la "$DATA_EXPORT_DIR"
      
      - name: Build search index
        run: |
          echo "Building search index..."
          if [ -f "index/build_index.py" ]; then
            python index/build_index.py
            # Copy flex index files
            mkdir -p live/
            if [ -d "index/flex" ]; then
              cp index/flex/*.flex.json live/ 2>/dev/null || echo "No flex files to copy"
            fi
          else
            echo "No index builder found, skipping..."
          fi
      
      - name: Copy Azure Static Web App configurations
        run: |
          # Copy Azure configuration files if they exist
          if [ -f "xreg/registry-staticwebapp.config.json" ]; then
            cp xreg/registry-staticwebapp.config.json live/staticwebapp.config.json
            echo "Copied registry Azure config"
          fi
          if [ -f "xreg/root-staticwebapp.config.json" ]; then
            cp xreg/root-staticwebapp.config.json site/public/staticwebapp.config.json 2>/dev/null || echo "Site directory not ready yet"
          fi
      
      - name: Clean up xRegistry server
        if: always()
        run: |
          if [ -n "$CONTAINER_ID" ]; then
            echo "Stopping and removing xregistry server..."
            docker stop "${CONTAINER_ID}" || true
            docker rm "${CONTAINER_ID}" || true
            echo "Container cleanup complete"
          fi
      
      - name: Prepare static-site branch
        run: |
          TEMP_DIR=$(mktemp -d)
          echo "Temporary directory: $TEMP_DIR"
          echo "TEMP_DIR=$TEMP_DIR" >> $GITHUB_ENV
          
          cd "$TEMP_DIR"
          git init
          git remote add origin ${{ github.server_url }}/${{ github.repository }}
          
          # Check if static-site branch exists
          if git ls-remote --exit-code origin static-site; then
            echo "Checking out existing static-site branch."
            git fetch origin static-site
            git switch static-site
            git branch --set-upstream-to=origin/static-site static-site
          else
            echo "Creating new orphan static-site branch."
            git switch --create static-site
            touch .gitkeep
            git add .gitkeep
            git commit -m "Initial commit for static-site"
            git push -u origin static-site
          fi
      
      - name: Sync registry data to static-site branch
        run: |
          cd "$TEMP_DIR"
          
          # Clear existing content (except .git)
          find . -mindepth 1 -maxdepth 1 ! -name ".git" -exec rm -rf {} + 2>/dev/null || true
          
          # Copy live registry data
          if [ -d "$GITHUB_WORKSPACE/live" ]; then
            rsync -av "$GITHUB_WORKSPACE/live/" .
            echo "Synced live registry data"
          fi
          
          # Copy generated schemas
          mkdir -p schema openapi
          if [ -f "$GITHUB_WORKSPACE/schema/json-schema.json" ]; then
            cp "$GITHUB_WORKSPACE/schema/json-schema.json" schema/
          fi
          if [ -f "$GITHUB_WORKSPACE/openapi/openapi.json" ]; then
            cp "$GITHUB_WORKSPACE/openapi/openapi.json" openapi/
          fi
          
          # Add and commit changes
          git add .
          if git diff-index --quiet HEAD; then
            echo "No changes to commit to static-site branch"
          else
            git commit -m "Update static-site with latest registry data and schemas"
            git push origin static-site
            echo "Static-site branch updated successfully"
          fi
      
      - name: Cleanup temporary directory
        if: always()
        run: |
          if [ -n "$TEMP_DIR" ] && [ -d "$TEMP_DIR" ]; then
            rm -rf "$TEMP_DIR"
            echo "Cleaned up temporary directory"
          fi 