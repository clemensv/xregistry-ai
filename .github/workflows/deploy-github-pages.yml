name: Deploy to GitHub Pages

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      use_existing_static_site:
        description: 'Use existing static-site branch (skip rebuild)'
        required: false
        default: true
        type: boolean
  
  # Run after static site build completes
  workflow_run:
    workflows: ["Build static content into static-site branch"]
    types:
      - completed

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Set Repository Variables
        run: |
          export GITHUB_SERVER_URL="${{ github.server_url }}"
          export GITHUB_REPOSITORY="${{ github.repository }}"
          if [ -n "$GITHUB_ACTIONS" ]; then
            REPO_ORG=$(echo "$GITHUB_REPOSITORY" | awk -F/ '{print $1}')
            REPO_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F/ '{print $2}')
            GITHUB_PAGES_URL="https://${REPO_ORG}.github.io/${REPO_NAME}/"
            echo "GITHUB_PAGES_URL=$GITHUB_PAGES_URL" >> $GITHUB_ENV
            echo "REPO_ORG=$REPO_ORG" >> $GITHUB_ENV
            echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          fi
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Pages URL: $GITHUB_PAGES_URL"

      # 1. Checkout the pre-built static site (branch: static-site) → ./static-site
      - name: Checkout xRegistry static site
        uses: actions/checkout@v4
        with:
          ref: static-site
          path: static-site
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2. Checkout the Angular SPA repo → ./spa
      - name: Checkout xregistry-viewer SPA
        uses: actions/checkout@v4
        with:
          repository: clemensv/xregistry-viewer
          path: spa

      # 3. Set up Node.js and build the Angular SPA
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: spa/package-lock.json

      - name: Install dependencies
        run: |
          cd spa
          npm ci

      - name: Configure Angular for GitHub Pages
        run: |
          cd spa
          
          # Update config.json with base URL
          CONFIG_DIR="public"
          if [ -d "$CONFIG_DIR" ]; then
            for file in "$CONFIG_DIR"/config.json; do
              if [ -f "$file" ]; then
                tmpfile=$(mktemp)
                jq --arg url "${GITHUB_PAGES_URL}" '.baseUrl = $url' "$file" > "$tmpfile" && mv "$tmpfile" "$file"
                echo "Updated baseUrl in $file to ${GITHUB_PAGES_URL}"
              fi
            done
          fi
          
          # Update Angular app's base href
          INDEX_FILE="src/index.html"
          if [ -f "$INDEX_FILE" ]; then
            sed -i "s|<base href=\"/\">|<base href=\"$GITHUB_PAGES_URL\">|g" "$INDEX_FILE"
            echo "Updated base URL in $INDEX_FILE to $GITHUB_PAGES_URL"
            # Copy to 404.html for SPA routing
            cp "$INDEX_FILE" "src/404.html"
          fi
          
          # Update environment.prod.ts
          ENV_FILE="src/environments/environment.prod.ts"
          if [ -f "$ENV_FILE" ]; then
            # Replace any existing registry URL with our GitHub Pages URL
            sed -i "s|https://[^/]*/registry|$GITHUB_PAGES_URL/registry|g" "$ENV_FILE"
            echo "Updated $ENV_FILE with GitHub Pages URL: $GITHUB_PAGES_URL/registry"
          fi

      - name: Build Angular SPA
        run: |
          cd spa
          npm run build -- \
            --output-path ../site-root \
            --base-href="$GITHUB_PAGES_URL"
          echo "Angular build completed"

      # 4. Copy the pre-built xRegistry site under /registry
      - name: Merge registry content
        run: |
          mkdir -p site-root/browser/registry
          
          # Copy all static-site content to /registry
          if [ -d "static-site" ] && [ "$(ls -A static-site)" ]; then
            cp -r static-site/* site-root/browser/registry/
            echo "Copied registry content from static-site branch"
          else
            echo "Warning: No static-site content found"
            # Create minimal structure if static-site is empty
            mkdir -p site-root/browser/registry
            echo '{"message": "Registry content will be populated after first build"}' > site-root/browser/registry/info.json
          fi
          
          # Copy schemas and OpenAPI specs to root for direct access
          if [ -d "static-site/schema" ]; then
            cp -r static-site/schema site-root/browser/
          fi
          if [ -d "static-site/openapi" ]; then
            cp -r static-site/openapi site-root/browser/
          fi

      # 5. Add GitHub Pages configuration
      - name: Configure for GitHub Pages
        run: |
          # Add .nojekyll file to disable Jekyll processing
          touch site-root/browser/.nojekyll
          
          # Copy Angular's 404.html as top-level 404.html for GitHub Pages SPA routing
          if [ -f "spa/src/404.html" ]; then
            cp spa/src/404.html site-root/browser/404.html
          fi
          
          # Verify structure
          echo "Final site structure:"
          ls -la site-root/browser/
          echo "Registry content:"
          ls -la site-root/browser/registry/ 2>/dev/null || echo "No registry directory"

      # 6. Setup and deploy to GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'site-root/browser'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Display deployment info
        run: |
          echo "🚀 Deployment successful!"
          echo "📱 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📋 Registry API: ${{ steps.deployment.outputs.page_url }}registry/"
          echo "🔍 OpenAPI Spec: ${{ steps.deployment.outputs.page_url }}openapi/openapi.json"
          echo "📊 JSON Schema: ${{ steps.deployment.outputs.page_url }}schema/json-schema.json" 