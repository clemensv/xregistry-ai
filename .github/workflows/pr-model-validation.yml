name: Validate New Models in PR

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'models/**/*.json'
      - 'xreg/registry-config.json'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      models-added: ${{ steps.changes.outputs.models-added }}
      models-modified: ${{ steps.changes.outputs.models-modified }}
      config-changed: ${{ steps.changes.outputs.config-changed }}
      all-models: ${{ steps.changes.outputs.all-models }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Detect changes
        id: changes
        run: |
          # Get the base commit
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          echo "Comparing $BASE_SHA..$HEAD_SHA"
          
          # Find added model files
          ADDED_MODELS=$(git diff --name-only --diff-filter=A $BASE_SHA..$HEAD_SHA | grep '^models/.*/model\.json$' || true)
          MODIFIED_MODELS=$(git diff --name-only --diff-filter=M $BASE_SHA..$HEAD_SHA | grep '^models/.*/model\.json$' || true)
          CONFIG_CHANGED=$(git diff --name-only $BASE_SHA..$HEAD_SHA | grep '^xreg/registry-config\.json$' || true)
          
          # Extract model names
          ALL_MODELS=""
          if [ -n "$ADDED_MODELS" ]; then
            ADDED_MODEL_NAMES=$(echo "$ADDED_MODELS" | sed 's|models/\([^/]*\)/model\.json|\1|g' | tr '\n' ' ')
            echo "models-added=$ADDED_MODEL_NAMES" >> $GITHUB_OUTPUT
            ALL_MODELS="$ADDED_MODEL_NAMES"
          else
            echo "models-added=" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "$MODIFIED_MODELS" ]; then
            MODIFIED_MODEL_NAMES=$(echo "$MODIFIED_MODELS" | sed 's|models/\([^/]*\)/model\.json|\1|g' | tr '\n' ' ')
            echo "models-modified=$MODIFIED_MODEL_NAMES" >> $GITHUB_OUTPUT
            ALL_MODELS="$ALL_MODELS $MODIFIED_MODEL_NAMES"
          else
            echo "models-modified=" >> $GITHUB_OUTPUT
          fi
          
          echo "config-changed=$CONFIG_CHANGED" >> $GITHUB_OUTPUT
          echo "all-models=$ALL_MODELS" >> $GITHUB_OUTPUT
          
          echo "Added models: $ADDED_MODEL_NAMES"
          echo "Modified models: $MODIFIED_MODEL_NAMES" 
          echo "Config changed: $CONFIG_CHANGED"

  validate-model-files:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.all-models != ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Python dependencies
        run: |
          pip install jsonpointer jsonschema
          
      - name: Validate model JSON syntax
        run: |
          echo "Validating JSON syntax for changed models..."
          MODELS="${{ needs.detect-changes.outputs.all-models }}"
          VALIDATION_FAILED=false
          
          for model in $MODELS; do
            MODEL_FILE="models/$model/model.json"
            if [ -f "$MODEL_FILE" ]; then
              echo "Validating $MODEL_FILE..."
              if ! python -c "import json; json.load(open('$MODEL_FILE'))"; then
                echo "❌ Invalid JSON in $MODEL_FILE"
                VALIDATION_FAILED=true
              else
                echo "✅ Valid JSON: $MODEL_FILE"
              fi
            else
              echo "⚠️  Model file not found: $MODEL_FILE"
            fi
          done
          
          if [ "$VALIDATION_FAILED" = true ]; then
            exit 1
          fi
          
      - name: Validate model structure
        run: |
          echo "Validating model structure..."
          MODELS="${{ needs.detect-changes.outputs.all-models }}"
          
          for model in $MODELS; do
            MODEL_FILE="models/$model/model.json"
            if [ -f "$MODEL_FILE" ]; then
              echo "Checking structure of $MODEL_FILE..."
              python -c "
          import json
          import sys
          
          with open('$MODEL_FILE') as f:
              model_data = json.load(f)
          
          # Validate required top-level structure
          if 'groups' not in model_data:
              print('❌ Missing required \"groups\" field in $MODEL_FILE')
              sys.exit(1)
          
          if not isinstance(model_data['groups'], dict):
              print('❌ \"groups\" must be an object in $MODEL_FILE')
              sys.exit(1)
              
          if len(model_data['groups']) == 0:
              print('❌ \"groups\" cannot be empty in $MODEL_FILE')
              sys.exit(1)
          
          # Validate each group
          for group_name, group_data in model_data['groups'].items():
              if not isinstance(group_data, dict):
                  print(f'❌ Group \"{group_name}\" must be an object in $MODEL_FILE')
                  sys.exit(1)
              
              required_fields = ['singular', 'plural']
              for field in required_fields:
                  if field not in group_data:
                      print(f'❌ Group \"{group_name}\" missing required field \"{field}\" in $MODEL_FILE')
                      sys.exit(1)
          
          print('✅ Valid model structure: $MODEL_FILE')
              "
            fi
          done

  test-schema-generation:
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-model-files]
    if: needs.detect-changes.outputs.all-models != ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Python dependencies
        run: |
          pip install jsonpointer
          
      - name: Clone xRegistry spec (for OpenAPI template)
        run: |
          cd xreg
          if [ ! -d ".xregistry-spec" ]; then
            git clone https://github.com/xregistry/spec.git .xregistry-spec
          fi
          
      - name: Test schema generation with new models
        run: |
          cd xreg
          echo "Testing schema generation..."
          
          # Test listing models
          echo "Testing model discovery..."
          python schema-generator.py --list
          
          # Test generating schemas for all models
          echo "Testing unified schema generation..."
          python schema-generator.py --models --type json-schema --output ../test-schema.json
          python schema-generator.py --models --type avro-schema --output ../test-avro.json
          python schema-generator.py --models --type openapi --output ../test-openapi.json
          
          echo "✅ Schema generation successful"
          
      - name: Test individual model generation
        run: |
          cd xreg
          MODELS="${{ needs.detect-changes.outputs.all-models }}"
          
          for model in $MODELS; do
            echo "Testing schema generation for model: $model"
            python schema-generator.py --models $model --type json-schema
            echo "✅ Individual schema generation successful for $model"
          done

  validate-config-changes:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.config-changed != ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Validate registry config
        run: |
          echo "Validating registry-config.json..."
          CONFIG_FILE="xreg/registry-config.json"
          
          # Validate JSON syntax
          if ! python -c "import json; json.load(open('$CONFIG_FILE'))"; then
            echo "❌ Invalid JSON in $CONFIG_FILE"
            exit 1
          fi
          
          # Validate structure
          python -c "
          import json
          import sys
          
          with open('$CONFIG_FILE') as f:
              config = json.load(f)
          
          required_sections = ['registry', 'models', 'validationRules']
          for section in required_sections:
              if section not in config:
                  print(f'❌ Missing required section: {section}')
                  sys.exit(1)
          
          # Validate models section
          if not isinstance(config['models'], dict):
              print('❌ \"models\" must be an object')
              sys.exit(1)
          
          for model_name, model_config in config['models'].items():
              required_fields = ['name', 'groupSingular', 'groupPlural', 'resourceSingular', 'resourcePlural', 'manifestFile']
              for field in required_fields:
                  if field not in model_config:
                      print(f'❌ Model \"{model_name}\" missing required field: {field}')
                      sys.exit(1)
          
          print('✅ Valid registry config structure')
          "

  test-template-generation:
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-config-changes]
    if: needs.detect-changes.outputs.models-added != '' || needs.detect-changes.outputs.config-changed != ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Test issue template generation
        run: |
          cd xreg
          echo "Testing issue template generation..."
          
          # Test template generation (ignore unicode errors for now)
          python generate-issue-templates.py || echo "Template generation completed with warnings"
          
          # Check if templates were created
          ADDED_MODELS="${{ needs.detect-changes.outputs.models-added }}"
          for model in $ADDED_MODELS; do
            TEMPLATE_FILE="../.github/ISSUE_TEMPLATE/${model}-registry-submission.md"
            WORKFLOW_FILE="../.github/workflows/issues-${model}.yml"
            
            if [ -f "$TEMPLATE_FILE" ]; then
              echo "✅ Issue template created: $TEMPLATE_FILE"
            else
              echo "❌ Issue template not created: $TEMPLATE_FILE"
              exit 1
            fi
            
            if [ -f "$WORKFLOW_FILE" ]; then
              echo "✅ Workflow created: $WORKFLOW_FILE"
            else
              echo "❌ Workflow not created: $WORKFLOW_FILE"
              exit 1
            fi
          done

  post-validation-summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-model-files, test-schema-generation, validate-config-changes, test-template-generation]
    if: always()
    permissions:
      pull-requests: write
    steps:
      - name: Create PR comment with validation results
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Find existing validation comment
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('## 🤖 Model Validation Results')
            );
            
            let summary = '## 🤖 Model Validation Results\n\n';
            
            const addedModels = '${{ needs.detect-changes.outputs.models-added }}';
            const modifiedModels = '${{ needs.detect-changes.outputs.models-modified }}';
            const configChanged = '${{ needs.detect-changes.outputs.config-changed }}';
            
            if (addedModels) {
              summary += `### 🆕 New Models Added\n`;
              summary += addedModels.split(' ').filter(m => m).map(model => `- \`${model}\``).join('\n') + '\n\n';
            }
            
            if (modifiedModels) {
              summary += `### ✏️ Models Modified\n`;
              summary += modifiedModels.split(' ').filter(m => m).map(model => `- \`${model}\``).join('\n') + '\n\n';
            }
            
            if (configChanged) {
              summary += `### ⚙️ Registry Configuration Changed\n\n`;
            }
            
            summary += '### Validation Results\n\n';
            
            const jobs = [
              { name: 'Model File Validation', result: '${{ needs.validate-model-files.result }}' },
              { name: 'Schema Generation Test', result: '${{ needs.test-schema-generation.result }}' },
              { name: 'Config Validation', result: '${{ needs.validate-config-changes.result }}' },
              { name: 'Template Generation Test', result: '${{ needs.test-template-generation.result }}' }
            ];
            
            for (const job of jobs) {
              if (job.result === 'success') {
                summary += `- ✅ ${job.name}\n`;
              } else if (job.result === 'failure') {
                summary += `- ❌ ${job.name}\n`;
              } else if (job.result === 'skipped') {
                summary += `- ⏭️ ${job.name} (skipped)\n`;
              } else {
                summary += `- ⏳ ${job.name} (${job.result})\n`;
              }
            }
            
            const allPassed = jobs.every(job => job.result === 'success' || job.result === 'skipped');
            
            if (allPassed) {
              summary += '\n### 🎉 All validations passed!\n\n';
              summary += 'Your new models are ready for review. Once merged, they will automatically:\n';
              summary += '- Generate unified schemas including your new models\n';
              summary += '- Create issue templates for submissions\n';
              summary += '- Set up automated validation workflows\n';
            } else {
              summary += '\n### ⚠️ Some validations failed\n\n';
              summary += 'Please check the failed jobs above and fix any issues before merging.\n';
            }
            
            summary += '\n---\n*This comment was automatically generated by the model validation workflow.*';
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            } 