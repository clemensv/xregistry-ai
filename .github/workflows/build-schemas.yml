name: Build Schemas and Templates

on:
  push:
    paths:
      - 'models/**/*.json'
      - 'xreg/registry-config.json'
      - 'xreg/schema-generator.py'
      - 'xreg/generate-issue-templates.py'
  pull_request:
    paths:
      - 'models/**/*.json'
      - 'xreg/registry-config.json'
      - 'xreg/schema-generator.py'
      - 'xreg/generate-issue-templates.py'
  workflow_dispatch:

jobs:
  build-schemas:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Python dependencies
        run: |
          pip install jsonpointer
          
      - name: Build all schemas and templates
        run: |
          cd xreg
          chmod +x *.sh
          ./build-all.sh
          
      - name: Check for changes
        id: changes
        run: |
          git diff --quiet || echo "changes=true" >> $GITHUB_OUTPUT
          
      - name: Commit and push changes
        if: steps.changes.outputs.changes == 'true' && github.event_name == 'push'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Auto-generate schemas and templates from model changes"
          git push
          
      - name: Create PR comment with changes
        if: steps.changes.outputs.changes == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Get list of changed files
            const { execSync } = require('child_process');
            const changedFiles = execSync('git diff --name-only HEAD~1').toString().trim().split('\n').filter(f => f);
            
            let comment = '## ðŸ¤– Auto-generated Schema Changes\n\n';
            comment += 'The following files were automatically updated based on model changes:\n\n';
            
            for (const file of changedFiles) {
              if (file.includes('openapi') || file.includes('schema') || file.includes('ISSUE_TEMPLATE') || file.includes('workflows')) {
                comment += `- \`${file}\`\n`;
              }
            }
            
            comment += '\n**Note:** These changes are automatically generated and do not require manual review.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  validate-schemas:
    runs-on: ubuntu-latest
    needs: build-schemas
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Python dependencies
        run: |
          pip install jsonpointer jsonschema
          
      - name: Validate generated schemas
        run: |
          echo "Validating JSON Schema..."
          python -c "import json; json.load(open('schema/json-schema.json'))" || exit 1
          
          echo "Validating OpenAPI Schema..."
          python -c "import json; json.load(open('openapi/openapi.json'))" || exit 1
          
          echo "Validating Avro Schema..."
          python -c "import json; json.load(open('schema/avro-schema.json'))" || exit 1
          
          echo "All schemas are valid JSON!"
          
      - name: Test schema generator
        run: |
          cd xreg
          echo "Testing model listing..."
          python schema-generator.py --list
          
          echo "Testing individual model generation..."
          python schema-generator.py --models a2a --type json-schema
          python schema-generator.py --models mcp --type json-schema 